<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>浩翰Redamancy的博客</title>
  
  <subtitle>一个爱学习的计算机菜鸟笔记</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-26T14:53:45.523Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>精神小伙</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mysql（双主）主主架构配置</title>
    <link href="http://yoursite.com/2019/08/20/Mysql%EF%BC%88%E5%8F%8C%E4%B8%BB%EF%BC%89%E4%B8%BB%E4%B8%BB%E6%9E%B6%E6%9E%84%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2019/08/20/Mysql（双主）主主架构配置/</id>
    <published>2019-08-20T12:22:20.000Z</published>
    <updated>2019-08-26T14:53:45.523Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本次搭建Mysql主主架构基于我的<a href="https://plutoacharon.github.io/2019/08/20/keepalived+nginx+apache+mysql%E5%AE%9E%E7%8E%B0%E9%AB%98%E5%8F%AF%E7%94%A8%E3%80%81%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%9A%84%E7%BD%91%E7%AB%99(%E4%B8%8A" target="_blank" rel="noopener">keepalived+nginx+apache+mysql实现高可用、负载均衡的网站</a>/#more)这篇文章</p><p>在搭建主主配置之前我们先介绍介绍mysql主从方案</p><p>mysql主从方案,有一主多从，读写分离等功能，但是单主存在单点故障，从库切换成主库需要作改动等缺点。</p><p>因此，如果是双主或者多主，就会增加mysql入口，增加高可用。</p><p>不过多主需要考虑自增长ID问题，这个需要特别设置配置文件，比如双主，可以使用奇偶，总之，主之间设置自增长ID相互不冲突就能完美解决自增长ID冲突问题。</p><p>MySQL双主（主主）架构方案思路是:</p><ol><li><p>两台mysql都可读写，互为主备，默认只使用一台（masterA）负责数据的写入，另一台（masterB）备用；</p></li><li><p>masterA是masterB的主库，masterB又是masterA的主库，它们互为主从；</p></li><li><p>两台主库之间做高可用,可以采用keepalived等方案（使用VIP对外提供服务）；</p></li><li><p>所有提供服务的从服务器与masterB进行主从同步（双主多从）;</p></li><li><p>建议采用高可用策略的时候，masterA或masterB均不因宕机恢复后而抢占VIP（非抢占模式）；</p></li></ol><p>这样做可以在一定程度上保证主库的高可用,在一台主库down掉之后,可以在极短的时间内切换到另一台主库上（尽可能减少主库宕机对业务造成的影响），减少了主从同步给线上主库带来的压力；</p><p>但是也有几个不足的地方:</p><ol><li><p>masterB可能会一直处于空闲状态（可以用它当从库，负责部分查询）；</p></li><li><p>主库后面提供服务的从库要等masterB先同步完了数据后才能去masterB上去同步数据，这样可能会造成一定程度的同步延时；</p></li></ol><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><table><thead><tr><th>主机名称</th><th>安装软件</th><th>ip地址</th></tr></thead><tbody><tr><td>mysql1</td><td>mysql、mysql-server</td><td>172.18.74.76</td></tr><tr><td>mysql2</td><td>mysql、mysql-server</td><td>172.18.74.71</td></tr></tbody></table><h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><pre><code>wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpmmv http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm /etc/yum.repo/rpm -ivh mysql-community-release-el7-5.noarch.rpmyum install -y mysql&amp;&amp;yum install mysql-server -ysystemctl start mysql</code></pre><p><img src="1.png" alt="下"></p><p>首先我们配置mysql双主模型，让其数据同步</p><p><code>vim /etc.my.cnf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server-id=1</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line">binlog_format=mixed</span><br><span class="line">relay-log=relay-bin</span><br><span class="line">relay-log-index=slave-relay-bin.index</span><br><span class="line">auto-increment-increment=2</span><br><span class="line">auto-increment-offset=1</span><br><span class="line">log-slave-updates</span><br></pre></td></tr></table></figure><p><img src="2.png" alt="下"></p><p>其中红框历史需要添加的内容</p><p>粉框中是两个mysql不同的地方</p><p>mysql2的粉框处是2</p><p>然后重启mysql</p><p><code>systemctl restart mysql</code></p><p>auto-increment 两行的配置，使 masterA字段产生的数值是 奇数1，3，5，7 下面的masterB 产生的是 2，4，6，8 等，这样会避开双主 id 重复的问题</p><h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><pre><code>grant replication slave on *.* to &apos;repl&apos;@&apos;172.18.74.71&apos; identified by &apos;123456&apos;; &apos;;flush privileges;</code></pre><p><img src="3.png" alt="下"></p><h2 id="web服务器授权"><a href="#web服务器授权" class="headerlink" title="web服务器授权"></a>web服务器授权</h2><pre><code>mysql&gt; create database db_jd;Query OK, 1 row affected (0.00 sec)mysql&gt; create user web@localhost identified by &apos;123456&apos;;Query OK, 0 rows affected (0.00 sec)mysql&gt; grant all privileges on *.* to web@localhost;Query OK, 0 rows affected (0.00 sec)mysql&gt; create user web@172.18.74.66 identified by &apos;123456&apos;;Query OK, 0 rows affected (0.00 sec)mysql&gt; create user web@172.18.74.69 identified by &apos;123456&apos;;Query OK, 0 rows affected (0.00 sec)mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &apos;web&apos;@&apos;%&apos; IDENTIFIED BY &apos;123456&apos; WITH GRANT OPTTION;--------------GRANT ALL PRIVILEGES ON *.* TO &apos;web&apos;@&apos;%&apos; IDENTIFIED BY &apos;123456&apos; WITH GRANT OPTION--------------Query OK, 0 rows affected (0.00 sec)mysql&gt; flush privileges;Query OK, 0 rows affected (0.01 sec)</code></pre><h2 id="查看主库的状态"><a href="#查看主库的状态" class="headerlink" title="查看主库的状态"></a>查看主库的状态</h2><p><img src="5.png" alt="Mysql"></p><p><img src="7.png" alt="Mysql"></p><h2 id="配置同步信息"><a href="#配置同步信息" class="headerlink" title="配置同步信息"></a>配置同步信息</h2><p>masterA上：</p><pre><code>change master to master_host=&apos;172.18.74.71&apos;,master_port=3306,master_user=&apos;repl&apos;,master_password=&apos;123456&apos;,master_log_file=&apos;mysql-bin.000002&apos;,master_log_pos=632;start slave;show slave status\G</code></pre><p><img src="9.png" alt="Mysql"></p><p>masterB上：</p><pre><code>change master to master_host=&apos;172.18.74.76&apos;,master_port=3306,master_user=&apos;repl&apos;,master_password=&apos;123456&apos;,master_log_file=&apos;mysql-bin.000002&apos;,master_log_pos=632;start slave;show slave status\G</code></pre><p><img src="8.png" alt="Mysql"></p><h2 id="测试主主同步"><a href="#测试主主同步" class="headerlink" title="测试主主同步"></a>测试主主同步</h2><p>在masterA上创建一个数据库测试同步效果</p><pre><code>mysql&gt; create database myTest;Query OK, 1 row affected (0.00 sec)mysql&gt; show databases;+--------------------+| Database           |+--------------------+| information_schema || myTest             || mysql              || performance_schema |+--------------------+4 rows in set (0.00 sec)</code></pre><p>到masterB查看是否已经同步创建数据库</p><pre><code>mysql&gt; show databases;+--------------------+| Database           |+--------------------+| information_schema || myTest             || mysql              || performance_schema |+--------------------+4 rows in set (0.00 sec)</code></pre><p>成功!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本次搭建Mysql主主架构基于我的&lt;a href=&quot;https://plutoacharon.github.io/2019/08/20/ke
      
    
    </summary>
    
      <category term="高可用负载均衡" scheme="http://yoursite.com/categories/%E9%AB%98%E5%8F%AF%E7%94%A8%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
    
      <category term="高可用负载均衡" scheme="http://yoursite.com/tags/%E9%AB%98%E5%8F%AF%E7%94%A8%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Centos7 防火墙关闭与nginx无法访问</title>
    <link href="http://yoursite.com/2019/08/20/Centos7-%E9%98%B2%E7%81%AB%E5%A2%99%E5%85%B3%E9%97%AD%E4%B8%8Enginx%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE/"/>
    <id>http://yoursite.com/2019/08/20/Centos7-防火墙关闭与nginx无法访问/</id>
    <published>2019-08-20T12:02:59.000Z</published>
    <updated>2019-08-20T12:09:10.212Z</updated>
    
    <content type="html"><![CDATA[<p>默认情况下，Centos7防火墙是打开的，如果你没有关闭他，你安装nginx后启动，是无法访问到nginx服务的。</p><p>所以需要做这件事</p><h2 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h2><p>启动前先看它启动没有，通过linux命令查看所有端口，看看有没有80</p><p>netstat -ntlp</p><p>如果没有，则通过命令启动</p><p><code>sudo systemctl start nginx.service</code></p><h2 id="设置nginx开启启动"><a href="#设置nginx开启启动" class="headerlink" title="设置nginx开启启动"></a>设置nginx开启启动</h2><p><code>sudo chkconfig nginx on</code></p><h2 id="关闭Centos自带的firewall防火墙"><a href="#关闭Centos自带的firewall防火墙" class="headerlink" title="关闭Centos自带的firewall防火墙"></a>关闭Centos自带的firewall防火墙</h2><p><code>systemctl stop firewalld.service</code> #停止firewall</p><h2 id="禁止Firewall下次启动"><a href="#禁止Firewall下次启动" class="headerlink" title="禁止Firewall下次启动"></a>禁止Firewall下次启动</h2><p><code>systemctl disable firewalld.service #禁止firewall开机启动</code></p><p><img src="1.png" alt="Nginx"></p><p><img src="2.png" alt="Nginx"></p><p><img src="3.png" alt="Nginx"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;默认情况下，Centos7防火墙是打开的，如果你没有关闭他，你安装nginx后启动，是无法访问到nginx服务的。&lt;/p&gt;
&lt;p&gt;所以需要做这件事&lt;/p&gt;
&lt;h2 id=&quot;启动nginx&quot;&gt;&lt;a href=&quot;#启动nginx&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="Liunx" scheme="http://yoursite.com/categories/Liunx/"/>
    
    
      <category term="Liunx" scheme="http://yoursite.com/tags/Liunx/"/>
    
      <category term="高可用负载均衡" scheme="http://yoursite.com/tags/%E9%AB%98%E5%8F%AF%E7%94%A8%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Linux下进程kill掉的N种方法</title>
    <link href="http://yoursite.com/2019/08/20/Linux%E4%B8%8B%E8%BF%9B%E7%A8%8Bkill%E6%8E%89%E7%9A%84N%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/08/20/Linux下进程kill掉的N种方法/</id>
    <published>2019-08-20T12:02:44.000Z</published>
    <updated>2019-08-20T12:20:30.754Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>我在Liunx安装Apache服务时，遇到</p><p><img src="image001.png" alt="Liunx"></p><p>有进程存在，本进程原地等待</p><p>导致此状况原因可能是我一开始没有联网直接运行</p><p><code>yum install -y httpd</code></p><p>导致该进程一直<strong>占用资源，pid被锁定</strong></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="常规篇"><a href="#常规篇" class="headerlink" title="常规篇"></a>常规篇</h3><p>首先，用ps查看进程，方法如下：</p><p><img src="image003.png" alt="Liunx"></p><p><code>ps -ef</code>查看详情</p><p><img src="image005.png" alt="Liunx"></p><p>此时如果我想杀了yum的进程就在终端输入：</p><p><code>kill -s 9 2457</code></p><p>其中-s 9 制定了传递给进程的信号是９，即强制、尽快终止进程。</p><p>2457则是上面ps查到的yum的PID</p><p><img src="image007.png" alt="Liunx"></p><p>杀死其他yum进程后，yum便能正常运行</p><p><img src="image009.png" alt="Liunx"></p><h3 id="进阶篇"><a href="#进阶篇" class="headerlink" title="进阶篇"></a>进阶篇</h3><p>把ps的查询结果通过管道给grep查找包含特定字符串的进程。管道符“|”用来隔开两个命令，管道符左边命令的输出会作为管道符右边命令的输入。</p><p><code>ps -ef | grep yum</code></p><p>这样可以更加简洁的看到yum进程的信息</p><p><img src="image011.png" alt="Liunx"></p><p><strong>使用pgrep：</strong></p><p>pgrep的p表明了这个命令是专门用于进程查询的grep。</p><p><code>pgrep yum</code></p><p><img src="image013.png" alt="Liunx"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原因&quot;&gt;&lt;/a&gt;原因&lt;/h2&gt;&lt;p&gt;我在Liunx安装Apache服务时，遇到&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;image001.png&quot; alt=&quot;Liunx&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Centos7 安装 php 和 php-fpm</title>
    <link href="http://yoursite.com/2019/08/20/Centos7-%E5%AE%89%E8%A3%85-php-%E5%92%8C-php-fpm/"/>
    <id>http://yoursite.com/2019/08/20/Centos7-安装-php-和-php-fpm/</id>
    <published>2019-08-20T11:53:53.000Z</published>
    <updated>2019-08-20T12:09:06.627Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装-php-和-php-fpm"><a href="#安装-php-和-php-fpm" class="headerlink" title="安装 php 和 php-fpm"></a>安装 php 和 php-fpm</h1><h2 id="首先安装epel"><a href="#首先安装epel" class="headerlink" title="首先安装epel"></a>首先安装epel</h2><p><code>yum -y install epel-release</code></p><h2 id="安装php-php-fpm"><a href="#安装php-php-fpm" class="headerlink" title="安装php php-fpm"></a>安装php php-fpm</h2><p><code>yum -y install php php-fpm</code></p><h2 id="查看php版本"><a href="#查看php版本" class="headerlink" title="查看php版本"></a>查看php版本</h2><p><code>php -v</code></p><h2 id="安装php-mysql"><a href="#安装php-mysql" class="headerlink" title="安装php-mysql"></a>安装php-mysql</h2><p><code>yum install php-mysql</code></p><h2 id="设置php-fpm开机自动启动"><a href="#设置php-fpm开机自动启动" class="headerlink" title="设置php-fpm开机自动启动"></a>设置php-fpm开机自动启动</h2><p><code>systemctl enable php-fpm</code></p><h2 id="启动php-fpm"><a href="#启动php-fpm" class="headerlink" title="启动php-fpm"></a>启动php-fpm</h2><p><code>systemctl start php-fpm</code></p><h2 id="重启httpd服务"><a href="#重启httpd服务" class="headerlink" title="重启httpd服务"></a>重启httpd服务</h2><p><code>systemctl restart httpd.service</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装-php-和-php-fpm&quot;&gt;&lt;a href=&quot;#安装-php-和-php-fpm&quot; class=&quot;headerlink&quot; title=&quot;安装 php 和 php-fpm&quot;&gt;&lt;/a&gt;安装 php 和 php-fpm&lt;/h1&gt;&lt;h2 id=&quot;首先安装epel&quot;
      
    
    </summary>
    
      <category term="Liunx" scheme="http://yoursite.com/categories/Liunx/"/>
    
    
      <category term="Liunx" scheme="http://yoursite.com/tags/Liunx/"/>
    
  </entry>
  
  <entry>
    <title>keepalived+nginx+apache+mysql实现高可用、负载均衡的网站(下)</title>
    <link href="http://yoursite.com/2019/08/20/keepalived-nginx-apache-mysql%E5%AE%9E%E7%8E%B0%E9%AB%98%E5%8F%AF%E7%94%A8%E3%80%81%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%9A%84%E7%BD%91%E7%AB%99-%E4%B8%8B/"/>
    <id>http://yoursite.com/2019/08/20/keepalived-nginx-apache-mysql实现高可用、负载均衡的网站-下/</id>
    <published>2019-08-20T11:52:45.000Z</published>
    <updated>2019-08-26T14:37:16.677Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h2><table><thead><tr><th>主机名称</th><th>安装软件</th><th>ip地址</th></tr></thead><tbody><tr><td>nginx_mysql_m</td><td>keepalived+nginx</td><td>172.18.74.77</td></tr><tr><td>nginx_mysql_s</td><td>keepalived+nginx</td><td>172.18.74.70</td></tr><tr><td>mysql1</td><td>mysql、mysql-server</td><td>172.18.74.76</td></tr><tr><td>mysql2</td><td>mysql、mysql-server</td><td>172.18.74.71</td></tr></tbody></table><h2 id="keepalived配置"><a href="#keepalived配置" class="headerlink" title="keepalived配置"></a>keepalived配置</h2><p>keepalived的配置和上一篇的类似,也是主从配置</p><p>在nginx_mysql_m中keeplived配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">       1070481109@qq.com      #这里是故障会给谁发邮件</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line">   smtp_server 127.0.0.1     #邮件服务器的地址</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id xu_ka_web_m     #路由的id 一般写主机名</span><br><span class="line">   vrrp_skip_check_adv_addr</span><br><span class="line">   #vrrp_strict</span><br><span class="line">   vrrp_garp_interval 0</span><br><span class="line">   vrrp_gna_interval 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script chk_nginx &#123; </span><br><span class="line">script &quot;/etc/keepalived/nginx_check.sh&quot; # 检查nginx状态的脚本</span><br><span class="line">interval 2</span><br><span class="line">weight 3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;            #vrrp实例定义部分</span><br><span class="line">    state MASTER                #设置lvs的状态，MASTER和BACKUP两种，必须大写</span><br><span class="line">    interface ens160             #设置对外服务的接口</span><br><span class="line">    virtual_router_id 51       #设置虚拟路由标示，这个标示是一个数字，同一个vrrp实例使用唯一标示</span><br><span class="line">    priority 100               #定义优先级，数字越大优先级越高，在一个vrrp——instance下，master的优先级必须大于backup</span><br><span class="line">    advert_int 1              #设定master与backup负载均衡器之间同步检查的时间间隔，单位是秒</span><br><span class="line">    authentication &#123;           #设置验证类型和密码</span><br><span class="line">        auth_type PASS         #主要有PASS和AH两种</span><br><span class="line">        auth_pass 1111         #验证密码，同一个vrrp_instance下MASTER和BACKUP密码必须相同</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;         #设置虚拟ip地址，可以设置多个，每行一个</span><br><span class="line">        172.18.74.182</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123; ## 将 track_script 块加入 instance 配置块</span><br><span class="line">        chk_nginx</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">virtual_server 172.18.74.182 80 &#123;</span><br><span class="line">    delay_loop 6</span><br><span class="line">    lb_algo rr</span><br><span class="line">    lb_kind NAT</span><br><span class="line">    persistence_timeout 50</span><br><span class="line">    protocol TCP</span><br><span class="line"> </span><br><span class="line">    real_server 172.18.74.64 80 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">        TCP_CHECK&#123;</span><br><span class="line">            connect_timeout 3</span><br><span class="line">            nb_get_retry 3</span><br><span class="line">            delay_before_retry 3</span><br><span class="line">            connect_port 80</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在nginx_mysql_s中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">    notification_email &#123;</span><br><span class="line">    root@localhost</span><br><span class="line">    &#125;</span><br><span class="line">    notification_email_from keepalived@localhost</span><br><span class="line">    smtp_server 127.0.0.1</span><br><span class="line">    smtp_connect_timeout 30</span><br><span class="line">    router_id nginx_mysql_s</span><br><span class="line">    vrrp_skip_check_adv_addr</span><br><span class="line">    #vrrp_strict</span><br><span class="line">    vrrp_garp_interval 0</span><br><span class="line">    vrrp_gna_interval 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script chk_nginx &#123;</span><br><span class="line">    script &quot;/etc/keepalived/nginx_check.sh&quot; # 检查nginx状态的脚本</span><br><span class="line">    interval 2</span><br><span class="line">    weight 3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface ens160</span><br><span class="line">    virtual_router_id 66</span><br><span class="line">    priority 90                    #backup这里要比100小</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        172.18.74.183</span><br><span class="line">&#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">        chk_nginx</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="nginx的配置"><a href="#nginx的配置" class="headerlink" title="nginx的配置"></a>nginx的配置</h2><p>因为这里nginx监听的是3306的端口，不需要web服务所以配置文件较简单，但是需要用到stream模块</p><p>在配置的时候需要添加上–with–stream</p><p><code>./configure --add-module=../ngx_cache_purge-2.3 --prefix=/usr/local/nginx --with-http_ssl_module --with-stream --with-pcre=../pcre-8.41 --with-zlib=../zlib-1.2.11 --with-openssl=../openssl-1.0.2o</code></p><p>其他和上一篇的安装方法一样</p><h3 id="修改nginx配置文件"><a href="#修改nginx配置文件" class="headerlink" title="修改nginx配置文件"></a>修改nginx配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line">upstream mysql &#123;</span><br><span class="line"></span><br><span class="line">            server 172.18.74.76:3306 weight=5 max_fails=3 fail_timeout=30s;</span><br><span class="line">            server 172.18.74.71:3306 weight=5 max_fails=3 fail_timeout=30s;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line"></span><br><span class="line">            listen 3306;</span><br><span class="line">            proxy_connect_timeout 1s;</span><br><span class="line">            proxy_timeout 3s;</span><br><span class="line">            proxy_pass mysql;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h3><p><code>/usr/local/nginx/sbin/nginx</code></p><p><code>netstat -napt</code></p><p><img src="3.png" alt="下"></p><p>发现nginx已经被成功监听</p><p>backup的nginx配置相同</p><h3 id="mysql数据库配置"><a href="#mysql数据库配置" class="headerlink" title="mysql数据库配置"></a>mysql数据库配置</h3><p><a href="https://plutoacharon.github.io/2019/08/20/Mysql%EF%BC%88%E5%8F%8C%E4%B8%BB%EF%BC%89%E4%B8%BB%E4%B8%BB%E6%9E%B6%E6%9E%84%E9%85%8D%E7%BD%AE/#more" target="_blank" rel="noopener">Mysql主主配置</a></p><p>具体可以参考我的这篇文章</p><h2 id="基于web页面的测试"><a href="#基于web页面的测试" class="headerlink" title="基于web页面的测试"></a>基于web页面的测试</h2><p><code>cd /var/www/html</code></p><p><code>vim con.php</code></p><p>如果系统中没有php环境可以参考我的这篇文章<a href="https://plutoacharon.github.io/2019/08/20/Centos7-%E5%AE%89%E8%A3%85-php-%E5%92%8C-php-fpm/#more" target="_blank" rel="noopener">php环境搭建</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$servername = <span class="string">"172.18.74.76"</span>;</span><br><span class="line">$username = <span class="string">"web"</span>;</span><br><span class="line">$password = <span class="string">"123456"</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 创建连接</span></span><br><span class="line">$conn = <span class="keyword">new</span> mysqli($servername, $username, $password);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 检测连接</span></span><br><span class="line"><span class="keyword">if</span> ($conn-&gt;connect_error) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"连接失败: "</span> . $conn-&gt;connect_error);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"连接成功"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>浏览器访问web的ip/con.php</p><p><img src="2.png" alt="下"></p><p>mysql2同理</p><p>然后在数据库db_jd里创建表,为接下来的实验做好准备</p><figure class="highlight plain"><figcaption><span>> create table tb_goods (tltle VarChar(40), price Decimal(10), market_price Decimal(10));```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">在web服务器编写接口程序连接mysql，并写一个能插入数据到数据库的表单</span><br><span class="line"></span><br><span class="line">`vim coon.php`</span><br><span class="line"></span><br><span class="line">```php</span><br><span class="line">&lt;?php</span><br><span class="line">    //1、连接数据库</span><br><span class="line">    mysql_connect(&apos;172.18.74.76&apos;,&apos;web&apos;,&apos;123456&apos;);</span><br><span class="line">    //2、选择数据库</span><br><span class="line">    mysql_select_db(&apos;db_jd&apos;);</span><br><span class="line">    //3、指定数据库的编码格式</span><br><span class="line">    mysql_query(&apos;set names utf8&apos;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><code>vim index.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html;charset=UTF-8"</span> /&gt;</span><br><span class="line">    &lt;title&gt;产品添加-JD产品管理系统&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h3&gt;JD产品管理&lt;/h3&gt;</span><br><span class="line">    &lt;form action=<span class="string">"deal.php"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">        图书名称：&lt;input type=<span class="string">'text'</span> name=<span class="string">'title'</span> /&gt;</span><br><span class="line">        &lt;hr /&gt;</span><br><span class="line">        销售价格：&lt;input type=<span class="string">"text"</span> name=<span class="string">'price'</span> /&gt;</span><br><span class="line">        &lt;hr /&gt;</span><br><span class="line">        市场价格：&lt;input type=<span class="string">"text"</span> name=<span class="string">'market_price'</span> /&gt;</span><br><span class="line">        &lt;hr /&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> name=<span class="string">"submit"</span> value=<span class="string">"添加"</span> /&gt;</span><br><span class="line">        &lt;input type=<span class="string">"reset"</span> name=<span class="string">"reset"</span> value=<span class="string">"重置"</span> /&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><code>vim deal.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">//1、设置响应头信息</span></span><br><span class="line">    header(<span class="string">'Content-type:text/html; charset=utf-8'</span>);</span><br><span class="line">    <span class="comment">//2、submit安全判断</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">        <span class="comment">//3、接收数据</span></span><br><span class="line">        $title = $_POST[<span class="string">'title'</span>];</span><br><span class="line">        $price = $_POST[<span class="string">'price'</span>];</span><br><span class="line">        $market_price = $_POST[<span class="string">'market_price'</span>];</span><br><span class="line">        <span class="keyword">include</span> <span class="string">'coon.php'</span>;</span><br><span class="line">        <span class="comment">//9、定义SQL语句</span></span><br><span class="line">        $sql = <span class="string">"insert into tb_goods values ('$title','$price','$market_price')"</span>;</span><br><span class="line">        <span class="comment">//10、执行SQL语句</span></span><br><span class="line">        $result = mysql_query($sql);</span><br><span class="line">        <span class="keyword">if</span>($result) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'添加成功'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'添加失败'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="访问webvip的地址"><a href="#访问webvip的地址" class="headerlink" title="访问webvip的地址"></a>访问webvip的地址</h2><p>插入数据</p><p><img src="4.png" alt="下"></p><h2 id><a href="#" class="headerlink" title></a><img src="10.png" alt="下"></h2><p>报错指南:</p><p><img src="5.png" alt="下"></p><p>原因： SELinux 不让 httpd 访问外网</p><p>在本地可以连接成功但是外网访问不了</p><p><code>getsebool -a | grep httpd</code></p><p>发现 <code>httpd_can_network_connect --&gt; off</code></p><p><code>setsebool httpd_can_network_connect 1</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;环境介绍&quot;&gt;&lt;a href=&quot;#环境介绍&quot; class=&quot;headerlink&quot; title=&quot;环境介绍&quot;&gt;&lt;/a&gt;环境介绍&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;主机名称&lt;/th&gt;
&lt;th&gt;安装软件&lt;/th&gt;
&lt;th&gt;ip地址&lt;/th&gt;
&lt;/
      
    
    </summary>
    
      <category term="高可用负载均衡" scheme="http://yoursite.com/categories/%E9%AB%98%E5%8F%AF%E7%94%A8%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
    
      <category term="高可用负载均衡" scheme="http://yoursite.com/tags/%E9%AB%98%E5%8F%AF%E7%94%A8%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
  </entry>
  
  <entry>
    <title>keepalived+nginx+apache+mysql实现高可用、负载均衡的网站(上)</title>
    <link href="http://yoursite.com/2019/08/20/keepalived+nginx+apache+mysql%E5%AE%9E%E7%8E%B0%E9%AB%98%E5%8F%AF%E7%94%A8%E3%80%81%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%9A%84%E7%BD%91%E7%AB%99(%E4%B8%8A)/"/>
    <id>http://yoursite.com/2019/08/20/keepalived+nginx+apache+mysql实现高可用、负载均衡的网站(上)/</id>
    <published>2019-08-20T11:52:34.000Z</published>
    <updated>2019-08-26T14:49:53.091Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>说明：本次实验是需要8台虚拟机的项目 其架构如下图：</p></blockquote><p><img src="1.png" alt="上"></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>keepalived是一个类似于layer3, 4 &amp; 5交换机制的软件，也就是我们平时说的第3层、第4层和第5层交换。Keepalived是自动完成，不需人工干涉。</p><p>Layer3,4,5工作在IP/TCP协议栈的IP层，TCP层，及应用层,原理分别如下：</p><p>Layer3：Keepalived使用Layer3的方式工作式时，Keepalived会定期向服务器群中的服务器发送一个ICMP的数据包（既我们平时用的Ping程序）,如果发现某台服务的IP地址没有激活，Keepalived便报告这台服务器失效，并将它从服务器群中剔除，这种情况的典型例子是某台服务器被非法关机。Layer3的方式是以服务器的IP地址是否有效作为服务器工作正常与<br>否的标准。</p><p>Layer4:如果理解了Layer3的方式，Layer4就容易了。Layer4主要以TCP端口的状态来决定服务器工作正常与否。如web server的服务端口一般是80，如果Keepalived检测到80端口没有启动，则Keepalived将把这台服务器从服务器群中剔除。</p><p>Layer5：Layer5对指定的URL执行HTTP GET。然后使用MD5算法对HTTP GET结果进行求和。如果这个总数与预期值不符，那么测试是错误的，服务器将从服务器池中移除。该模块对同一服务实施多URL获取检查。如果您使用承载多个应用程序服务器的服务器，则此功能很有用。此功能使您能够检查应用程序服务器是否正常工作。MD5摘要是使用genhash实用程序（包含在keepalived软件包中）生成的。</p><p>Nginx作为负载均衡服务：Nginx 既可以在内部直接支持 Rails 和 PHP 程序对外进行服务，也可以支持作为 HTTP代理服务对外进行服务。Nginx采用C进行编写，是一款高性能的反向代理服务器。</p><h2 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h2><p>虚拟机数量：四台</p><p>操作系统：全部是centos7.3</p><p>keepalived版本：keepalived-2.0.7</p><p>nginx版本：nginx-1.14.0</p><table><thead><tr><th>主机名称</th><th>安装软件</th><th>ip地址</th></tr></thead><tbody><tr><td>keepalived_web_m</td><td>keepalived+nginx</td><td>172.18.74.64</td></tr><tr><td>keepalived_web_s</td><td>keepalived+nginx</td><td>172.18.74.65</td></tr><tr><td>web1</td><td>Apache</td><td>172.18.74.66</td></tr><tr><td>web2</td><td>Apache</td><td>172.18.74.69</td></tr></tbody></table><h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><p>首先关闭所有机器的防火墙和selinux，配置好之后我们开启，然后添加策略。</p><pre><code>systemctl stop firewalldsetenforce 0</code></pre><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><p>首先下载并解压需要的包</p><pre><code>wget http://www.zlib.net/zlib-1.2.11.tar.gztar -zxvf zlib-1.2.11.tar.gzwget https://jaist.dl.sourceforge.net/project/pcre/pcre/8.41/pcre-8.41.tar.gztar -zxvf pcre-8.41.tar.gzwget https://www.openssl.org/source/openssl-1.0.2o.tar.gztar -zxvf openssl-1.0.2o.tar.gzwget http://labs.frickle.com/files/ngx_cache_purge-2.3.tar.gztar -zxvf ngx_cache_purge-2.3.tar.gzwget http://nginx.org/download/nginx-1.14.0.tar.gztar -zxvf nginx-1.14.0.tar.gz</code></pre><p>进入nginx目录</p><p><code>cd nginx-1.14.0</code></p><h4 id="配置安装选项"><a href="#配置安装选项" class="headerlink" title="配置安装选项"></a>配置安装选项</h4><pre><code>./configure --add-module=../ngx_cache_purge-2.3 --prefix=/usr/local/nginx --with-http_ssl_module --with-stream --with-pcre=../pcre-8.41 --with-zlib=../zlib-1.2.11 --with-openssl=../openssl-1.0.2o</code></pre><p>通过<code>/usr/local/nginx</code>配置项可以知道主要生效配置文件在此文件夹中</p><p>编译并安装</p><p><code>make&amp;&amp;make install</code></p><p>先备份一份nginx配置文件</p><pre><code>cd /usr/local/nginx/confcp nginx.conf ./nginx.conf.bak</code></pre><p>修改nginx.conf的配置</p><p><code>vim nginx.conf</code></p><p>修改红框里的内容</p><p><img src="2.png" alt="上"></p><p>保存退出，然后在sbin目录重新加载nginx</p><p><code>./nginx -s reload</code></p><h3 id="下载并安装keepalived"><a href="#下载并安装keepalived" class="headerlink" title="下载并安装keepalived"></a>下载并安装keepalived</h3><pre><code>yum install wget make gcc gcc-c++ openssl-devel wget http://www.keepalived.org/software/keepalived-2.0.7.tar.gz tar zxvf keepalived-2.0.7.tar.gz cd keepalived-2.0.7 ./configure --prefix=/data/keepalived</code></pre><p>如果报以下警告：</p><pre><code>WARNING - this build will not support IPVS with IPv6. Please install libnl/libnl-3 dev libraries to support IPv6 with IPVS.</code></pre><p>不用担心，我们只需要用到VRRP功能，不需要用IPVS功能，所以请确保以下三项是yes就行了。</p><p><img src="3.png" alt="上"></p><h4 id="编译并安装"><a href="#编译并安装" class="headerlink" title="编译并安装"></a>编译并安装</h4><p><code>make&amp;&amp;make install</code></p><h4 id="将keepalived-以服务方式启动"><a href="#将keepalived-以服务方式启动" class="headerlink" title="将keepalived 以服务方式启动"></a>将keepalived 以服务方式启动</h4><p>创建/etc/keepalived目录并把keepalived的配置文件拷贝/etc/keepalived目录下并加入到开机启动。</p><pre><code>mkdir /etc/keepalived cp /data/keepalived/etc/keepalived/keepalived.conf /etc/keepalived/ \systemctl enable keepalived</code></pre><h4 id="修改keepalived配置文件"><a href="#修改keepalived配置文件" class="headerlink" title="修改keepalived配置文件"></a>修改keepalived配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">       1070481109@qq.com      #这里是故障会给谁发邮件</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line">   smtp_server 127.0.0.1     #邮件服务器的地址</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id xu_ka_web_m     #路由的id 一般写主机名</span><br><span class="line">   vrrp_skip_check_adv_addr</span><br><span class="line">   #vrrp_strict</span><br><span class="line">   vrrp_garp_interval 0</span><br><span class="line">   vrrp_gna_interval 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script chk_nginx &#123;</span><br><span class="line">script "/etc/keepalived/nginx_check.sh" # 检查nginx状态的脚本</span><br><span class="line">interval 2</span><br><span class="line">weight 3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;            #vrrp实例定义部分</span><br><span class="line">    state MASTER                #设置lvs的状态，MASTER和BACKUP两种，必须大写</span><br><span class="line">    interface ens160             #设置对外服务的接口</span><br><span class="line">    virtual_router_id 51       #设置虚拟路由标示，这个标示是一个数字，同一个vrrp实例使用唯一标示</span><br><span class="line">    priority 100               #定义优先级，数字越大优先级越高，在一个vrrp——instance下，master的优先级必须大于backup</span><br><span class="line">    advert_int 1              #设定master与backup负载均衡器之间同步检查的时间间隔，单位是秒</span><br><span class="line">    authentication &#123;           #设置验证类型和密码</span><br><span class="line">        auth_type PASS         #主要有PASS和AH两种</span><br><span class="line">        auth_pass 1111         #验证密码，同一个vrrp_instance下MASTER和BACKUP密码必须相同</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;         #设置虚拟ip地址，可以设置多个，每行一个</span><br><span class="line">        172.18.74.182</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123; ## 将 track_script 块加入 instance 配置块</span><br><span class="line">        chk_nginx</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">virtual_server 172.18.74.182 80 &#123;</span><br><span class="line">    delay_loop 6</span><br><span class="line">    lb_algo rr</span><br><span class="line">    lb_kind NAT</span><br><span class="line">    persistence_timeout 50</span><br><span class="line">    protocol TCP</span><br><span class="line"></span><br><span class="line">    real_server 172.18.74.64 80 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">        TCP_CHECK&#123;</span><br><span class="line">            connect_timeout 3</span><br><span class="line">            nb_get_retry 3</span><br><span class="line">            delay_before_retry 3</span><br><span class="line">            connect_port 80</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>备主机里的keepalived配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">       1070481109@qq.com      #这里是故障会给谁发邮件</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line">   smtp_server 127.0.0.1     #邮件服务器的地址</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id xu_ka_web_s     #路由的id 一般写主机名</span><br><span class="line">   vrrp_skip_check_adv_addr</span><br><span class="line">   #vrrp_strict</span><br><span class="line">   vrrp_garp_interval 0</span><br><span class="line">   vrrp_gna_interval 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script chk_nginx &#123; </span><br><span class="line">script &quot;/etc/keepalived/nginx_check.sh&quot; # 检查nginx状态的脚本</span><br><span class="line">interval 2</span><br><span class="line">weight 3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;            #vrrp实例定义部分</span><br><span class="line">    state BACKUP                #设置lvs的状态，MASTER和BACKUP两种，必须大写</span><br><span class="line">    interface ens160             #设置对外服务的接口</span><br><span class="line">    virtual_router_id 51       #设置虚拟路由标示，这个标示是一个数字，同一个vrrp实例使用唯一标示</span><br><span class="line">    priority 90               #定义优先级，数字越大优先级越高，在一个vrrp——instance下，master的优先级必须大于backup</span><br><span class="line">    advert_int 1              #设定master与backup负载均衡器之间同步检查的时间间隔，单位是秒</span><br><span class="line">    authentication &#123;           #设置验证类型和密码</span><br><span class="line">        auth_type PASS         #主要有PASS和AH两种</span><br><span class="line">        auth_pass 1111         #验证密码，同一个vrrp_instance下MASTER和BACKUP密码必须相同</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;         #设置虚拟ip地址，可以设置多个，每行一个</span><br><span class="line">        172.18.74.182</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123; ## 将 track_script 块加入 instance 配置块</span><br><span class="line">        chk_nginx</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">virtual_server 172.18.74.182 80 &#123;</span><br><span class="line">    delay_loop 6</span><br><span class="line">    lb_algo rr</span><br><span class="line">    lb_kind NAT</span><br><span class="line">    persistence_timeout 50</span><br><span class="line">    protocol TCP</span><br><span class="line"></span><br><span class="line">    real_server 172.18.74.65 80 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">        TCP_CHECK&#123;</span><br><span class="line">            connect_timeout 3</span><br><span class="line">            nb_get_retry 3</span><br><span class="line">            delay_before_retry 3</span><br><span class="line">            connect_port 80</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="添加检查nginx状态的脚本"><a href="#添加检查nginx状态的脚本" class="headerlink" title="添加检查nginx状态的脚本"></a>添加检查nginx状态的脚本</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line">A=`ps -C nginx –no-header |wc -l`</span><br><span class="line">if [ $A -eq 0 ];then</span><br><span class="line">    /usr/local/nginx/sbin/nginx</span><br><span class="line">    sleep 2</span><br><span class="line">    if [ `ps -C nginx --no-header |wc -l` -eq 0 ];then</span><br><span class="line">        killall keepalived</span><br><span class="line">    fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h4 id="重启keepalived"><a href="#重启keepalived" class="headerlink" title="重启keepalived"></a>重启keepalived</h4><p><code>systemctl restart keepalived</code></p><p>输入命令<code>ip a</code>查看是否有vip</p><p><img src="4.png" alt="上"></p><p>keepalived+nginx+apache+mysql实现高可用、负载均衡的网站</p><p>然后关闭master的keepalived</p><p>systemctl stop keepalived</p><p>查看backup上是否有vip</p><p><img src="5.png" alt="上"></p><p>有说明配置成功</p><p>没有说明keepalived.conf存在问题</p><h4 id="安装apache服务器"><a href="#安装apache服务器" class="headerlink" title="安装apache服务器"></a>安装apache服务器</h4><p>在两台web服务器上安装apache服务</p><p><code>yum install -y httpd</code></p><p>打开服务</p><p><code>systemctl start httpd</code></p><p>编辑默认页面</p><p><code>cd /var/www/html/</code></p><p><code>vim index.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=UTF-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>产品添加-JD产品管理系统<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>JD产品管理<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"deal.php"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">图书名称：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">name</span>=<span class="string">'title'</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">销售价格：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">'price'</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">市场价格：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">'market_price'</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"添加"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">name</span>=<span class="string">"reset"</span> <span class="attr">value</span>=<span class="string">"重置"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同样在web2里安装apache并修改index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=UTF-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>产品添加-JD产品管理系统<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>web2_JD产品管理<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"deal.php"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">图书名称：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">name</span>=<span class="string">'title'</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">销售价格：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">'price'</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">市场价格：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">'market_price'</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"添加"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">name</span>=<span class="string">"reset"</span> <span class="attr">value</span>=<span class="string">"重置"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过浏览器访问vip</p><p>可以看到web1的页面，再次刷新会出现web2的页面</p><p><img src="6.png" alt="上"></p><p><img src="7.png" alt="上"></p><p>因为在nginx的配置为你教案中设置的web1和web2的权重为100：80</p><p>所以每访问180次会出现100次web1，80次web2</p><p><a href="https://plutoacharon.github.io/2019/08/20/keepalived-nginx-apache-mysql%E5%AE%9E%E7%8E%B0%E9%AB%98%E5%8F%AF%E7%94%A8%E3%80%81%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%9A%84%E7%BD%91%E7%AB%99-%E4%B8%8B/#more" target="_blank" rel="noopener">keepalived+nginx+apache+mysql实现高可用、负载均衡的网站-下</a></p><hr><p>报错指南:</p><p><img src="8.png" alt="上"></p><p><img src="9.png" alt="上"></p><p>原因</p><p>未使用nginx -c的参数指定nginx.conf文件的位置</p><p>解决</p><p><code>/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</code> 执行</p><hr><p><img src="11.png" alt="上"></p><p><img src="10.png" alt="上"></p><p>不能加空格</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;说明：本次实验是需要8台虚拟机的项目 其架构如下图：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;1.png&quot; alt=&quot;上&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
      <category term="高可用负载均衡" scheme="http://yoursite.com/categories/%E9%AB%98%E5%8F%AF%E7%94%A8%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
    
      <category term="高可用负载均衡" scheme="http://yoursite.com/tags/%E9%AB%98%E5%8F%AF%E7%94%A8%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
  </entry>
  
  <entry>
    <title>IDEA使用Git将项目上传到Github</title>
    <link href="http://yoursite.com/2019/08/17/IDEA%E4%BD%BF%E7%94%A8Git%E5%B0%86%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0Github/"/>
    <id>http://yoursite.com/2019/08/17/IDEA使用Git将项目上传到Github/</id>
    <published>2019-08-17T02:43:04.000Z</published>
    <updated>2019-08-17T03:26:26.958Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备配置"><a href="#准备配置" class="headerlink" title="准备配置"></a>准备配置</h2><p>使用idea开发工具创建了一个project之后，此时项目代码是没有版本管理控制的，只是存放在本地。<br>一方面没有办法团队协作开发，另一方面无法让别人共同观赏。</p><p>于是经过自己摸索了解到了IDEA2019版本的连接GitHub使用git上传项目</p><p>在上传项目之前需要先在idea中确认两个配置，一个是git的执行位置，电脑上没有安装git的需要提前安装，安装之后再idea的settings中搜索git然后配置刚刚安装的git目录文件，再点击右侧的Test按钮进行测试验证，出现successfully表示git可以正常使用</p><p><img src="image001.png" alt="Git"></p><h3 id="接下来在GitHub选项中添加自己的GitHub账号"><a href="#接下来在GitHub选项中添加自己的GitHub账号" class="headerlink" title="接下来在GitHub选项中添加自己的GitHub账号"></a>接下来在GitHub选项中添加自己的GitHub账号</h3><p><img src="image003.png" alt="Git"></p><p>添加完成以后，点击“+“下面的”√“确认添加。</p><h3 id="将IDEA上的项目上传到GitHub中"><a href="#将IDEA上的项目上传到GitHub中" class="headerlink" title="将IDEA上的项目上传到GitHub中"></a>将IDEA上的项目上传到GitHub中</h3><p>点击项目工具栏中的VCS，点击Share Project on GitHub</p><p><img src="image005.png" alt="Git"></p><p>点击share即可</p><p><img src="image007.png" alt="Git"></p><p>可以在上传之前添加描述(Description)</p><p><img src="image009.png" alt="Git"></p><p>选中要上传的项目，点击 Add 添加</p><p><img src="image011.png" alt="Git"></p><p>上传成功</p><p><img src="image013.png" alt="Git"></p><h3 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h3><p><img src="image015.png" alt="Git"></p><p>右键点击项目，可以对项目代码进行操作，例如Push,Pull等</p><p>点击<code>Show History</code>查看代码上传日志，方便共同修改代码时进行查看</p><p><img src="image017.png" alt="Git"></p><p>Git是一个强大的工具，日常和工作我们都离不开它，关于GIt的其他小技巧可以通过后面慢慢了解，不要着急，熟能生巧，</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;准备配置&quot;&gt;&lt;a href=&quot;#准备配置&quot; class=&quot;headerlink&quot; title=&quot;准备配置&quot;&gt;&lt;/a&gt;准备配置&lt;/h2&gt;&lt;p&gt;使用idea开发工具创建了一个project之后，此时项目代码是没有版本管理控制的，只是存放在本地。&lt;br&gt;一方面没有办法团
      
    
    </summary>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>本地安装maven库与IDEA安装本地maven库</title>
    <link href="http://yoursite.com/2019/08/17/%E6%9C%AC%E5%9C%B0%E5%AE%89%E8%A3%85maven%E5%BA%93%E4%B8%8EIDEA%E5%AE%89%E8%A3%85%E6%9C%AC%E5%9C%B0maven%E5%BA%93/"/>
    <id>http://yoursite.com/2019/08/17/本地安装maven库与IDEA安装本地maven库/</id>
    <published>2019-08-17T02:42:54.000Z</published>
    <updated>2019-08-17T03:07:30.480Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>在Maven官网下载最新版的安装包：[下载链接]<a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">http://maven.apache.org/download.cgi</a></p><p><img src="image001.png" alt="Maven"></p><p>将文件解压到D:\opt\Tool\maven目录下（可以自己设置目录）</p><h3 id="新建环境变量"><a href="#新建环境变量" class="headerlink" title="新建环境变量"></a>新建环境变量</h3><p>新建环境变量MAVEN_HOME，赋值<code>D:\opt\Tool\maven\</code></p><p><img src="image003.png" alt="Maven"></p><p>编辑环境变量Path，追加<code>%MAVEN_HOME%\bin\</code></p><p><img src="image005.png" alt="Maven"></p><h3 id="检查maven是否安装成功"><a href="#检查maven是否安装成功" class="headerlink" title="检查maven是否安装成功"></a>检查maven是否安装成功</h3><p>我们可以通过DOS命令检查一下我们是否安装成功：<br>(我使用cmd一直找不到mvn，但是使用git就可以)</p><p><img src="image007.png" alt="Maven"></p><h3 id="容易错误的地点"><a href="#容易错误的地点" class="headerlink" title="容易错误的地点"></a>容易错误的地点</h3><p>前面4步安装成功之前打开的cmd运行mvn -v命令不会成功</p><p>如果出现 JAVA_HOME 应该指向JDK而不是JRE  请检查环境变量PATH是否配置了JRE的地址,如果有就删除</p><p>请仔细检查JAVA_HOME,MAVEN_HOME 这两个变量的值不应该出现’;’(分号) 如果有就删除</p><p>请仔细检查PATH中每一个引入的最后是否有’;’(分号) 如果没有就加上</p><p>win10中编辑环境变量会自动分隔,不需要加’;’(分号)</p><h2 id="配置Maven本地仓库"><a href="#配置Maven本地仓库" class="headerlink" title="配置Maven本地仓库"></a>配置Maven本地仓库</h2><p>在<code>D:\opt\Tool\maven\</code>目录下新建<code>maven-repository</code>文件夹，该目录用作maven的本地库。</p><p>打开D:\Tool\maven\conf\settings.xml文件.</p><p>查找下面这行代码：</p><p><code>&lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</code></p><p>localRepository节点默认是被注释掉的，需要把它移到注释之外，然后将localRepository节点的值改为我们创建的目录</p><p><code>D:\opt\Tool\maven\maven-repository</code></p><p><img src="image009.png" alt="Maven"></p><ul><li><p>localRepository节点用于配置本地仓库，本地仓库其实起到了一个缓存的作用，它的默认地址是 C:\Users\用户名.m2。</p></li><li><p>当我们从maven中获取jar包的时候，maven首先会在本地仓库中查找，如果本地仓库有则返回；如果没有则从远程仓库中获取包，并在本地库中保存。</p></li><li><p>此外，我们在maven项目中运行mvn install，项目将会自动打包并安装到本地仓库中。</p></li></ul><h3 id="查看是否配置成功"><a href="#查看是否配置成功" class="headerlink" title="查看是否配置成功"></a>查看是否配置成功</h3><p>在cmd里输入</p><p><code>mvn help:system</code></p><p>如果前面的配置成功，那么<code>D:\opt\Tool\maven\maven-repository</code>会出现一些文件。这些文件是通用jar包.</p><p><img src="image011.png" alt="Maven"></p><h2 id="IDE安装本地maven库"><a href="#IDE安装本地maven库" class="headerlink" title="IDE安装本地maven库"></a>IDE安装本地maven库</h2><p>Ctrl + Alt + s 打开设置，搜索Maven</p><p>在Mavenhome director选项中选择maven的安装目录。  </p><p>Maven home directory: D:\opt\Tool\maven\   此目录为本地maven仓库的目录</p><p>User settings file : D:\opt\Tool\maven\conf\settings.xml此目录为本地maven仓库的配置文件</p><p><img src="image013.png" alt="Maven"></p><p>点击ok后IDEA配置本地maven仓库正式成功!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前期准备&quot;&gt;&lt;a href=&quot;#前期准备&quot; class=&quot;headerlink&quot; title=&quot;前期准备&quot;&gt;&lt;/a&gt;前期准备&lt;/h2&gt;&lt;h3 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h
      
    
    </summary>
    
    
      <category term="Maven" scheme="http://yoursite.com/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>初识Spark</title>
    <link href="http://yoursite.com/2019/08/13/%E5%88%9D%E8%AF%86Spark/"/>
    <id>http://yoursite.com/2019/08/13/初识Spark/</id>
    <published>2019-08-13T12:12:40.000Z</published>
    <updated>2019-08-13T12:31:52.110Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spark简介"><a href="#Spark简介" class="headerlink" title="Spark简介"></a>Spark简介</h1><h2 id="Spark是什么"><a href="#Spark是什么" class="headerlink" title="Spark是什么"></a>Spark是什么</h2><p>Spark是一个快读且通用的集群计算平台</p><h2 id="Spark的特点"><a href="#Spark的特点" class="headerlink" title="Spark的特点"></a>Spark的特点</h2><p>Spark应用程序可以使用R语言、Java、Scala和Python进行编写，极少使用R语言编写Spark程序，Java和Scala语言编写的Spark程序的执行效率是相同的，但Java语言写的代码量多，Scala简洁优雅，但可读性不如Java，Python语言编写的Spark程序的执行效率不如Java和Scala。</p><h3 id="Spark是快速的"><a href="#Spark是快速的" class="headerlink" title="Spark是快速的"></a>Spark是快速的</h3><ul><li>Spark扩充了流行的MapReduce计算模型</li><li>Spark是基于内存的计算</li></ul><h3 id="Spark是通用的"><a href="#Spark是通用的" class="headerlink" title="Spark是通用的"></a>Spark是通用的</h3><ul><li>Spark的设计容纳了其他分布式系统拥有的功能</li><li>批处理，迭代式计算，交互查询和流处理等</li><li>优点：降低了维护成本</li></ul><h3 id="Spark是高度开放的"><a href="#Spark是高度开放的" class="headerlink" title="Spark是高度开放的"></a>Spark是高度开放的</h3><ul><li>Spark提供了Python，Java，Scala，Sql的API和丰富的内置库。</li><li>Spark和其他的大数据工具整合的很好，包括hadoop，kafka等</li></ul><h3 id="Spark有4中运行模式"><a href="#Spark有4中运行模式" class="headerlink" title="Spark有4中运行模式"></a>Spark有4中运行模式</h3><ul><li>local模式，适用于测试</li><li>standalone，并非是单节点，而是使用spark自带的资源调度框架</li><li>yarn，最流行的方式，使用yarn集群调度资源</li><li>mesos，国外使用的多</li></ul><h2 id="Spark生态"><a href="#Spark生态" class="headerlink" title="Spark生态"></a>Spark生态</h2><h3 id="Spark历史"><a href="#Spark历史" class="headerlink" title="Spark历史"></a>Spark历史</h3><p>Spark是美国加州大学伯克利分校的AMP实验室（主要创始人lester和Matei）开发的通用的大数据处理框架。</p><h3 id="Spark的组件"><a href="#Spark的组件" class="headerlink" title="Spark的组件"></a>Spark的组件</h3><p>Spark包括多个紧密集成的组件：</p><p><img src="image001.png" alt="Spark"></p><h4 id="Spark-Core："><a href="#Spark-Core：" class="headerlink" title="Spark Core："></a>Spark Core：</h4><p>包含Spark的基本功能，包含任务调度，内存管理，容错机制等。</p><p>内部定义了RDDs（弹性分布式数据集）。</p><p>提供了很多APIs来创建和操作这些RDDs。</p><p>应用场景:为其他组件提供底层的服务。</p><h4 id="Spark-SQL："><a href="#Spark-SQL：" class="headerlink" title="Spark SQL："></a>Spark SQL：</h4><p>是Spark处理结构化数据的库，就像Hive SQL，MySQL一样。</p><p>应用场景:企业中用来做报表统计</p><h4 id="Spark-Streaming："><a href="#Spark-Streaming：" class="headerlink" title="Spark Streaming："></a>Spark Streaming：</h4><p>是实时数据流处理组件，类似Storm。</p><p>Spark Streaming提供了API来操作实时流数据。</p><p>应用场景:企业中用来从kafka接受数据做实时统计。</p><h4 id="Milb："><a href="#Milb：" class="headerlink" title="Milb："></a>Milb：</h4><p>一个包含通用机器学习功能的包，Machine learning lib</p><p>包含分类，聚类，回归等，还包括模型评估，和数据导入</p><p>MLlib提供的上面的这些方法，都支持集群上的横向扩展</p><blockquote><p>平常我们做机器学习用Python较多，Python最大的缺点是在单机上的，它处理的数据是有限的，而Milb是基于集群的</p></blockquote><p>应用场景，机器学习</p><h4 id="Graphx："><a href="#Graphx：" class="headerlink" title="Graphx："></a>Graphx：</h4><p>是处理图的库（例如，社交网络图），并进行图的并行计算。</p><p>像Spark Streaming，Spark SQL一样，它也继承了RDD API。</p><p>它提供了各种图的操作，和常用的图算法，例如PageRank算法。</p><p>应用场景，图计算。</p><h4 id="Cluster-Managers："><a href="#Cluster-Managers：" class="headerlink" title="Cluster Managers："></a>Cluster Managers：</h4><p>就是集群管理，Spark自带一个集群管理是单独调度器。</p><p>常见集群管理包括Hadoop YARN，Apache Mesos</p><p>紧密继承的优点：</p><ul><li>Spark底层优化了，基于Spark底层的组件，也得到了相应的优化。</li><li>紧密集成，节省了各个组件结合使用时的部署，测试等时间。</li><li>向Spark增加新的组件时，其他组件，可立即享用新组建的功能</li></ul><h2 id="Spark与Hadoop的比较"><a href="#Spark与Hadoop的比较" class="headerlink" title="Spark与Hadoop的比较"></a>Spark与Hadoop的比较</h2><h3 id="Hadoop的应用场景"><a href="#Hadoop的应用场景" class="headerlink" title="Hadoop的应用场景"></a>Hadoop的应用场景</h3><h4 id="离线处理"><a href="#离线处理" class="headerlink" title="离线处理"></a>离线处理</h4><p>Hadoop在处理数据的时候它的中间数据会落到硬盘上，因此导致Hadoop处理大量数据时时效性不是很高。</p><p>Hadoop任务的执行时间是几分钟到几小时不等</p><p>对时效性要求不高</p><h4 id="Spark应用场景"><a href="#Spark应用场景" class="headerlink" title="Spark应用场景"></a>Spark应用场景</h4><p>时效性要求高的场景</p><p>因为Spark是基于内存的，它的中间数据尽量不落在磁盘上，尽量落在内存中，这样就大大加快了Spark的运算速度</p><p>Spark的计算时间一般是几秒钟到几分钟</p><p>机器学习等领域</p><ul><li>这是一整个生态系统，每个组件都有其作用，各善其职即可</li><li>Spark不具有HDFS的存储能力，要借助HDFS等持久化数据</li><li>大数据将会孕育出更多的新技术</li></ul><h3 id="RDDs介绍"><a href="#RDDs介绍" class="headerlink" title="RDDs介绍"></a>RDDs介绍</h3><h4 id="Driver-program："><a href="#Driver-program：" class="headerlink" title="Driver program："></a>Driver program：</h4><p>包含程序的main（）方法，RDDs的定义和操作。<br>它管理很多节点，我们称作<code>executors</code></p><p><img src="image003.png" alt="Spark"></p><h4 id="SparkContext："><a href="#SparkContext：" class="headerlink" title="SparkContext："></a>SparkContext：</h4><p>Driver programs通过SparkContext对象访问Spark。</p><p>SparkContext对象代表和一个集群的连接。</p><p>在Shell中SparkContext自动创建好了，就是sc。</p><h4 id="RDDs："><a href="#RDDs：" class="headerlink" title="RDDs："></a>RDDs：</h4><p>Resilient distributed datasets（弹性分布式数据集，简写RDDs）</p><p>这些RDDs，并行的分布在整个集群中</p><p>RDDs是Spark分发数据和计算的基础抽象类。</p><p>一个RDD是一个不可改变的分布式集合对象</p><p>Spark中，所有的计算都是通过RDDs的创建，转换，操作完成的。</p><p>一个RDD内部由许多partitions（分片）组成。</p><h5 id="分片："><a href="#分片：" class="headerlink" title="分片："></a>分片：</h5><p>每个分片包括一部分数据，partitions可在集群不同节点上计算</p><p>分片是Spark并行处理的单元，Spark顺序的，并行的处理分片</p><h5 id="RDDs的创建方法："><a href="#RDDs的创建方法：" class="headerlink" title="RDDs的创建方法："></a>RDDs的创建方法：</h5><p>把一个存在的集合传给SparkContext的parallelize()方法，测试用</p><p><code>val rdd = sc.parallelize(Array(1,2,2,4),4)</code></p><p>第一个参数：待并行化处理的集合，第二个参数：分区个数</p><p>加载外部数据集。</p><p><code>val rddText = sc.textFile(&quot;helloSpark.txt&quot;)</code></p><h2 id="Scala的基础知识"><a href="#Scala的基础知识" class="headerlink" title="Scala的基础知识"></a>Scala的基础知识</h2><h3 id="Scala的变量声明："><a href="#Scala的变量声明：" class="headerlink" title="Scala的变量声明："></a>Scala的变量声明：</h3><p>在Scala中创建变量的时候，必须使用val或者var</p><p>val，变量值不可修改，一旦分配不能重新指向别的值</p><p>var，分配后，可以指向类型相同的值</p><h3 id="Scala的匿名函数和类型推断："><a href="#Scala的匿名函数和类型推断：" class="headerlink" title="Scala的匿名函数和类型推断："></a>Scala的匿名函数和类型推断：</h3><p><code>lines.filter(line=&gt;line.contains(&quot;world&quot;))</code></p><p>定义一个匿名函数，接受一个参数line，</p><p>使用line这个String类型变量上的contains方法，并且返回结果。</p><p>line的类型不需指定，能够推断出来。</p><h2 id="RDD基本操作之Transformation"><a href="#RDD基本操作之Transformation" class="headerlink" title="RDD基本操作之Transformation"></a>RDD基本操作之Transformation</h2><h3 id="Transformation介绍："><a href="#Transformation介绍：" class="headerlink" title="Transformation介绍："></a>Transformation介绍：</h3><h4 id="Transformations（转换）"><a href="#Transformations（转换）" class="headerlink" title="Transformations（转换）"></a>Transformations（转换）</h4><p>从之前的RDD构建一个新的RDD，像map()和filter().</p><h4 id="map"><a href="#map" class="headerlink" title="map():"></a>map():</h4><p>map()接受函数，把函数应用到RDD的每一个元素，返回新RDD。</p><h4 id="filter"><a href="#filter" class="headerlink" title="filter():"></a>filter():</h4><p>filter()接受函数，返回只包含满足filter()函数的元素的新RDD。</p><h4 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap():"></a>flatMap():</h4><p>对每个输入元素，输出多个输出元素。</p><p>flat压扁的意思，将RDD中元素压扁后返回一个新的RDD.</p><h2 id="RDD基本操作之Action"><a href="#RDD基本操作之Action" class="headerlink" title="RDD基本操作之Action"></a>RDD基本操作之Action</h2><h3 id="Action介绍："><a href="#Action介绍：" class="headerlink" title="Action介绍："></a>Action介绍：</h3><p>在RDD上计算出来一个结果。</p><p>把结果返回给driver program或保存在文件系统，count(),save</p><p><img src="image005.png" alt="Spark"></p><p><img src="image007.png" alt="Spark"></p><h3 id="常用函数举例："><a href="#常用函数举例：" class="headerlink" title="常用函数举例："></a>常用函数举例：</h3><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h4><p>接收一个函数，作用在RDD两个类型相同的元素上，返回新元素。<br>可以实现，RDD中元素的累加，计数，和其他类型的聚集操作。</p><p><img src="image009.png" alt="Spark"></p><p><img src="image011.png" alt="Spark"></p><h4 id="Collect-："><a href="#Collect-：" class="headerlink" title="Collect()："></a>Collect()：</h4><p>遍历整个RDD，向driver program返回RDD的内容</p><p>需要单机内存能够容纳下（因为数据要拷贝给driver，测试使用）</p><p>大数据的时候，使用savaAsTextFile() action等。</p><h4 id="take-n-："><a href="#take-n-：" class="headerlink" title="take(n)："></a>take(n)：</h4><p>返回RDD的n个元素（同时尝试访问最少的partitions）</p><p>返回结果是无序的，测试使用</p><h4 id="top-："><a href="#top-：" class="headerlink" title="top()："></a>top()：</h4><p>排序（根据RDD中数据的比较器）</p><h4 id="foreach-："><a href="#foreach-：" class="headerlink" title="foreach()："></a>foreach()：</h4><p>计算RDD中的每个元素，但不返回到本地。</p><p>可以配合println()友好的打印出数据。</p><h2 id="RDDs的特性"><a href="#RDDs的特性" class="headerlink" title="RDDs的特性"></a>RDDs的特性</h2><p><strong>RDDs的血统关系图：</strong></p><p><img src="image013.png" alt="Spark"></p><p>Spark维护者RDDs之间的依赖关系和创建关系，叫做血统关系图</p><p>Spark使用血统关系图来计算每个RDD的需求和恢复丢失的数据</p><h3 id="延迟计算（Lazy-Evaluation）："><a href="#延迟计算（Lazy-Evaluation）：" class="headerlink" title="延迟计算（Lazy Evaluation）："></a>延迟计算（Lazy Evaluation）：</h3><p>Spark对RDDs的计算是，他们第一次使用action操作的时候</p><p>这种方式在处理大数据的时候特别有用，可以减少数据的传输</p><p>Spark内部记录metadata表名transformations操作已经被响应了</p><p>加载数据也是延迟计算，数据只有在必要的时候，才会被加载进去</p><h3 id="RDD-persist"><a href="#RDD-persist" class="headerlink" title="RDD.persist():"></a>RDD.persist():</h3><p>默认每次在RDDs上面进行action操作时，Spark都重新计算RDDs</p><p>如果想重复利用一个RDD，可以使用RDD.persist()</p><p>unpersist()方法从缓存中移除</p><p>例子-peisist()</p><p><img src="image015.png" alt="Spark"></p><p><img src="image017.png" alt="Spark"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spark简介&quot;&gt;&lt;a href=&quot;#Spark简介&quot; class=&quot;headerlink&quot; title=&quot;Spark简介&quot;&gt;&lt;/a&gt;Spark简介&lt;/h1&gt;&lt;h2 id=&quot;Spark是什么&quot;&gt;&lt;a href=&quot;#Spark是什么&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="Spark" scheme="http://yoursite.com/categories/Spark/"/>
    
    
      <category term="Spark" scheme="http://yoursite.com/tags/Spark/"/>
    
  </entry>
  
  <entry>
    <title>Java中“==”与equeals的区别</title>
    <link href="http://yoursite.com/2019/08/13/Java%E4%B8%AD%E2%80%9C-%E2%80%9D%E4%B8%8Eequeals%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2019/08/13/Java中“-”与equeals的区别/</id>
    <published>2019-08-13T11:58:48.000Z</published>
    <updated>2019-08-17T02:49:05.203Z</updated>
    
    <content type="html"><![CDATA[<h2 id><a href="#" class="headerlink" title="=="></a>==</h2><p><code>==</code>是比较两个变量的值，如果是基本数据类型，那么就是比较的基本数据的大小值</p><h3 id="情况一"><a href="#情况一" class="headerlink" title="情况一"></a>情况一</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b=<span class="number">1</span>;</span><br><span class="line">System.out.println(a==b);</span><br></pre></td></tr></table></figure><p><img src="image001.png" alt="Java"></p><p>以上图中：==比较的就是上面两个内存块中的值，都是1，所以是true</p><p>但是如果存储的是引用类型，其实比较的还是变量本身所存储的值，我们都知道，<br>变量存储引用类型其实存储的只是引用对象的地址作为值存储到变量中，那么当用==<br>判断时，比较的就是这两个<strong>地址值</strong>了，所以说==比的是两个变量所存储的值，</p><p>至于这个值是什么类型的，就看放什么了</p><h3 id="情况二"><a href="#情况二" class="headerlink" title="情况二"></a>情况二</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">User a = <span class="keyword">new</span> User();</span><br><span class="line">User b = <span class="keyword">new</span> User();</span><br><span class="line">System.out.println(a==b);</span><br></pre></td></tr></table></figure><p><img src="image003.png" alt="Java"></p><p>在上图中，a和b存的就是一个引用对象，在这时判断a==b时，比较的也是a和b所存储的值，</p><p>可以看出，a里面存的是0x1234，b里面存放的是0x5874,很明显不相等，所以是false</p><h3 id="情况三"><a href="#情况三" class="headerlink" title="情况三"></a>情况三</h3><p>而当使用==比较字符串时：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String a=<span class="string">"abcd"</span>;</span><br><span class="line">String b=<span class="string">"abcd"</span>;</span><br><span class="line">System.out.println(a==b);</span><br></pre></td></tr></table></figure><p><img src="image005.png" alt="Java"></p><p>这时，a和b存储的是同一个常量字符串，地址也一样，所以是true。</p><h3 id="情况四"><a href="#情况四" class="headerlink" title="情况四"></a>情况四</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String a=<span class="keyword">new</span> String(<span class="string">"abcd"</span>);</span><br><span class="line">String b=<span class="keyword">new</span> String(<span class="string">"abcd"</span>);</span><br><span class="line">System.out.printlnl(a==b);</span><br></pre></td></tr></table></figure><p><img src="image007.png" alt="Java"></p><p>如果通过创建对象的方式创建字符串，那么流程就会向上图一样，a和b里面所存放的值就不一样了，a和b 比较就是false</p><h2 id="equals"><a href="#equals" class="headerlink" title="equals()"></a>equals()</h2><p>JAVA当中所有的类都是继承于<code>Object</code>这个超类的，在Object类中定义了一个equals的方法，equals的源码是这样写的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//this - s1</span></span><br><span class="line">    <span class="comment">//obj - s2</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，这个方法的初始默认行为是比较对象的内存地址值，一般来说，意义不大。所以，在一些类库当中这个方法被重写了，如String、Integer、Date。在这些类当中equals有其自身的实现（一般都是用来比较对象的成员变量值是否相同），而不再是比较类在堆内存中的存放地址了。</p><p>所以说，对于复合数据类型之间进行equals比较，在没有覆写equals方法的情况下，他们之间的比较还是内存中的存放位置的地址值，跟双等号（==）的结果相同；如果被复写，按照复写的要求来。</p><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  String s1 = "a";</span></span><br><span class="line"><span class="comment">    String s2 = "b";</span></span><br><span class="line"><span class="comment">    String s3 = "c";</span></span><br><span class="line"><span class="comment">    String s4 = "abc";</span></span><br><span class="line"><span class="comment">    String s5 = s1+s2+s3;</span></span><br><span class="line"><span class="comment">    System.out.println(s4 == s5);</span></span><br><span class="line"><span class="comment">    System.out.println(s4.equals(s5));</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">    String s1 = <span class="string">"a"</span> + <span class="string">"b"</span> + <span class="string">"c"</span>;</span><br><span class="line">    String s2 = <span class="string">"abc"</span>;</span><br><span class="line">    System.out.println(s1 == s2);</span><br><span class="line">    System.out.println(s1.equals(s2));</span><br></pre></td></tr></table></figure><p>地址值的话，由于String是常量，存放于常量池中。而Java中对于常量有常量优化机制，所以没有注释的部分，在编译时候，就是将abc相加的结果赋值给s1，又发现常量池中已经有了abc，所以s1和s2指向的是常量池中的同一个abc，而注释的部分，由于是变量相加，运行时会在常量池中创建新的abc，所以是两个不同的abc</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;==&quot;&gt;&lt;/a&gt;==&lt;/h2&gt;&lt;p&gt;&lt;code&gt;==&lt;/code&gt;是比较两个变量的值，如果是基本数据类型，那么就是比较的基本数据的大小值&lt;/p&gt;
&lt;h3 id=&quot;情况一&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java编程思想学习笔记(二)</title>
    <link href="http://yoursite.com/2019/08/10/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C/"/>
    <id>http://yoursite.com/2019/08/10/Java编程思想学习笔记-二/</id>
    <published>2019-08-10T02:50:06.000Z</published>
    <updated>2019-08-10T05:39:23.991Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初始化与清理"><a href="#初始化与清理" class="headerlink" title="初始化与清理"></a>初始化与清理</h1><blockquote><p>随着计算机革命的发展，“不安全”的编程方式已逐渐成为编程代价高昂的主因之一,初始化与清理正是涉及安全的两个问题。</p></blockquote><p>许多c程序的错误都源于程序员忘记初始化变量。清理也是一个特殊问题，当使用完一个元素时，它对你也就不会有什么影响了，所以很容易把它忘记。这样一来，这个元素占有的资源就会一直得不到释放，结果是资源（尤其是内存）用尽。</p><p>Java中采用了<strong>构造器</strong>，这是一个在创建对象时被自动调用的特殊方法，并额外提供了“垃圾回收器”。对于不再使用的内存资源，垃圾回收器能自动将其释放。</p><h2 id="用构造器确保初始化"><a href="#用构造器确保初始化" class="headerlink" title="用构造器确保初始化"></a>用构造器确保初始化</h2><p>可以假想为编写的每个类都定义一个<code>initialize()</code>方法。</p><p>该方法的名称题型你在使用其对象之前，应首先调用<code>initialize()</code></p><p>在Java中，通过提供构造器，类的设计者可确保每个对象都会得到初始化。创建对象时，如果其类具有构造器，Java就会在用户有能力操作对象之前自动调用相应的构造器，从而保证了初始化的进行。</p><h3 id="如何命名"><a href="#如何命名" class="headerlink" title="如何命名"></a>如何命名</h3><p>构造器采用与类相同的名称。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rock</span> </span>&#123;</span><br><span class="line">    Rock() &#123;</span><br><span class="line">        System.out.print(<span class="string">"Rock "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleConstructor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> Rock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出：</span><br><span class="line">    Rock Rock Rock Rock Rock Rock Rock Rock Rock Rock</span><br></pre></td></tr></table></figure><p>现在，在创建对象时：</p><p><code>new Rock();</code></p><p>将会为对象分配存储空间，并调用相应构造器。</p><p>不接受任何参数的构造器叫做<strong>默认构造器</strong>。和其他方法一样，构造器也能带有形式参数，以便指定如何创建对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rock2</span> </span>&#123;</span><br><span class="line">    Rock2(<span class="keyword">int</span> i) &#123;</span><br><span class="line">        System.out.print(<span class="string">"Rock "</span> + i + <span class="string">" "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleConstructor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> Rock2(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出：</span><br><span class="line">    Rock <span class="number">0</span> Rock <span class="number">1</span> Rock <span class="number">2</span> Rock <span class="number">3</span> Rock <span class="number">4</span> Rock <span class="number">5</span></span><br></pre></td></tr></table></figure><p>有了构造器形式参数，就可以在初始化对象时提供实际参数。例如假设类Tree有一个构造器，它接受一个整型变量来表示数的高度</p><p><code>Tree t = new Tree(12);</code></p><p>如果<code>Tree(int)</code>是<code>Tree</code>类中唯一的构造器，那么编译器将不会允许你以其他任何方式创建<code>Tree</code>对象。</p><p>构造器有助于减少错误，并且使代码更易于阅读。<strong>在Java中，“初始化”和“创建”捆绑在一起，两者不能分离</strong></p><p>构造器是一种特殊类型的方法，因为它没有返同值。</p><p>这与返回值为空(void)明显不同。对于空返回值，尽管方法本身不会自动返回什么，但仍可选择让它返回别的东西。</p><p>构造器则不会返回任何东西，你别无选择(new表达式确实返回了对新建对象的引用，但构造器本身并没有任何返回值)。假如构造器具有返回值，并且允许人们自行选择返回类型，那么势必得让编译器知道该如何处理此返回值。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;初始化与清理&quot;&gt;&lt;a href=&quot;#初始化与清理&quot; class=&quot;headerlink&quot; title=&quot;初始化与清理&quot;&gt;&lt;/a&gt;初始化与清理&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;随着计算机革命的发展，“不安全”的编程方式已逐渐成为编程代价高昂的主因之一,初始化
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java编程思想学习笔记</title>
    <link href="http://yoursite.com/2019/08/10/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/08/10/Java编程思想学习笔记/</id>
    <published>2019-08-10T02:42:19.000Z</published>
    <updated>2019-08-10T02:50:29.713Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对象导论"><a href="#对象导论" class="headerlink" title="对象导论"></a>对象导论</h1><h2 id="抽象过程"><a href="#抽象过程" class="headerlink" title="抽象过程"></a>抽象过程</h2><p>所有编程语言都提供抽象机制。<br>万物皆为对象<br>程序是对象的集合，它们通过发送消息来告知彼此所要做的。<br>每个对象都有自己的由其他对象所构成的存储<br>每个对象都拥有其类型<br>某一特定类型的所有对象都可以接受同样的消息<br>对象具有状态，行为和标识</p><h2 id="每个对象都有一个接口"><a href="#每个对象都有一个接口" class="headerlink" title="每个对象都有一个接口"></a>每个对象都有一个接口</h2><p>怎样才能获取有用的对象？必须有某种方式产生对对象的请求，是对象完成各种任务，如完成一笔交易，在屏幕上画图，打开开关等。每个对象都只能满足某些请求，这些请求有对象的接口（interface）所定义，决定接口的便是类型。<br>以电灯泡为例来做一个简单的比喻：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Light lt = <span class="keyword">new</span> Litght();</span><br><span class="line">lt.on();</span><br></pre></td></tr></table></figure><p><strong>接口确定了对某一特定对象所能发出的请求。</strong></p><p>上例中，类型/类的名称是Light，特定的Light对象的名词是It，可以向Light对象发出的请求是：打开它，关闭它，将它调亮，将它调暗。你以下列方式创建了一个Light对象：定义这个对象的‘引用’(It)，然后调用new方法来创建该类型的新对象。为了向对象发送消息，需要声明对象的名称，并以圆点符号连接一个消息请求。</p><h2 id="每个对象都提供服务"><a href="#每个对象都提供服务" class="headerlink" title="每个对象都提供服务"></a>每个对象都提供服务</h2><p>程序本身将向用户提供服务，他将通过调用其他对象提供的服务来实现这一目的。</p><h2 id="被隐藏的具体实现"><a href="#被隐藏的具体实现" class="headerlink" title="被隐藏的具体实现"></a>被隐藏的具体实现</h2><p>java用三个关键字在类的内部设定边界，public，private，protected<br>java还有一种默认的访问权限，当没有使用前面提到的任何访问指定词时，它将发挥作用。这种权限通常被称为包访问权限</p><h2 id="复用具体实现"><a href="#复用具体实现" class="headerlink" title="复用具体实现"></a>复用具体实现</h2><p>代码复用是面向对象程序设计语言所提供的的最了不起的优点之一。</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>当继承现有类型时，也就创造了新的类型。这个新的类型不仅包括现有类型的所有成员（尽管private成员被隐藏，并且不可访问），而且更重要的是它复制了基类的接口。也就是说，所有可以发送给基类对象的消息同时也可以发送给导出类对象。导出类与基类具有相同的类型。</p><p>一个圆形也是一个几何形。</p><p>有两种方法可以使基类与导出类产生差异。<br>直接在导出类中添加新方法，这个新方法并不是基类接口的一部分。<br>覆改变现有基类的方法，覆盖。</p><h2 id="伴随多态的可互换对象"><a href="#伴随多态的可互换对象" class="headerlink" title="伴随多态的可互换对象"></a>伴随多态的可互换对象</h2><p>面向对象程序设计的最重要的妙诀:编译器不可能产生传统意义上的函数调用。</p><p>如果用Java来编写一个方法(后面很快你就会学习如何编写):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(Shape shape)</span></span>&#123;</span><br><span class="line">    shape.erase();</span><br><span class="line">    shape.draw();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法可以与任何Shape对话，因此它是独立于任何它要绘制和擦除的对象的其体类型的。</p><p>如果程序中其他部分用到了doSomething()方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Circle CirCie，<span class="keyword">new</span> Circle();</span><br><span class="line">Triangle triangle = <span class="keyword">new</span> triangle();</span><br><span class="line">Line line = <span class="keyword">new</span> Line():</span><br><span class="line">doSomething(circle);</span><br><span class="line">doSomething(triangle);</span><br><span class="line">doSomething(line);</span><br></pre></td></tr></table></figure><p>对doSomething()的调用会白动地正确处理，而不管对象的确切类型。</p><p>这是一个相当令人惊奇的诀窍。看看下面这行代码:</p><p><code>doSomething(circle);</code></p><p>当Circle被传入到预期接收Shape的方法中，究竟会发生什么。由于Circle可以被doSomething() 看作是Shape，也就是说，doSomething()可以发送给Shape的任何消息，Circle都可以接收，那么，这么做是完全安全且合乎逻辑的。</p><h2 id="单根继承结构"><a href="#单根继承结构" class="headerlink" title="单根继承结构"></a>单根继承结构</h2><p>在OOP中，自c++面世以来就己变得非常瞩目的一个问题就是，是否所有的类最终都继承自单一的基类。在java中(事实上还包括除C++以外的所有OOP语言)，答案是yes，这个终极基类的名字就是<strong>Object</strong>。事实证明，单根继承结构带来了很多好处。</p><p>在单根继承结构中的所有对象都具有一个共用接口，所以它们归根到底都是相同的基本类型。</p><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p>这个通常被称为容器(也称为集合，不过Java类库以不同的含义使用“集合”这个术语，所以本书使用“容器”这个词)的新对象，在任何需要时都可扩充自己以容纳你置于其中的所有东西。因此不需要知道将来会把多少个对象置于容器中，只需要创建一个容器对象，然后让它处理所有细节。</p><h2 id="对象的创建和生命期"><a href="#对象的创建和生命期" class="headerlink" title="对象的创建和生命期"></a>对象的创建和生命期</h2><p>在使用对象时，最关键的问题之一便是他们的生成和销毁方式。每个对象为了生存都需要资源，尤其是内存。当我们不再需要一个对象时，它必须被清理掉，使其占有的资源被释放和重用。</p><p>Java完全采用了动态内存分配方式。每当想要创建新对象时，就要使用new关键字来构建此对象的动态实例。</p><p>Java提供了<strong>垃圾回收器</strong>的机制，它可以自动发现对象何时不再被使用，并继而销毁它。</p><h2 id="异常处理：处理错误"><a href="#异常处理：处理错误" class="headerlink" title="异常处理：处理错误"></a>异常处理：处理错误</h2><p> 异常处理将错误处理直接置于编程语言中，有时甚至置于操作系统中。异常是一种对象，它从出错地点被“抛出’，并被专门设计用来处理特定类型错误的相应的异常处理器“捕获”。异常处理就像是与程序正常执行路径并行的、在错误发生时执行的另一条路径。因为它是另一条完全分离的执行路径，所以它不会干扰正常的执行代码。这往往使得代码编写变得简单，因为不需要被迫定期检查错误。</p><p>此外，被抛出的异常不像方法返回的错误值和方法设置的用来表示错误条件的标志位那样可以被忽略。异常不能被忽略，所以它保证一定会在某处得到处理。</p><p>最后需要指出的是：异常提供了一种从错误状况进行可靠恢复的途径。现在不再是只能退出程序，你可以经常进行校正，并恢复程序的执行，这些都有助于编写出更健壮的程序。<br>Java的异常处理在众多的编程语言中格外引人注目，因为Java一开始就内置了异常处理，而且强制你必须使用它。</p><h2 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h2><p>在计算机编程中有一个基本概念。就是在同一时刻处理多个任务的思想。许多程序设计问题都要求，程序能够停下正在做的工作，转而处理某个其他问题。然后再返回主进程。</p><p>有时中断对于处理时间性强的任务是必需的，但是对于大量的其他问题，我们只是想把问题切分成多个可独立运行的部分(任务)，从而提高程序的响应能力。在程序中，这些彼此独立运行的部分称之为线程，上述概念被称为“并发”。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>你知道过程型语一言看起来像什么样子：数据定义和函数调用。想了解此类程序的含义，你必须忙上一阵，需要通读函数调用和低层概念，以在脑海里建立一个模型。这正是我们在设计过程式程序时，需要中间表示形式的原因。这些程序总是容易把人搞糊涂，因为它们使用的表示术语更加面向计算机而不是你要解决的问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;对象导论&quot;&gt;&lt;a href=&quot;#对象导论&quot; class=&quot;headerlink&quot; title=&quot;对象导论&quot;&gt;&lt;/a&gt;对象导论&lt;/h1&gt;&lt;h2 id=&quot;抽象过程&quot;&gt;&lt;a href=&quot;#抽象过程&quot; class=&quot;headerlink&quot; title=&quot;抽象过程&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop2.8.0的环境搭建</title>
    <link href="http://yoursite.com/2019/08/09/Hadoop2-8-0%E7%9A%84%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2019/08/09/Hadoop2-8-0的环境搭建/</id>
    <published>2019-08-09T11:12:44.000Z</published>
    <updated>2019-08-10T02:41:31.066Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>此文为在centos7下安装Hadoop集群</p></blockquote><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><blockquote><p><a href="www.apache.org/dyn/closer.cgi/hadoop/common/hadoop-2.8.0/hadoop-2.8.0.tar.gz">Hadoop下载</a></p></blockquote><h3 id="Hadoop的下载"><a href="#Hadoop的下载" class="headerlink" title="Hadoop的下载"></a>Hadoop的下载</h3><blockquote><p>本文下载的是2.8.0版本的Hadoop</p></blockquote><p><img src="image001.png" alt="Hadoop"></p><h3 id="安装3个虚拟机并实现ssh免密码的登录"><a href="#安装3个虚拟机并实现ssh免密码的登录" class="headerlink" title="安装3个虚拟机并实现ssh免密码的登录"></a>安装3个虚拟机并实现ssh免密码的登录</h3><h4 id="安装3个centos7虚拟机"><a href="#安装3个centos7虚拟机" class="headerlink" title="安装3个centos7虚拟机"></a>安装3个centos7虚拟机</h4><p>安装方法：</p><p>安装3个机器，机器分别叫<strong>master slave1 slave2</strong></p><p>如图：</p><p><img src="image003.png" alt="Hadoop"></p><p><strong>ps：为了免去后面一系列授权的麻烦，这里直接使用root账户登录和操作了。</strong></p><p>使用ifconfig命令，查看着三台机器的ip。</p><p>我的机器名与ip 的对应的关系是：</p><pre><code>192.168.236.132 master192.168.236.133 slave1192.168.236.134 slave2</code></pre><h4 id="检查机器名称"><a href="#检查机器名称" class="headerlink" title="检查机器名称"></a>检查机器名称</h4><p>为了后续操作方便，确保机器的hostname是我们想要的。拿192.168.236.132机器举例，用root账户登录之后，然后使用<code>hostname</code>命令查看机器名称</p><p>如图：</p><p><img src="image005.png" alt="Hadoop"></p><p>hostname命令查看名称一开始的名称是localhost </p><p>我们用hostname master命令更改机器名称为master</p><h4 id="修改-etc-hosts文件"><a href="#修改-etc-hosts文件" class="headerlink" title="修改/etc/hosts文件"></a>修改/etc/hosts文件</h4><p>修改这3台机器的/etc/hosts文件，在文件中添加以下内容：<br>    192.168.236.132 master<br>    192.168.236.133 slave1<br>    192.168.236.134 slave2<br>如图：</p><p><img src="image007.png" alt="Hadoop"></p><p>说明：ip地址没必要和我的一样，这里只是做一个映射，只要映射是对的就可以，至于修改方法，vi vim 命令都可以。</p><p>配置成功后使用 ping 命令检查者3台机器是否相互ping的通，以master为例，：</p><p><img src="image009.png" alt="Hadoop"></p><p>说明能够ping通</p><blockquote><p>使用该命令 在各个机器都尝试是否可以ping通,ping得通，说明机器是互联的，而且hosts配置也正确。</p></blockquote><h4 id="给3个机器生成秘钥文件"><a href="#给3个机器生成秘钥文件" class="headerlink" title="给3个机器生成秘钥文件"></a>给3个机器生成秘钥文件</h4><p>以master为例，执行命令，生成空字符串的秘钥（后面要使用公钥），命令是：</p><p><code>ssh-keygen -t rsa</code></p><p>如图：</p><p><img src="image011.png" alt="Hadoop"></p><p>因为我现在使用的是root账户，所以秘钥文件保存到了/root/.shh/目录内，可以使用命令查看，命令是：</p><p><code>cd  /root/.ssh</code></p><p>然后<code>ls</code></p><p>如图：</p><p><img src="image013.png" alt="Hadoop"></p><p>使用相同的方法为slave1与slave2生成秘钥（命令相同，不用做任何修改）。</p><h4 id="在master上创建authorized-keys文件"><a href="#在master上创建authorized-keys文件" class="headerlink" title="在master上创建authorized_keys文件"></a>在master上创建authorized_keys文件</h4><p>接下来要做的事情就是在3台机器的/root/.shh/目录下都存入一个内容相同的文件，文件名称叫<strong>authorized_keys</strong>，文件内容是我们刚才为3台机器生成的公钥。</p><p>为了方便，我下面的步骤是现在master上生成<strong>authorized_keys</strong>文件，然后把3台机器刚才生成的公钥加入到这个master的authorized_keys文件里，然后在将这个authorize_keys文件复制到slave1与slave2里。</p><p>首先使用命令，在master的/root/.ssh/目录中生成一个名为authorized_keys的文件，命令是：</p><p><code>touch /root/.shh/authorized_keys</code></p><p>如图：</p><p><img src="image015.png" alt="Hadoop"></p><blockquote><p>因为我已经在.ssh目录中了，所以直接在该目录打 touch authorized_keys 命令就可以</p></blockquote><p>其次将master上的/root/.ssh/id_rsa.pub文件内容，slave1上的/root/.ssh/id_rsa.pub文件内容，slave2上的/root/.ssh/id_rsa.pub文件内容复制到这个authorized_keys文件中.</p><p>复制的方法很多了，可以用cat命令和vim命令结合来弄，也可以直接把这3台机器上的/root/.ssh/id_rsa.pub文件下载到本地，在本地将authorized_keys文件编辑好在上载到这3台机器上。master机器上我的/root/.ssh/id_rsa.pub内容是:</p><p>如图：</p><p><img src="image017.png" alt="Hadoop"></p><p>先将master的id_rsa.pub加到authorized_keys中：</p><p><img src="image019.png" alt="Hadoop"></p><p>然后将slave1与slave2中的d_rsa.pub复制到master的authorized_keys中</p><p>如图：</p><p><img src="image21.png" alt="Hadoop"></p><h4 id="将authorized-keys文件复制到其他机器"><a href="#将authorized-keys文件复制到其他机器" class="headerlink" title="将authorized_keys文件复制到其他机器"></a>将authorized_keys文件复制到其他机器</h4><p> master器的/root/.ssh/目录下已经有authorized_keys这个文件了，该文件的内容也已经OK了，接下来要将该文件复制到slave1的/root/.ssh/和slave2的/root/.ssh/。</p><p><img src="image023.png" alt="Hadoop"></p><p>（输入yes）</p><h4 id="测试使用ssh进行无密码登录"><a href="#测试使用ssh进行无密码登录" class="headerlink" title="测试使用ssh进行无密码登录"></a>测试使用ssh进行无密码登录</h4><p>输入命令：</p><p><code>ssh slave1</code></p><p>如图：</p><p><img src="image025.png" alt="Hadoop"></p><p>显示这样便就是连接成功，exit 命令退出</p><p>接下来便在 slave1与slave2中测试</p><h3 id="安装Jdk与Hadoop"><a href="#安装Jdk与Hadoop" class="headerlink" title="安装Jdk与Hadoop"></a>安装Jdk与Hadoop</h3><p>说明，为了省去一系列获取管理员权限，授权等繁琐操作，精简教程，这里都是使用root账户登录并且使用root权限进行操作。</p><h4 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h4><p>安装：<br>    可以参考我的<a href="https://plutoacharon.github.io/2019/07/31/Centos7%E4%B8%8B%E7%9A%84JDK%E5%AE%89%E8%A3%85/#more" target="_blank" rel="noopener">Centos7下的Jdk安装</a></p><h4 id="安装hadoop"><a href="#安装hadoop" class="headerlink" title="安装hadoop"></a>安装hadoop</h4><p><strong>注意：3台机器都要解压安装</strong></p><h5 id="上载文件并解压缩"><a href="#上载文件并解压缩" class="headerlink" title="上载文件并解压缩"></a>上载文件并解压缩</h5><p>在opt目录下新建一个名为hadoop的目录，并将下载得到的hadoop-2.8.0.tar上载到该目录下，如图:</p><p><img src="image027.png" alt="Hadoop"></p><p><strong>（此处使用的是xftp6）</strong></p><p>然后进入到该目录，执行命令：</p><p><code>cd /opt/hadoop</code></p><p>执行解压命令：</p><p><code>tar -zxvf hadoop-2.8.0.tar.gz</code></p><p>说明：3台机器都要进行上述操作，解压缩后得到一个名为hadoop-2.8.0的目录</p><h5 id="新建几个目录"><a href="#新建几个目录" class="headerlink" title="新建几个目录"></a>新建几个目录</h5><pre><code>mkdir  /root/hadoop  mkdir  /root/hadoop/tmp  mkdir  /root/hadoop/var  mkdir  /root/hadoop/dfs  mkdir  /root/hadoop/dfs/name  mkdir  /root/hadoop/dfs/data</code></pre><h5 id="修改etc-hadoop中的一系列配置文件"><a href="#修改etc-hadoop中的一系列配置文件" class="headerlink" title="修改etc/hadoop中的一系列配置文件"></a>修改etc/hadoop中的一系列配置文件</h5><p><strong>修改core-site.xml</strong></p><p> 修改/opt/hadoop/hadoop-2.8.0/etc/hadoop/core-site.xml文件</p><pre><code>        在&lt;configuration&gt;节点内加入配置:&lt;property&gt;        &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;        &lt;value&gt;/root/hadoop/tmp&lt;/value&gt;        &lt;description&gt;Abase for other temporary directories.&lt;/description&gt;&lt;/property&gt;&lt;property&gt;        &lt;name&gt;fs.default.name&lt;/name&gt;        &lt;value&gt;hdfs://master:9000&lt;/value&gt;&lt;/property&gt;</code></pre><p><strong>修改hadoop-env.sh</strong></p><p>修改/opt/hadoop/hadoop-2.8.0/etc/hadoop/hadoop-env.sh文件</p><pre><code>将export   JAVA_HOME=${JAVA_HOME}修改为：export   JAVA_HOME=/opt/java/jdk1.8.0_201说明：修改为自己的JDK路径</code></pre><p><strong>修改hdfs-site.xml</strong></p><pre><code>修改/opt/hadoop/hadoop-2.8.0/etc/hadoop/hdfs-site.xml文件在&lt;configuration&gt;节点内加入配置:&lt;property&gt;&lt;name&gt;dfs.name.dir&lt;/name&gt;&lt;value&gt;/root/hadoop/dfs/name&lt;/value&gt;&lt;description&gt;Path on the local filesystem where theNameNode stores the namespace and transactions logs persistently.&lt;/description&gt;&lt;/property&gt;&lt;property&gt;&lt;name&gt;dfs.data.dir&lt;/name&gt;&lt;value&gt;/root/hadoop/dfs/data&lt;/value&gt;&lt;description&gt;Comma separated list of paths on the localfilesystem of a DataNode where it should store its blocks.&lt;/description&gt;&lt;/property&gt;&lt;property&gt;&lt;name&gt;dfs.replication&lt;/name&gt;&lt;value&gt;2&lt;/value&gt;&lt;/property&gt;&lt;property&gt;    &lt;name&gt;dfs.permissions&lt;/name&gt;    &lt;value&gt;false&lt;/value&gt;    &lt;description&gt;need not permissions&lt;/description&gt;&lt;/property&gt;        说明：dfs.permissions配置为false后，可以允许不要检查权限就生成dfs上的文件，方便倒是方便了，但是你需要防止误删除，请将它设置为true，或者直接将该property节点删除，因为默认就是true。</code></pre><p><strong>新建并且修改mapred-site.xml</strong></p><p>在该版本中，有一个名为mapred-site.xml.template的文件，复制该文件，然后改名为mapred-site.xml，命令是：</p><p><code>cp /opt/hadoop/hadoop-2.8.0/etc/hadoop/mapred-site.xml.template     /opt/hadoop/hadoop-2.8.0/etc/hadoop/mapred-site.xml</code>  </p><pre><code>修改这个新建的mapred-site.xml文件，在&lt;configuration&gt;节点内加入配置:&lt;property&gt;    &lt;name&gt;mapred.job.tracker&lt;/name&gt;    &lt;value&gt;master:49001&lt;/value&gt;&lt;/property&gt;&lt;property&gt;    &lt;name&gt;mapred.local.dir&lt;/name&gt;    &lt;value&gt;/root/hadoop/var&lt;/value&gt;&lt;/property&gt;&lt;property&gt;    &lt;name&gt;mapreduce.framework.name&lt;/name&gt;    &lt;value&gt;yarn&lt;/value&gt;&lt;/property&gt;</code></pre><h5 id="修改slaves文件"><a href="#修改slaves文件" class="headerlink" title="修改slaves文件"></a>修改slaves文件</h5><p>修改/opt/hadoop/hadoop-2.8.0/etc/hadoop/slaves文件，将里面的localhost删除，添加如下内容：</p><pre><code>slave1slave2 </code></pre><p>只在master中做修改</p><h5 id="修改yarn-site-xml文件"><a href="#修改yarn-site-xml文件" class="headerlink" title="修改yarn-site.xml文件"></a>修改yarn-site.xml文件</h5><p>修改/opt/hadoop/hadoop-2.8.0/etc/hadoop/yarn-site.xml文件，</p><pre><code>在&lt;configuration&gt;节点内加入配置(注意了，内存根据机器配置越大越好，我这里只配2个G是因为机器不行):&lt;property&gt;        &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;        &lt;value&gt;master&lt;/value&gt;&lt;/property&gt;&lt;property&gt;        &lt;description&gt;The address of the applications manager interface in the RM.&lt;/description&gt;        &lt;name&gt;yarn.resourcemanager.address&lt;/name&gt;        &lt;value&gt;${yarn.resourcemanager.hostname}:8032&lt;/value&gt;&lt;/property&gt;&lt;property&gt;        &lt;description&gt;The address of the scheduler interface.&lt;/description&gt;        &lt;name&gt;yarn.resourcemanager.scheduler.address&lt;/name&gt;        &lt;value&gt;${yarn.resourcemanager.hostname}:8030&lt;/value&gt;&lt;/property&gt;&lt;property&gt;        &lt;description&gt;The http address of the RM web application.&lt;/description&gt;        &lt;name&gt;yarn.resourcemanager.webapp.address&lt;/name&gt;        &lt;value&gt;${yarn.resourcemanager.hostname}:8088&lt;/value&gt;&lt;/property&gt;&lt;property&gt;        &lt;description&gt;The https adddress of the RM web application.&lt;/description&gt;        &lt;name&gt;yarn.resourcemanager.webapp.https.address&lt;/name&gt;        &lt;value&gt;${yarn.resourcemanager.hostname}:8090&lt;/value&gt;&lt;/property&gt;&lt;property&gt;        &lt;name&gt;yarn.resourcemanager.resource-tracker.address&lt;/name&gt;        &lt;value&gt;${yarn.resourcemanager.hostname}:8031&lt;/value&gt;&lt;/property&gt;&lt;property&gt;        &lt;description&gt;The address of the RM admin interface.&lt;/description&gt;        &lt;name&gt;yarn.resourcemanager.admin.address&lt;/name&gt;        &lt;value&gt;${yarn.resourcemanager.hostname}:8033&lt;/value&gt;&lt;/property&gt;&lt;property&gt;        &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;        &lt;value&gt;mapreduce_shuffle&lt;/value&gt;&lt;/property&gt;&lt;property&gt;        &lt;name&gt;yarn.scheduler.maximum-allocation-mb&lt;/name&gt;        &lt;value&gt;2048&lt;/value&gt;        &lt;discription&gt;每个节点可用内存,单位MB,默认8182MB&lt;/discription&gt;&lt;/property&gt;&lt;property&gt;        &lt;name&gt;yarn.nodemanager.vmem-pmem-ratio&lt;/name&gt;        &lt;value&gt;2.1&lt;/value&gt;&lt;/property&gt;&lt;property&gt;        &lt;name&gt;yarn.nodemanager.resource.memory-mb&lt;/name&gt;        &lt;value&gt;2048&lt;/value&gt;&lt;/property&gt;&lt;property&gt;        &lt;name&gt;yarn.nodemanager.vmem-check-enabled&lt;/name&gt;        &lt;value&gt;false&lt;/value&gt;&lt;/property&gt;    说明：yarn.nodemanager.vmem-check-enabled这个的意思是忽略虚拟内存的检查，如果你是安装在虚拟机上，这个配置很有用，配上去之后后续操作不容易出问题。如果是实体机上，并且内存够多，可以将这个配置去掉。</code></pre><p>然后用 scp命令传到 slave1与slave2中</p><p><img src="image029.png" alt="Hadoop"></p><h2 id="启动hadoop"><a href="#启动hadoop" class="headerlink" title="启动hadoop"></a>启动hadoop</h2><h3 id="在namenode上执行初始化"><a href="#在namenode上执行初始化" class="headerlink" title="在namenode上执行初始化"></a>在namenode上执行初始化</h3><p>因为master是namenode，slave1和slave2都是datanode，所以只需要对master进行初始化操作，也就是对hdfs进行格式化。</p><p>进入到master这台机器的/opt/hadoop/hadoop-2.8.0/bin目录，也就是执行命令：</p><p><code>cd /opt/hadoop/hadoop-2.8.0/bin</code></p><p>执行初始化脚本，也就是执行命令：</p><p><code>./hadoop  namenode  -format</code></p><p>如图：</p><p><img src="image031.png" alt="Hadoop"></p><p> 稍等几秒，不报错的话，即可执行成功，如图：</p><p><img src="image033.png" alt="Hadoop"></p><p>格式化成功后，可以在看到在/root/hadoop/dfs/name/目录多了一个current目录，而且该目录内有一系列文件：</p><p><img src="image035.png" alt="Hadoop"></p><h3 id="在namenode上执行启动命令"><a href="#在namenode上执行启动命令" class="headerlink" title="在namenode上执行启动命令"></a>在namenode上执行启动命令</h3><p>因为master是namenode，slave1和slave2都是datanode，所以只需要再slave2上执行启动命令即可。</p><p>进入到master这台机器的/opt/hadoop/hadoop-2.8.0/sbin目录，也就是执行命令：</p><p><code>cd /opt/hadoop/hadoop-2.8.0/sbin</code></p><p>执行初始化脚本，也就是执行命令：</p><p><code>./start-all.sh</code></p><p>第一次执行上面的启动命令，会需要我们进行交互操作，在问答界面上输入yes回车</p><p>如图：</p><p><img src="image037.png" alt="Hadoop"></p><p><strong>关闭防火墙：</strong></p><p><code>systemctl stop firewalld.service</code></p><p>不关闭防火墙的话，web页面访问不了！！！</p><p>master是我们的namanode，该机器的IP是<code>192.168.236.132</code>，在本地电脑访问如下地址:</p><p><code>http://192.168.236.132:50070/</code></p><p>自动跳转到了overview页面</p><p>如图：</p><p><img src="image039.png" alt="Hadoop"></p><p>在本地浏览器里访问如下地址：</p><p><a href="http://192.168.119.128:8088/" target="_blank" rel="noopener">http://192.168.119.128:8088/</a></p><p>自动跳转到了cluster页面</p><p>如图：</p><p><img src="image041.png" alt="Hadoop"></p><p><strong>Hadoop安装完成！</strong></p><h2 id="报错处理"><a href="#报错处理" class="headerlink" title="报错处理"></a>报错处理</h2><p>想执行hadoop命令，结果报错：hadoop：未找到命令。</p><p>原因是hadoop的安装路径没有加入到当前路径中。解决办法有两个：</p><p>一．进入hadoop的安装目录，在执行hadoop命令时在前面加上：./bin  ./sbin</p><p>二．在/etc/profile文件中添加hadoop的安装路径：</p><p><code>sudo vim /etc/profile</code></p><p>加入：</p><pre><code>export HADOOP_HOME=/opt/hadoop/hadoop-2.8.0/export PATH=$HADOOP_HOME/bin:$HADOOP_HOME/sbin:$PATH</code></pre><p>保存后退出。</p><p>执行：</p><p><code>source /etc/profile</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;此文为在centos7下安装Hadoop集群&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前期准备&quot;&gt;&lt;a href=&quot;#前期准备&quot; class=&quot;headerlink&quot; title=&quot;前期准备&quot;&gt;&lt;/a&gt;前期准备&lt;/h2&gt;&lt;blockqu
      
    
    </summary>
    
      <category term="Liunx" scheme="http://yoursite.com/categories/Liunx/"/>
    
      <category term="Hadoop" scheme="http://yoursite.com/categories/Liunx/Hadoop/"/>
    
    
      <category term="Liunx" scheme="http://yoursite.com/tags/Liunx/"/>
    
      <category term="Hadoop" scheme="http://yoursite.com/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>初识Scala</title>
    <link href="http://yoursite.com/2019/08/08/%E5%88%9D%E8%AF%86Scala/"/>
    <id>http://yoursite.com/2019/08/08/初识Scala/</id>
    <published>2019-08-08T11:33:24.000Z</published>
    <updated>2019-08-08T12:01:43.138Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Scala概述"><a href="#Scala概述" class="headerlink" title="Scala概述"></a>Scala概述</h2><h3 id="学习Scala的原因"><a href="#学习Scala的原因" class="headerlink" title="学习Scala的原因"></a>学习Scala的原因</h3><ol><li><p>Spark—新一代内存级大数据计算框架，是大数据的重要内容。</p></li><li><p>Spark就是使用Scala编写的。因此为了更好的学习Spark, 需要掌握Scala这门语言。</p></li><li><p>Scala 是 Scalable Language 的简写，是一门多范式(范式/编程方式[面向对象/函数式编程])的编程语言</p></li><li><p>联邦理工学院洛桑（EPFL）的Martin Odersky于2001年开始设计Scala</p></li><li><p>Spark的兴起，带动Scala语言的发展！</p></li></ol><h3 id="Scala语言的特点"><a href="#Scala语言的特点" class="headerlink" title="Scala语言的特点"></a>Scala语言的特点</h3><blockquote><p>Scala 是一门以 java 虚拟机（JVM）为运行环境并将面向对象和函数式编程的最佳特性结合在一起的静态类型编程语言。</p></blockquote><ol><li>Scala 是一门多范式 (multi-paradigm) 的编程语言，Scala 支持面向对象和函数式编程</li><li>Scala 源代码(.scala)会被编译成 Java 字节码(.class)，然后运行于 JVM 之上，并可以调用现有的<br>Java 类库，实现两种语言的无缝对接。</li><li>scala 单作为一门语言来看， 非常的简洁高效（三元运算， ++ ， –）</li><li>Scala 在设计时，马丁·奥德斯基 是参考了 Java 的设计思想，可以说 Scala 是源于 java，同时马丁·奥德斯基 也加入了自己的思想，将函数式编程语言的特点融合到 JAVA 中</li></ol><h3 id="Scala的转义字符"><a href="#Scala的转义字符" class="headerlink" title="Scala的转义字符"></a>Scala的转义字符</h3><ol><li>\t ：一个制表符</li><li>\n ：换行符</li><li>\ ：一个 \</li><li>\” : 一个 “</li><li>\r ： 一个回车</li></ol><h3 id="Scala语言输出的三种方式"><a href="#Scala语言输出的三种方式" class="headerlink" title="Scala语言输出的三种方式"></a>Scala语言输出的三种方式</h3><ol><li>字符串通过+号连接（类似 java）。</li><li>printf 用法 （类似 C 语言）字符串通过 % 传值。</li><li>字符串通过$引用(类似 PHP）。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">object TestPrint &#123;</span><br><span class="line"></span><br><span class="line"><span class="function">def <span class="title">main</span><span class="params">(args: Array[String])</span>: Unit </span>= &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name : String = <span class="string">"tom"</span> <span class="keyword">var</span> sal : Double = <span class="number">1.2</span> println(<span class="string">"hello"</span> + sal + name )</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使 用 格 式 化 的 方 式</span></span><br><span class="line"></span><br><span class="line"><span class="function">printf <span class="title">printf</span><span class="params">(<span class="string">"name=%s sal=%f\n"</span>, name, sal)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//使用$引用的方式，输出变量，类似 php</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">println</span><span class="params">(s<span class="string">"第三种方式 name=$name sal = $&#123;sal + 1&#125;"</span>)</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Scala-中的注释类型"><a href="#Scala-中的注释类型" class="headerlink" title="Scala 中的注释类型"></a>Scala 中的注释类型</h3><ol><li>单行注释</li><li>多行注释</li><li>文档注释</li></ol><p>跟Java类似此处就不再赘述</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Scala概述&quot;&gt;&lt;a href=&quot;#Scala概述&quot; class=&quot;headerlink&quot; title=&quot;Scala概述&quot;&gt;&lt;/a&gt;Scala概述&lt;/h2&gt;&lt;h3 id=&quot;学习Scala的原因&quot;&gt;&lt;a href=&quot;#学习Scala的原因&quot; class=&quot;head
      
    
    </summary>
    
      <category term="Liunx" scheme="http://yoursite.com/categories/Liunx/"/>
    
      <category term="Scala" scheme="http://yoursite.com/categories/Liunx/Scala/"/>
    
    
      <category term="Scala" scheme="http://yoursite.com/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>Scala的安装</title>
    <link href="http://yoursite.com/2019/08/08/Scala%E7%9A%84%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2019/08/08/Scala的安装/</id>
    <published>2019-08-08T09:29:24.000Z</published>
    <updated>2019-08-08T11:58:19.395Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备安装"><a href="#准备安装" class="headerlink" title="准备安装"></a>准备安装</h2><p>首先在官网下载好scala以后，安装在hadoop目录下</p><pre><code>cd /opt/hadooptar -zxvf scala-2.12.8.tgz</code></pre><h2 id="进入环境变量"><a href="#进入环境变量" class="headerlink" title="进入环境变量"></a>进入环境变量</h2><p><code>vim /etc/profile</code></p><pre><code>#scalaexport SCALA_HOME=/opt/hadoop/scala-2.12.8export PATH=$PATH:$SCALA_HOME/bin</code></pre><p><code>source /etc/profile</code><br><strong>保存</strong></p><p>在相应的slave1，与slave2中也进行相应修改</p><h2 id="安装成功"><a href="#安装成功" class="headerlink" title="安装成功"></a>安装成功</h2><p><img src="1.png" alt="Scala"></p><h2 id="将scala分发到其他节点上"><a href="#将scala分发到其他节点上" class="headerlink" title="将scala分发到其他节点上"></a>将scala分发到其他节点上</h2><pre><code>scp -r scala-2.12.8 root@slave1:/opt/hadoop/scp -r scala-2.12.8 root@slave2:/opt/hadoop/</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;准备安装&quot;&gt;&lt;a href=&quot;#准备安装&quot; class=&quot;headerlink&quot; title=&quot;准备安装&quot;&gt;&lt;/a&gt;准备安装&lt;/h2&gt;&lt;p&gt;首先在官网下载好scala以后，安装在hadoop目录下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /opt/hadoop
tar
      
    
    </summary>
    
      <category term="Liunx" scheme="http://yoursite.com/categories/Liunx/"/>
    
      <category term="Scala" scheme="http://yoursite.com/categories/Liunx/Scala/"/>
    
    
      <category term="Liunx" scheme="http://yoursite.com/tags/Liunx/"/>
    
      <category term="Scala" scheme="http://yoursite.com/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>Liunx中tar命令的使用</title>
    <link href="http://yoursite.com/2019/08/08/Liunx%E4%B8%ADtar%E5%91%BD%E4%BB%A4%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/08/08/Liunx中tar命令的使用/</id>
    <published>2019-08-08T09:06:25.000Z</published>
    <updated>2019-08-08T09:25:46.109Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>把常用的tar解压命令总结下，当作备忘：</p></blockquote><hr><h2 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h2><pre><code>-c: 建立压缩档案-x：解压-t：查看内容-r：向压缩归档文件末尾追加文件-u：更新原压缩包中的文件</code></pre><p>这五个是独立的命令，压缩解压都要用到其中一个，可以和别的命令连用但只能用其中一个。下面的参数是根据需要在压缩或解压档案时可选的。</p><pre><code>-z：有gzip属性的-j：有bz2属性的-Z：有compress属性的-v：显示所有过程-O：将文件解开到标准输出</code></pre><h3 id="下面的参数-f是必须的"><a href="#下面的参数-f是必须的" class="headerlink" title="下面的参数-f是必须的"></a>下面的参数-f是必须的</h3><blockquote><p>-f: 使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名。</p></blockquote><p><code>tar -cf all.tar *.jpg</code></p><p>这条命令是将所有.jpg的文件打成一个名为all.tar的包。-c是表示产生新的包，-f指定包的文件名。</p><p><code>tar -rf all.tar *.gif</code></p><p>这条命令是将所有.gif的文件增加到all.tar的包里面去。-r是表示增加文件的意思。</p><p><code>tar -uf all.tar logo.gif</code></p><p>这条命令是更新原来tar包all.tar中logo.gif文件，-u是表示更新文件的意思。</p><p><code>tar -tf all.tar</code></p><p>这条命令是列出all.tar包中所有文件，-t是列出文件的意思</p><p><code>tar -xf all.tar</code></p><p>这条命令是解出all.tar包中所有文件，-x是解开的意思</p><h2 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h2><p>将目录里所有jpg文件打包成tar.jpg</p><p><code>tar –cvf jpg.tar *.jpg</code></p><p>将目录里所有jpg文件打包成jpg.tar后，并且将其用gzip压缩，生成一个gzip压缩过的包，命名为jpg.tar.gz</p><p><code>tar –czf jpg.tar.gz *.jpg</code></p><p>将目录里所有jpg文件打包成jpg.tar后，并且将其用bzip2压缩，生成一个bzip2压缩过的包，命名为jpg.tar.bz2</p><p><code>tar –cjf jpg.tar.bz2 *.jpg</code></p><p>将目录里所有jpg文件打包成jpg.tar后，并且将其用compress压缩，生成一个umcompress压缩过的包，命名为jpg.tar.Z</p><p><code>tar –cZf jpg.tar.Z *.jpg</code></p><p>rar格式的压缩，需要先下载rar for linux</p><p><code>rar a jpg.rar *.jpg</code></p><p>zip格式的压缩，需要先下载zip for linux</p><p><code>zip jpg.zip *.jpg</code></p><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><p>解压 tar包</p><p><code>tar –xvf file.tar</code></p><p>解压tar.gz</p><p><code>tar -xzvf file.tar.gz</code></p><p>解压 tar.bz2</p><p><code>tar -xjvf file.tar.bz2</code></p><p>解压tar.Z</p><p><code>tar –xZvf file.tar.Z</code></p><p>解压rar</p><p><code>unrar e file.rar</code></p><p>解压zip</p><p><code>unzip file.zip</code></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><pre><code>*.tar 用 tar –xvf 解压*.gz 用 gzip -d或者gunzip 解压*.tar.gz和*.tgz 用 tar –xzf 解压*.bz2 用 bzip2 -d或者用bunzip2 解压*.tar.bz2用tar –xjf 解压*.Z 用 uncompress 解压*.tar.Z 用tar –xZf 解压*.rar 用 unrar e解压*.zip 用 unzip 解压</code></pre><blockquote><p>linux下最常用的打包程序就是tar了，使用tar程序打出来的包我们常称为tar包，tar包文件的命令通常都是<br>以.tar结尾的。生成tar包后，就可以用其它的程序来进行压缩。</p></blockquote><h3 id="命令详解"><a href="#命令详解" class="headerlink" title="命令详解"></a>命令详解</h3><ol><li>命令格式:</li></ol><p><code>tar[必要参数][选择参数][文件]</code></p><ol start="2"><li>命令功能：</li></ol><p>用来压缩和解压文件。tar本身不具有压缩功能。他是调用压缩功能实现的</p><ol start="3"><li>命令参数：</li></ol><p><strong>必要参数有如下：</strong></p><pre><code>-A 新增压缩文件到已存在的压缩-B 设置区块大小-c 建立新的压缩文件-d 记录文件的差别-r 添加文件到已经压缩的文件-u 添加改变了和现有的文件到已经存在的压缩文件-x 从压缩的文件中提取文件-t 显示压缩文件的内容-z 支持gzip解压文件-j 支持bzip2解压文件-Z 支持compress解压文件-v 显示操作过程-l 文件系统边界设置-k 保留原有文件不覆盖-m 保留文件不被覆盖-W 确认压缩文件的正确性可选参数如下：-b 设置区块数目-C 切换到指定目录-f 指定压缩文件--help 显示帮助信息--version 显示版本信息</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;把常用的tar解压命令总结下，当作备忘：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;tar&quot;&gt;&lt;a href=&quot;#tar&quot; class=&quot;headerlink&quot; title=&quot;tar&quot;&gt;&lt;/a&gt;tar&lt;/h2&gt;&lt;pre&gt;&lt;cod
      
    
    </summary>
    
      <category term="Liunx" scheme="http://yoursite.com/categories/Liunx/"/>
    
    
      <category term="Liunx" scheme="http://yoursite.com/tags/Liunx/"/>
    
  </entry>
  
  <entry>
    <title>Java变量类型</title>
    <link href="http://yoursite.com/2019/08/02/Java%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2019/08/02/Java变量类型/</id>
    <published>2019-08-02T11:00:44.000Z</published>
    <updated>2019-08-08T09:40:49.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变量的分类"><a href="#变量的分类" class="headerlink" title="变量的分类"></a>变量的分类</h2><h3 id="按数据类型分类"><a href="#按数据类型分类" class="headerlink" title="按数据类型分类"></a>按数据类型分类</h3><p><strong>详细说明：</strong></p><ol><li>整型：</li></ol><ul><li>byte(1字节=8bit)</li><li>short(2字节)</li><li>int(4字节)</li><li>long(8字节)</li></ul><p>① byte范围：-128 ~ 127</p><p>② 声明long型变量，必须以”l”或”L”结尾</p><p>③ 通常，定义整型变量时，使用int型。</p><p>④整型的常量，默认类型是：int型</p><ol start="2"><li>浮点型：float(4字节) \ double(8字节)</li></ol><p>① 浮点型，表示带小数点的数值</p><p>② float表示数值的范围比long还大</p><p>③ 定义float类型变量时，变量要以”f”或”F”结尾</p><p>④ 通常，定义浮点型变量时，使用double型。</p><p>⑤ 浮点型的常量，默认类型为：double</p><ol start="3"><li>字符型：char (1字符=2字节)<br>① 定义char型变量，通常使用一对’’,内部只能写一个字符<br>② 表示方式：</li></ol><ul><li>声明一个字符</li><li>转义字符</li><li>直接使用 Unicode 值来表示字符型常量</li></ul><ol start="4"><li>布尔型：boolean</li></ol><p>① 只能取两个值之一：true 、 false</p><p>② 常常在条件判断、循环结构中使用</p><h2 id="定义变量的格式"><a href="#定义变量的格式" class="headerlink" title="定义变量的格式"></a>定义变量的格式</h2><p>数据类型  变量名 = 变量值;</p><p>或</p><p>数据类型  变量名;</p><p>变量名 = 变量值;</p><h3 id="变量使用的注意点"><a href="#变量使用的注意点" class="headerlink" title="变量使用的注意点"></a>变量使用的注意点</h3><p>① 变量必须先声明，后使用</p><p>② 变量都定义在其作用域内。在作用域内，它是有效的。换句话说，出了作用域，就失效了</p><p>③ 同一个作用域内，不可以声明两个同名的变量</p><h3 id="基本数据类型变量间运算规则"><a href="#基本数据类型变量间运算规则" class="headerlink" title="基本数据类型变量间运算规则"></a>基本数据类型变量间运算规则</h3><p>涉及到的基本数据类型：除了boolean之外的其他7种</p><p>自动类型转换(只涉及7种基本数据类型）</p><p><strong>结论：</strong></p><blockquote><p>当容量小的数据类型的变量与容量大的数据类型的变量做运算时，结果自动提升为容量大的数据类型。</p></blockquote><p>byte 、char 、short –&gt; int –&gt; long –&gt; float –&gt; double</p><p>特别的：当byte、char、short三种类型的变量做运算时，结果为<strong>int型</strong></p><p>说明：此时的容量大小指的是，表示数的范围的大和小。比如：float容量要大于long的容量</p><h3 id="强制类型转换-只涉及7种基本数据类型）：自动类型提升运算的逆运算"><a href="#强制类型转换-只涉及7种基本数据类型）：自动类型提升运算的逆运算" class="headerlink" title="强制类型转换(只涉及7种基本数据类型）：自动类型提升运算的逆运算"></a>强制类型转换(只涉及7种基本数据类型）：自动类型提升运算的逆运算</h3><ol><li>需要使用强转符：()</li><li>注意点：强制类型转换，可能导致精度损失。</li></ol><h2 id="String与8种基本数据类型间的运算"><a href="#String与8种基本数据类型间的运算" class="headerlink" title="String与8种基本数据类型间的运算"></a>String与8种基本数据类型间的运算</h2><ol><li>String属于引用数据类型,翻译为：字符串</li><li>声明String类型变量时，使用一对””</li><li>String可以和8种基本数据类型变量做运算，且运算只能是连接运算：+</li><li>运算的结果仍然是String类型</li></ol><p><strong>避免：</strong></p><pre><code>String s = 123;//编译错误String s1 = &quot;123&quot;;int i = (int)s1;//编译错误</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;变量的分类&quot;&gt;&lt;a href=&quot;#变量的分类&quot; class=&quot;headerlink&quot; title=&quot;变量的分类&quot;&gt;&lt;/a&gt;变量的分类&lt;/h2&gt;&lt;h3 id=&quot;按数据类型分类&quot;&gt;&lt;a href=&quot;#按数据类型分类&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>什么是环境变量</title>
    <link href="http://yoursite.com/2019/08/02/%E4%BB%80%E4%B9%88%E6%98%AF%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    <id>http://yoursite.com/2019/08/02/什么是环境变量/</id>
    <published>2019-08-02T11:00:28.000Z</published>
    <updated>2019-08-10T02:48:05.903Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>相信大家初学java时，肯定会涉及到“配置环境变量”，而在网上搜索大多是教我们如何如配置，真正说明为什么要去配置环境变量的不多。</p><p>不管在windows里还是liunx里都少不了环境变量的配置，一键Copy是解决不了问题的，还可能会出现各种各样的问题，如果我们搞清楚原理，就会方便许多。</p><p>今天我们就以java环境变量来了解，什么是环境变量以及为什么要配置。</p><h2 id="什么是环境变量"><a href="#什么是环境变量" class="headerlink" title="什么是环境变量"></a>什么是环境变量</h2><h3 id="环境变量（Environment-Variable-）"><a href="#环境变量（Environment-Variable-）" class="headerlink" title="环境变量（Environment Variable ）"></a>环境变量（Environment Variable ）</h3><p>环境变量是在操作系统中一个具有特定名字的对象，它包含了一个或者多个应用程序所将使用到的信息。</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><blockquote><p>可以随意给其赋值的一个存储单元</p></blockquote><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p>例如jvm这些都属于小软件，它们处于<strong>操作系统</strong>这个大软件中。</p><h4 id="环境变量的作用"><a href="#环境变量的作用" class="headerlink" title="环境变量的作用"></a>环境变量的作用</h4><p>变量在任何程序中的作用都是“被赋值/被取值”！这个全局变量操作系统可以使用，其内的小软件也可以使用！</p><h4 id="环境变量有哪些"><a href="#环境变量有哪些" class="headerlink" title="环境变量有哪些"></a>环境变量有哪些</h4><ol><li>在Windows中，是由可视化的窗口模式展现出来的</li></ol><p><img src="1.png" alt="Windowds"></p><ol start="2"><li>在Linux中</li></ol><p><strong>设置：</strong></p><p>在 <code>/etc/profile</code>文件中设置，<code>export</code>的意思就是将局部变量设置为环境变量。现有的变量是被这样一行代码设置的：</p><p><code>export PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL</code></p><p>这几个环境变量已经有一些默认值了，不过我们可以追加内容，比如修改PATH：</p><pre><code># : 的意思是并列PATH = /abc/def:$PATH</code></pre><p><strong>查看：</strong></p><p>查看全部，使用<code>env</code>命令即可。</p><p>查看单个，可以使用<code>echo</code>：如<code>echo $JAVA_HOME。</code></p><h2 id="在JAVA中"><a href="#在JAVA中" class="headerlink" title="在JAVA中"></a>在JAVA中</h2><p>我们知道什么是环境变量以后，在java中会具体怎么用到呢？</p><h3 id="常见的Java相关环境变量及其作用"><a href="#常见的Java相关环境变量及其作用" class="headerlink" title="常见的Java相关环境变量及其作用"></a>常见的Java相关环境变量及其作用</h3><h4 id="PATH"><a href="#PATH" class="headerlink" title="PATH"></a>PATH</h4><p>PATH是操作系统用的，用来指定操作系统需要使用到的可执行程序的位置。对于Java来说，通常需要把JDK的bin目录添加进入PATH中，这样你就可以在任意目录下使用bin下面的可执行程序，如javac.exe、java.exe等。</p><p><strong>这个变量一定要保证将JRE/JDK的bin纳入其中。</strong></p><pre><code>JDK,JRE，JVM三者之间的关系，以及JDK，JRE包含的主要结构有哪些JDK = JRE + Java的开发工具（javac.exe,java.exe,javadoc.exe）JRD = JVM + Java核心类库</code></pre><h4 id="JAVA-HOME"><a href="#JAVA-HOME" class="headerlink" title="JAVA_HOME"></a>JAVA_HOME</h4><p>JAVA_HOME是一个约定，通常它指的是JDK的目录。如果需要JDK的话，大部分程序会默认去环境变量中取JAVA_HOME这个变量。</p><p><strong>很重要，一些java开发的工具例如IDEA就需要。</strong></p><h4 id="CLASSPATH"><a href="#CLASSPATH" class="headerlink" title="CLASSPATH"></a>CLASSPATH</h4><p>在于告诉Java执行环境，在哪些目录下可以找到我们所要执行的Java程序所需要的类或者包。不过在JDK1.5之后的版本完全可以不用设置classpath环境变量就能正常运行程序。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol><li><p>需要在操作系统下设置的变量：</p><p> PATH中包含JRE/JDK的bin目录。<br> JAVA_HOME</p></li><li><p>一条命令语句包含命令本身（操作）和操作对象：Command + object，编译和运行Java程序必须经过两个步骤：</p></li></ol><ul><li><p>将源文件编译成字节码 （javac）</p></li><li><p>执行平台无关的字节码程序（java）</p></li></ul><p>那么错误可能会有两种情况，一是没有找到命令，二是没有找到命令所要操作的文件。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;相信大家初学java时，肯定会涉及到“配置环境变量”，而在网上搜索大多是教我们如何如配置，真正说明为什么要去配置环境变量的不多。&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Centos7下的JDK安装</title>
    <link href="http://yoursite.com/2019/07/31/Centos7%E4%B8%8B%E7%9A%84JDK%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2019/07/31/Centos7下的JDK安装/</id>
    <published>2019-07-31T11:15:56.000Z</published>
    <updated>2019-08-02T11:13:18.623Z</updated>
    
    <content type="html"><![CDATA[<h2 id="卸载系统自带OpenJDK以及相关的java文件"><a href="#卸载系统自带OpenJDK以及相关的java文件" class="headerlink" title="卸载系统自带OpenJDK以及相关的java文件"></a>卸载系统自带OpenJDK以及相关的java文件</h2><h3 id="查看系统自带jdk版本信息"><a href="#查看系统自带jdk版本信息" class="headerlink" title="查看系统自带jdk版本信息"></a>查看系统自带jdk版本信息</h3><p><code>java -version</code></p><p>查看当前系统自带的open jdk版本信息</p><h3 id="查找要删除的jdk文件"><a href="#查找要删除的jdk文件" class="headerlink" title="查找要删除的jdk文件"></a>查找要删除的jdk文件</h3><p>输入</p><p><code>rpm -qa | grep java</code></p><p>查看包含java字符串的文件，其中删除类似下面这四个文件（不一定是四个）</p><pre><code>java-1.7.0-openjdk-1.7.0.111-2.6.7.8.el7.x86_64java-1.8.0-openjdk-1.8.0.102-4.b14.el7.x86_64java-1.8.0-openjdk-headless-1.8.0.102-4.b14.el7.x86_64java-1.7.0-openjdk-headless-1.7.0.111-2.6.7.8.el7.x86_64</code></pre><p>包含noarch的文件不必删除，如下：</p><pre><code>python-javapackages-3.4.1-11.el7.noarchtzdata-java-2016g-2.el7.noarchjavapackages-tools-3.4.1-11.el7.noarch</code></pre><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>删除的具体命令如下：</p><pre><code>rpm -e --nodeps java-1.7.0-openjdk-1.7.0.111-2.6.7.8.el7.x86_64rpm -e --nodeps java-1.8.0-openjdk-1.8.0.102-4.b14.el7.x86_64rpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.102-4.b14.el7.x86_64rpm -e --nodeps java-1.7.0-openjdk-headless-1.7.0.111-2.6.7.8.el7.x86_64</code></pre><p>执行完以上步骤后可以再次使用java -version查看是否已经删除成功。</p><p><img src="1.png" alt></p><h2 id="下载最新稳定版JDK"><a href="#下载最新稳定版JDK" class="headerlink" title="下载最新稳定版JDK"></a>下载最新稳定版JDK</h2><h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><blockquote><p><a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p></blockquote><p><img src="2.png" alt></p><h3 id="解压JDK"><a href="#解压JDK" class="headerlink" title="解压JDK"></a>解压JDK</h3><p>在命令窗口键入（在特定的文件录下，如/opt/java）:</p><p><code>tar -zxvf jdk-8u144-linux-x64.tar.gz</code></p><h3 id="配置JDK环境变量"><a href="#配置JDK环境变量" class="headerlink" title="配置JDK环境变量"></a>配置JDK环境变量</h3><ol><li>编辑全局变量</li></ol><p>命令行输入：</p><p><code>vim /etc/profile</code></p><p>在文本最后一行添加如下:</p><pre><code>#java environmentexport JAVA_HOME=/opt/java/jdk1.8.0_201export CLASSPATH=.:${JAVA_HOME}/jre/lib/rt.jar:${JAVA_HOME}/lib/dt.jar:${JAVA_HOME}/lib/tools.jarexport PATH=$PATH:${JAVA_HOME}/bin</code></pre><p><strong>保存并退出编辑。</strong></p><ol start="2"><li>让设置的环境变量生效</li></ol><p><code>source /etc/profile</code></p><ol start="3"><li>检查是否配置成功</li></ol><p><code>java -version</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;卸载系统自带OpenJDK以及相关的java文件&quot;&gt;&lt;a href=&quot;#卸载系统自带OpenJDK以及相关的java文件&quot; class=&quot;headerlink&quot; title=&quot;卸载系统自带OpenJDK以及相关的java文件&quot;&gt;&lt;/a&gt;卸载系统自带OpenJDK以
      
    
    </summary>
    
      <category term="Liunx" scheme="http://yoursite.com/categories/Liunx/"/>
    
      <category term="Hadoop" scheme="http://yoursite.com/categories/Liunx/Hadoop/"/>
    
    
      <category term="Liunx" scheme="http://yoursite.com/tags/Liunx/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Centos7下NAT设置静态ip</title>
    <link href="http://yoursite.com/2019/07/30/Centos7%E4%B8%8BNAT%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81ip/"/>
    <id>http://yoursite.com/2019/07/30/Centos7下NAT设置静态ip/</id>
    <published>2019-07-30T11:23:49.000Z</published>
    <updated>2019-07-30T12:00:54.597Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>在VMware下安装Centos7 以后，选择NAT模式</p><p>查看IP地址</p><p><code>ip addr</code></p><p><img src="1.png" alt></p><p>现在我的ip地址是dhcp动态分配出的，地址为<strong>192.168.0.128</strong>，网卡名字为<strong>ens33</strong></p><p>点击VMware Workstation 编辑下的<strong>虚拟网络编辑器</strong></p><p><img src="2.png" alt></p><p>在里面我们可以看到虚拟网卡的信息</p><p>点击 <strong>更改设置</strong></p><p><img src="3.png" alt></p><p>点击Vmnet8网卡，将子网ip改为自己想要的ip地址类型，这里我修改的是192.168.0.0</p><p>然后点击NAT设置，将网关设置为192.168.0.253</p><p><img src="4.png" alt></p><p><img src="5.png" alt></p><p><strong>保存退出。</strong></p><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>在/etc/sysconfig/network-scripts/下找到网卡配置文件 <strong>ens33</strong></p><p><code>vim ifcfg-ens33</code></p><p>添加静态ip的配置项</p><pre><code>TYPE=EthernetPROXY_METHOD=noneBROWSER_ONLY=noBOOTPROTO=static #将dhcp改为staticDEFROUTE=yesIPV4_FAILURE_FATAL=noIPV6INIT=yesIPV6_AUTOCONF=yesIPV6_DEFROUTE=yesIPV6_FAILURE_FATAL=noIPV6_ADDR_GEN_MODE=stable-privacyNAME=ens33UUID=27046f8e-9615-376c-b4d4-36646661dbe3ONBOOT=yes     #开机自启网卡AUTOCONNECT_PRIORITY=-999IPADDR=192.168.0.1       #静态ip （添加）   NETMASK=255.255.255.0    #子网掩码GATEWAY=192.168.0.253    #默认网关（刚才在配置项中设置的网关）DNS1=192.168.0.253       #DNS设置与默认网关相同即可PREFIX=24</code></pre><p><strong>保存</strong></p><h2 id="重启网络服务"><a href="#重启网络服务" class="headerlink" title="重启网络服务"></a>重启网络服务</h2><p><code>service network restart</code></p><h2 id="检查网络"><a href="#检查网络" class="headerlink" title="检查网络"></a>检查网络</h2><p><img src="6.png" alt></p><p>可以看到，这里我的地址就变成了192.168.0.1</p><ul><li>查看是否可以连通外网<br><code>ping www.baidu.com</code></li></ul><p><img src="7.png" alt></p><p>外网也是可以ping通的，这样我们的静态ip就设置完成了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前期准备&quot;&gt;&lt;a href=&quot;#前期准备&quot; class=&quot;headerlink&quot; title=&quot;前期准备&quot;&gt;&lt;/a&gt;前期准备&lt;/h2&gt;&lt;p&gt;在VMware下安装Centos7 以后，选择NAT模式&lt;/p&gt;
&lt;p&gt;查看IP地址&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ip add
      
    
    </summary>
    
      <category term="Liunx" scheme="http://yoursite.com/categories/Liunx/"/>
    
    
      <category term="Liunx" scheme="http://yoursite.com/tags/Liunx/"/>
    
      <category term="网络" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
</feed>
