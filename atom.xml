<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>浩翰Redamancy的博客</title>
  
  <subtitle>文质彬彬 然后君子</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://plutoacharon.github.io/"/>
  <updated>2020-03-17T09:24:26.629Z</updated>
  <id>https://plutoacharon.github.io/</id>
  
  <author>
    <name>浩翰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于go get 以后下载的包不在src下而在pkg的源头并且不可以import(Goland Modules模块的使用)</title>
    <link href="https://plutoacharon.github.io/2020/03/17/%E5%85%B3%E4%BA%8Ego-get-%E4%BB%A5%E5%90%8E%E4%B8%8B%E8%BD%BD%E7%9A%84%E5%8C%85%E4%B8%8D%E5%9C%A8src%E4%B8%8B%E8%80%8C%E5%9C%A8pkg%E7%9A%84%E6%BA%90%E5%A4%B4%E5%B9%B6%E4%B8%94%E4%B8%8D%E5%8F%AF%E4%BB%A5import-Goland-Modules%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://plutoacharon.github.io/2020/03/17/关于go-get-以后下载的包不在src下而在pkg的源头并且不可以import-Goland-Modules模块的使用/</id>
    <published>2020-03-17T09:24:05.000Z</published>
    <updated>2020-03-17T09:24:26.629Z</updated>
    
    <content type="html"><![CDATA[<h3 id="采坑记"><a href="#采坑记" class="headerlink" title="采坑记"></a>采坑记</h3><p>万恶之源:<code>go get</code> 以后我发现下载的包不在<code>src</code>目录下生成,而全部到了<code>$GOPATH$/pkg</code>目录下<br><img src="https://img-blog.csdnimg.cn/20200316194714911.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>而且下载完了, <code>import</code>也不成功<br><img src="https://img-blog.csdnimg.cn/20200316194527303.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在不懈的努力下最后终于找到原因:<br><a href="https://blog.csdn.net/qq_43442524/article/details/104900180" target="_blank" rel="noopener">解决Golang使用过程中go get 下载github项目慢或无法下载</a></p><p>我写的这篇文章中,<code>go env -w GO111MODULE=on</code>选择了打开</p><pre><code>官方在 v1.11 中加入了 Go Module 作为官方包管理形式，就这样 dep 无奈的结束了使命。最初的 Go Module 提案的名称叫做 vgo，下面为了介绍简称为 gomod。不过在 v1.11 和 v1.12 的 Go 版本中 gomod 是不能直接使用的。可以通过 go env 命令返回值的 GOMOD 字段是否为空来判断是否已经开启了 gomod，如果没有开启，可以通过设置环境变量 export     GO111MODULE=on 开启</code></pre><p>我的版本为1.14, 所以出现了这种情况</p><h3 id="Go-mod-的正确使用"><a href="#Go-mod-的正确使用" class="headerlink" title="Go mod 的正确使用"></a>Go mod 的正确使用</h3><h4 id="如何激活Modules"><a href="#如何激活Modules" class="headerlink" title="如何激活Modules"></a>如何激活Modules</h4><p>首先要把go升级到1.11及以上</p><p>升级后，可以设置通过一个环境变量GO111MODULE来激活modules：</p><pre><code>GO111MODULE=off，go命令行将不会支持module功能，寻找依赖包的方式将会沿用旧版本那种通过vendor目录或者GOPATH模式来查找。GO111MODULE=on，go命令行会使用modules，而一点也不会去GOPATH目录下查找。GO111MODULE=auto，默认值，go命令行将会根据当前目录来决定是否启用module功能。这种情况下可以分为两种情形：当前目录在GOPATH/src之外且该目录包含go.mod文件，或者当前文件在包含go.mod文件的目录下面。当module功能启用时，GOPATH在项目构建过程中不再担当import的角色，但它仍然存储下载的依赖包，具体位置在$GOPATH/pkg/mod。</code></pre><p>在你需要导入第三方包的地方,打开终端输入<code>go mod init 你先要的命名</code><br>然后在该文件夹会出现<code>go.mod</code>文件<br><img src="https://img-blog.csdnimg.cn/20200316200213907.png" alt="在这里插入图片描述"><br>然后使用<code>go get 你想要导入的包地址</code><br><img src="https://img-blog.csdnimg.cn/20200316200316383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这样go.mod里会记录你导入的包名称以及版本号<br><img src="https://img-blog.csdnimg.cn/20200316200350772.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>包也可以正常使用<br><img src="https://img-blog.csdnimg.cn/20200316200428773.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="Goland-Modules模块的使用"><a href="#Goland-Modules模块的使用" class="headerlink" title="Goland Modules模块的使用"></a>Goland Modules模块的使用</h3><p>proxy:<code>https://goproxy.io</code>设置代理<br><img src="https://img-blog.csdnimg.cn/20200316200519139.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>参考文章<code>https://zhuanlan.zhihu.com/p/59687626</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;采坑记&quot;&gt;&lt;a href=&quot;#采坑记&quot; class=&quot;headerlink&quot; title=&quot;采坑记&quot;&gt;&lt;/a&gt;采坑记&lt;/h3&gt;&lt;p&gt;万恶之源:&lt;code&gt;go get&lt;/code&gt; 以后我发现下载的包不在&lt;code&gt;src&lt;/code&gt;目录下生成,而全部到了&lt;co
      
    
    </summary>
    
      <category term="Golang" scheme="https://plutoacharon.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://plutoacharon.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Windows10安装运行Kafka2.1.0与Zookeeper3.4.14</title>
    <link href="https://plutoacharon.github.io/2020/03/17/Windows10%E5%AE%89%E8%A3%85%E8%BF%90%E8%A1%8CKafka2-1-0%E4%B8%8EZookeeper3-4-14/"/>
    <id>https://plutoacharon.github.io/2020/03/17/Windows10安装运行Kafka2-1-0与Zookeeper3-4-14/</id>
    <published>2020-03-17T09:23:43.000Z</published>
    <updated>2020-03-17T09:24:31.086Z</updated>
    
    <content type="html"><![CDATA[<p>近日在做一个Golang的日志收集系统需要用到Kafka, 因苦于笔记本电脑虚拟机出了点问题, 所以在本文记录Windows10安装Kafka的过程</p><h2 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h2><h3 id="1-1-安装JDK"><a href="#1-1-安装JDK" class="headerlink" title="1.1 安装JDK"></a>1.1 安装JDK</h3><p>此处不多介绍<br><img src="https://img-blog.csdnimg.cn/20200316124559436.png" alt="在这里插入图片描述"></p><h3 id="1-2-安装Zookeeper"><a href="#1-2-安装Zookeeper" class="headerlink" title="1.2 安装Zookeeper"></a>1.2 安装Zookeeper</h3><p><a href="http://zookeeper.apache.org/releases.html#download" target="_blank" rel="noopener">下载地址</a>:<code>http://zookeeper.apache.org/releases.html#download</code><br>下载后解压到一个目录：</p><pre><code>1.进入Zookeeper设置目录，我这里 E:\Study\zookeeper-3.4.14\conf2. 将“zoo_sample.cfg”重命名为“zoo.cfg”3. 在任意文本编辑器中打开zoo.cfg4. 找到并编辑dataDir=dataDir=E:\\Study\\zookeeper-3.4.14\\tmp5. 与Java中的做法类似，我们在系统环境变量中添加：　　a. 在系统变量中添加ZOOKEEPER_HOME = E:\Study\zookeeper-3.4.14　　b. 编辑path系统变量，添加为路径E:\Study\zookeeper-3.4.14\bin;6. 在zoo.cfg文件中修改默认的Zookeeper端口（默认端口2181）</code></pre><p><img src="https://img-blog.csdnimg.cn/20200316125354426.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="1-3-安装Kafka"><a href="#1-3-安装Kafka" class="headerlink" title="1.3 安装Kafka"></a>1.3 安装Kafka</h3><p><a href="https://kafka.apache.org/downloads" target="_blank" rel="noopener">下载地址</a>:<code>https://kafka.apache.org/downloads</code></p><p>注意:不要下载<code>kafka-2.1.0-src</code>类似的src源码包,不然运行时报错:</p><pre><code>命令语法不正确。错误: 找不到或无法加载主类 kafka.Kafka</code></pre><hr><pre><code>下载后解压到任意一个目录，我是log.dirs=E:\Study\kafka_2.11-2.1.01. 进入Kafka配置目录，log.dirs=E:\Study\kafka_2.11-2.1.0\config2. 编辑文件“server.properties”3. 找到并编辑log.dirs=E:\\Study\\kafka_2.11-2.1.0\\kafka-log,这里的目录自己修改成自己喜欢的4. 找到并编辑zookeeper.connect=localhost:2181。表示本地运行5. Kafka会按照默认，在9092端口上运行，并连接zookeeper的默认端口：2181</code></pre><p>报错:</p><pre><code>命令语法不正确。错误: 找不到或无法加载主类 Files\Java\jdk1.8.0_112\lib\dt.jar;C:\Program</code></pre><p>解决方式如下：</p><pre><code>在kafka安装目录中找到bin\windows目录中的kafka-run-class.bat找到为%CLASSPATH%加上双引号修改前： set COMMAND=%JAVA% %KAFKA_HEAP_OPTS% %KAFKA_JVM_PERFORMANCE_OPTS% %KAFKA_JMX_OPTS% %KAFKA_LOG4J_OPTS% -cp %CLASSPATH% %KAFKA_OPTS% %* 修改后： set COMMAND=%JAVA% %KAFKA_HEAP_OPTS% %KAFKA_JVM_PERFORMANCE_OPTS% %KAFKA_JMX_OPTS% %KAFKA_LOG4J_OPTS% -cp &quot;%CLASSPATH%&quot; %KAFKA_OPTS% %*</code></pre><p><strong>确保在启动Kafka服务器前，Zookeeper实例已经准备好并开始运行。</strong><br><img src="https://img-blog.csdnimg.cn/20200316135419654.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="1-4-创建生产者消费者实例"><a href="#1-4-创建生产者消费者实例" class="headerlink" title="1.4 创建生产者消费者实例"></a>1.4 创建生产者消费者实例</h3><p>打开上面的Zookeeper和Kafka,不要关!<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在Zookeeper目录</span><br><span class="line">./zkServer.cmd</span><br><span class="line">在kafka安装目录</span><br><span class="line">.\bin\windows\kafka-server-start.bat .\config\server.properties</span><br></pre></td></tr></table></figure></p><ol><li>创建topic<br><code>.\bin\windows\kafka-topics.bat --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic haohan</code><br>创建一个名为<code>haohan</code>的topic<br><img src="https://img-blog.csdnimg.cn/20200316142209467.png" alt="在这里插入图片描述"><br>不需要关闭此窗口</li><li>创建生产者<br><code>.\bin\windows\kafka-console-producer.bat --broker-list localhost:9092 --topic haohan</code><br><img src="https://img-blog.csdnimg.cn/20200316142307709.png" alt="在这里插入图片描述"><br>不要关闭窗口, 稍后会用到</li><li><p>创建消费者<br><code>.\bin\windows\kafka-console-consumer.bat --topic haohan --bootstrap-server localhost:9092</code></p></li><li><p>发送消息</p></li></ol><p>在刚才的生产者窗口发送消息, 在消费者窗口打开查看<br><img src="https://img-blog.csdnimg.cn/20200316143302743.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200316143309550.png" alt="在这里插入图片描述"></p><h3 id="1-5-删除topic"><a href="#1-5-删除topic" class="headerlink" title="1.5 删除topic"></a>1.5 删除topic</h3><p>方法一（配置delete.topic.enable=true）</p><pre><code>  修改kafaka配置文件server.properties， 添加delete.topic.enable=true，重启kafka，之后通过kafka命令行就可以直接删除topic  通过命令行删除topic：    .\bin\windows\kafka-topics.bat --delete --zookeeper {zookeeper server} --topic {topic name}</code></pre><p>方法二（没有配置delete.topic.enable=true）</p><pre><code>1、通过命令行删除topic：.\bin\windows\kafka-topics.bat --delete --zookeeper {zookeeper server} --topic {topic name}因为kafaka配置文件中server.properties没有配置delete.topic.enable=true，此时的删除并不是真正的删除，只是把topic标记为：marked for deletion你可以通过命令：.\bin\windows\kafka-topics.bat --zookeeper {zookeeper server} --list 来查看所有topic2、删除kafka存储目录（server.properties文件log.dirs配置）相关topic目录3， 若想真正删除它，需要登录zookeeper客户端：  命令：./bin/zkCli.cmd  找到topic所在的目录：ls /brokers/topics   执行命令：rmr /brokers/topics/{topic name}即可，此时topic被彻底删除。</code></pre><p><img src="https://img-blog.csdnimg.cn/20200316143609400.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;近日在做一个Golang的日志收集系统需要用到Kafka, 因苦于笔记本电脑虚拟机出了点问题, 所以在本文记录Windows10安装Kafka的过程&lt;/p&gt;
&lt;h2 id=&quot;搭建过程&quot;&gt;&lt;a href=&quot;#搭建过程&quot; class=&quot;headerlink&quot; title=&quot;搭建
      
    
    </summary>
    
      <category term="Golang" scheme="https://plutoacharon.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://plutoacharon.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Golang语言学习从入门到实战----HTTP web开发编程</title>
    <link href="https://plutoacharon.github.io/2020/03/17/Golang%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98-HTTP-web%E5%BC%80%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    <id>https://plutoacharon.github.io/2020/03/17/Golang语言学习从入门到实战-HTTP-web开发编程/</id>
    <published>2020-03-17T09:23:24.000Z</published>
    <updated>2020-03-17T09:24:34.926Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-HTTP编程"><a href="#1-HTTP编程" class="headerlink" title="1. HTTP编程"></a>1. HTTP编程</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">"/"</span>, Hello)</span><br><span class="line">http.HandleFunc(<span class="string">"/usr/login"</span>, login)</span><br><span class="line">http.HandleFunc(<span class="string">"/usr/history"</span>, history)</span><br><span class="line">err := http.ListenAndServe(<span class="string">"0.0.0.0:8880"</span>, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"http listen failed"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Hello</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"handle hello"</span>)</span><br><span class="line">_, _ = fmt.Fprintf(w, <span class="string">"hello !"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">login</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"handle login"</span>)</span><br><span class="line">_, _ = fmt.Fprintf(w, <span class="string">"hello login !"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">history</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"handle history"</span>)</span><br><span class="line">_, _ = fmt.Fprintf(w, <span class="string">"hello history!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打开浏览器访问本地的8880端口(因为我这里设置的是8880端口)<br><img src="https://img-blog.csdnimg.cn/20200315164513712.png" alt="在"><br><img src="https://img-blog.csdnimg.cn/20200315164539346.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020031516452943.png" alt="在这里插入图片描述"></p><h3 id="2-HTTP-Client"><a href="#2-HTTP-Client" class="headerlink" title="2. HTTP Client"></a>2. HTTP Client</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo2</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">res, err := http.Get(<span class="string">"https://www.baidu.com"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"get err"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data, err := ioutil.ReadAll(res.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"data err"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(data))</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以<code>GET</code>请求访问百度, 返回的网页信息<br><img src="https://img-blog.csdnimg.cn/20200315164658102.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="3-表单处理"><a href="#3-表单处理" class="headerlink" title="3. 表单处理"></a>3. 表单处理</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义Html页面的显示表单</span></span><br><span class="line"><span class="keyword">const</span> form = <span class="string">` </span></span><br><span class="line"><span class="string">&lt;html lang="en"&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">&lt;meta http-equiv="Content-Type" content="text/html;charset=UTF-8" /&gt;</span></span><br><span class="line"><span class="string">&lt;title&gt;产品添加-产品管理系统&lt;/title&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;h3&gt;产品管理表单&lt;/h3&gt;</span></span><br><span class="line"><span class="string">&lt;form action="#" method="post"&gt;</span></span><br><span class="line"><span class="string">图书名称：&lt;input type='text' name='title' /&gt;</span></span><br><span class="line"><span class="string">&lt;hr /&gt;</span></span><br><span class="line"><span class="string">销售价格：&lt;input type="text" name='price' /&gt;</span></span><br><span class="line"><span class="string">&lt;hr /&gt;</span></span><br><span class="line"><span class="string">市场价格：&lt;input type="text" name='market_price' /&gt;</span></span><br><span class="line"><span class="string">&lt;hr /&gt;</span></span><br><span class="line"><span class="string">&lt;input type="submit" name="submit" value="添加" /&gt;</span></span><br><span class="line"><span class="string">&lt;input type="reset" name="reset" value="重置" /&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">formServer</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class="line">writer.Header().Set(<span class="string">"Content-Type"</span>, <span class="string">"text/html"</span>)</span><br><span class="line"><span class="keyword">switch</span> request.Method &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"GET"</span>: <span class="comment">// 直接访问时为GET请求</span></span><br><span class="line">_, _ = io.WriteString(writer, form)</span><br><span class="line"><span class="keyword">case</span> <span class="string">"POST"</span>: <span class="comment">// 提交表单为POST请求</span></span><br><span class="line">_ = request.ParseForm()</span><br><span class="line">_, _ = io.WriteString(writer, <span class="string">"title = "</span>)</span><br><span class="line">_, _ = io.WriteString(writer, request.Form[<span class="string">"title"</span>][<span class="number">0</span>]+<span class="string">"\n"</span>)</span><br><span class="line">_, _ = io.WriteString(writer, <span class="string">"price = "</span>)</span><br><span class="line">_, _ = io.WriteString(writer, request.Form[<span class="string">"price"</span>][<span class="number">0</span>]+<span class="string">"\n"</span>)</span><br><span class="line">_, _ = io.WriteString(writer, <span class="string">"market_price = "</span>)</span><br><span class="line">_, _ = io.WriteString(writer, request.Form[<span class="string">"market_price"</span>][<span class="number">0</span>]+<span class="string">"\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">simpleServer</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class="line">_, _ = io.WriteString(writer, <span class="string">"&lt;h1&gt;Hello ! This is test1"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">"/test1"</span>, simpleServer) <span class="comment">// localhost:8880/test1 访问simpleServer定义的页面</span></span><br><span class="line">http.HandleFunc(<span class="string">"/test2"</span>, formServer)   <span class="comment">// localhost:8880/test2 访问formServer定义的页面</span></span><br><span class="line"><span class="keyword">if</span> err := http.ListenAndServe(<span class="string">"0.0.0.0:8880"</span>, <span class="literal">nil</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>http://localhost:8880/test1</code>  可以访问到设置的test1页面<br><img src="https://img-blog.csdnimg.cn/20200315164806362.png" alt="在这里插入图片描述"><br><code>http://localhost:8880/test2</code>  可以访问到设置的test2页面<br><img src="https://img-blog.csdnimg.cn/20200315164845137.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>提交表单会返回输入的值<br><img src="https://img-blog.csdnimg.cn/20200315164908387.png" alt="在这里插入图片描述"></p><h3 id="4-捕获Panic错误处理"><a href="#4-捕获Panic错误处理" class="headerlink" title="4. 捕获Panic错误处理"></a>4. 捕获Panic错误处理</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义Html页面的显示表单</span></span><br><span class="line"><span class="keyword">const</span> form = <span class="string">` </span></span><br><span class="line"><span class="string">&lt;html lang="en"&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">&lt;meta http-equiv="Content-Type" content="text/html;charset=UTF-8" /&gt;</span></span><br><span class="line"><span class="string">&lt;title&gt;产品添加-产品管理系统&lt;/title&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;h3&gt;产品管理表单&lt;/h3&gt;</span></span><br><span class="line"><span class="string">&lt;form action="#" method="post"&gt;</span></span><br><span class="line"><span class="string">图书名称：&lt;input type='text' name='title' /&gt;</span></span><br><span class="line"><span class="string">&lt;hr /&gt;</span></span><br><span class="line"><span class="string">销售价格：&lt;input type="text" name='price' /&gt;</span></span><br><span class="line"><span class="string">&lt;hr /&gt;</span></span><br><span class="line"><span class="string">市场价格：&lt;input type="text" name='market_price' /&gt;</span></span><br><span class="line"><span class="string">&lt;hr /&gt;</span></span><br><span class="line"><span class="string">&lt;input type="submit" name="submit" value="添加" /&gt;</span></span><br><span class="line"><span class="string">&lt;input type="reset" name="reset" value="重置" /&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">formServer</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class="line">writer.Header().Set(<span class="string">"Content-Type"</span>, <span class="string">"text/html"</span>)</span><br><span class="line"><span class="keyword">switch</span> request.Method &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"GET"</span>: <span class="comment">// 直接访问时为GET请求</span></span><br><span class="line">_, _ = io.WriteString(writer, form)</span><br><span class="line"><span class="keyword">case</span> <span class="string">"POST"</span>: <span class="comment">// 提交表单为POST请求</span></span><br><span class="line">_ = request.ParseForm()</span><br><span class="line">_, _ = io.WriteString(writer, <span class="string">"title = "</span>)</span><br><span class="line">_, _ = io.WriteString(writer, request.Form[<span class="string">"title"</span>][<span class="number">0</span>]+<span class="string">"\n"</span>)</span><br><span class="line">_, _ = io.WriteString(writer, <span class="string">"price = "</span>)</span><br><span class="line">_, _ = io.WriteString(writer, request.Form[<span class="string">"price"</span>][<span class="number">0</span>]+<span class="string">"\n"</span>)</span><br><span class="line">_, _ = io.WriteString(writer, <span class="string">"market_price = "</span>)</span><br><span class="line">_, _ = io.WriteString(writer, request.Form[<span class="string">"market_price"</span>][<span class="number">0</span>]+<span class="string">"\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">simpleServer</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class="line">_, _ = io.WriteString(writer, <span class="string">"&lt;h1&gt;Hello ! This is test1"</span>)</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">"This is a panic test !"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">logPanics</span><span class="params">(handle http.HandlerFunc)</span> <span class="title">http</span>.<span class="title">HandlerFunc</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> x := <span class="built_in">recover</span>(); x!=<span class="literal">nil</span>&#123;</span><br><span class="line">log.Printf(<span class="string">"[%v] caught panic: %v"</span>,request.RemoteAddr, x)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">handle(writer, request)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">"/test1"</span>, logPanics(simpleServer)) <span class="comment">// localhost:8880/test1 访问simpleServer定义的页面</span></span><br><span class="line">http.HandleFunc(<span class="string">"/test2"</span>, logPanics(formServer))   <span class="comment">// localhost:8880/test2 访问formServer定义的页面</span></span><br><span class="line"><span class="keyword">if</span> err := http.ListenAndServe(<span class="string">"0.0.0.0:8880"</span>, <span class="literal">nil</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该<code>Demo</code>添加了<code>panic</code>处理函数<code>logPanics</code>, 可以在终端查看捕获的Panic信息<br><img src="https://img-blog.csdnimg.cn/20200315165017664.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="5-调用模板网页"><a href="#5-调用模板网页" class="headerlink" title="5. 调用模板网页"></a>5. 调用模板网页</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"html/template"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Age  <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">t, err := template.ParseFiles(<span class="string">"E:/Go/Golang_Studycode/src/demoCode/domo5/index.html"</span>) <span class="comment">// index.html路径</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">" Parse file err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">p := Person&#123;Name:<span class="string">"Jack"</span>, Age:<span class="string">"20"</span>&#125;</span><br><span class="line"><span class="keyword">if</span> err := t.Execute(os.Stdout, p); err != <span class="literal">nil</span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"There was an erros:"</span>,err.Error())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>index.php</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>This is a test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span> this is a test!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span> Hello &#123;&#123;.Name&#125;&#125; , you age is &#123;&#123;.Age&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="https://img-blog.csdnimg.cn/20200315165136975.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-HTTP编程&quot;&gt;&lt;a href=&quot;#1-HTTP编程&quot; class=&quot;headerlink&quot; title=&quot;1. HTTP编程&quot;&gt;&lt;/a&gt;1. HTTP编程&lt;/h3&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
      
    
    </summary>
    
      <category term="Golang" scheme="https://plutoacharon.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://plutoacharon.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Golang语言学习从入门到实战----编写简单的TCP/IP聊天室</title>
    <link href="https://plutoacharon.github.io/2020/03/17/Golang%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98-%E7%BC%96%E5%86%99%E7%AE%80%E5%8D%95%E7%9A%84TCP-IP%E8%81%8A%E5%A4%A9%E5%AE%A4/"/>
    <id>https://plutoacharon.github.io/2020/03/17/Golang语言学习从入门到实战-编写简单的TCP-IP聊天室/</id>
    <published>2020-03-17T09:23:03.000Z</published>
    <updated>2020-03-17T09:24:39.651Z</updated>
    
    <content type="html"><![CDATA[<h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><p>首先启动server端:<br><img src="https://img-blog.csdnimg.cn/20200313173553999.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>启动client端,输入文本<br><img src="https://img-blog.csdnimg.cn/20200313173624926.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>Server端接收:<br><img src="https://img-blog.csdnimg.cn/20200313173638924.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">├─client</span><br><span class="line">│      client.go</span><br><span class="line">│</span><br><span class="line">└─server</span><br><span class="line">        server.go</span><br></pre></td></tr></table></figure><h4 id="代码详细"><a href="#代码详细" class="headerlink" title="代码详细"></a>代码详细</h4><p><code>client.go</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bufio"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">conn, err := net.Dial(<span class="string">"tcp"</span>, <span class="string">"192.168.0.11:8888"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"err="</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">// 客户端可以发送单行数据,然后就退出</span></span><br><span class="line">reader := bufio.NewReader(os.Stdin)</span><br><span class="line"><span class="comment">// 读入一行输入</span></span><br><span class="line">line, err := reader.ReadString(<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"readString err="</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">line = strings.Trim(line, <span class="string">" \r\n"</span>)</span><br><span class="line"><span class="keyword">if</span> line == <span class="string">"exit"</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"客户端退出"</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 发送到服务器</span></span><br><span class="line">_, err = conn.Write([]<span class="keyword">byte</span>(line))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Write err = "</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//fmt.Printf("客户端发送了 %d 字节的数据\n", n)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>server,go</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">process</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">// 创建一个新的切片</span></span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">1024</span>)</span><br><span class="line"><span class="comment">//fmt.Printf("服务器在等待客户端%s 发送信息\n", conn.RemoteAddr().String())</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待客户端发送信息</span></span><br><span class="line">n, err := conn.Read(buf)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"服务器退出, err="</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 显示客户端发送的内容到服务器的终端</span></span><br><span class="line">fmt.Println(<span class="keyword">string</span>(buf[:n]))</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"服务器开始监听"</span>)</span><br><span class="line">listen, err := net.Listen(<span class="string">"tcp"</span>, <span class="string">"0.0.0.0:8888"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"listen err = "</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> listen.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"等待客户端来连接"</span>)</span><br><span class="line">conn, err := listen.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Accept() err = "</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Accept suc con=%v, 客户端IP=%v"</span>, conn, conn.RemoteAddr().String())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 起一个协程, 为客户端服务</span></span><br><span class="line"><span class="keyword">go</span> process(conn)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;效果展示&quot;&gt;&lt;a href=&quot;#效果展示&quot; class=&quot;headerlink&quot; title=&quot;效果展示&quot;&gt;&lt;/a&gt;效果展示&lt;/h3&gt;&lt;p&gt;首先启动server端:&lt;br&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200313
      
    
    </summary>
    
      <category term="Golang" scheme="https://plutoacharon.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://plutoacharon.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Golang语言学习从入门到实战----基于Golang的客户关系管理系统</title>
    <link href="https://plutoacharon.github.io/2020/03/17/Golang%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98-%E5%9F%BA%E4%BA%8EGolang%E7%9A%84%E5%AE%A2%E6%88%B7%E5%85%B3%E7%B3%BB%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <id>https://plutoacharon.github.io/2020/03/17/Golang语言学习从入门到实战-基于Golang的客户关系管理系统/</id>
    <published>2020-03-17T09:22:42.000Z</published>
    <updated>2020-03-17T09:24:46.132Z</updated>
    
    <content type="html"><![CDATA[<h2 id="客户关系管理系统"><a href="#客户关系管理系统" class="headerlink" title="客户关系管理系统"></a>客户关系管理系统</h2><p>GitHub地址:<code>https://github.com/PlutoaCharon/Golang_customerManager</code></p><p>运行:<code>go run $GOPATH/customerManager(存放该项目的文件夹)/view/customerView.go</code></p><h4 id="项目展示"><a href="#项目展示" class="headerlink" title="项目展示"></a>项目展示</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">----------------------客户信息管理软件----------------------</span><br><span class="line">                  1 添加客户</span><br><span class="line">                  2 修改客户</span><br><span class="line">                  3 删除客户</span><br><span class="line">                  4 客户列表</span><br><span class="line">                  5 退   出</span><br><span class="line">请选择(1-5)：</span><br></pre></td></tr></table></figure><h4 id="文件介绍"><a href="#文件介绍" class="headerlink" title="文件介绍"></a>文件介绍</h4><p><code>view.customerView.go</code></p><ul><li>显示界面</li><li>接收用户的输入</li><li>根据用户的输入，调用<code>cust   omerService</code>的方法完成客户的管理<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list 去调用 customerService 的List方法，并显示客户列表</span><br><span class="line">add 方法去调用 customerService 的Add方法, 完成客户添加</span><br><span class="line">delete 方法 调用 customerService 的Delete方法, 完成客户删除</span><br><span class="line">update 方法调用 customerService 的Update方法, 完成客户修改</span><br></pre></td></tr></table></figure></li></ul><p><code>service.customerService</code></p><ul><li>完成对用户的各种操作</li><li>对客户的增，删除，修改，显示</li><li>会声明一个customer的切片<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List 返回客户信息</span><br><span class="line">NewCustomerService 返回一个customerService实例</span><br><span class="line">Add 将新的客户加入到 customers </span><br><span class="line">Delete(id int)  删除一个客户</span><br><span class="line">FindById(id int)  返回id号对应的切片的下标</span><br><span class="line">Update(id int, customer model.Customer) 修改客户</span><br></pre></td></tr></table></figure></li></ul><p><code>model.customer</code> </p><ul><li>表示一个客户</li><li>客户各种字段<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">customer 表示一个客户信息</span><br><span class="line"></span><br><span class="line">type  Customer struct &#123;</span><br><span class="line">Id int</span><br><span class="line">Name string</span><br><span class="line">Gender string...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GetInfo 显示该用户的信息</span><br><span class="line">NewCustomer2() 返回客户的方法</span><br></pre></td></tr></table></figure></li></ul><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">├─customerManager</span><br><span class="line">│  │  README.md</span><br><span class="line">│  │</span><br><span class="line">│  ├─model</span><br><span class="line">│  │      customer.<span class="keyword">go</span></span><br><span class="line">│  │</span><br><span class="line">│  ├─service</span><br><span class="line">│  │      customerService.<span class="keyword">go</span></span><br><span class="line">│  │</span><br><span class="line">│  └─view</span><br><span class="line">│          customerView.<span class="keyword">go</span></span><br></pre></td></tr></table></figure><h4 id="代码详细"><a href="#代码详细" class="headerlink" title="代码详细"></a>代码详细</h4><p><code>customer.go</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> model</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个Customer结构体, 表示一个客户信息</span></span><br><span class="line"><span class="keyword">type</span> Customer <span class="keyword">struct</span> &#123;</span><br><span class="line">Id          <span class="keyword">int</span></span><br><span class="line">Name        <span class="keyword">string</span></span><br><span class="line">Gender      <span class="keyword">string</span></span><br><span class="line">Age         <span class="keyword">int</span></span><br><span class="line">PhoneNumber <span class="keyword">string</span></span><br><span class="line">Email       <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编写一个工厂模式, 返回一个Customer的实例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewCustomer</span><span class="params">(id <span class="keyword">int</span>, name <span class="keyword">string</span>, gender <span class="keyword">string</span>, age <span class="keyword">int</span>, phonenumber <span class="keyword">string</span>, email <span class="keyword">string</span>)</span> <span class="title">Customer</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> Customer&#123;</span><br><span class="line">Id:          id,</span><br><span class="line">Name:        name,</span><br><span class="line">Gender:      gender,</span><br><span class="line">Age:         age,</span><br><span class="line">PhoneNumber: phonenumber,</span><br><span class="line">Email:       email,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建不带Id的实例方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewCustomer2</span><span class="params">(name <span class="keyword">string</span>, gender <span class="keyword">string</span>, age <span class="keyword">int</span>, phone <span class="keyword">string</span>, email <span class="keyword">string</span>)</span> <span class="title">Customer</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> Customer&#123;</span><br><span class="line">Name:        name,</span><br><span class="line">Gender:      gender,</span><br><span class="line">Age:         age,</span><br><span class="line">PhoneNumber: phone,</span><br><span class="line">Email:       email,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回用户的信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(customer Customer)</span> <span class="title">GetInfo</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">info := fmt.Sprintf(<span class="string">"%v\t%v\t%v\t%v\t%v\t%v\n"</span>,</span><br><span class="line">customer.Id, customer.Name, customer.Gender, customer.Age, customer.PhoneNumber, customer.Email)</span><br><span class="line"><span class="keyword">return</span> info</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>customerService.go</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> service</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"customerManager/model"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 该CustomerService, 完成对Customer的操作, 包括增删改查</span></span><br><span class="line"><span class="keyword">type</span> CustomerService <span class="keyword">struct</span> &#123;</span><br><span class="line">customers   []model.Customer</span><br><span class="line">customerNum <span class="keyword">int</span> <span class="comment">// 声明一个字段, 表示当前切片含有多少个客户</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewCustomerService</span><span class="params">()</span> *<span class="title">CustomerService</span></span> &#123;</span><br><span class="line">customerService := &amp;CustomerService&#123;&#125;</span><br><span class="line">customerService.customerNum = <span class="number">1</span></span><br><span class="line">customer := model.NewCustomer(<span class="number">1</span>, <span class="string">"小明"</span>, <span class="string">"男"</span>, <span class="number">20</span>, <span class="string">"12345678"</span>, <span class="string">"xiaoming@qq.com"</span>)</span><br><span class="line">customerService.customers = <span class="built_in">append</span>(customerService.customers, customer) <span class="comment">// 使用切片将数据添加</span></span><br><span class="line"><span class="keyword">return</span> customerService</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示客户列表, 返回客户切片</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CustomerService)</span> <span class="title">List</span><span class="params">()</span> []<span class="title">model</span>.<span class="title">Customer</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.customers</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加客户</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CustomerService)</span> <span class="title">Add</span><span class="params">(customer model.Customer)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">c.customerNum++</span><br><span class="line">customer.Id = c.customerNum</span><br><span class="line">c.customers = <span class="built_in">append</span>(c.customers, customer)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据id删除客户</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CustomerService)</span> <span class="title">Delete</span><span class="params">(id <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">index := c.FindById(id)</span><br><span class="line"><span class="comment">//如果index == -1, 说明没有这个客户</span></span><br><span class="line"><span class="keyword">if</span> index == <span class="number">-1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 从切片中删除一个元素</span></span><br><span class="line">c.customers = <span class="built_in">append</span>(c.customers[:index], c.customers[index+<span class="number">1</span>:]...)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据id查找客户在切片中对应下标,如果没有该客户，返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CustomerService)</span> <span class="title">FindById</span><span class="params">(id <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">index := <span class="number">-1</span></span><br><span class="line"><span class="comment">//遍历this.customers 寻找Id号</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(c.customers); i++ &#123;</span><br><span class="line"><span class="keyword">if</span> c.customers[i].Id == id &#123;</span><br><span class="line">index = i</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> index</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改客户</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CustomerService)</span> <span class="title">Update</span><span class="params">(id <span class="keyword">int</span>, customer model.Customer)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">index := c.FindById(id)</span><br><span class="line"><span class="comment">//如果index == -1, 说明没有这个客户</span></span><br><span class="line"><span class="keyword">if</span> index == <span class="number">-1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 修改客户</span></span><br><span class="line">c.customers[index<span class="number">-1</span>] = customer</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>customerView.go</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"customerManager/model"</span></span><br><span class="line"><span class="string">"customerManager/service"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> customerView <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 定义必要字段</span></span><br><span class="line">key             <span class="keyword">string</span> <span class="comment">// 输入字符</span></span><br><span class="line">loop            <span class="keyword">bool</span>   <span class="comment">// 表示是否循环显示菜单</span></span><br><span class="line">customerService *service.CustomerService</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示所有的客户信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cv *customerView)</span> <span class="title">list</span><span class="params">()</span></span> &#123;</span><br><span class="line">customers := cv.customerService.List()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示</span></span><br><span class="line">fmt.Println(<span class="string">"---------------------------客户列表---------------------------"</span>)</span><br><span class="line">fmt.Printf(<span class="string">"编号\t姓名\t性别\t年龄\t电话\t邮箱\n"</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(customers); i++ &#123;</span><br><span class="line">fmt.Printf(customers[i].GetInfo())</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"\n-------------------------客户列表完成-------------------------\n\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改客户</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *customerView)</span> <span class="title">update</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"请输入待修改的客户编号(-1)退出:"</span>)</span><br><span class="line">id := <span class="number">-1</span></span><br><span class="line">_, _ = fmt.Scanln(&amp;id)</span><br><span class="line"><span class="keyword">if</span> id == <span class="number">-1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="comment">//放弃删除操作</span></span><br><span class="line">&#125;</span><br><span class="line">customer := c.getUserInput()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> c.customerService.Update(id, customer) &#123;</span><br><span class="line">fmt.Println(<span class="string">"---------------------修改完成---------------------"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"---------------------修改失败，输入的id号不存在----"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加用户</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *customerView)</span> <span class="title">add</span><span class="params">()</span></span> &#123;</span><br><span class="line">customer := c.getUserInput()</span><br><span class="line"><span class="comment">// id是唯一的，需要系统分配</span></span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="keyword">if</span> c.customerService.Add(customer) &#123;</span><br><span class="line">fmt.Println(<span class="string">"---------------------添加完成---------------------"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"---------------------添加失败---------------------"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除用户</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *customerView)</span> <span class="title">delete</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"---------------------删除客户---------------------"</span>)</span><br><span class="line">fmt.Println(<span class="string">"请选择待删除客户编号(-1退出)："</span>)</span><br><span class="line">id := <span class="number">-1</span></span><br><span class="line">_, _ = fmt.Scanln(&amp;id)</span><br><span class="line"><span class="keyword">if</span> id == <span class="number">-1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="comment">//放弃删除操作</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"确认是否删除(Y/N)："</span>)</span><br><span class="line"><span class="comment">//这里同学们可以加入一个循环判断，直到用户输入 y 或者 n,才退出..</span></span><br><span class="line">choice := <span class="string">""</span></span><br><span class="line">_, _ = fmt.Scanln(&amp;choice)</span><br><span class="line"><span class="keyword">if</span> choice == <span class="string">"y"</span> || choice == <span class="string">"Y"</span> &#123;</span><br><span class="line"><span class="comment">//调用customerService 的 Delete方法</span></span><br><span class="line"><span class="keyword">if</span> c.customerService.Delete(id) &#123;</span><br><span class="line">fmt.Println(<span class="string">"---------------------删除完成---------------------"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"---------------------删除失败，输入的id号不存在----"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 退出系统</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *customerView)</span> <span class="title">exit</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"确认是否退出(Y/N):"</span>)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">_, _ = fmt.Scanln(&amp;c.key)</span><br><span class="line"><span class="keyword">if</span> c.key == <span class="string">"Y"</span> || c.key == <span class="string">"N"</span> || c.key == <span class="string">"y"</span> || c.key == <span class="string">"n"</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"输入有误, 确认是否退出(Y/N)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> c.key == <span class="string">"Y"</span> || c.key == <span class="string">"y"</span> &#123;</span><br><span class="line">c.loop = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 填入信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *customerView)</span> <span class="title">getUserInput</span><span class="params">()</span> <span class="title">model</span>.<span class="title">Customer</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"姓名："</span>)</span><br><span class="line">name := <span class="string">""</span></span><br><span class="line">_, _ = fmt.Scanln(&amp;name)</span><br><span class="line">fmt.Printf(<span class="string">"性别："</span>)</span><br><span class="line">gender := <span class="string">""</span></span><br><span class="line">_, _ = fmt.Scanln(&amp;gender)</span><br><span class="line">fmt.Printf(<span class="string">"年龄："</span>)</span><br><span class="line">age := <span class="number">0</span></span><br><span class="line">_, _ = fmt.Scanln(&amp;age)</span><br><span class="line">fmt.Printf(<span class="string">"电话："</span>)</span><br><span class="line">phone := <span class="string">""</span></span><br><span class="line">_, _ = fmt.Scanln(&amp;phone)</span><br><span class="line">fmt.Printf(<span class="string">"邮箱："</span>)</span><br><span class="line">email := <span class="string">""</span></span><br><span class="line">_, _ = fmt.Scanln(&amp;email)</span><br><span class="line">customer := model.NewCustomer2(name, gender, age, phone, email)</span><br><span class="line"><span class="keyword">return</span> customer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示主菜单</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cv *customerView)</span> <span class="title">mainMenu</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"----------------------客户信息管理软件----------------------"</span>)</span><br><span class="line">fmt.Println(<span class="string">"                  1 添加客户"</span>)</span><br><span class="line">fmt.Println(<span class="string">"                  2 修改客户"</span>)</span><br><span class="line">fmt.Println(<span class="string">"                  3 删除客户"</span>)</span><br><span class="line">fmt.Println(<span class="string">"                  4 客户列表"</span>)</span><br><span class="line">fmt.Println(<span class="string">"                  5 退   出"</span>)</span><br><span class="line">fmt.Print(<span class="string">"请选择(1-5)："</span>)</span><br><span class="line"></span><br><span class="line">_, _ = fmt.Scanln(&amp;cv.key)</span><br><span class="line"><span class="keyword">switch</span> cv.key &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"1"</span>:</span><br><span class="line">cv.add()</span><br><span class="line"><span class="keyword">case</span> <span class="string">"2"</span>:</span><br><span class="line">cv.update()</span><br><span class="line"><span class="keyword">case</span> <span class="string">"3"</span>:</span><br><span class="line">cv.<span class="built_in">delete</span>()</span><br><span class="line"><span class="keyword">case</span> <span class="string">"4"</span>:</span><br><span class="line">cv.list()</span><br><span class="line"><span class="keyword">case</span> <span class="string">"5"</span>:</span><br><span class="line">cv.exit()</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">"你的输入有误,请重新输入"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !cv.loop &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"退出客户关系管理系统"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 显示主菜单</span></span><br><span class="line">customerView := customerView&#123;</span><br><span class="line">key:  <span class="string">""</span>,</span><br><span class="line">loop: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 对customerView结构体的customerService字段的初始化</span></span><br><span class="line">customerView.customerService = service.NewCustomerService()</span><br><span class="line"><span class="comment">// 显示主菜单</span></span><br><span class="line">customerView.mainMenu()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;客户关系管理系统&quot;&gt;&lt;a href=&quot;#客户关系管理系统&quot; class=&quot;headerlink&quot; title=&quot;客户关系管理系统&quot;&gt;&lt;/a&gt;客户关系管理系统&lt;/h2&gt;&lt;p&gt;GitHub地址:&lt;code&gt;https://github.com/PlutoaCharon
      
    
    </summary>
    
      <category term="Golang" scheme="https://plutoacharon.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://plutoacharon.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Golang语言学习从入门到实战----基于Golang实现简单家庭收支项目</title>
    <link href="https://plutoacharon.github.io/2020/03/17/Golang%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98-%E5%9F%BA%E4%BA%8EGolang%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E5%AE%B6%E5%BA%AD%E6%94%B6%E6%94%AF%E9%A1%B9%E7%9B%AE/"/>
    <id>https://plutoacharon.github.io/2020/03/17/Golang语言学习从入门到实战-基于Golang实现简单家庭收支项目/</id>
    <published>2020-03-17T09:22:22.000Z</published>
    <updated>2020-03-17T09:24:51.393Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基于Golang实现简单家庭收支项目"><a href="#基于Golang实现简单家庭收支项目" class="headerlink" title="基于Golang实现简单家庭收支项目"></a>基于Golang实现简单家庭收支项目</h2><p>GitHub地址:<code>https://github.com/PlutoaCharon/Golang_FamilyAccount.git</code></p><p>该项目可以简单的进行,明细,登记收入和支出操作</p><p>实现界面:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-----------------家庭收支记账软件-----------------</span><br><span class="line">                  1 收支明细</span><br><span class="line">                  2 登记收入</span><br><span class="line">                  3 登记支出</span><br><span class="line">                  4 退出软件</span><br><span class="line">请选择(1-4)：</span><br></pre></td></tr></table></figure></p><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">└─FamilyAccount</span><br><span class="line">    │  README.md</span><br><span class="line">    │</span><br><span class="line">    ├─main</span><br><span class="line">    │      mian.go</span><br><span class="line">    │</span><br><span class="line">    └─utils</span><br><span class="line">            familyAccount.go</span><br></pre></td></tr></table></figure><h3 id="familyAccount-go"><a href="#familyAccount-go" class="headerlink" title="familyAccount.go"></a><code>familyAccount.go</code></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> utils</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> FamilyAccount <span class="keyword">struct</span> &#123;</span><br><span class="line">key     <span class="keyword">string</span>  <span class="comment">// 保存接受用户输入的选项</span></span><br><span class="line">loop    <span class="keyword">bool</span>    <span class="comment">// 控制是否退出for</span></span><br><span class="line">balance <span class="keyword">float64</span> <span class="comment">// 定义账户的余额</span></span><br><span class="line">money   <span class="keyword">float64</span> <span class="comment">// 每次收支的金额</span></span><br><span class="line">note    <span class="keyword">string</span>  <span class="comment">// 每次收支的说明</span></span><br><span class="line">flag    <span class="keyword">bool</span>    <span class="comment">// 记录是否有收支的行为</span></span><br><span class="line">details <span class="keyword">string</span>  <span class="comment">// 对收支进行拼接处理</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造方法，返回一个*FamilyAccount实例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewFamilyAccount</span><span class="params">()</span> *<span class="title">FamilyAccount</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;FamilyAccount&#123;</span><br><span class="line">key:     <span class="string">""</span>,</span><br><span class="line">loop:    <span class="literal">true</span>,</span><br><span class="line">balance: <span class="number">10000.0</span>,</span><br><span class="line">money:   <span class="number">0.0</span>,</span><br><span class="line">note:    <span class="string">""</span>,</span><br><span class="line">flag:    <span class="literal">false</span>,</span><br><span class="line">details: <span class="string">"收支\t账户金额\t收支金额\t说明"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示明细</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *FamilyAccount)</span> <span class="title">showDetails</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"----------------------当前收支明细记录----------------------"</span>)</span><br><span class="line"><span class="keyword">if</span> this.flag &#123;</span><br><span class="line">fmt.Println(this.details)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"当前没有收支明细,来一笔吧!"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 登记记录</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *FamilyAccount)</span> <span class="title">income</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"本次收入金额:"</span>)</span><br><span class="line">fmt.Scanln(&amp;this.money)</span><br><span class="line">this.balance += this.money <span class="comment">// 修改账户余额</span></span><br><span class="line">fmt.Println(<span class="string">"本次收入说明:"</span>)</span><br><span class="line">fmt.Scanln(&amp;this.note)</span><br><span class="line">this.details += fmt.Sprintf(<span class="string">"\n收入\t%v\t%v\t%v"</span>, this.balance, this.money, this.note)</span><br><span class="line">this.flag = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 登记支出</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *FamilyAccount)</span> <span class="title">pay</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"本次支出金额:"</span>)</span><br><span class="line">fmt.Scanln(&amp;this.money)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> this.money &gt; this.balance &#123;</span><br><span class="line">fmt.Println(<span class="string">"余额不足"</span>)</span><br><span class="line">&#125;</span><br><span class="line">this.balance -= this.money</span><br><span class="line">fmt.Println(<span class="string">"本次支出说明:"</span>)</span><br><span class="line">fmt.Scanln(&amp;this.note)</span><br><span class="line">this.details += fmt.Sprintf(<span class="string">"\n支出\t%v\t%v\t%v"</span>, this.balance, this.money, this.note)</span><br><span class="line">this.flag = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 退出系统</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *FamilyAccount)</span> <span class="title">exit</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"确认退出吗? 确定退出请输入y 否则输入n"</span>)</span><br><span class="line">choice := <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Scanln(&amp;choice)</span><br><span class="line"><span class="keyword">if</span> choice == <span class="string">"y"</span> &#123;</span><br><span class="line">this.loop = <span class="literal">false</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> choice == <span class="string">"n"</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"输入有误,请重新输入 y/n"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示主菜单</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *FamilyAccount)</span> <span class="title">MainMenu</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"\n-----------------家庭收支记账软件-----------------"</span>)</span><br><span class="line">fmt.Println(<span class="string">"                  1 收支明细"</span>)</span><br><span class="line">fmt.Println(<span class="string">"                  2 登记收入"</span>)</span><br><span class="line">fmt.Println(<span class="string">"                  3 登记支出"</span>)</span><br><span class="line">fmt.Println(<span class="string">"                  4 退出软件"</span>)</span><br><span class="line">fmt.Print(<span class="string">"请选择(1-4)："</span>)</span><br><span class="line">fmt.Scanln(&amp;this.key)</span><br><span class="line"><span class="keyword">switch</span> this.key &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"1"</span>:</span><br><span class="line">this.showDetails()</span><br><span class="line"><span class="keyword">case</span> <span class="string">"2"</span>:</span><br><span class="line">this.income()</span><br><span class="line"><span class="keyword">case</span> <span class="string">"3"</span>:</span><br><span class="line">this.pay()</span><br><span class="line"><span class="keyword">case</span> <span class="string">"4"</span>:</span><br><span class="line">this.exit()</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">"请输入正确的选项.."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !this.loop &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mian-go"><a href="#mian-go" class="headerlink" title="mian.go"></a><code>mian.go</code></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"FamilyAccount/utils"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">utils.NewFamilyAccount().MainMenu()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基于Golang实现简单家庭收支项目&quot;&gt;&lt;a href=&quot;#基于Golang实现简单家庭收支项目&quot; class=&quot;headerlink&quot; title=&quot;基于Golang实现简单家庭收支项目&quot;&gt;&lt;/a&gt;基于Golang实现简单家庭收支项目&lt;/h2&gt;&lt;p&gt;GitHub
      
    
    </summary>
    
      <category term="Golang" scheme="https://plutoacharon.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://plutoacharon.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Golang语言学习从入门到实战----接口</title>
    <link href="https://plutoacharon.github.io/2020/03/17/Golang%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98-%E6%8E%A5%E5%8F%A3/"/>
    <id>https://plutoacharon.github.io/2020/03/17/Golang语言学习从入门到实战-接口/</id>
    <published>2020-03-17T09:21:51.000Z</published>
    <updated>2020-03-17T09:24:22.298Z</updated>
    
    <content type="html"><![CDATA[<h2 id="接口概念说明"><a href="#接口概念说明" class="headerlink" title="接口概念说明"></a>接口概念说明</h2><p><code>interface</code>类型可以定义一组方法，但是这些不需要实现。并且<code>interface</code>不能包含任何变量。</p><p>当某个自定义类型要使用的时候,在根据具体情况把这些方法写出来。</p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p><img src="https://img-blog.csdnimg.cn/20200312145631274.png" alt="在这里插入图片描述"></p><ul><li>接口里的所有方法都没有方法体，即接口的方法都是没有实现的方法。接口体现了程序设计的<code>多态和高内聚低偶合</code>的思想。</li><li>Golang中的接口，不需要显式的实现。只要一个变量，含有接口类型中的所有方法，那么这个变量就实现这个接口。因此，Golang中没有<code>implement</code>这样的关键字</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Usb <span class="keyword">interface</span> &#123;</span><br><span class="line">Start()</span><br><span class="line">Stop()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Phone <span class="keyword">struct</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Phone)</span> <span class="title">Start</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"手机开始工作"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Phone)</span> <span class="title">Stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"手机停止"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Camera <span class="keyword">struct</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//让Camera实现Usb接口的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Camera)</span> <span class="title">Start</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"相机开始工作。。。"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(c Camera)</span> <span class="title">Stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"相机停止工作。。。"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Computer <span class="keyword">struct</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Computer)</span> <span class="title">Working</span><span class="params">(usb Usb)</span></span>&#123;</span><br><span class="line">usb.Start()</span><br><span class="line">usb.Stop()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">computer := Computer&#123;&#125;</span><br><span class="line">phone := Phone&#123;&#125;</span><br><span class="line">camera := Camera&#123;&#125;</span><br><span class="line"></span><br><span class="line">computer.Working(phone)</span><br><span class="line">computer.Working(camera)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">手机开始工作</span><br><span class="line">手机停止</span><br><span class="line">相机开始工作</span><br><span class="line">相机停止工作</span><br></pre></td></tr></table></figure></p><h3 id="注意事项和细节"><a href="#注意事项和细节" class="headerlink" title="注意事项和细节"></a>注意事项和细节</h3><p>1) 接口本身不能创建实例,但是可以指向一个实现了该接口的自定义类型的变量(实例)<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AInterface <span class="keyword">interface</span> &#123;</span><br><span class="line">Say()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Stu <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(stu Stu)</span> <span class="title">Say</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"Stu Say()"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> stu Stu</span><br><span class="line"><span class="keyword">var</span> a AInterface = stu</span><br><span class="line">a.Say()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stu Say()</span><br></pre></td></tr></table></figure></p><p>2) 接口中所有的方法都没有方法体,即都是没有实现的方法</p><p>3) 在Golang中，一个自定义类型需要将某个接口的所有方法都实现，我们说这个自定义类型实现了该接口</p><p>4) 一个自定义类型只有实现了某个接口，才能将该自定义类型的实例(变量)赋给接口类型</p><p>5) 只要是自定义数据类型，就可以实现接口，不仅仅是结构体类型</p><p>6) 一个自定义类型可以实现多个接口</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AInterface <span class="keyword">interface</span> &#123;</span><br><span class="line">Say()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> BInterface <span class="keyword">interface</span> &#123;</span><br><span class="line">Hello()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Monster <span class="keyword">struct</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m Monster)</span> <span class="title">Hello</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Hello Hello"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m Monster)</span> <span class="title">Say</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Say Hello"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> m Monster</span><br><span class="line"><span class="keyword">var</span> a AInterface = m</span><br><span class="line"><span class="keyword">var</span> b BInterface = m</span><br><span class="line">a.Say()</span><br><span class="line">b.Hello()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Say Hello</span><br><span class="line">Hello Hello</span><br></pre></td></tr></table></figure></p><p>7) Golang接口中不能有任何变量</p><p>8) 一个接口(比如A接口)可以继承多个别的接口(比如B,C接口)，这时如果要实现A接口，也必须将B,C接口的方法也全部实现<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AInterface <span class="keyword">interface</span> &#123;</span><br><span class="line">Say()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> BInterface <span class="keyword">interface</span> &#123;</span><br><span class="line">Hello()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CInterface <span class="keyword">interface</span> &#123;</span><br><span class="line">AInterface</span><br><span class="line">BInterface</span><br><span class="line">Run()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Monster <span class="keyword">struct</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m Monster)</span> <span class="title">Hello</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Hello Hello"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m Monster)</span> <span class="title">Say</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Say Hello"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m Monster)</span> <span class="title">Run</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"Runing"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> m Monster</span><br><span class="line"><span class="keyword">var</span> c CInterface = m</span><br><span class="line">c.Run()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>9) interface类型默认是一个指针(引用类型)，如果没有对<code>`</code>interface初始化就使用，那么会输出nil</p><p>10) 空接口interface{}没有任何方法，所以所有类型都实现了空接口,即我们可以把任何一个变量赋给空接口</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;接口概念说明&quot;&gt;&lt;a href=&quot;#接口概念说明&quot; class=&quot;headerlink&quot; title=&quot;接口概念说明&quot;&gt;&lt;/a&gt;接口概念说明&lt;/h2&gt;&lt;p&gt;&lt;code&gt;interface&lt;/code&gt;类型可以定义一组方法，但是这些不需要实现。并且&lt;code&gt;int
      
    
    </summary>
    
      <category term="Golang" scheme="https://plutoacharon.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://plutoacharon.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Liunx Shell编程入门----编写系统监控脚本与FTP探测脚本</title>
    <link href="https://plutoacharon.github.io/2020/03/12/Liunx-Shell%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8-%E7%BC%96%E5%86%99%E7%B3%BB%E7%BB%9F%E7%9B%91%E6%8E%A7%E8%84%9A%E6%9C%AC%E4%B8%8EFTP%E6%8E%A2%E6%B5%8B%E8%84%9A%E6%9C%AC/"/>
    <id>https://plutoacharon.github.io/2020/03/12/Liunx-Shell编程入门-编写系统监控脚本与FTP探测脚本/</id>
    <published>2020-03-12T04:26:03.000Z</published>
    <updated>2020-03-12T04:26:28.120Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-编写系统监控脚本sysmon-sh"><a href="#1-编写系统监控脚本sysmon-sh" class="headerlink" title="1. 编写系统监控脚本sysmon.sh"></a>1. 编写系统监控脚本sysmon.sh</h2><p>使该脚本实现: 监控系统中内存、cpu、磁盘的占用率</p><h3 id="1-1-命令解释"><a href="#1-1-命令解释" class="headerlink" title="1.1 命令解释"></a>1.1 命令解释</h3><h4 id="cat-proc-meminfo"><a href="#cat-proc-meminfo" class="headerlink" title="cat /proc/meminfo"></a><code>cat /proc/meminfo</code></h4><p><img src="https://img-blog.csdnimg.cn/20200312105343250.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><code>/proc/meminfo</code>是了解Linux系统内存使用状况的主要接口</p><p>我们最常用的<code>free</code>、<code>vmstat</code>等命令就是通过它获取数据的 ，<code>/proc/meminfo</code>所包含的信息比<code>free</code>等命令要丰富得多</p><h4 id="Linux-bc-命令"><a href="#Linux-bc-命令" class="headerlink" title="Linux bc 命令"></a>Linux <code>bc</code> 命令</h4><p>bc 命令是任意精度计算器语言，通常在linux下当计算器用。</p><p>它类似基本的计算器, 使用这个计算器可以做基本的数学运算。</p><p>提示系统没有bc命令,需要<code>yum install bc</code> 安装</p><h4 id="监控内存使用率"><a href="#监控内存使用率" class="headerlink" title="监控内存使用率"></a>监控内存使用率</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">memory_used_rate</span></span><br><span class="line">LoadMemory=$(cat /proc/meminfo | awk '&#123;print $2&#125;')</span><br><span class="line">Total=$(echo $LoadMemory | awk '&#123;print $1&#125;')</span><br><span class="line">Free1=$(echo $LoadMemory | awk '&#123;print $2&#125;')</span><br><span class="line">Free2=$(echo $LoadMemory | awk '&#123;print $3&#125;')</span><br><span class="line">Free3=$(echo $LoadMemory | awk '&#123;print $4&#125;')</span><br><span class="line">Used=`expr $Total - $Free1 - $Free2 - $Free3`</span><br><span class="line">Used_Rate=`expr  $Used/$Total*100 | bc -l`</span><br><span class="line">Memory_Used_Rate=`expr  $Used_Rate/1 | bc`</span><br><span class="line">echo $Memory_Used_Rate%</span><br></pre></td></tr></table></figure><h4 id="监控磁盘占用率"><a href="#监控磁盘占用率" class="headerlink" title="监控磁盘占用率"></a>监控磁盘占用率</h4><p>使用 <code>df</code>命令查看磁盘 <code>-h</code>格式化为方便查看的格式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# df -h /dev/sda*</span><br><span class="line">文件系统        容量  已用  可用 已用% 挂载点</span><br><span class="line">devtmpfs        475M     0  475M    0% /dev</span><br><span class="line">/dev/sda1      1014M  160M  855M   16% /boot</span><br><span class="line">devtmpfs        475M     0  475M    0% /dev</span><br></pre></td></tr></table></figure></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">disk_used_rate</span></span><br><span class="line">Location=/dev/sda1 # 这里根据自己的磁盘位置修改</span><br><span class="line">Disk_Used_Rate=$(df -h | grep $Location | awk '&#123;print $5&#125;')</span><br><span class="line">echo $Disk_Used_Rate</span><br></pre></td></tr></table></figure><h4 id="监控cpu使用率"><a href="#监控cpu使用率" class="headerlink" title="监控cpu使用率"></a>监控cpu使用率</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">cpu_used_rate</span></span><br><span class="line">Log=$(cat /proc/stat | grep 'cpu ' | awk '&#123;print $2" "$3" "$4" "$5" "$6" "$7" "$8&#125;')</span><br><span class="line">Free=$(echo $Log | awk '&#123;print $4&#125;')</span><br><span class="line">Total=$(echo $Log | awk '&#123;print $1+$2+$3+$4+$5+$6+$7&#125;')</span><br><span class="line">Cpu_Used=`expr $Total - $Free`</span><br><span class="line">Cpu_Used_Rate=`expr  $Cpu_Used/$Total*100 |bc -l`</span><br><span class="line">echo  $Cpu_Used_Rate</span><br></pre></td></tr></table></figure><h3 id="1-2-脚本代码"><a href="#1-2-脚本代码" class="headerlink" title="1.2 脚本代码"></a>1.2 脚本代码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Colors</span></span><br><span class="line">red='\033[31m' # 定义红色</span><br><span class="line">green='\033[32m' # 定义绿色</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">memory_used_rate</span></span><br><span class="line">LoadMemory=$(cat /proc/meminfo | awk '&#123;print $2&#125;')</span><br><span class="line">Total=$(echo $LoadMemory | awk '&#123;print $1&#125;')</span><br><span class="line">Free1=$(echo $LoadMemory | awk '&#123;print $2&#125;')</span><br><span class="line">Free2=$(echo $LoadMemory | awk '&#123;print $3&#125;')</span><br><span class="line">Free3=$(echo $LoadMemory | awk '&#123;print $4&#125;')</span><br><span class="line">Used=`expr $Total - $Free1 - $Free2 - $Free3`</span><br><span class="line">Used_Rate=`expr  $Used/$Total*100 | bc -l`</span><br><span class="line">Memory_Used_Rate=`expr  $Used_Rate/1 | bc`</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> disk_used_rate</span></span><br><span class="line">Location=/dev/sda1</span><br><span class="line">Disk_Used_Rate=$(df -h | grep $Location | awk '&#123;print $5&#125;')</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">cpu_used_rate</span></span><br><span class="line">Log=$(cat /proc/stat | grep 'cpu ' | awk '&#123;print $2" "$3" "$4" "$5" "$6" "$7" "$8&#125;')</span><br><span class="line">Free=$(echo $Log | awk '&#123;print $4&#125;')</span><br><span class="line">Total=$(echo $Log | awk '&#123;print $1+$2+$3+$4+$5+$6+$7&#125;')</span><br><span class="line">Cpu_Used=`expr $Total - $Free`</span><br><span class="line">Cpu_Used_Rate=`expr  $Cpu_Used/$Total*100 |bc -l`</span><br><span class="line">cpu_Used_Rate=`expr  $Cpu_Used_Rate/1 | bc`</span><br><span class="line"></span><br><span class="line">echo -e "+----------------------------------------------------------------"</span><br><span class="line"></span><br><span class="line">echo -e "$&#123;green&#125; 内存使用率:$&#123;red&#125;"$Memory_Used_Rate%</span><br><span class="line">echo -e "$&#123;green&#125; 磁盘使用率:$&#123;red&#125;"$Disk_Used_Rate</span><br><span class="line">echo -e "$&#123;green&#125; Cpu使用率:$&#123;red&#125;"$cpu_Used_Rate%</span><br><span class="line"></span><br><span class="line">echo -e "+----------------------------------------------------------------"</span><br><span class="line">echo -e " "</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200312112520510.png" alt="在这里插入图片描述"></p><p><code>crontab -e</code>进入定时系统,设置计划任务<br>输入:<code>*/1 * * * * /root/bin/sysmon.sh</code><br><img src="https://img-blog.csdnimg.cn/20200312112828168.png" alt="在这里插入图片描述"><br>收到邮件:<br><img src="https://img-blog.csdnimg.cn/20200312113409759.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200312113341808.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-编写FTP探测脚本"><a href="#2-编写FTP探测脚本" class="headerlink" title="2. 编写FTP探测脚本"></a>2. 编写FTP探测脚本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 输入想要查询的ip段</span></span><br><span class="line">IP1=`echo $1 |awk -F"." '&#123;print $1&#125;'`</span><br><span class="line">IP2=`echo $1 |awk -F"." '&#123;print $2&#125;'`</span><br><span class="line">IP3=`echo $1 |awk -F"." '&#123;print $3&#125;'`</span><br><span class="line">IP4=`echo $1 |awk -F"." '&#123;print $4&#125;'`</span><br><span class="line"></span><br><span class="line">for ((i=3; i&gt;0; i--))</span><br><span class="line">do</span><br><span class="line">    echo -e "倒数"$i"秒,开始扫描"</span><br><span class="line">done</span><br><span class="line"><span class="meta">#</span><span class="bash"> 开始连接</span></span><br><span class="line">wget  ftp://$IP1.$IP2.$IP3.$IP4 &amp;&gt;null</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果连接成功</span></span><br><span class="line">if [ $? -eq 0 ]</span><br><span class="line">then echo "$IP1.$IP2.$IP3.$i is open"</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200312115210243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-编写系统监控脚本sysmon-sh&quot;&gt;&lt;a href=&quot;#1-编写系统监控脚本sysmon-sh&quot; class=&quot;headerlink&quot; title=&quot;1. 编写系统监控脚本sysmon.sh&quot;&gt;&lt;/a&gt;1. 编写系统监控脚本sysmon.sh&lt;/h2&gt;&lt;p&gt;
      
    
    </summary>
    
      <category term="Liunx" scheme="https://plutoacharon.github.io/categories/Liunx/"/>
    
    
      <category term="Shell" scheme="https://plutoacharon.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Golang语言学习从入门到实战----链表定义</title>
    <link href="https://plutoacharon.github.io/2020/03/12/Golang%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98-%E9%93%BE%E8%A1%A8%E5%AE%9A%E4%B9%89/"/>
    <id>https://plutoacharon.github.io/2020/03/12/Golang语言学习从入门到实战-链表定义/</id>
    <published>2020-03-12T04:25:35.000Z</published>
    <updated>2020-03-12T04:25:47.786Z</updated>
    
    <content type="html"><![CDATA[<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="1-链表定义"><a href="#1-链表定义" class="headerlink" title="1. 链表定义"></a>1. 链表定义</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每个节点包含下一个节点的地址, 这样把所有的节点都串起来了, 通常把链表中的第一个节点叫做链表头</span></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Next* Student</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  定义一个简单的链表</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个链表结构</span></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Age <span class="keyword">int</span></span><br><span class="line">Score <span class="keyword">float32</span></span><br><span class="line">next* Student</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 定义一个头结点</span></span><br><span class="line"><span class="keyword">var</span> head Student</span><br><span class="line">head.Name = <span class="string">"hua"</span></span><br><span class="line">head.Age = <span class="number">18</span></span><br><span class="line">head.Score = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stu1 Student</span><br><span class="line">stu1.Name = <span class="string">"stu1"</span></span><br><span class="line">stu1.Age = <span class="number">20</span></span><br><span class="line">stu1.Score = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将两个结点链接起来</span></span><br><span class="line">head.next = &amp;stu1</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p *Student = &amp;head <span class="comment">// p指向链表的头部</span></span><br><span class="line"><span class="keyword">for</span> p != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(*p)</span><br><span class="line">p = p.next</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <img src="https://img-blog.csdnimg.cn/20200311215259336.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>输出:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;hua <span class="number">18</span> <span class="number">100</span> <span class="number">0xc000054330</span>&#125;</span><br><span class="line">&#123;stu1 <span class="number">20</span> <span class="number">20</span> &lt;<span class="literal">nil</span>&gt;&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-尾部插入法"><a href="#2-尾部插入法" class="headerlink" title="2. 尾部插入法"></a>2. 尾部插入法</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每个节点包含下一个节点的地址, 这样把所有的节点都串起来了, 通常把链表中的第一个节点叫做链表头</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个链表结构</span></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Age <span class="keyword">int</span></span><br><span class="line">Score <span class="keyword">float32</span></span><br><span class="line">next* Student</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">trans</span><span class="params">(p *Student)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> p!=<span class="literal">nil</span>&#123;</span><br><span class="line">fmt.Println(*p)</span><br><span class="line">p = p.next</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> head Student</span><br><span class="line">head.Name = <span class="string">"hua"</span></span><br><span class="line">head.Age = <span class="number">18</span></span><br><span class="line">head.Score = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 尾部插入法</span></span><br><span class="line"><span class="keyword">var</span> tail = &amp;head</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line"><span class="keyword">var</span> stu = Student&#123;</span><br><span class="line">Name:  fmt.Sprintf(<span class="string">"stu%d"</span>, i),</span><br><span class="line">Age:   rand.Intn(<span class="number">100</span>),</span><br><span class="line">Score: rand.Float32()*<span class="number">100</span>,</span><br><span class="line">&#125;</span><br><span class="line">tail.next = &amp;stu</span><br><span class="line">tail = &amp;stu</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">trans(&amp;head)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;hua <span class="number">18</span> <span class="number">100</span> <span class="number">0xc0000a6360</span>&#125;</span><br><span class="line">&#123;stu0 <span class="number">81</span> <span class="number">94.05091</span> <span class="number">0xc0000a6390</span>&#125;</span><br><span class="line">&#123;stu1 <span class="number">47</span> <span class="number">43.77142</span> <span class="number">0xc0000a63c0</span>&#125;</span><br><span class="line">&#123;stu2 <span class="number">81</span> <span class="number">68.682304</span> <span class="number">0xc0000a63f</span>0&#125;</span><br><span class="line">&#123;stu3 <span class="number">25</span> <span class="number">15.651925</span> <span class="number">0xc0000a6420</span>&#125;</span><br><span class="line">&#123;stu4 <span class="number">56</span> <span class="number">30.091187</span> <span class="number">0xc0000a6450</span>&#125;</span><br><span class="line">&#123;stu5 <span class="number">94</span> <span class="number">81.36399</span> <span class="number">0xc0000a6480</span>&#125;</span><br><span class="line">&#123;stu6 <span class="number">62</span> <span class="number">38.06572</span> <span class="number">0xc0000a64b0</span>&#125;</span><br><span class="line">&#123;stu7 <span class="number">28</span> <span class="number">46.888985</span> <span class="number">0xc0000a64e0</span>&#125;</span><br><span class="line">&#123;stu8 <span class="number">11</span> <span class="number">29.310184</span> <span class="number">0xc0000a6510</span>&#125;</span><br><span class="line">&#123;stu9 <span class="number">37</span> <span class="number">21.855305</span> &lt;<span class="literal">nil</span>&gt;&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-头部插入法"><a href="#3-头部插入法" class="headerlink" title="3. 头部插入法"></a>3. 头部插入法</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每个节点包含下一个节点的地址, 这样把所有的节点都串起来了, 通常把链表中的第一个节点叫做链表头</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个链表结构</span></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Age <span class="keyword">int</span></span><br><span class="line">Score <span class="keyword">float32</span></span><br><span class="line">next* Student</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">trans</span><span class="params">(p *Student)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> p!=<span class="literal">nil</span>&#123;</span><br><span class="line">fmt.Println(*p)</span><br><span class="line">p = p.next</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> head *Student = <span class="built_in">new</span>(Student)</span><br><span class="line">head.Name = <span class="string">"hua"</span></span><br><span class="line">head.Age = <span class="number">18</span></span><br><span class="line">head.Score = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 头部插入法</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">stu := Student&#123;</span><br><span class="line">Name:  fmt.Sprintf(<span class="string">"stu%d"</span>, i),</span><br><span class="line">Age:   rand.Intn(<span class="number">100</span>),</span><br><span class="line">Score: rand.Float32()*<span class="number">100</span>,</span><br><span class="line">&#125;</span><br><span class="line">stu.next = head</span><br><span class="line">head = &amp;stu</span><br><span class="line">&#125;</span><br><span class="line">trans(head)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;stu9 <span class="number">37</span> <span class="number">21.855305</span> <span class="number">0xc000054510</span>&#125;</span><br><span class="line">&#123;stu8 <span class="number">11</span> <span class="number">29.310184</span> <span class="number">0xc0000544e0</span>&#125;</span><br><span class="line">&#123;stu7 <span class="number">28</span> <span class="number">46.888985</span> <span class="number">0xc0000544b0</span>&#125;</span><br><span class="line">&#123;stu6 <span class="number">62</span> <span class="number">38.06572</span> <span class="number">0xc000054480</span>&#125;</span><br><span class="line">&#123;stu5 <span class="number">94</span> <span class="number">81.36399</span> <span class="number">0xc000054450</span>&#125;</span><br><span class="line">&#123;stu4 <span class="number">56</span> <span class="number">30.091187</span> <span class="number">0xc000054420</span>&#125;</span><br><span class="line">&#123;stu3 <span class="number">25</span> <span class="number">15.651925</span> <span class="number">0xc0000543f</span>0&#125;</span><br><span class="line">&#123;stu2 <span class="number">81</span> <span class="number">68.682304</span> <span class="number">0xc0000543c0</span>&#125;</span><br><span class="line">&#123;stu1 <span class="number">47</span> <span class="number">43.77142</span> <span class="number">0xc000054390</span>&#125;</span><br><span class="line">&#123;stu0 <span class="number">81</span> <span class="number">94.05091</span> <span class="number">0xc000054360</span>&#125;</span><br><span class="line">&#123;hua <span class="number">18</span> <span class="number">100</span> &lt;<span class="literal">nil</span>&gt;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;链表&quot;&gt;&lt;a href=&quot;#链表&quot; class=&quot;headerlink&quot; title=&quot;链表&quot;&gt;&lt;/a&gt;链表&lt;/h2&gt;&lt;h3 id=&quot;1-链表定义&quot;&gt;&lt;a href=&quot;#1-链表定义&quot; class=&quot;headerlink&quot; title=&quot;1. 链表定义&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="Golang" scheme="https://plutoacharon.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://plutoacharon.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Golang语言学习从入门到实战----结构体以及内存分布</title>
    <link href="https://plutoacharon.github.io/2020/03/12/Golang%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98-%E7%BB%93%E6%9E%84%E4%BD%93%E4%BB%A5%E5%8F%8A%E5%86%85%E5%AD%98%E5%88%86%E5%B8%83/"/>
    <id>https://plutoacharon.github.io/2020/03/12/Golang语言学习从入门到实战-结构体以及内存分布/</id>
    <published>2020-03-12T04:24:11.000Z</published>
    <updated>2020-03-12T04:24:40.923Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Golang语言面向对象编程说明"><a href="#1-Golang语言面向对象编程说明" class="headerlink" title="1.Golang语言面向对象编程说明"></a>1.Golang语言面向对象编程说明</h2><ul><li><code>Golang</code>也支持<code>面向对象编程(OOP)</code>，但是和传统的面向对象编程有区别，并不是纯粹的面向对象语言。所以我们说<code>Golang</code>支持面向对象编程特性是比较准确的。</li><li><code>Golang</code>没有<code>类</code>(class)，Go语言的<code>结构体(</code>struct<code>)</code>和其它编程语言的类(class)有同等的地位，你可以理解<code>Golang</code>是基于<code>struct</code>来实现OOP特性的。</li><li><code>Golang</code>面向对象编程非常简洁，去掉了传统OOP语言的继承、方法重载、构造函数和析构函数、隐藏的this指针等等</li><li><code>Golang</code>仍然有<code>面向对象编程的继承，封装和多态</code>的特性，只是实现的方式和其它OOP语言不一样，比如继承：<code>Golang</code>没有<code>extends</code>关键字，继承是通过<code>匿名字段</code>来实现。</li><li><code>Golang</code>面向对象(OOP)很优雅，OOP本身就是语言类型系统(typesystem)的一部分，通过接口<code>interface</code>关联，耦合性低，也非常灵活。后面同学们会充分体会到这个特点。也就是说在<code>Golang</code>中面向接口编程是非常重要的特性</li></ul><h3 id="1-1-Golang中的struct"><a href="#1-1-Golang中的struct" class="headerlink" title="1.1 Golang中的struct"></a>1.1 Golang中的struct</h3><ol><li><p>用来自定义复杂的数据结构</p></li><li><p><code>struct</code>里面可以包含多个字段(属性)</p></li><li><p><code>struct</code>类型可以定义方法, 注意和函数的区分</p></li><li><p><code>struct</code>类型是值类型</p></li><li><p><code>struct</code>类型可以嵌套</p></li><li><p>Go语言中没有<code>class</code>类型,只有<code>struct</code>类型</p></li></ol><h3 id="1-2-struct的定义"><a href="#1-2-struct的定义" class="headerlink" title="1.2 struct的定义"></a>1.2 struct的定义</h3><ol><li><code>struct</code> 声明:</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> 标识符 <span class="keyword">struct</span>&#123;</span><br><span class="line">field1 <span class="keyword">type</span></span><br><span class="line">field2 <span class="keyword">type</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span>&#123;</span><br><span class="line">Name  <span class="keyword">string</span></span><br><span class="line">Age   <span class="keyword">int</span></span><br><span class="line">Score <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="2"><li>字段/属性</li></ol><ul><li><p>结构体字段=属性=field</p></li><li><p>字段是结构体的一个组成部分，一般是基本数据类型、数组,也可是引用类型。</p></li><li><p>字段声明语法同变量，示例：字段名字段类型</p></li><li>字段的类型可以为：基本类型、数组或引用类型</li><li>在创建一个结构体变量后，如果没有给字段赋值，都对应一个零值(默认值)，规则同前面讲的一样:布尔类型是false，数值是0，字符串是””。</li><li>数组类型的默认值和它的元素类型相关，比如score[3] int则为[0,0,0]指针，slice，和map的零值都是nil，即还没有分配</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name   <span class="keyword">string</span></span><br><span class="line">Age    <span class="keyword">int</span></span><br><span class="line">Scores [<span class="number">5</span>]<span class="keyword">float64</span></span><br><span class="line">ptr    *<span class="keyword">int</span>              <span class="comment">// 指针</span></span><br><span class="line">slice  []<span class="keyword">int</span>             <span class="comment">// 切片</span></span><br><span class="line">map1   <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span> <span class="comment">// map</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义结构体变量</span></span><br><span class="line"><span class="keyword">var</span> p1 Person</span><br><span class="line">fmt.Println(p1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> p1.ptr == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"ok1"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> p1.slice == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"ok2"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> p1.map1 == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"ok3"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p1.slice = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line">p1.slice[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">p1.map1 = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line">p1.map1[<span class="string">"key1"</span>] = <span class="string">"tom"</span></span><br><span class="line"></span><br><span class="line">fmt.Println(p1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="number">0</span> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>] &lt;<span class="literal">nil</span>&gt; [] <span class="keyword">map</span>[]&#125;</span><br><span class="line">ok1</span><br><span class="line">ok2</span><br><span class="line">ok3</span><br><span class="line">&#123; <span class="number">0</span> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>] &lt;<span class="literal">nil</span>&gt; [<span class="number">100</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>] <span class="keyword">map</span>[key1:tom]&#125;</span><br></pre></td></tr></table></figure></p><ol start="3"><li>不同结构体变量的字段是独立，互不影响，</li></ol><p>一个结构体变量字段的更改，不影响另外一个,结构体是值类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Monster <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Age <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 不同结构体变量的字段是独立,互不影响 </span></span><br><span class="line"><span class="comment">// 一个结构体变量字段的更改,不会影响下一个</span></span><br><span class="line"><span class="keyword">var</span> monster_one Monster</span><br><span class="line"><span class="keyword">var</span> monster_two Monster</span><br><span class="line"></span><br><span class="line">monster_one.Name = <span class="string">"牛"</span></span><br><span class="line">monster_one.Age = <span class="number">123</span></span><br><span class="line"></span><br><span class="line">monster_two.Name = <span class="string">"猴"</span></span><br><span class="line">monster_two.Age = <span class="number">143</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"monster_one="</span>, monster_one)</span><br><span class="line">fmt.Println(<span class="string">"monster_two="</span>, monster_two)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">monster_one= &#123;牛 <span class="number">123</span>&#125;</span><br><span class="line">monster_two= &#123;猴 <span class="number">143</span>&#125;</span><br></pre></td></tr></table></figure></p><ol start="4"><li>创建结构体变量和访问结构体字段</li></ol><p>方式1-直接声明<code>var person Person</code></p><p>方式2-{} <code>var person Person = Person{}</code></p><p>方式3-&amp; <code>varperson*Person=new(Person)</code></p><p>方式4-{} <code>var person *Person = &amp;Person{}</code></p><p>说明:</p><ul><li>第3种和第4种方式返回的是结构体指针</li><li>结构体指针访问字段的标准方式应该是：<code>(*结构体指针).字段名</code>，比如<code>(*person).Name = &quot;tom&quot;</code></li><li>go做了一个简化，也支持<code>结构体指针</code>.字段名,比如<code>person.Name=&quot;tom&quot;</code>。</li><li>这更加符合程序员使用的习惯，go编译器底层对<code>person.Name</code>做了转<code>(*person).Name。</code></li></ul><ol start="5"><li>struct类型的内存分配机制</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Age <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> p1 Person</span><br><span class="line"></span><br><span class="line">p1.Age = <span class="number">10</span></span><br><span class="line">p1.Name = <span class="string">"小明"</span></span><br><span class="line"><span class="keyword">var</span> p2 Person = p1</span><br><span class="line"></span><br><span class="line">fmt.Println(p2.Age)</span><br><span class="line"></span><br><span class="line">p2.Name = <span class="string">"tom"</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"p2.Name=%v p1.Name=%v"</span>, p2.Name, p1.Name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line">p2.Name=tom p1.Name=小明</span><br></pre></td></tr></table></figure><p>内存图:<br><img src="https://img-blog.csdnimg.cn/20200311213429277.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Age <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> p1 Person</span><br><span class="line">p1.Age = <span class="number">10</span></span><br><span class="line">p1.Name = <span class="string">"小明"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 *Person = &amp;p1</span><br><span class="line"></span><br><span class="line">fmt.Println((*p2).Age)</span><br><span class="line">fmt.Println(p2.Age)</span><br><span class="line"></span><br><span class="line">p2.Name = <span class="string">"小红"</span></span><br><span class="line">fmt.Printf(<span class="string">"p2.Name=%v p1.Name=%v \n"</span>, p2.Name, p1.Name)</span><br><span class="line">fmt.Printf(<span class="string">"p2.Name=%v p1.Name=%v \n"</span>, (*p2).Name, p1.Name)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"p1的地址%p\n"</span>, &amp;p1)</span><br><span class="line">fmt.Printf(<span class="string">"p2的地址%p p2的值%p"</span>, &amp;p2,p2)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line">p2.Name=小红 p1.Name=小红 </span><br><span class="line">p2.Name=小红 p1.Name=小红 </span><br><span class="line">p1的地址<span class="number">0xc0000044c0</span></span><br><span class="line">p2的地址<span class="number">0xc000006028</span> p2的值<span class="number">0xc0000044c0</span></span><br></pre></td></tr></table></figure></p><p>内存图:<br><img src="https://img-blog.csdnimg.cn/20200311214007258.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-Golang语言面向对象编程说明&quot;&gt;&lt;a href=&quot;#1-Golang语言面向对象编程说明&quot; class=&quot;headerlink&quot; title=&quot;1.Golang语言面向对象编程说明&quot;&gt;&lt;/a&gt;1.Golang语言面向对象编程说明&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="Golang" scheme="https://plutoacharon.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://plutoacharon.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Python算法学习: 竞码编程-蓝桥杯校内选拔赛(初赛)重现赛</title>
    <link href="https://plutoacharon.github.io/2020/03/09/Python%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E7%AB%9E%E7%A0%81%E7%BC%96%E7%A8%8B-%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%A0%A1%E5%86%85%E9%80%89%E6%8B%94%E8%B5%9B-%E5%88%9D%E8%B5%9B-%E9%87%8D%E7%8E%B0%E8%B5%9B/"/>
    <id>https://plutoacharon.github.io/2020/03/09/Python算法学习-竞码编程-蓝桥杯校内选拔赛-初赛-重现赛/</id>
    <published>2020-03-09T06:06:31.000Z</published>
    <updated>2020-03-09T06:07:07.464Z</updated>
    
    <content type="html"><![CDATA[<p>oj网站地址:<a href="http://oj.hzjingma.com/contest/view?id=72" target="_blank" rel="noopener">竞码编程-蓝桥杯校内选拔赛(初赛)重现赛</a><br>@[TOC]</p><h2 id="试题A：第N个素数"><a href="#试题A：第N个素数" class="headerlink" title="试题A：第N个素数"></a>试题A：第N个素数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPrime</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, n):</span><br><span class="line">        <span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">10000</span>):</span><br><span class="line">    <span class="keyword">if</span> isPrime(i):</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">300</span>:</span><br><span class="line">        print(i)</span><br><span class="line">        print(count)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="试题B：coffee的签到题"><a href="#试题B：coffee的签到题" class="headerlink" title="试题B：coffee的签到题"></a>试题B：coffee的签到题</h2><p>如果n是偶数，则无法全部进行染色，如果是奇数，则可以全部进行染色<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">print(<span class="string">"no"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"yes"</span>)</span><br></pre></td></tr></table></figure></p><h2 id="试题C：不一样的日期"><a href="#试题C：不一样的日期" class="headerlink" title="试题C：不一样的日期"></a>试题C：不一样的日期</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">YY,MM,DD,dd = map(int,input().split())</span><br><span class="line"><span class="keyword">if</span> dd &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,dd+<span class="number">1</span>):</span><br><span class="line">        DD += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> DD &gt; <span class="number">13</span>:</span><br><span class="line">            MM += <span class="number">1</span></span><br><span class="line">            DD = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> MM &gt; <span class="number">23</span>:</span><br><span class="line">            YY += <span class="number">1</span></span><br><span class="line">            MM = <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,abs(dd)+<span class="number">1</span>):</span><br><span class="line">        DD -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> DD &lt;= <span class="number">0</span>:</span><br><span class="line">            MM -= <span class="number">1</span></span><br><span class="line">            DD = <span class="number">13</span></span><br><span class="line">        <span class="keyword">if</span> MM &lt;= <span class="number">0</span>:</span><br><span class="line">            YY -= <span class="number">1</span></span><br><span class="line">            MM = <span class="number">23</span></span><br><span class="line">print(YY,MM,DD)</span><br></pre></td></tr></table></figure><h2 id="试题D：三位分节法"><a href="#试题D：三位分节法" class="headerlink" title="试题D：三位分节法"></a>试题D：三位分节法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">str = input()</span><br><span class="line">str = str[::<span class="number">-1</span>] <span class="comment"># 字符串翻转</span></span><br><span class="line">ans = <span class="string">""</span></span><br><span class="line">cnt = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(str)):</span><br><span class="line">    <span class="keyword">if</span> cnt == <span class="number">3</span>:</span><br><span class="line">        ans = ans + <span class="string">","</span></span><br><span class="line">        cnt = <span class="number">0</span></span><br><span class="line">    cnt += <span class="number">1</span></span><br><span class="line">    ans = ans + str[i]</span><br><span class="line">ans = ans[::<span class="number">-1</span>]</span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure><h2 id="试题E：水坑题"><a href="#试题E：水坑题" class="headerlink" title="试题E：水坑题"></a>试题E：水坑题</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a,b = map(int, input().split())</span><br><span class="line">ans = (a*b) % (pow(<span class="number">10</span>,<span class="number">9</span>)+<span class="number">7</span>)</span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure><h2 id="试题F：站队"><a href="#试题F：站队" class="headerlink" title="试题F：站队"></a>试题F：站队</h2><p>Python部分数据超时<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line">data = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">    tmp = list(map(int, input().split()))</span><br><span class="line">    tmp.append(i)</span><br><span class="line">    data.append(tmp)</span><br><span class="line"></span><br><span class="line">data = sorted(data,key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>])</span><br><span class="line">data = sorted(data,key=<span class="keyword">lambda</span> x:x[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>):</span><br><span class="line">    print(data[i][<span class="number">2</span>], end=<span class="string">" "</span>)</span><br><span class="line">print(data[n<span class="number">-1</span>][<span class="number">2</span>])</span><br></pre></td></tr></table></figure></p><h2 id="试题G：冷门进制"><a href="#试题G：冷门进制" class="headerlink" title="试题G：冷门进制"></a>试题G：冷门进制</h2><h2 id="试题H：拯救阿拉德大陆"><a href="#试题H：拯救阿拉德大陆" class="headerlink" title="试题H：拯救阿拉德大陆"></a>试题H：拯救阿拉德大陆</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line">nums = list(map(int, input().split()))</span><br><span class="line">ans = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">        <span class="keyword">if</span> i % num == <span class="number">0</span>:</span><br><span class="line">            ans += <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure><h2 id="试题J：馋嘴羊"><a href="#试题J：馋嘴羊" class="headerlink" title="试题J：馋嘴羊"></a>试题J：馋嘴羊</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.setrecursionlimit(<span class="number">1000000</span>) <span class="comment"># 限制递归深度为</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> y &lt; <span class="number">0</span> <span class="keyword">or</span> x &gt; n - <span class="number">1</span> <span class="keyword">or</span> y &gt; m - <span class="number">1</span> <span class="keyword">or</span> vis[x][y] == <span class="number">1</span> <span class="keyword">or</span> arr[x][y] == <span class="string">'0'</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    vis[x][y] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">global</span> ans</span><br><span class="line">    ans += <span class="number">1</span></span><br><span class="line">    dfs(x - <span class="number">1</span>, y)</span><br><span class="line">    dfs(x + <span class="number">1</span>, y)</span><br><span class="line">    dfs(x, y + <span class="number">1</span>)</span><br><span class="line">    dfs(x, y - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    n, m ,x, y= map(int, input().split())</span><br><span class="line"></span><br><span class="line">    arr = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        str = input()</span><br><span class="line">        arr.append(list(str))</span><br><span class="line"></span><br><span class="line">    vis = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(m)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)] <span class="comment"># 判断是否走过,0为未走过,1为走过</span></span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    dfs(x,y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    print(ans)</span><br></pre></td></tr></table></figure><h2 id="连通块问题"><a href="#连通块问题" class="headerlink" title="连通块问题"></a>连通块问题</h2><p>题目地址:<code>http://oj.hzjingma.com/p/29?view=classic</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(grid, i, j)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="number">0</span> &lt;= i &lt; len(grid) <span class="keyword">or</span> <span class="keyword">not</span> <span class="number">0</span> &lt;= j &lt; len(grid[<span class="number">0</span>]) <span class="keyword">or</span> grid[i][j] == <span class="string">'.'</span>: <span class="keyword">return</span></span><br><span class="line">    grid[i][j] = <span class="string">'.'</span></span><br><span class="line">    dfs(grid, i + <span class="number">1</span>, j)</span><br><span class="line">    dfs(grid, i, j + <span class="number">1</span>)</span><br><span class="line">    dfs(grid, i - <span class="number">1</span>, j)</span><br><span class="line">    dfs(grid, i, j - <span class="number">1</span>)</span><br><span class="line">    dfs(grid, i + <span class="number">1</span>, j + <span class="number">1</span>)</span><br><span class="line">    dfs(grid, i - <span class="number">1</span>, j + <span class="number">1</span>)</span><br><span class="line">    dfs(grid, i - <span class="number">1</span>, j - <span class="number">1</span>)</span><br><span class="line">    dfs(grid, i + <span class="number">1</span>, j - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    n, m = map(int, input().split())</span><br><span class="line"></span><br><span class="line">    arr = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        str = input()</span><br><span class="line">        arr.append(list(str))</span><br><span class="line"></span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(m):</span><br><span class="line">            <span class="keyword">if</span> arr[i][j] == <span class="string">'W'</span>:</span><br><span class="line">                dfs(arr,i, j)</span><br><span class="line">                ans += <span class="number">1</span></span><br><span class="line">    print(ans)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;oj网站地址:&lt;a href=&quot;http://oj.hzjingma.com/contest/view?id=72&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;竞码编程-蓝桥杯校内选拔赛(初赛)重现赛&lt;/a&gt;&lt;br&gt;@[TOC]&lt;/p&gt;
&lt;h2 id=&quot;
      
    
    </summary>
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/categories/Python%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/tags/Python%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>牛客网校招全国统一模拟笔试2020年2月场运维方向编程题解</title>
    <link href="https://plutoacharon.github.io/2020/03/09/%E7%89%9B%E5%AE%A2%E7%BD%91%E6%A0%A1%E6%8B%9B%E5%85%A8%E5%9B%BD%E7%BB%9F%E4%B8%80%E6%A8%A1%E6%8B%9F%E7%AC%94%E8%AF%952020%E5%B9%B42%E6%9C%88%E5%9C%BA%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91%E7%BC%96%E7%A8%8B%E9%A2%98%E8%A7%A3/"/>
    <id>https://plutoacharon.github.io/2020/03/09/牛客网校招全国统一模拟笔试2020年2月场运维方向编程题解/</id>
    <published>2020-03-09T06:05:56.000Z</published>
    <updated>2020-03-09T06:07:06.463Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-添加字符"><a href="#1-添加字符" class="headerlink" title="1. 添加字符"></a>1. 添加字符</h2><p>题目描述:</p><p>牛牛手里有一个字符串A，羊羊的手里有一个字符串B，B的长度大于等于A，所以牛牛想把A串变得和B串一样长，这样羊羊就愿意和牛牛一起玩了。<br>而且A的长度增加到和B串一样长的时候，对应的每一位相等的越多，羊羊就越喜欢。比如”abc”和”abd”对应相等的位数为2，为前两位。<br>牛牛可以在A的开头或者结尾添加任意字符，使得长度和B一样。现在问牛牛对A串添加完字符之后，不相等的位数最少有多少位？</p><pre><code>输入:abecabc输出:1</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">str1 = input()</span><br><span class="line">str2 = input()</span><br><span class="line">len_str1 = len(str1)</span><br><span class="line">len_str2 = len(str2)</span><br><span class="line">ans = len_str1</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len_str1 &lt; len_str2:</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i+len_str1 &lt;= len_str2:</span><br><span class="line">        cnt = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len_str1):</span><br><span class="line">            <span class="keyword">if</span> str1[j] != str2[i+j]:</span><br><span class="line">                cnt +=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> cnt &lt; ans:</span><br><span class="line">            ans = cnt</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len_str1):</span><br><span class="line">        <span class="keyword">if</span> str1[j] != str2[j]:</span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> cnt &lt; ans:</span><br><span class="line">        ans = cnt</span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure><h2 id="2-排序子序列"><a href="#2-排序子序列" class="headerlink" title="2. 排序子序列"></a>2. 排序子序列</h2><p>牛牛定义排序子序列为一个数组中一段连续的子序列,并且这段子序列是非递增或者非递减排序的。</p><p>牛牛有一个长度为n的整数数组A,他现在有一个任务是把数组A分为若干段排序子序列</p><p>牛牛想知道他最少可以把这个数组分为几段排序子序列</p><p>如样例所示:</p><p>牛牛可以把数组A划分为[1,2,3]和[2,2,1]两个排序子序列,至少需要划分为2个排序子序列,所以输出2</p><p><img src="https://img-blog.csdnimg.cn/20200306202320493.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre><code>示例1：输入61 2 3 2 2 1输出2</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">n = input()</span><br><span class="line">a = list(map(int, input().split()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">1</span> <span class="keyword">or</span> n == <span class="number">2</span>:</span><br><span class="line">    print(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">ans = <span class="number">1</span></span><br><span class="line">flag = <span class="number">0</span>  <span class="comment"># 1增 0平 -1减</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(a)):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> flag == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> a[i - <span class="number">1</span>] &lt; a[i]:</span><br><span class="line">            flag = <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> a[i - <span class="number">1</span>] &gt; a[i]:</span><br><span class="line">            flag = <span class="number">-1</span></span><br><span class="line">    <span class="keyword">elif</span> (flag &lt; <span class="number">0</span>) == (a[i] &gt; a[i - <span class="number">1</span>]): </span><br><span class="line"></span><br><span class="line">        ans += <span class="number">1</span></span><br><span class="line">        flag = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure><h2 id="组队竞赛"><a href="#组队竞赛" class="headerlink" title="组队竞赛"></a>组队竞赛</h2><p>牛牛举办了一次编程比赛,参加比赛的有3*n个选手,每个选手都有一个水平值a_i.现在要将这些选手进行组队,一共组成n个队伍,即每个队伍3人.牛牛发现队伍的水平值等于该队伍队员中第二高水平值。</p><p>例如:</p><p>一个队伍三个队员的水平值分别是3,3,3.那么队伍的水平值是3<br>一个队伍三个队员的水平值分别是3,2,3.那么队伍的水平值是3<br>一个队伍三个队员的水平值分别是1,5,2.那么队伍的水平值是2<br>为了让比赛更有看点,牛牛想安排队伍使所有队伍的水平值总和最大。</p><p>如样例所示:</p><p>如果牛牛把6个队员划分到两个队伍<br>如果方案为:<br>team1:{1,2,5}, team2:{5,5,8}, 这时候水平值总和为7.<br>而如果方案为:<br>team1:{2,5,8}, team2:{1,5,5}, 这时候水平值总和为10.<br>没有比总和为10更大的方案,所以输出10.<br>输入描述：<br>输出描述：<br>示例1：</p><pre><code>输入的第一行为一个正整数n(1 ≤ n ≤ 10^5)第二行包括3*n个整数a_i(1 ≤ a_i ≤ 10^9),表示每个参赛选手的水平值.输出一个整数表示所有队伍的水平值总和最大值.输入:25 2 8 5 1 5输出:10</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line">list1 = list(map(int, input().split()))</span><br><span class="line">list1 = sorted(list1, reverse=<span class="literal">True</span>)</span><br><span class="line">ans = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    ans += int(list1[<span class="number">2</span>*i+<span class="number">1</span>])</span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-添加字符&quot;&gt;&lt;a href=&quot;#1-添加字符&quot; class=&quot;headerlink&quot; title=&quot;1. 添加字符&quot;&gt;&lt;/a&gt;1. 添加字符&lt;/h2&gt;&lt;p&gt;题目描述:&lt;/p&gt;
&lt;p&gt;牛牛手里有一个字符串A，羊羊的手里有一个字符串B，B的长度大于等于A，所以牛牛
      
    
    </summary>
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/categories/Python%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/tags/Python%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Golang语言学习从入门到实战----defer</title>
    <link href="https://plutoacharon.github.io/2020/03/07/Golang%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98-defer/"/>
    <id>https://plutoacharon.github.io/2020/03/07/Golang语言学习从入门到实战-defer/</id>
    <published>2020-03-07T02:06:48.000Z</published>
    <updated>2020-03-07T02:07:16.091Z</updated>
    
    <content type="html"><![CDATA[<h2 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h2><p>在函数中，程序员经常需要创建资源(比如：数据库连接、文件句柄、锁等)，为了在函数执行完毕后，及时的<strong>释放资源</strong>，Go的设计者提供<code>defer(延时机制)</code></p><h3 id="简单的demo"><a href="#简单的demo" class="headerlink" title="简单的demo"></a>简单的demo</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">res := sum(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">fmt.Println(<span class="string">"number4 res="</span>, res)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(n1 <span class="keyword">int</span>, n2 <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="comment">// 函数执行完毕后，及时的释放资源</span></span><br><span class="line"><span class="comment">// 先进后出</span></span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">"number1 n1 = "</span>, n1)</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">"number2 n2 = "</span>, n2)</span><br><span class="line"></span><br><span class="line">res := n1 + n2</span><br><span class="line">fmt.Println(<span class="string">"number3 res = "</span>, res) <span class="comment">// 最先执行</span></span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:</p><pre><code>number3 res =  30number2 n2 =  20number1 n1 =  10number4 res= 30</code></pre><ul><li>当<code>go</code>执行到一个<code>defer</code>时，不会立即执行<code>defer</code>后的语句，而是将<code>defer</code>后的语句压入到一个”栈”(比喻)中, 然后继续执行函数下一个语句。</li><li><p>当函数执行完毕后，在从<code>defer</code>栈中，依次从栈顶取出语句执行(注：遵守栈先入后出的机制)</p></li><li><p>在defer将语句放入到栈时，也会将相关的值拷贝同时入栈</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出:</span></span><br><span class="line"><span class="comment">number3 res =  30</span></span><br><span class="line"><span class="comment">number2 n2 =  20</span></span><br><span class="line"><span class="comment">number1 n1 =  10</span></span><br><span class="line"><span class="comment">number4 res= 30</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">res := sum(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">fmt.Println(<span class="string">"number4 res="</span>, res)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(n1 <span class="keyword">int</span>, n2 <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="comment">// 函数执行完毕后，及时的释放资源</span></span><br><span class="line"><span class="comment">// 先进后出</span></span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">"number1 n1 = "</span>, n1)</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">"number2 n2 = "</span>, n2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加一段</span></span><br><span class="line">n1++</span><br><span class="line">n2++</span><br><span class="line"></span><br><span class="line">res := n1 + n2</span><br><span class="line">fmt.Println(<span class="string">"number3 res = "</span>, res) <span class="comment">// 最先执行</span></span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>输出:</p><pre><code>number3 res =  32 // 输出结果为32number2 n2 =  20 // 栈中的数值仍是存入前的数值number1 n1 =  10number4 res= 32</code></pre><h3 id="使用defer-recover来处理错误"><a href="#使用defer-recover来处理错误" class="headerlink" title="使用defer+recover来处理错误"></a>使用defer+recover来处理错误</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">test()</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"main()下面的代码..."</span>)</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">err := <span class="built_in">recover</span>() <span class="comment">// recover()内置函数,可以捕获到异常</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;  <span class="comment">// 捕获到异常</span></span><br><span class="line">fmt.Println(<span class="string">"err="</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">num1 := <span class="number">10</span></span><br><span class="line">num2 := <span class="number">0</span></span><br><span class="line">res := num1 / num2</span><br><span class="line">fmt.Println(<span class="string">"res="</span>, res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:</p><pre><code>err= runtime error: integer divide by zeromain()下面的代码...</code></pre><h3 id="defer在Go中的数据结构"><a href="#defer在Go中的数据结构" class="headerlink" title="defer在Go中的数据结构"></a>defer在Go中的数据结构</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> _defer <span class="keyword">struct</span> &#123;</span><br><span class="line">siz     <span class="keyword">int32</span></span><br><span class="line">started <span class="keyword">bool</span></span><br><span class="line">sp      <span class="keyword">uintptr</span></span><br><span class="line">pc      <span class="keyword">uintptr</span></span><br><span class="line">fn      *funcval</span><br><span class="line">_panic  *_panic</span><br><span class="line">link    *_defer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>runtime._defer</code> 结构体是延迟调用链表上的一个元素，所有的结构体都会通过 <code>link</code>字段串联成链表。</p><p><img src="https://img-blog.csdnimg.cn/20200306145913609.png" alt="在这里插入图片描述"></p><ul><li>siz 是参数和结果的内存大小；</li><li>sp 和 pc 分别代表栈指针和调用方的程序计数器；</li><li>fn 是 defer 关键字中传入的函数；</li><li>_panic 是触发延迟调用的结构体，可能为空；</li></ul><p>除了上述的这些字段之外，<code>runtime._defer</code> 中还包含一些垃圾回收机制使用的字段，这里为了减少理解的成本就都省去了</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><code>defer</code>关键字的实现主要依靠编译器和运行时的协作</p><h4 id="编译期；"><a href="#编译期；" class="headerlink" title="编译期；"></a>编译期；</h4><p>将 <code>defer</code> 关键字被转换<code>runtime.deferproc</code>；<br>在调用<code>defer</code> 关键字的函数返回之前插入<code>runtime.deferreturn；</code></p><h4 id="运行时："><a href="#运行时：" class="headerlink" title="运行时："></a>运行时：</h4><p><code>runtime.deferproc</code>会将一个新的 <code>runtime._defer</code>结构体追加到当前<code>Goroutine</code>的链表头；<br><code>runtime.deferreturn</code>会从 <code>Goroutine</code>的链表中取出<code>runtime._defer</code> 结构并依次执行；</p><ul><li>后调用的<code>defer</code>函数会先执行：<ul><li>后调用的<code>defer</code>函数会被追加到<code>Goroutine _defer</code>链表的最前面；</li><li>运行<code>runtime._defer</code>时是从前到后依次执行；</li></ul></li><li>函数的参数会被预先计算；<ul><li>调用<code>runtime.deferproc</code>函数创建新的延迟调用时就会立刻拷贝函数的参数，函数的参数不会等到真正执行时计算；</li></ul></li></ul><p>更多关于Golang defer的编译过程与运行过程可以参考:</p><p>参考链接:<a href="https://draveness.me/golang/docs/part2-foundation/ch05-keyword/golang-defer/#533-" target="_blank" rel="noopener">https://draveness.me/golang/docs/part2-foundation/ch05-keyword/golang-defer/#533-</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;defer&quot;&gt;&lt;a href=&quot;#defer&quot; class=&quot;headerlink&quot; title=&quot;defer&quot;&gt;&lt;/a&gt;defer&lt;/h2&gt;&lt;p&gt;在函数中，程序员经常需要创建资源(比如：数据库连接、文件句柄、锁等)，为了在函数执行完毕后，及时的&lt;strong&gt;释
      
    
    </summary>
    
      <category term="Golang" scheme="https://plutoacharon.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://plutoacharon.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Golang语言学习从入门到实战----闭包</title>
    <link href="https://plutoacharon.github.io/2020/03/07/Golang%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98-%E9%97%AD%E5%8C%85/"/>
    <id>https://plutoacharon.github.io/2020/03/07/Golang语言学习从入门到实战-闭包/</id>
    <published>2020-03-07T02:05:52.000Z</published>
    <updated>2020-03-07T02:06:19.885Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Golang闭包"><a href="#Golang闭包" class="headerlink" title="Golang闭包"></a>Golang闭包</h2><p>基本介绍：闭包就是一个函数和与其相关的引用环境组合的一个整体(实体)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AddUpper</span><span class="params">()</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> n <span class="keyword">int</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">n += x</span><br><span class="line"><span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">f := AddUpper()</span><br><span class="line">fmt.Println(f(<span class="number">1</span>))</span><br><span class="line">fmt.Println(f(<span class="number">100</span>))</span><br><span class="line">fmt.Println(f(<span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:</p><pre><code>11011101</code></pre><h3 id="代码的说明"><a href="#代码的说明" class="headerlink" title="代码的说明:"></a>代码的说明:</h3><ul><li>AddUpper是一个函数，返回的数据类型是<code>func (int) int</code></li><li>返回的是一个匿名函数,但是这个匿名函数引用到函数外的n,因此这个匿名函数就和n形成一个整体，构成<code>闭包</code></li><li>闭包是类,函数是操作，n是字段。函数和它使用到n构成<code>闭包</code>。</li><li>当我们反复的调用f函数时，因为<code>n</code>是初始化一次，因此每调用一次就进行累计。</li><li>我们要搞清楚闭包的关键，就是要分析出返回的函数它使用(引用)到哪些变量，因为函数和它引用到的变量共同构成<code>闭包</code></li></ul><h3 id="闭包的实践"><a href="#闭包的实践" class="headerlink" title="闭包的实践"></a>闭包的实践</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f1 := makesuffix(<span class="string">".jpg"</span>)</span><br><span class="line">fmt.Println(<span class="string">"文件处理后"</span>, f1(<span class="string">"test1"</span>))</span><br><span class="line">fmt.Println(<span class="string">"文件处理后"</span>, f1(<span class="string">"test2.jpg"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makesuffix</span><span class="params">(suffix <span class="keyword">string</span>)</span> <span class="title">func</span><span class="params">(<span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> !strings.HasSuffix(name, suffix) &#123; <span class="comment">// strings.HasSuffix,该函数可以判断某个字符串是否有指定的后缀。</span></span><br><span class="line"><span class="keyword">return</span> name + suffix</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:</p><pre><code>文件处理后 test1.jpg文件处理后 test2.jpg</code></pre><p>返回的匿名函数和<code>makeSuffix (suffix string)</code>的<code>suffix</code>变量组合成一个闭包,因为返回的函数引用到<code>suffix</code>这个变量</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Golang闭包&quot;&gt;&lt;a href=&quot;#Golang闭包&quot; class=&quot;headerlink&quot; title=&quot;Golang闭包&quot;&gt;&lt;/a&gt;Golang闭包&lt;/h2&gt;&lt;p&gt;基本介绍：闭包就是一个函数和与其相关的引用环境组合的一个整体(实体)&lt;/p&gt;
&lt;figure
      
    
    </summary>
    
      <category term="Golang" scheme="https://plutoacharon.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://plutoacharon.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Liunx Shell编程入门----编写简单的开机欢迎脚本与操作服务脚本</title>
    <link href="https://plutoacharon.github.io/2020/03/07/Liunx-Shell%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8-%E7%BC%96%E5%86%99%E7%AE%80%E5%8D%95%E7%9A%84%E5%BC%80%E6%9C%BA%E6%AC%A2%E8%BF%8E%E8%84%9A%E6%9C%AC%E4%B8%8E%E6%93%8D%E4%BD%9C%E6%9C%8D%E5%8A%A1%E8%84%9A%E6%9C%AC/"/>
    <id>https://plutoacharon.github.io/2020/03/07/Liunx-Shell编程入门-编写简单的开机欢迎脚本与操作服务脚本/</id>
    <published>2020-03-07T02:04:56.000Z</published>
    <updated>2020-03-07T02:05:20.441Z</updated>
    
    <content type="html"><![CDATA[<h3 id="开机欢迎脚本"><a href="#开机欢迎脚本" class="headerlink" title="开机欢迎脚本"></a>开机欢迎脚本</h3><p>在用户目录/<code>root</code>下编写存储<code>welcome.sh</code>脚本，赋予执行权限，并在<code>~/.bash_profile</code>中调用该脚本，使得在用户登录时显示欢迎信息</p><p>如<code>login_pwd=$(pwd)</code> 等号旁边不要添加空格<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 基本信息</span></span><br><span class="line">login_pwd=$(pwd)</span><br><span class="line">login_date=$(date)</span><br><span class="line">login_users=$(users)</span><br><span class="line">login_uptime=$(uptime)</span><br><span class="line">version=$(uname -a)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 颜色</span></span><br><span class="line">red='\033[31m' # 定义红色</span><br><span class="line">blue='\033[34m'# 定义蓝色</span><br><span class="line">green='\033[32m'# 定义绿色</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出信息</span></span><br><span class="line">echo -e " "</span><br><span class="line">echo -e "$&#123;blue&#125;+----------------------------------------------------------------"</span><br><span class="line">echo -e "$&#123;green&#125;    Welcome xuhaohan!                    “</span><br><span class="line">echo -e "$&#123;blue&#125;+----------------------------------------------------------------"</span><br><span class="line"></span><br><span class="line">echo -e "$&#123;green&#125;Server IP: $&#123;red&#125;192.168.0.131"</span><br><span class="line">echo -e "$&#123;green&#125;Date: $&#123;red&#125;"$login_date</span><br><span class="line">echo -e "$&#123;green&#125;Users: $&#123;red&#125;"$login_users</span><br><span class="line">echo -e "$&#123;green&#125;Uptime: $&#123;red&#125;"$login_uptime</span><br><span class="line">echo -e "$&#123;green&#125;版本信息: $&#123;red&#125;"$version</span><br><span class="line">echo -e "$&#123;blue&#125;+----------------------------------------------------------------"</span><br><span class="line">echo -e " "</span><br></pre></td></tr></table></figure></p><p><code>chmod a+x welcome.sh</code>添加可执行权限</p><p>将<code>welcome.sh</code>脚本加入<code>~/.bash_profile</code>中,这样当我们登陆的时候就会自动调用<code>welcome.sh</code><br>脚本<br><img src="https://img-blog.csdnimg.cn/20200305125420846.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>登陆之后<br><img src="https://img-blog.csdnimg.cn/20200305125439115.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="操作服务脚本"><a href="#操作服务脚本" class="headerlink" title="操作服务脚本"></a>操作服务脚本</h3><p>在<code>/root/bin</code>目录下编写<code>status、 start、stop</code>脚本，可以根据脚本后面的服务名称分别显示服务状态、开启服务、停止服务</p><ol><li>通过<code>$1</code>获取服务名称</li><li>判断<code>/etc/init.d/</code>目录下是否存在同名文件<br>A.    如果文件不存在，提示不存在这个服务<br>B.    如果文件存在，则执行这个文件，带上<code>status、 start、stop</code>参数<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">if [ -f "/etc/init.d/$1" ];then # -f查看文件是否存在</span><br><span class="line">systemctl status $1</span><br><span class="line">else</span><br><span class="line">echo "文件不存在"</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://img-blog.csdnimg.cn/20200305125828998.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200305125837825.png" alt="在这里插入图片描述"></p><p><code>stop start</code>脚本类似</p><p>start.sh<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">if [ -f "/etc/init.d/$1" ];then # -f查看文件是否存在</span><br><span class="line">systemctl start $1</span><br><span class="line">else</span><br><span class="line">echo "文件不存在"</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></p><p>stop.sh脚本<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">if [ -f "/etc/init.d/$1" ];then # -f查看文件是否存在</span><br><span class="line">systemctl stop $1</span><br><span class="line">else</span><br><span class="line">echo "文件不存在"</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;开机欢迎脚本&quot;&gt;&lt;a href=&quot;#开机欢迎脚本&quot; class=&quot;headerlink&quot; title=&quot;开机欢迎脚本&quot;&gt;&lt;/a&gt;开机欢迎脚本&lt;/h3&gt;&lt;p&gt;在用户目录/&lt;code&gt;root&lt;/code&gt;下编写存储&lt;code&gt;welcome.sh&lt;/code&gt;脚本，
      
    
    </summary>
    
      <category term="Liunx" scheme="https://plutoacharon.github.io/categories/Liunx/"/>
    
    
      <category term="Shell" scheme="https://plutoacharon.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Golang语言学习从入门到实战----指针和内存布局</title>
    <link href="https://plutoacharon.github.io/2020/03/07/Golang%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98-%E6%8C%87%E9%92%88%E5%92%8C%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80/"/>
    <id>https://plutoacharon.github.io/2020/03/07/Golang语言学习从入门到实战-指针和内存布局/</id>
    <published>2020-03-07T02:03:56.000Z</published>
    <updated>2020-03-07T02:04:33.736Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于Golang语言的指针与内存讲解"><a href="#关于Golang语言的指针与内存讲解" class="headerlink" title="关于Golang语言的指针与内存讲解"></a>关于Golang语言的指针与内存讲解</h2><ul><li>基本数据类型，变量存的就是值，也叫值类型</li><li>获取变量的地址，用&amp;，比如：<code>var num int</code>,获取num的地址：<code>&amp;num</code><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 基本数据类型在内存布局</span></span><br><span class="line"><span class="keyword">var</span> num <span class="keyword">int</span> = <span class="number">1</span></span><br><span class="line"><span class="comment">// num 的地址是什么, &amp;num</span></span><br><span class="line">fmt.Println(<span class="string">"num的地址="</span>, &amp;num)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://img-blog.csdnimg.cn/20200302193908191.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>基本数据类型在内存的布局:</strong></p><p><img src="https://img-blog.csdnimg.cn/20200302194410688.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>指针类型，指针变量存的是一个地址，这个地址指向的空间存的才是值</li><li>比如：<code>var ptr *int = &amp;num</code>举例说明：指针在内存的布局<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 基本数据类型在内存布局</span></span><br><span class="line"><span class="keyword">var</span> num <span class="keyword">int</span> = <span class="number">1</span></span><br><span class="line"><span class="comment">// num 的地址是什么, &amp;num</span></span><br><span class="line">fmt.Println(<span class="string">"num的地址="</span>, &amp;num)</span><br><span class="line"><span class="comment">// 下面的 var ptr *int = &amp;num</span></span><br><span class="line"><span class="comment">// 1. ptr是一个指针变量</span></span><br><span class="line"><span class="comment">// 2. ptr的类型 *int</span></span><br><span class="line"><span class="comment">// 3. ptr本身的值&amp;num</span></span><br><span class="line"><span class="keyword">var</span> ptr *<span class="keyword">int</span> = &amp;num</span><br><span class="line">fmt.Printf(<span class="string">"prt=%v"</span>, ptr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://img-blog.csdnimg.cn/2020030219550637.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>指针类型在内存的布局:<br><img src="https://img-blog.csdnimg.cn/2020030219571451.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>注意: ptr此时也是有地址的,<code>0xc00000a0a8</code>不过是ptr指针所指向的地址</p></blockquote><h3 id="获取指针类型所指向的值"><a href="#获取指针类型所指向的值" class="headerlink" title="获取指针类型所指向的值"></a>获取指针类型所指向的值</h3><p>使用：<code>*</code>，比如：<code>var ptr *int</code>,使用<code>*ptr</code>获取<code>ptr</code>指向的值<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 基本数据类型在内存布局</span></span><br><span class="line"><span class="keyword">var</span> num <span class="keyword">int</span> = <span class="number">1</span></span><br><span class="line"><span class="comment">// num 的地址是什么, &amp;num</span></span><br><span class="line">fmt.Println(<span class="string">"num的地址="</span>, &amp;num)</span><br><span class="line"><span class="comment">// 下面的 var ptr *int = &amp;num</span></span><br><span class="line"><span class="comment">// 1. ptr是一个指针变量</span></span><br><span class="line"><span class="comment">// 2. ptr的类型 *int</span></span><br><span class="line"><span class="comment">// 3. ptr本身的值&amp;num</span></span><br><span class="line"><span class="keyword">var</span> ptr *<span class="keyword">int</span> = &amp;num</span><br><span class="line">fmt.Printf(<span class="string">"prt=%v\n"</span>, ptr)</span><br><span class="line">fmt.Printf(<span class="string">"ptr的地址=%v\n"</span>, &amp;ptr)</span><br><span class="line">fmt.Printf(<span class="string">"ptr指向的值 =%v"</span>, *ptr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://img-blog.csdnimg.cn/20200302200210228.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200302200323311.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="关于指针的一些知识点举例"><a href="#关于指针的一些知识点举例" class="headerlink" title="关于指针的一些知识点举例"></a>关于指针的一些知识点举例</h3><p>不能使用非地址形式的变量定义指针<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">int</span> = <span class="number">300</span></span><br><span class="line"><span class="keyword">var</span> ptr *<span class="keyword">int</span> = a</span><br><span class="line">fmt.Println(ptr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://img-blog.csdnimg.cn/20200302200615696.png" alt="在这里插入图片描述"></p><p>类型不匹配<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">int</span> = <span class="number">300</span></span><br><span class="line"><span class="keyword">var</span>ptr *<span class="keyword">float32</span> = &amp;a</span><br><span class="line">fmt.Println(ptr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://img-blog.csdnimg.cn/20200302200824536.png" alt="在这里插入图片描述"><br>指针转换<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">int</span> = <span class="number">300</span></span><br><span class="line"><span class="keyword">var</span> b <span class="keyword">int</span> = <span class="number">400</span></span><br><span class="line"><span class="keyword">var</span> ptr *<span class="keyword">int</span> = &amp;a</span><br><span class="line">*ptr = <span class="number">100</span></span><br><span class="line">ptr = &amp;b</span><br><span class="line">*ptr = <span class="number">200</span></span><br><span class="line">fmt.Printf(<span class="string">"a=%d, b=%d, *ptr=%d"</span>, a,b,*ptr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>a=100, b=200, *ptr=200</code></p><h3 id="指针的使用细节"><a href="#指针的使用细节" class="headerlink" title="指针的使用细节"></a>指针的使用细节</h3><ul><li>值类型，都有对应的指针类型，形式为<code>*</code>数据类型，比如<code>int</code>的对应的指针就是<code>*int</code>,<code>float32</code>对应的指针类型就是<code>*float32</code>,依次类推。</li><li>值类型包括：基本数据类型<code>int</code>系列,<code>float</code>系列,<code>bool</code>,<code>string</code>、数组和结构体<code>struct</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;关于Golang语言的指针与内存讲解&quot;&gt;&lt;a href=&quot;#关于Golang语言的指针与内存讲解&quot; class=&quot;headerlink&quot; title=&quot;关于Golang语言的指针与内存讲解&quot;&gt;&lt;/a&gt;关于Golang语言的指针与内存讲解&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="Golang" scheme="https://plutoacharon.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://plutoacharon.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Python算法学习: 竞码编程-蓝桥杯模拟赛3题解</title>
    <link href="https://plutoacharon.github.io/2020/03/07/Python%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E7%AB%9E%E7%A0%81%E7%BC%96%E7%A8%8B-%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%A8%A1%E6%8B%9F%E8%B5%9B3%E9%A2%98%E8%A7%A3/"/>
    <id>https://plutoacharon.github.io/2020/03/07/Python算法学习-竞码编程-蓝桥杯模拟赛3题解/</id>
    <published>2020-03-07T02:03:10.000Z</published>
    <updated>2020-03-07T02:03:36.326Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="文章目录">TOC</a></p><h2 id="A-试题A：生存还是毁灭-这是一个问题-7’"><a href="#A-试题A：生存还是毁灭-这是一个问题-7’" class="headerlink" title="A. 试题A：生存还是毁灭,这是一个问题 7’"></a>A. 试题A：生存还是毁灭,这是一个问题 7’</h2><p>描述<br>对于给定的文章，求出出现频率最高的字母。</p><p>对于字母的出现频率，我们定义为：该字母在整个文章中出现的次数。</p><p>例如：“To be or not to be, that is the question!”</p><p>出现频率最高的字母是：t,总共出现了77次。</p><p>对于以下莎士比亚的《哈姆雷特》经典片段，你能帮JM找到出现频率最高的字母出现的次数吗？</p><p>输出出现频率最高的字母出现的次数。</p><p>注意：字母<strong>不区分大小写。</strong></p><p>思路:</p><pre><code>这里我将a-z A-Z的ascii 编码作为筛选点, 将所有的字母传入新列表然后寻找</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">''' To be, or not to be: that is the question,</span></span><br><span class="line"><span class="string">Whether it's nobler in the mind to suffer</span></span><br><span class="line"><span class="string">The slings and arrows of outrageous fortune,</span></span><br><span class="line"><span class="string">Or to take arms against a sea of troubles,</span></span><br><span class="line"><span class="string">And by opposing end them. To die,to sleep;</span></span><br><span class="line"><span class="string">No more; and by a sleep to say we end</span></span><br><span class="line"><span class="string">The heartache, and the thousand natural shocks</span></span><br><span class="line"><span class="string">That flesh is heir to, it's a consummation</span></span><br><span class="line"><span class="string">Devoutly to be wished. To die, to sleep.</span></span><br><span class="line"><span class="string">To sleep, perchance to dream: ay, there's the rub;</span></span><br><span class="line"><span class="string">For in that sleep of death what dreams may come</span></span><br><span class="line"><span class="string">When we have shuffled off this mortal coil,</span></span><br><span class="line"><span class="string">Must give us pause. There's the respect</span></span><br><span class="line"><span class="string">That makes calamity of so long life;</span></span><br><span class="line"><span class="string">For who would bear the whips and scorns of time,</span></span><br><span class="line"><span class="string">The oppressor's wrong, the proud man's contumely,</span></span><br><span class="line"><span class="string">The pangs of despised love, the law's delay,</span></span><br><span class="line"><span class="string">The insolence of office, and the spurns</span></span><br><span class="line"><span class="string">That patient merit of the unworthy takes,</span></span><br><span class="line"><span class="string">When he himself might his quietus make</span></span><br><span class="line"><span class="string">With a bare bodkin? Who would fardels bear,</span></span><br><span class="line"><span class="string">To grunt and sweat under a weary life,</span></span><br><span class="line"><span class="string">But that the dread of something after death,</span></span><br><span class="line"><span class="string">The undiscovered country from whose bourn</span></span><br><span class="line"><span class="string">No traveller returns, puzzles the will,</span></span><br><span class="line"><span class="string">And makes us rather bear those ills we have</span></span><br><span class="line"><span class="string">Than fly to others that we know not of?</span></span><br><span class="line"><span class="string">Thus conscience does make cowards of us all,</span></span><br><span class="line"><span class="string">And thus the native hue of resolution</span></span><br><span class="line"><span class="string">Is sicklied or with the pale cast of thought,</span></span><br><span class="line"><span class="string">And enterprises of great pith and moment</span></span><br><span class="line"><span class="string">With this regard their currents turn awry</span></span><br><span class="line"><span class="string">And lose the name of action.'''</span></span><br><span class="line">strq = <span class="string">""</span></span><br><span class="line">tmp = <span class="number">0</span></span><br><span class="line">ans = <span class="number">0</span></span><br><span class="line"><span class="comment"># 97 122 65 90</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str:</span><br><span class="line">    <span class="keyword">if</span> <span class="number">65</span>&lt;=ord(i)&lt;=<span class="number">90</span> <span class="keyword">or</span> <span class="number">97</span>&lt;=ord(i)&lt;=<span class="number">122</span>:</span><br><span class="line">        strq += i.lower()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> strq:</span><br><span class="line">    tmp = strq.count(i)</span><br><span class="line">    <span class="keyword">if</span> tmp&gt;ans:</span><br><span class="line">        ans = tmp</span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure><h2 id="B-试题B：小小神枪手-开局98K-8’"><a href="#B-试题B：小小神枪手-开局98K-8’" class="headerlink" title="B. 试题B：小小神枪手 开局98K 8’"></a>B. 试题B：小小神枪手 开局98K 8’</h2><p>描述<br>JM是一个吃鸡玩家，开局98K，人物描边大师。</p><p>已知JM的初始射击命中率为75\%75%。如果JM一击未中，则会由于种种原因(心理压力)导致JM的命中率在上一枪的命中率基础上，减低10\%10%。</p><p>例如：第一枪的命中率为75\%75%，则第二枪的命中率为75\% <em> 90\%75%∗90%，第三枪的命中率为75\% </em> 90\% * 90\%75%∗90%∗90%，以此类推。</p><p>当然，当命中率低于50\%50%的时候，JM则会放弃射击。</p><p>现在，JM想知道，他击中敌人的期望次数是多少？ 保留66位小数。</p><p>注意：</p><p>1、射击命中则停止射击<br>2、放弃射击则不统计次数。</p><p>思路:<br><img src="https://img-blog.csdnimg.cn/20200301142842132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>    这里就是很简单的数学期望问题<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n1 = <span class="number">0.75</span></span><br><span class="line">n2 = <span class="number">0.675000</span></span><br><span class="line">n3 = <span class="number">0.607500</span></span><br><span class="line">n4 = <span class="number">0.546750</span></span><br><span class="line">ans = n1 + <span class="number">2</span>*((<span class="number">1</span>-n1)*n2) + <span class="number">3</span>*((<span class="number">1</span>-n1)*(<span class="number">1</span>-n2)*n3) + <span class="number">4</span>*((<span class="number">1</span>-n1)*(<span class="number">1</span>-n2)*(<span class="number">1</span>-n3)*n4)</span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure></p><h2 id="C-试题C：关云长单刀会金莲，贾宝玉三打白骨精-10’"><a href="#C-试题C：关云长单刀会金莲，贾宝玉三打白骨精-10’" class="headerlink" title="C. 试题C：关云长单刀会金莲，贾宝玉三打白骨精 10’"></a>C. 试题C：关云长单刀会金莲，贾宝玉三打白骨精 10’</h2><p>描述<br>三国在国，治国，兴国，安国，丧国。 </p><p>水浒在气，勇气，义气，豪气，霸气。 </p><p>红楼在情，亲情，爱情，宦情，民情。 </p><p>西游在趣，情趣，游曲，野趣，妖趣。</p><p>由于四大名著的魅力实在是太大了，JM决定把整个3月空出来，再次品味一下这四大名著。</p><p>JM 决定在3月的31天中挑出连续的4天学习《水浒传》，连续的3天看《西游记》，连续的5天看《三国演义》，连续的3天看《红楼梦》。注意：同一天不可能看两本名著。</p><p>现在，JM同学想知道，他有多少种时间安排方法，能够满足他学习的需求。</p><p>例如：</p><p>第1-5天看《三国演义》，第6-8天看《西游记》，第9-11天看《红楼梦》，第12-15天看《水浒传》，这是一种合法的方案<br>第2-5天看《水浒传》，第10-14天看《三国演义》，第17-19天看《西游记》，第29-31天看《红楼梦》，这也是一种合法的方案。</p><p>思路:</p><pre><code>我们通过枚举每一个名著的开始阅读时间，然后判断这种可能方案，满不满足要求。也就是每一本名著读书的那天，不能读其他的。我们可以用一个变量 vis，记录每一天是否已经读过了</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">我们通过枚举每一个名著的开始阅读时间，然后判断这种可能方案，满不满足要求。也就是每一本名著读书的那天，不能读其他的。</span></span><br><span class="line"><span class="string">我们可以用一个变量 vis，记录每一天是否已经读过了</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_True</span><span class="params">(a,b,c,d)</span>:</span></span><br><span class="line">    vis = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">32</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        vis[a+i] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">if</span> vis[b+i] != <span class="number">1</span>:</span><br><span class="line">            vis[b+i] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        <span class="keyword">if</span> vis[c + i] != <span class="number">1</span>:</span><br><span class="line">            vis[c + i] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">if</span> vis[d + i] != <span class="number">1</span>:</span><br><span class="line">            vis[d + i] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># a = 《水浒传》 4天</span></span><br><span class="line">    <span class="comment"># b = 《西游记》 3天</span></span><br><span class="line">    <span class="comment"># c = 《三国演义》 5天</span></span><br><span class="line">    <span class="comment"># d = 《红楼梦》 3天</span></span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">29</span>): <span class="comment"># 第28天为最晚读书日期</span></span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">30</span>):<span class="comment"># 第29天为最晚读书日期</span></span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">28</span>):<span class="comment"># 第27天为最晚读书日期</span></span><br><span class="line">                <span class="keyword">for</span> d <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">30</span>):<span class="comment"># 第28天为最晚读书日期</span></span><br><span class="line">                    <span class="keyword">if</span> is_True(a,b,c,d):</span><br><span class="line">                        ans += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    print(ans)</span><br></pre></td></tr></table></figure><h2 id="D-试题D：抽刀断水水更流，举杯销愁愁更愁-10’"><a href="#D-试题D：抽刀断水水更流，举杯销愁愁更愁-10’" class="headerlink" title="D. 试题D：抽刀断水水更流，举杯销愁愁更愁 10’"></a>D. 试题D：抽刀断水水更流，举杯销愁愁更愁 10’</h2><p>忧郁的JM，借酒消愁。略微喝醉的他，和下酒花生聊起了天。</p><p>JM：“你知道质数是什么吗？”</p><p>花生：“……”</p><p>JM：“质数是指在大于11的自然数中，除了11和它本身以外不再有其他因数的自然数。”</p><p>花生：“……”</p><p>JM：“现在我有一个质数集合{3, 5, 7, 11, 13, 19, 23, 29, 31, 37, 41, 53, 59, 61, 67, 71, 97, 101, 127, 197, 211, 431}3,5,7,11,13,19,23,29,31,37,41,53,59,61,67,71,97,101,127,197,211,431，你可以从中挑出任意多个(0-12个)不同的数出来构成一个新数（取出数的和）”</p><p>JM：“构成的新数从小到大依次为：0, 3, 5, 7, 8, 10, 11, 12, 13…，0,3,5,7,8,10,11,12,13…，你知道[0, 1694][0,1694]中有多少个数是没法构成的吗？”<br>花生：”……“</p><p>JM：“例如：1，2，4…1，2，4…均是不能够从质数集合中挑数构成”</p><p>你来帮帮花生吧~</p><p>思路:</p><pre><code>这道题乍一看很简单,但是写代码的时候思路总是理不清楚上网查了一下发现这道题可以用二进制枚举的方法总共 22 个数，选择其中的 0 -12 个数，加上来组成一个新数。我们可以用二进制枚举，对于 22 个数，每一个数，只有拿或不拿两种情况，也就是 0 或者 1。所以总共有 2 ^ 22 约等于 4e6。不会超时。因为我们用二进制枚举，每一位对应这个数要不要取，如果取，那就累和。还要注意，最后只能取 12 个，所以我们要判断，这种取法中 1 的个数，如果是 &gt;12 ，那这种方案不成立。然后算出所有情况的数，用 set 统计（可能有重复的，去重）。最后答案是问，无法构成的个数，因此答案是 ： 总数（1695） - set 中的数（可以构成了这么多数）</code></pre><p>具体可以参考我的这篇博客:<a href="https://blog.csdn.net/qq_43442524/article/details/104589224" target="_blank" rel="noopener">Python算法学习:全排列的回溯实现与二进制枚举</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">nums = [<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">19</span>,<span class="number">23</span>,<span class="number">29</span>,<span class="number">31</span>,<span class="number">37</span>,<span class="number">41</span>,<span class="number">53</span>,<span class="number">59</span>,<span class="number">61</span>,<span class="number">67</span>,<span class="number">71</span>,<span class="number">97</span>,<span class="number">101</span>,<span class="number">127</span>,<span class="number">197</span>,<span class="number">211</span>,<span class="number">431</span>]</span><br><span class="line">ans = [] <span class="comment">#存放所有答案</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>&lt;&lt;<span class="number">22</span>): <span class="comment"># 2^22-1种情况(这里是取0或者取22个数的全部可能情况)</span></span><br><span class="line">    cnt = <span class="number">0</span> <span class="comment"># 计数 控制取数不超过12</span></span><br><span class="line">    res = <span class="number">0</span> <span class="comment"># 结果</span></span><br><span class="line">    tmp = i</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">22</span>): <span class="comment"># 查看22位中都有哪一位放了数字,即是1</span></span><br><span class="line">        <span class="keyword">if</span> (tmp &gt;&gt; j) &amp; <span class="number">1</span>: <span class="comment"># 如果第j位是1,则符合</span></span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">            res += nums[j]</span><br><span class="line">        <span class="keyword">if</span> cnt &lt;= <span class="number">12</span>:    <span class="comment"># 不超过12位</span></span><br><span class="line">            ans.append(res)</span><br><span class="line">ans = set(ans)         <span class="comment"># 使用集合的特性,去重</span></span><br><span class="line">cnt = <span class="number">1695</span></span><br><span class="line">print(ans)</span><br><span class="line">print(cnt - len(ans))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;文章目录&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;A-试题A：生存还是毁灭-这是一个问题-7’&quot;&gt;&lt;a href=&quot;#A-试题A：生存还是毁灭-这是一个问题-7’&quot; class=&quot;headerlink&quot; title=&quot;A. 试题A：生存还是毁灭,这是一
      
    
    </summary>
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/categories/Python%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/tags/Python%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Python算法学习:全排列的回溯实现与二进制枚举</title>
    <link href="https://plutoacharon.github.io/2020/03/07/Python%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E5%85%A8%E6%8E%92%E5%88%97%E7%9A%84%E5%9B%9E%E6%BA%AF%E5%AE%9E%E7%8E%B0%E4%B8%8E%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%9E%9A%E4%B8%BE/"/>
    <id>https://plutoacharon.github.io/2020/03/07/Python算法学习-全排列的回溯实现与二进制枚举/</id>
    <published>2020-03-07T02:01:51.000Z</published>
    <updated>2020-03-07T02:02:11.422Z</updated>
    
    <content type="html"><![CDATA[<h2 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h2><h3 id="LeetCode-46-全排列"><a href="#LeetCode-46-全排列" class="headerlink" title="LeetCode 46. 全排列"></a>LeetCode 46. 全排列</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">给定一个没有重复数字的序列，返回其所有可能的全排列。</span><br><span class="line"></span><br><span class="line">示例:</span><br><span class="line"></span><br><span class="line">输入: [1,2,3]</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">  [1,2,3],</span><br><span class="line">  [1,3,2],</span><br><span class="line">  [2,1,3],</span><br><span class="line">  [2,3,1],</span><br><span class="line">  [3,1,2],</span><br><span class="line">  [3,2,1]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>方法1:使用库函数<code>itertools.permutations</code><br><a href="https://www.docs4dev.com/docs/zh/python/3.7.2rc1/all/library-itertools.html" target="_blank" rel="noopener">Python 中文文档3.7.2rc1itertools</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法一</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">输入:</span></span><br><span class="line"><span class="string">1 2 3</span></span><br><span class="line"><span class="string">输出:</span></span><br><span class="line"><span class="string">(1, 2, 3)</span></span><br><span class="line"><span class="string">(1, 3, 2)</span></span><br><span class="line"><span class="string">(2, 1, 3)</span></span><br><span class="line"><span class="string">(2, 3, 1)</span></span><br><span class="line"><span class="string">(3, 1, 2)</span></span><br><span class="line"><span class="string">(3, 2, 1)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line">n = list(map(int, input().split()))</span><br><span class="line">list = list(itertools.permutations(n))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(list)):</span><br><span class="line">    print(list[i])</span><br></pre></td></tr></table></figure><p>方法二:回溯<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">res = []</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backtrack</span><span class="params">(nums, tmp)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">        res.append(tmp)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">        backtrack(nums[:i] + nums[i+<span class="number">1</span>:], tmp + [nums[i]])</span><br><span class="line">backtrack(nums, [])</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure></p><p>回溯算法框架:</p><p>解决一个回溯问题，实际上就是一个决策树的遍历过程。你只需要思考 3 个问题：</p><p>1、路径：也就是已经做出的选择。</p><p>2、选择列表：也就是你当前可以做的选择。</p><p>3、结束条件：也就是到达决策树底层，无法再做选择的条件。</p><p>代码方面，回溯算法的框架：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">result = []</span><br><span class="line">def backtrack(路径, 选择列表):</span><br><span class="line">    if 满足结束条件:</span><br><span class="line">        result.add(路径)</span><br><span class="line">        return</span><br><span class="line">    </span><br><span class="line">    for 选择 in 选择列表:</span><br><span class="line">        做选择</span><br><span class="line">        backtrack(路径, 选择列表)</span><br><span class="line">        撤销选择</span><br></pre></td></tr></table></figure></p><p>其核心就是 for 循环里面的递归，在递归调用之前「做选择」，在递归调用之后「撤销选择」<br><img src="https://img-blog.csdnimg.cn/20200301122759971.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="二进制枚举"><a href="#二进制枚举" class="headerlink" title="二进制枚举"></a>二进制枚举</h2><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>先给出子集的定义:子集是一个数学概念：如果集合A的任意一个元素都是集合B的元素，那么集合A称为集合B的子集。</p><h4 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h4><p>在写程序的时候，有时候我们可能需要暴力枚举出所有的情况，这时可以考虑通过二进制来枚举子集来尝试解决问题。</p><h4 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h4><p>假设我们现在有5个小球，上面分别标号了0,1,2,3,4代表这些小球的权值,现在要像你求出这些小球的权值可以组成的所有情况。</p><p>假设我们现在有5个小球，上面分别标号了0,1,2,3,4代表这些小球的权值,现在要像你求出这些小球的权值可以组成的所有情况。</p><p>我们用二进制的思维来考虑这个问题，因为有5个小球，所以我们用5个比特位来分别标记小球存在还是不存在，对于这样一种情况，比如我们现在要选择3个小球，分别是0,3,4号小球，那么我们用二进制1表是当前的小球存在，用0表示当前小球不存在</p><table><thead><tr><th>二进制下标</th><th>4</th><th>3</th><th>2</th><th>1</th><th>0</th></tr></thead><tbody><tr><td>二进制</td><td>1</td><td>1</td><td>0</td><td>0</td><td>1</td></tr></tbody></table><p>小球状态|    存在|    存在|    不存在    |不存在|    存在|</p><p>我们可以用5个比特位来表示这种情况，如果小球全部选择的话那么二进制表示就是<code>11111</code>,二进制的<code>11111</code>转化为十进制数字就是31，这个数字正好就是<code>2^5 -1</code>，那么我们可以用从<code>0~(2^5−1)</code>这些数表示完所有的选取状态(因为这个范围内的二进制数情况正好包括了这些选取状况).</p><p>所以我们遍历每一个集合：</p><p><code>for i in range(1&lt;&lt;n):</code></p><p>设s = 1（二进制为00001）代表我们选0位置上的数值；</p><p><strong>那么我们如何找到每个位置上的数值呢？</strong></p><p>我们遍历的是二进制的十进制表示，我们当然可以转化为二进制再枚举每一位，但是，这很麻烦；</p><p>一个很巧妙的方式就是利用位运算。</p><pre><code>1&lt;&lt;0=1(0);1&lt;&lt;1=2(10);1&lt;&lt;2=4(100);1&lt;&lt;3=8(1000);1&lt;&lt;4=16(10000);...1&lt;&lt;7=128(10000000);...</code></pre><p>看出来了吧！我们只需要将n&amp;(1&lt;&lt;i)我们便可以得到每一位是不是1 （1&lt;&lt; i 除了那一位，剩余的都是0，所以我们就可以得到那一位是不是1）</p><h4 id="按位与运算符（-amp-）"><a href="#按位与运算符（-amp-）" class="headerlink" title="按位与运算符（&amp;）"></a>按位与运算符（&amp;）</h4><p>参加运算的两个数据，按二进制位进行“与”运算。</p><p>运算规则：0&amp;0=0;  0&amp;1=0;   1&amp;0=0;    1&amp;1=1;</p><pre><code>即：两位同时为“1”，结果才为“1”，否则为0</code></pre><p>例如：3&amp;5  即 0000 0011&amp; 0000 0101 = 00000001  因此，3&amp;5的值得1。</p><h4 id="左移运算（-lt-lt-）"><a href="#左移运算（-lt-lt-）" class="headerlink" title="左移运算（&lt;&lt;）"></a>左移运算（&lt;&lt;）</h4><p> a &lt;&lt; b就表示把a转为二进制后左移b位（在后面添b个0）。例如100的二进制为1100100，而110010000转成十进制是400，那么100 &lt;&lt; 2 = 400。<br> 可以看出，a &lt;&lt; b的值实际上就是a乘以2的b次方，因为在二进制数后添一个0就相当于该数乘以2(这样做要求保证高位的1不被移出)。</p><h3 id="题目举例"><a href="#题目举例" class="headerlink" title="题目举例:"></a>题目举例:</h3><p>忧郁的JM，借酒消愁。略微喝醉的他，和下酒花生聊起了天。</p><p>JM：“你知道质数是什么吗？”</p><p>花生：“……”</p><p>JM：“质数是指在大于11的自然数中，除了11和它本身以外不再有其他因数的自然数。”</p><p>花生：“……”</p><p>JM：“现在我有一个质数集合{3, 5, 7, 11, 13, 19, 23, 29, 31, 37, 41, 53, 59, 61, 67, 71, 97, 101, 127, 197, 211, 431}3,5,7,11,13,19,23,29,31,37,41,53,59,61,67,71,97,101,127,197,211,431，你可以从中挑出任意多个(0-12个)不同的数出来构成一个新数（取出数的和）”</p><p>JM：“构成的新数从小到大依次为：0, 3, 5, 7, 8, 10, 11, 12, 13…，0,3,5,7,8,10,11,12,13…，你知道[0, 1694][0,1694]中有多少个数是没法构成的吗？”<br>花生：”……“</p><p>JM：“例如：1，2，4…1，2，4…均是不能够从质数集合中挑数构成”</p><p>你来帮帮花生吧~</p><p>思路:</p><pre><code>总共 22 个数，选择其中的 0 -12 个数，加上来组成一个新数。我们可以用二进制枚举，对于 22 个数，每一个数，只有拿或不拿两种情况，也就是 0 或者 1。所以总共有 2 ^ 22 约等于 4e6。不会超时。因为我们用二进制枚举，每一位对应这个数要不要取，如果取，那就累和。还要注意，最后只能取 12 个，所以我们要判断，这种取法中 1 的个数，如果是 &gt;12 ，那这种方案不成立。然后算出所有情况的数，用 set 统计（可能有重复的，去重）。最后答案是问，无法构成的个数，因此答案是 ： 总数（1695） - set 中的数（可以构成了这么多数）</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">nums = [<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">19</span>,<span class="number">23</span>,<span class="number">29</span>,<span class="number">31</span>,<span class="number">37</span>,<span class="number">41</span>,<span class="number">53</span>,<span class="number">59</span>,<span class="number">61</span>,<span class="number">67</span>,<span class="number">71</span>,<span class="number">97</span>,<span class="number">101</span>,<span class="number">127</span>,<span class="number">197</span>,<span class="number">211</span>,<span class="number">431</span>]</span><br><span class="line">ans = [] <span class="comment">#存放所有答案</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>&lt;&lt;<span class="number">22</span>): <span class="comment"># 2^22-1种情况(这里是取0或者取22个数的全部可能情况)</span></span><br><span class="line">    cnt = <span class="number">0</span> <span class="comment"># 计数 控制取数不超过12</span></span><br><span class="line">    res = <span class="number">0</span> <span class="comment"># 结果</span></span><br><span class="line">    tmp = i</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">22</span>): <span class="comment"># 查看22位中都有哪一位放了数字,即是1</span></span><br><span class="line">        <span class="keyword">if</span> (tmp &gt;&gt; j) &amp; <span class="number">1</span>: <span class="comment"># 如果第j位是1,则符合</span></span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">            res += nums[j]</span><br><span class="line">        <span class="keyword">if</span> cnt &lt;= <span class="number">12</span>:    <span class="comment"># 不超过12位</span></span><br><span class="line">            ans.append(res)</span><br><span class="line">ans = set(ans)         <span class="comment"># 使用集合的特性,去重</span></span><br><span class="line">cnt = <span class="number">1695</span></span><br><span class="line">print(ans)</span><br><span class="line">print(cnt - len(ans))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;全排列&quot;&gt;&lt;a href=&quot;#全排列&quot; class=&quot;headerlink&quot; title=&quot;全排列&quot;&gt;&lt;/a&gt;全排列&lt;/h2&gt;&lt;h3 id=&quot;LeetCode-46-全排列&quot;&gt;&lt;a href=&quot;#LeetCode-46-全排列&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/categories/Python%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/tags/Python%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Git上传文件时报错:error: failed to push some refs to &#39;https://github.com/XXX&#39;</title>
    <link href="https://plutoacharon.github.io/2020/03/07/Git%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E6%97%B6%E6%8A%A5%E9%94%99-error-failed-to-push-some-refs-to-https-github-com-XXX/"/>
    <id>https://plutoacharon.github.io/2020/03/07/Git上传文件时报错-error-failed-to-push-some-refs-to-https-github-com-XXX/</id>
    <published>2020-03-07T02:01:01.000Z</published>
    <updated>2020-03-07T02:01:16.950Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200227122341464.png" alt="在这里插入图片描述"></p><p>报错信息:</p><pre><code>$ git push -u origin masterTo https://github.com/PlutoaCharon/LanQiaoCode_python.git ! [rejected]        master -&gt; master (non-fast-forward)error: failed to push some refs to &apos;https://github.com/PlutoaCharon/LanQiaoCode_python.git&apos;hint: Updates were rejected because the tip of your current branch is behindhint: its remote counterpart. Integrate the remote changes (e.g.hint: &apos;git pull ...&apos;) before pushing again.hint: See the &apos;Note about fast-forwards&apos; in &apos;git push --help&apos; for details.</code></pre><p>当我在进行 <code>git push -u origin master</code>向GitHub上上传文件夹时报错。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p><img src="https://img-blog.csdnimg.cn/20200227122519476.png" alt="在这里插入图片描述"><br>出现这个问题是你的本地库中没有README.MD 文件，而我在创建仓库的时候先自动创建了README文件。</p><p>解决方法也很简单<br>输入<code>git pull --rebase origin master</code><br>就能把github中的MD文件拉下来了。。<br>在输入 <code>git push -u origin master</code> 就可以成功上传代码了。<br><img src="https://img-blog.csdnimg.cn/20200227122706303.png" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200227122341464.png&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;报错信息:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git push -u origin master
To 
      
    
    </summary>
    
      <category term="GitHub" scheme="https://plutoacharon.github.io/categories/GitHub/"/>
    
    
      <category term="GitHub" scheme="https://plutoacharon.github.io/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes(K8s)入门到实践(二)----Kubernetes的基本概念和术语</title>
    <link href="https://plutoacharon.github.io/2020/03/07/Kubernetes-K8s-%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5-%E4%BA%8C-Kubernetes%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E6%9C%AF%E8%AF%AD/"/>
    <id>https://plutoacharon.github.io/2020/03/07/Kubernetes-K8s-入门到实践-二-Kubernetes的基本概念和术语/</id>
    <published>2020-03-07T02:00:25.000Z</published>
    <updated>2020-03-07T02:00:42.801Z</updated>
    
    <content type="html"><![CDATA[<p>上一节详细描述了Kubernetes的历史和发展过程。这一节就重点描述一下Kubernetes中的大部分概念如Node、Pod、Replication  Controller、Service等。</p><p><strong>Kubernetes架构图:</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2t1YmVybmV0ZXMva3ViZXJuZXRlcy9yZWxlYXNlLTEuMi9kb2NzL2Rlc2lnbi9hcmNoaXRlY3R1cmUucG5n?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><h3 id="1-1-Master"><a href="#1-1-Master" class="headerlink" title="1.1 Master"></a>1.1 Master</h3><p>Kubernetes里的<code>Master</code>指的是集群控制节点，在每个Kubernetes集群里都需要有一个Master来负责整个集群的管理和控制，基本上Kubernetes的所有控制命令都发给它，它负责具体的执行过程，我们后面执行的所有命令基本都是在Master上运行的。</p><p>Master通常会占据一个独立的服务器（高可用部署建议用3台服务器），主要原因是它太重要了，是整个集群的“首脑”，如果它宕机或者不可用，那么对集群内容器应用的管理都将失效。</p><p>在Master上运行着以下关键进程。</p><ul><li>Kubernetes  API  Server（kube-apiserver）：提供了HTTP  Rest接口的关键服务进程，是Kubernetes里所有资源的增、删、改、查等操作的唯一入口，也是集群控制的入口进程。</li><li>Kubernetes  Controller  Manager（kube-controller-manager）：Kubernetes里所有资源对象的自动化控制中心，可以将其理解为资源对象的“大总管”。</li><li>Kubernetes  Scheduler（kube-scheduler）：负责资源调度（Pod调度）的进程，相当于公交公司的“调度室”。</li><li>在Master上通常还需要部署etcd服务，因为Kubernetes里的所有资源对象的数据都被保存在etcd中。<h3 id="1-2-Node"><a href="#1-2-Node" class="headerlink" title="1.2 Node"></a>1.2 Node</h3>除了Master，Kubernetes集群中的其他机器被称为<code>Node</code></li></ul><p>在较早的版本中也被称为Minion。与Master一样，Node可以是一台物理主机，也可以是一台虚拟机。Node是Kubernetes集群中<br>的工作负载节点，每个Node都会被Master分配一些工作负载（Docker容器），当某个Node宕机时，其上的工作负载会被Master自动转移到其他节点上。</p><p>在每个Node上都运行着以下关键进程：</p><ul><li>kubelet：负责Pod对应的容器的创建、启停等任务，同时与Master密切协作，实现集群管理的基本功能。</li><li>kube-proxy：实现Kubernetes  Service的通信与负载均衡机制的重要组件。</li><li>Docker  Engine（docker）：Docker引擎，负责本机的容器创建和管理工作。</li></ul><p>Node可以在运行期间动态增加到Kubernetes集群中，前提是在这个节点上已经正确安装、配置和启动了上述关键进程，在默认情况下kubelet会向Master注册自己，这也是Kubernetes推荐的Node管理方式。</p><p>一旦Node被纳入集群管理范围，kubelet进程就会定时向Master汇报自身的情报，例如操作系统、Docker版本、机器的CPU和内存情况，以及当前有哪些Pod在运行等，这样Master就可以获知每个Node的资源使用情况，并实现高效均衡的资源调度策略。</p><p>而某个Node在超过指定时间不上报信息时，会被Master判定为“失联”，Node的状态被标记为不可用（Not Ready），随后Master会触发“工作负载大转移”的自动流程。</p><h3 id="1-3-Pod"><a href="#1-3-Pod" class="headerlink" title="1.3 Pod"></a>1.3 Pod</h3><p>Pod是Kubernetes最重要的基本概念，我们看到每个Pod都有一个特殊的被称为“根容器”的Pause容器。</p><p>Pause容器对应的镜像属于Kubernetes平台的一部分，除了Pause容器，每个Pod还包含一个或多个紧密相关的用户业务容器。</p><p><img src="https://img-blog.csdnimg.cn/20200225142409363.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="为什么设计Pod？"><a href="#为什么设计Pod？" class="headerlink" title="为什么设计Pod？"></a>为什么设计Pod？</h4><p>原因一：在一组容器作为一个单元的情况下，我们难以简单地对“整体”进行判断及有效地行动。比如，一个容器死亡了，此时算是整体死亡么？是N/M的死亡率么？引入业务无关并且不易死亡的Pause容器作为Pod的根容器，以它的状态代表整个容器组的状态，就简单、巧妙地解决了这个难题。</p><p>原因二：Pod里的多个业务容器共享Pause容器的IP，共享Pause容器挂接的Volume，这样既简化了密切关联的业务容器之间的通信问题，也很好地解决了它们之间的文件共享问题。</p><p>Kubernetes为每个Pod都分配了唯一的IP地址，称之为<code>Pod  IP</code>，一个Pod里的多个容器共享<code>Pod  IP</code>地址。Kubernetes要求底层网络支持集群内任意两个Pod之间的TCP/IP直接通信，这通常采用虚拟二层网络技术来实现，例如<code>Flannel</code>、Open  vSwitch等，因此我们需要牢记一点：在Kubernetes里，一个Pod里的容器与另外主机上的Pod容器能够直接通信。</p><blockquote><p><code>Flannel</code>是CoreOS 团队针对Kubernetes 设计的一个网络规划服务，简单来说，它的功能是让集群中的不同节点主机创建的Docker 容器都具有全集群唯一的虚拟IP地址。而且它还能在这些IP 地址之间建立一个覆盖网络（Overlay Network），通过这个覆盖网络，将数据包原封不动地传递到目标容器内<br><img src="https://img-blog.csdnimg.cn/20200225144322360.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><p><code>ETCD</code> 之 <code>Flannel</code>提供说明：  &gt; 存储管理Flannel 可分配的IP 地址段资源  &gt; 监控ETCD 中每个 Pod 的实际地址，并在内存中建立维护 Pod 节点路由表</p><h4 id="不同情况下网络通信方式同一个Pod-内部通讯："><a href="#不同情况下网络通信方式同一个Pod-内部通讯：" class="headerlink" title="不同情况下网络通信方式同一个Pod 内部通讯："></a>不同情况下网络通信方式同一个Pod 内部通讯：</h4><p>同一个Pod 共享同一个网络命名空间，共享同一个Linux 协议栈Pod1 至Pod2    &gt; Pod1 与Pod2 不在同一台主机，Pod的地址是与docker0在同一个网段的，但docker0网段与宿主机网卡是两个完全不同的IP网段，并且不同Node之间的通信只能通过宿主机的物理网卡进行。</p><p>将Pod的IP和所在Node的IP关联起来，通过这个关联让Pod可以互相访问    &gt; Pod1 与Pod2 在同一台机器，由Docker0 网桥直接转发请求至Pod2，不需要经过Flannel </p><p>目前基于性能考虑，全部为iptables 维护和转发Pod 到外网：Pod 向外网发送请求，查找路由表, 转发数据包到宿主机的网卡，宿主网卡完成路由选择后，iptables执行Masquerade，把源IP 更改为宿主网卡的IP，然后向外网服务器发送请求外网访问Pod：Service<br><img src="https://img-blog.csdnimg.cn/20200225144508351.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>Pod及周边对象<br><img src="https://img-blog.csdnimg.cn/20200225145755276.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="1-4-Label"><a href="#1-4-Label" class="headerlink" title="1.4 Label"></a>1.4 Label</h3><p>Label（标签）是Kubernetes系统中另外一个核心概念。一个Label是一个key=value的键值对，其中key与value由用户自己指定。</p><p>Label可以被附加到各种资源对象上，例如Node、Pod、Service、RC等，一个资源对象可以定义任意数量的Label，同一个Label也可以被添加到任意数量的资源对象上。</p><p>Label通常在资源对象定义时确定，也可以在对象创建后动态添加或者删除。</p><p>一些常用的Label:</p><ul><li>版本标签：”release”:”stable”、”release”:”canary”。</li><li>环境标签：”environment”:”dev”、”environment”:”qa”、”environment”:”production</li><li>架构标签：”tier”:”frontend”、”tier”:”backend”、”tier”:”middleware”</li><li>分区标签：”partition”:”customerA”、”partition”:”customerB”</li><li>质量管控标签：”track”:”daily”、”track”:”weekly”</li></ul><p>Label相当于我们熟悉的“标签”。</p><p>给某个资源对象定义一个Label，就相当于给它打了一个标签，随后可以通过<code>Label  Selector（标签选择器）</code>查询和筛选拥有某些Label的资源对象，Kubernetes通过这种方式实现了类似SQL的简单又通用的对象查询机制。</p><p><code>Label Selector</code>在Kubernetes中的重要使用场景如下:</p><ul><li><code>kube-controller</code>进程通过在资源对象RC上定义的Label  Selector来筛选要监控的Pod副本数量，使Pod副本数量始终符合预期设定的全自动控制流程。</li><li><code>kube-proxy</code>进程通过Service的Label  Selector来选择对应的Pod，自动建立每个Service到对应Pod的请求转发路由表，从而实现Service的智能负载均衡机制。</li><li>通过对某些Node定义特定的Label，并且在Pod定义文件中使用NodeSelector这种标签调度策略，<code>kube-scheduler</code>进程可以实现Pod定向调度的特性。<br><img src="https://img-blog.csdnimg.cn/20200225151216891.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200225151225710.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h3 id="1-5-Replication-Controller"><a href="#1-5-Replication-Controller" class="headerlink" title="1.5 Replication Controller"></a>1.5 Replication Controller</h3><p><code>Replication Controller</code>（RC）是Kubernetes系统中的核心概念之一，简单来说，它其实定义了一个期望的场景，即声明某种Pod的副本数量在任意时刻都符合某个预期值，所以RC的定义包括如下几个部分：</p><ul><li>Pod期待的副本数量</li><li>用于筛选目标Pod的Label Selector</li><li>当Pod的副本数量小于预期数量时，用于创建新Pod的Pod模板（template）</li></ul><p>在我们定义了一个RC并将其提交到Kubernetes集群中后，Master上的<code>Controller  Manager</code>组件就得到通知，定期巡检系统中当前存活的目标Pod，并确保目标Pod实例的数量刚好等于此RC的期望值，如果有过多的Pod副本在运行，系统就会停掉一些Pod，否则系统会再自动创建一些Pod。</p><p>通过RC，Kubernetes实现了用户应用集群的高可用性，并且大大减少了系统管理员在传统IT环境中需要完成的许多手工运维工作（如主机监控脚本、应用监控脚本、故障恢复脚本等）。</p><p>在Kubernetes  1.2中，升级为另外一个新概念—<code>Replica  Set</code>，官方解释其为“下一代的RC”。<code>Replica Set</code>与RC当前的唯一区别是，<code>Replica Sets</code>支持基于集合的Label  selector（Set-based  selector），而RC只支持基于等式的Label  Selector（equality-based  selector），这使得Replica  Set的功能更强。</p><p><code>RC（Replica Set)</code>的一些特性与作用：</p><ul><li>在大多数情况下，我们通过定义一个RC实现Pod的创建及副本数量的自动控制。</li><li>在RC里包括完整的Pod定义模板。</li><li>RC通过Label Selector机制实现对Pod副本的自动控制。</li><li>通过改变RC里的Pod副本数量，可以实现Pod的扩容或缩容。</li><li>通过改变RC里Pod模板中的镜像版本，可以实现Pod的滚动升级。</li></ul><h3 id="1-6-Deployment"><a href="#1-6-Deployment" class="headerlink" title="1.6　Deployment"></a>1.6　Deployment</h3><p><code>Deployment</code>是Kubernetes在1.2版本中引入的新概念，用于更好地解决Pod的编排问题。为此，Deployment在内部使用了Replica Set来实现目的，无论从Deployment的作用与目的、YAML定义，还是从它的具体命令行操作来看，我们都可以把它看作RC的一次升级，两者的相似度超过90%。</p><p><code>Deployment</code>相对于RC的一个最大升级是我们可以随时知道当前Pod“部署”的进度。实际上由于一个Pod的创建、调度、绑定节点及在目标Node上启动对应的容器这一完整过程需要一定的时间，所以我们期待系统启动N个Pod副本的目标状态，实际上是一个连续变化的“部署过程”导致的最终状态。</p><p>Deployment的典型使用场景有以下几个：</p><ul><li>创建一个Deployment对象来生成对应的Replica Set并完成Pod副本的创建。</li><li>检查Deployment的状态来看部署动作是否完成（Pod副本数量是否达到预期的值）。</li><li>更新Deployment以创建新的Pod（比如镜像升级）。</li><li>如果当前Deployment不稳定，则回滚到一个早先的Deployment版本。</li><li>暂停Deployment以便于一次性修改多个PodTemplateSpec的配置项，之后再恢复Deployment，进行新的发布。</li><li>扩展Deployment以应对高负载。</li><li>查看Deployment的状态，以此作为发布是否成功的指标。</li><li>清理不再需要的旧版本ReplicaSets。    </li></ul><h3 id="1-7-HPA（HorizontalPodAutoScale）"><a href="#1-7-HPA（HorizontalPodAutoScale）" class="headerlink" title="1.7 HPA（HorizontalPodAutoScale）"></a>1.7 HPA（HorizontalPodAutoScale）</h3><p><code>Horizontal Pod Autoscaling</code> 仅适用于Deployment 和ReplicaSet ，在V1 版本中仅支持根据Pod 的CPU 利用率扩所容，在v1alpha 版本中，支持根据内存和用户自定义的metric 扩缩容</p><p>HPA与之前的RC、Deployment一样，也属于一种Kubernetes资源对象。通过追踪分析指定RC控制的所有目标Pod的负载变化情况，来确定是否需要有针对性地调整目标Pod的副本数量，这是HPA的实现原理。</p><h3 id="1-8-StatefulSet"><a href="#1-8-StatefulSet" class="headerlink" title="1.8 StatefulSet"></a>1.8 StatefulSet</h3><p><code>StatefulSet</code>是为了解决<code>有状态服务</code>的问题（对应Deployments 和ReplicaSets是为<code>无状态服务</code>而设计）</p><p>其应用场景包括：</p><ul><li>稳定的持久化存储，即Pod 重新调度后还是能访问到相同的持久化数据，基于PVC 来实现</li><li>稳定的网络标志，即Pod 重新调度后其PodName和HostName不变，基于Headless Service （即没有Cluster IP 的Service ）来实现</li><li>有序部署，有序扩展，即Pod 是有顺序的，在部署或者扩展的时候要依据定义的顺序依次依次进行（即从0 到N-1，在下一个Pod 运行之前所有之前的Pod 必须都是Running 和Ready 状态），基于init containers 来实现</li><li>有序收缩，有序删除（即从N-1 到0）<h3 id="1-9-Service"><a href="#1-9-Service" class="headerlink" title="1.9 Service"></a>1.9 Service</h3><code>Service</code>服务也是Kubernetes里的核心资源对象之一，Kubernetes里的每个Service其实就是我们经常提起的微服务架构中的一个微服务，之前讲解Pod、RC等资源对象其实都是为讲解Kubernetes  Service做铺垫的。</li></ul><p>Pod、RC与Service的逻辑关系图：</p><p><img src="https://img-blog.csdnimg.cn/20200225164134289.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>从图中可以看到，Kubernetes的Service定义了一个服务的访问入口地址，前端的应用（Pod）通过这个入口地址访问其背后的一组由Pod副本组成的集群实例，Service与其后端Pod副本集群之间则是通过<code>Label Selector</code>来实现无缝对接的。RC的作用实际上是保证Service的服务能力和服务质量始终符合预期标准。</p><p>Service 的相关知识非常重要也比较繁杂,这里不再过多赘述。详情请看<a href="http://docs.kubernetes.org.cn/703.html" target="_blank" rel="noopener">K8s中文社区-service讲解</a></p><h3 id="1-10-Job-Cron-Job"><a href="#1-10-Job-Cron-Job" class="headerlink" title="1.10 Job Cron Job"></a>1.10 Job Cron Job</h3><p>Job 负责批处理任务，即仅执行一次的任务，它保证批处理任务的一个或多个Pod 成功结束</p><p>Cron Job管理基于时间的Job，即：<em>在给定时间点只运行一次</em>周期性地在给定时间点运行</p><h3 id="1-11-Volume"><a href="#1-11-Volume" class="headerlink" title="1.11 Volume"></a>1.11 Volume</h3><p>Volume（存储卷）是Pod中能够被多个容器访问的共享目录。</p><p>Kubernetes的Volume概念、用途和目的与Docker的Volume比较类似，但两者不能等价。</p><p>首先，Kubernetes中的Volume被定义在Pod上，然后被一个Pod里的多个容器挂载到具体的文件目录下；其次，Kubernetes中的Volume与Pod的生命周期相同，但与容器的生命周期不相关，当容器终止或者重启时，Volume中的数据也不会丢失。最后，Kubernetes支持多种类型的Volume，例如GlusterFS、Ceph等先进的分布式文件系统。</p><h3 id="1-12-Namespace"><a href="#1-12-Namespace" class="headerlink" title="1.12 Namespace"></a>1.12 Namespace</h3><p>Namespace（命名空间）是Kubernetes系统中的另一个非常重要的概念，Namespace在很多情况下用于实现多租户的资源隔离。</p><p>Namespace通过将集群内部的资源对象“分配”到不同的Namespace中，形成逻辑上分组的不同项目、小组或用户组，便于不同的分组在共享使用整个集群的资源的同时还能被分别管理。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>上述这些组件是Kubernetes系统的核心组件，它们共同构成了Kubernetes系统的框架和计算模型。通过对它们进行灵活组合，用户就可以快速、方便地对容器集群进行配置、创建和管理。</p><p>下一节会详细记录一下搭建Kubernetes的过程。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上一节详细描述了Kubernetes的历史和发展过程。这一节就重点描述一下Kubernetes中的大部分概念如Node、Pod、Replication  Controller、Service等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Kubernetes架构图:&lt;/strong&gt;&lt;
      
    
    </summary>
    
      <category term="Kubernetes" scheme="https://plutoacharon.github.io/categories/Kubernetes/"/>
    
    
      <category term="Kubernetes" scheme="https://plutoacharon.github.io/tags/Kubernetes/"/>
    
  </entry>
  
</feed>
