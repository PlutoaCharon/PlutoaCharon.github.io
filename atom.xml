<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>浩翰Redamancy的博客</title>
  
  <subtitle>文质彬彬 然后君子</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://plutoacharon.github.io/"/>
  <updated>2020-04-09T12:32:26.531Z</updated>
  <id>https://plutoacharon.github.io/</id>
  
  <author>
    <name>浩翰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HA高可用与负载均衡入门到实战（五）---- 配置nginx反向代理和负载均衡</title>
    <link href="https://plutoacharon.github.io/2020/04/09/HA%E9%AB%98%E5%8F%AF%E7%94%A8%E4%B8%8E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98%EF%BC%88%E4%BA%94%EF%BC%89-%E9%85%8D%E7%BD%AEnginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%92%8C%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <id>https://plutoacharon.github.io/2020/04/09/HA高可用与负载均衡入门到实战（五）-配置nginx反向代理和负载均衡/</id>
    <published>2020-04-09T12:32:14.000Z</published>
    <updated>2020-04-09T12:32:26.531Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网站架构"><a href="#网站架构" class="headerlink" title="网站架构"></a>网站架构</h2><p>基于Docker容器里构建高并发网站</p><p>拓扑图:<br><img src="https://img-blog.csdnimg.cn/20200409155415760.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h3><ul><li>代理：也被叫做正向代理，是一个位于客户端和目标服务器之间的代理服务器</li><li>作用：客户端将发送的请求和指定的目标服务器提交给代理服务器，然后代理服务器向目标服务器发起请求，并将获得的响应结果返回给客户端的过程<br><img src="https://img-blog.csdnimg.cn/20200409170657710.png" alt="在这里插入图片描述"></li></ul><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><ul><li>反向代理：对于客户端而言就是目标服务器</li><li>作用：客户端向反向代理服务器发送请求后，反向代理服务器将该请求转发给内部网络上的后端服务器，并将从后端服务器上得到的响应结果返回给客户端<br><img src="https://img-blog.csdnimg.cn/20200409170738230.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h4 id="反向代理服务配置"><a href="#反向代理服务配置" class="headerlink" title="反向代理服务配置"></a>反向代理服务配置</h4></li><li>反向代理的配置指令：proxy_pass，用于设置后端服务器的地址。该地址中包括传输数据使用的协议、服务器主机名以及可选的URI资源等</li><li><p>作用范围：通常在location块中进行设置</p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3></li><li><p>指令：upstream指令可以实现负载均衡，在该指令中能够配置负载服务器组</p></li><li>配置方式：目前负载均衡有4种典型的配置方式</li></ul><table><thead><tr><th>配置方式</th><th>说明</th></tr></thead><tbody><tr><td>轮询方式</td><td>负载均衡默认设置方式，每个请求按照时间顺序逐一分配到不同的后端服务器进行处理，如果有服务器宕机，会自动剔除</td></tr><tr><td>权重方式</td><td>利用weight指定轮询的权重比率，与访问率成正比，用于后端服务器性能不均的情况</td></tr><tr><td>ip_hash方式</td><td>每个请求按访问IP的hash结果分配，这样可以使每个访客固定访问一个后端服务器，可以解决Session共享的问题</td></tr><tr><td>第三方模块</td><td>采用fair时，按照每台服务器的响应时间来分配请求，响应时间短的优先分配；若第三方模块采用url_hash时，按照访问url的hash值来分配请求</td></tr></tbody></table><h2 id="配置nginx反向代理，使用nginx1、APP1、APP2三个容器"><a href="#配置nginx反向代理，使用nginx1、APP1、APP2三个容器" class="headerlink" title="配置nginx反向代理，使用nginx1、APP1、APP2三个容器"></a>配置nginx反向代理，使用nginx1、APP1、APP2三个容器</h2><h3 id="使用php-apache镜像启动APP1和APP2两个容器"><a href="#使用php-apache镜像启动APP1和APP2两个容器" class="headerlink" title="使用php-apache镜像启动APP1和APP2两个容器"></a>使用php-apache镜像启动APP1和APP2两个容器</h3><p>1)    docker network create –subnet=172.18.0.0/16 cluster //创建docker网络<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker network create --subnet=172.18.0.0/16 cluster</span></span><br><span class="line">93cf616f5b6466f3872a697e7246d525173405659d659f775584460cc523fc19</span><br><span class="line">[root@localhost ~]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">5b668484dc8f        bridge              bridge              <span class="built_in">local</span></span><br><span class="line">93cf616f5b64        cluster             bridge              <span class="built_in">local</span></span><br><span class="line">f2010c589fe5        host                host                <span class="built_in">local</span></span><br><span class="line">3e84fc461677        none                null                <span class="built_in">local</span></span><br><span class="line">[root@localhost ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure></p><p>2)    启动容器APP1，设定地址为172.18.0.111, 启动容器APP2，设定地址为172.18.0.112</p><p><code>docker run -d --privileged --net cluster --ip 172.18.0.111 --name APP1 php-apache  /usr/sbin/init</code><br><code>docker run -d --privileged --net cluster --ip 172.18.0.112 --name APP2 php-apache  /usr/sbin/init</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker run -d --privileged --net cluster --ip 172.18.0.111 --name APP1 php-apache /usr/sbin/init </span></span><br><span class="line">0119783e023dbd322e6598c4556743408fb2fda176b26406b8c80d3d982bf02e</span><br><span class="line">[root@localhost ~]<span class="comment"># docker run -d --privileged --net cluster --ip 172.18.0.112 --name APP2 php-apache /usr/sbin/init </span></span><br><span class="line">f2744c76c1759187788620e84705a0905b1021da4d987620b96cc0f3b4d2eac8</span><br><span class="line">[root@localhost ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">f2744c76c175        php-apache          <span class="string">"/usr/sbin/init"</span>    4 seconds ago       Up 2 seconds                            APP2</span><br><span class="line">0119783e023d        php-apache          <span class="string">"/usr/sbin/init"</span>    20 seconds ago      Up 18 seconds                           APP1</span><br><span class="line">[root@localhost ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure></p><p>3)    配置容器APP1，编辑首页内容为“site1”<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker exec -it f27 /bin/bash</span></span><br><span class="line">[root@f2744c76c175 /]<span class="comment"># vim /var/www/html/index.html</span></span><br><span class="line">[root@f2744c76c175 /]<span class="comment"># systemctl status httpd</span></span><br><span class="line">● httpd.service - The Apache HTTP Server</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/httpd.service; disabled; vendor preset: disabled)</span><br><span class="line">  Drop-In: /usr/lib/systemd/system/httpd.service.d</span><br><span class="line">           └─php-fpm.conf</span><br><span class="line">   Active: inactive (dead)</span><br><span class="line">     Docs: man:httpd.service(8)</span><br><span class="line">[root@f2744c76c175 /]<span class="comment"># systemctl start httpd</span></span><br></pre></td></tr></table></figure></p><p>4)    配置容器APP1，编辑首页内容为“site2”<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker exec -it 011 /bin/bash</span></span><br><span class="line">[root@0119783e023d /]<span class="comment"># vim /var/www/html/index.html</span></span><br><span class="line">[root@0119783e023d /]<span class="comment"># systemctl start httpd</span></span><br><span class="line">[root@0119783e023d /]<span class="comment">#</span></span><br></pre></td></tr></table></figure></p><p>5)在宿主机访问<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># curl 172.18.0.111</span></span><br><span class="line">This is site1!</span><br><span class="line">[root@localhost ~]<span class="comment"># curl 172.18.0.112</span></span><br><span class="line">This is site2!</span><br><span class="line">[root@localhost ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure></p><h3 id="使用nginx镜像启动nginx1容器，配置反向代理"><a href="#使用nginx镜像启动nginx1容器，配置反向代理" class="headerlink" title="使用nginx镜像启动nginx1容器，配置反向代理"></a>使用nginx镜像启动nginx1容器，配置反向代理</h3><p>1)    启动容器nginx1，设定地址为172.18.0.11<br><code>docker run -d --privileged --net cluster --ip 172.18.0.11 -p 80:80 --name nginx1 nginx  /usr/sbin/init</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker run -d --privileged --net cluster --ip 172.18.0.11 -p 80:80 --name nginx1 nginx  /usr/sbin/init</span></span><br><span class="line">b0db3efdfe817b3df2557ef598e6bf709a5cabcfe2122d40caf344ee96075aac</span><br><span class="line">[root@localhost ~]<span class="comment"># docker exec -it b0d /bin/bash</span></span><br><span class="line">[root@b0db3efdfe81 /]<span class="comment">#</span></span><br></pre></td></tr></table></figure></p><p>2)    在容器nginx1编辑/etc/nginx/nginx.conf文件，重新启动nginx服务</p><p>配置两台虚拟主机<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">   listen 80;</span><br><span class="line">   server_name  site1.test.com;</span><br><span class="line">   location / &#123;</span><br><span class="line">     proxy_pass http://172.18.0.111;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">   listen 80;</span><br><span class="line">   server_name  site2.test.com;</span><br><span class="line">   location / &#123;</span><br><span class="line">     proxy_pass http://172.18.0.112;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>3)    }在主机编辑hosts文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">宿主机的IP地址    site1.test.com</span><br><span class="line">宿主机的IP地址    site2.test.com</span><br><span class="line">宿主机的IP地址    www.test.com</span><br></pre></td></tr></table></figure></p><p>4)    在主机使用浏览器访问site1.test.com<br><img src="https://img-blog.csdnimg.cn/20200409164810311.png" alt="在这里插入图片描述"><br>5)    在主机使用浏览器访问site2.test.com<br><img src="https://img-blog.csdnimg.cn/20200409164752131.png" alt="在这里插入图片描述"></p><h4 id="配置nginx负载均衡，使用nginx1、APP1、APP2三个容器"><a href="#配置nginx负载均衡，使用nginx1、APP1、APP2三个容器" class="headerlink" title="配置nginx负载均衡，使用nginx1、APP1、APP2三个容器"></a>配置nginx负载均衡，使用nginx1、APP1、APP2三个容器</h4><p><strong>保持以上三个容器不变</strong>     </p><p>使用nginx1容器，配置<code>nginx一般轮询负载均衡</code></p><p>1)    在容器nginx1编辑/etc/nginx/nginx.conf文件，重新启动nginx服务</p><p>配置 <a href="http://www.test.com虚拟主机" target="_blank" rel="noopener">www.test.com虚拟主机</a><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">   listen 80;</span><br><span class="line">   server_name  www.test.com;</span><br><span class="line">   location / &#123;</span><br><span class="line">     proxy_pass http://APP;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>配置负载均衡服务器组<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream APP &#123;</span><br><span class="line">   server 172.18.0.111;</span><br><span class="line">   server 172.18.0.112;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2)    在主机使用浏览器访问 <a href="http://www.test.com并不断刷新" target="_blank" rel="noopener">www.test.com并不断刷新</a><br><img src="https://img-blog.csdnimg.cn/20200409165619268.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200409165626825.png" alt="在这里插入图片描述"></p><h4 id="使用nginx1容器，配置nginx-IP哈希轮询"><a href="#使用nginx1容器，配置nginx-IP哈希轮询" class="headerlink" title="使用nginx1容器，配置nginx IP哈希轮询"></a>使用nginx1容器，配置nginx IP哈希轮询</h4><p>1)    在容器nginx1编辑/etc/nginx/conf.d/default.conf文件，重新启动nginx服务</p><p>配置 <a href="http://www.test.com虚拟主机" target="_blank" rel="noopener">www.test.com虚拟主机</a><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">   listen 80;</span><br><span class="line">   server_name  www.test.com;</span><br><span class="line">   location / &#123;</span><br><span class="line">     proxy_pass http://APP;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>配置负载均衡服务器组<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream APP &#123;</span><br><span class="line">   ip_hash;</span><br><span class="line">   server 172.18.0.111;</span><br><span class="line">   server 172.18.0.112;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2)    在不同ip主机使用浏览器访问 <a href="http://www.test.com" target="_blank" rel="noopener">www.test.com</a><br><img src="https://img-blog.csdnimg.cn/20200409170202667.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200409170146589.png" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;网站架构&quot;&gt;&lt;a href=&quot;#网站架构&quot; class=&quot;headerlink&quot; title=&quot;网站架构&quot;&gt;&lt;/a&gt;网站架构&lt;/h2&gt;&lt;p&gt;基于Docker容器里构建高并发网站&lt;/p&gt;
&lt;p&gt;拓扑图:&lt;br&gt;&lt;img src=&quot;https://img-blog.c
      
    
    </summary>
    
      <category term="高可用负载均衡" scheme="https://plutoacharon.github.io/categories/%E9%AB%98%E5%8F%AF%E7%94%A8%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
    
      <category term="高可用负载均衡" scheme="https://plutoacharon.github.io/tags/%E9%AB%98%E5%8F%AF%E7%94%A8%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
      <category term="Docker" scheme="https://plutoacharon.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>HA高可用与负载均衡入门到实战（四）---- 配置nginx防盗链和HTTPS</title>
    <link href="https://plutoacharon.github.io/2020/04/09/HA%E9%AB%98%E5%8F%AF%E7%94%A8%E4%B8%8E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98%EF%BC%88%E5%9B%9B%EF%BC%89-%E9%85%8D%E7%BD%AEnginx%E9%98%B2%E7%9B%97%E9%93%BE%E5%92%8CHTTPS/"/>
    <id>https://plutoacharon.github.io/2020/04/09/HA高可用与负载均衡入门到实战（四）-配置nginx防盗链和HTTPS/</id>
    <published>2020-04-09T12:31:21.000Z</published>
    <updated>2020-04-09T12:31:54.434Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><p>vmware虚拟机双核2G内存以上<br>安装有CentOS7和docker</p><h2 id="配置nginx图片防盗链"><a href="#配置nginx图片防盗链" class="headerlink" title="配置nginx图片防盗链"></a>配置nginx图片防盗链</h2><h3 id="配置盗链网站"><a href="#配置盗链网站" class="headerlink" title="配置盗链网站"></a>配置盗链网站</h3><p>1)    启动nginx容器，设置端口映射，并进入容器<br><code>docker run -d --privileged -p 80:80 -p 443:443 nginx /usr/sbin/init</code></p><p>2)    在nginx容器中准备两个网站，配置文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">   listen 80;</span><br><span class="line">   server_name  site1.test.com;</span><br><span class="line">   root  /var/www/html/site1;</span><br><span class="line">   index  index.html;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">   listen 80;</span><br><span class="line">   server_name  site2.test.com;</span><br><span class="line">   root  /var/www/html/site2;</span><br><span class="line">   index  index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3)    在主机编辑hosts文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">虚拟机的IP地址    site1.test.com</span><br><span class="line">虚拟机的IP地址    site2.test.com</span><br></pre></td></tr></table></figure></p><p>4)    创建/var/www/html/site1/index.html，展示自己的图片<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>welcome to site1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">”1.jpg”</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>从网上随便下载一张图片作为<code>1.jpg</code><br><code>wget https://www.heuet.edu.cn/images/18/03/07/2tf9v0vlbb/20150415094513422.jpg</code><br>5)    创建/var/www/html/site2/index.html，盗用site1的图片<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>welcome to site2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">”http://site1.test.com/1.jpg”</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@5ef46ce6b610 /]<span class="comment"># mkdir -p /var/www/html/site1</span></span><br><span class="line">[root@5ef46ce6b610 /]<span class="comment"># mkdir -p /var/www/html/site2</span></span><br><span class="line">[root@5ef46ce6b610 /]<span class="comment"># vim /var/www/html/site1/index.html</span></span><br><span class="line">[root@5ef46ce6b610 /]<span class="comment"># vim /var/www/html/site2/index.html</span></span><br><span class="line">[root@5ef46ce6b610 /]<span class="comment"># cat /var/www/html/site1/index.html</span></span><br><span class="line">&lt;h1&gt;welcome to site1&lt;/h1&gt;</span><br><span class="line">&lt;img src=<span class="string">"1.jpg"</span>&gt;</span><br><span class="line">[root@5ef46ce6b610 /]<span class="comment"># cat /var/www/html/site2/index.html</span></span><br><span class="line">&lt;h1&gt;welcome to site2&lt;/h1&gt;</span><br><span class="line">&lt;img src=<span class="string">"http://site1.test.com/1.jpg"</span>&gt;</span><br><span class="line">[root@5ef46ce6b610 /]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>重启nginx服务<br><code>systemctl restart nginx</code><br>6)    在主机浏览器访问site1.test.com<br><img src="https://img-blog.csdnimg.cn/20200409142548690.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>7)    在主机浏览器访问site2.test.com<br><img src="https://img-blog.csdnimg.cn/20200409142557540.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="配置site1-test-com防盗链"><a href="#配置site1-test-com防盗链" class="headerlink" title="配置site1.test.com防盗链"></a>配置site1.test.com防盗链</h3><p>1)    在nginx容器中编辑/etc/nginx/nginx.conf文件，配置防盗链<br>配置两台虚拟主机<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">  server &#123;</span><br><span class="line">  listen       80; </span><br><span class="line">  server_name  site1.test.com;</span><br><span class="line">      </span><br><span class="line">  location / &#123; </span><br><span class="line">  root   /var/www/html/site1;</span><br><span class="line">  index  index.html index.htm;</span><br><span class="line">  &#125;   </span><br><span class="line">  </span><br><span class="line">  location ~  \.(jpg|png|gif)$ &#123;</span><br><span class="line">  valid_referers  site1.test.com;</span><br><span class="line">  if ($invalid_referer) &#123;</span><br><span class="line">  return 403; </span><br><span class="line">  &#125;           </span><br><span class="line">  &#125;   </span><br><span class="line">  &#125;       </span><br><span class="line"></span><br><span class="line">  server &#123;                                                         </span><br><span class="line">  listen       80;                                                     </span><br><span class="line">  server_name  site2.test.com;                                             </span><br><span class="line">  location / &#123;                                                                 </span><br><span class="line">  root   /var/www/html/site2;                                                          </span><br><span class="line">  index  index.html index.htm;                                                                 </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>说明</strong>：<br>判断referer的值，来判断当前图片的引用是否合法，一旦检测到来源不是本站，就立即阻止图片的发送，或换成一张禁止防盗链提示的图片<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location ~  \.(jpg|png|gif)$ &#123;</span><br><span class="line">    valid_referers  site1.test.com;</span><br><span class="line">    if ($invalid_referer) &#123;</span><br><span class="line">    return 403; </span><br><span class="line">    &#125;           </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><ul><li>第1行配置，用于匹配文件扩展名为gif、jpg、png、swf、flv的资源</li><li>第2行中的<code>valid_referers</code>指令用于设置允许访问资源的网站列表（即白名单）。当请求消息头中的<code>referer</code>符合白名单时，内置变量<code>$invalid_referer</code>的值为空字符串，否则为1</li><li>第3~5行的配置，可以禁止白名单之外的网站访问资源，并返回403状态码</li></ul><p>2)    在主机使用浏览器访问site1.test.com<br><img src="https://img-blog.csdnimg.cn/20200409145300851.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>3)    在主机使用浏览器访问site2.test.com</p><p>如果测试仍然显示图片，是因为浏览器还有上次访问的缓存<br>建议更换浏览器，或者清理缓存<br><img src="https://img-blog.csdnimg.cn/20200409145242984.png" alt="在这里插入图片描述"></p><h2 id="配置nginx的HTTPS网站"><a href="#配置nginx的HTTPS网站" class="headerlink" title="配置nginx的HTTPS网站"></a>配置nginx的HTTPS网站</h2><h3 id="颁发网站认证证书"><a href="#颁发网站认证证书" class="headerlink" title="颁发网站认证证书"></a>颁发网站认证证书</h3><p>1)    在nginx容器中检查系统安装了openssl<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@5ef46ce6b610 site1]<span class="comment"># rpm -qa | grep ssl</span></span><br><span class="line">openssl-libs-1.1.1c-2.el8.x86_64</span><br><span class="line">openssl-1.1.1c-2.el8.x86_64</span><br><span class="line">[root@5ef46ce6b610 site1]<span class="comment">#</span></span><br></pre></td></tr></table></figure></p><p>2)    建立/etc/nginx/ssl目录，并生成服务器RSA私钥<br><code>openssl genrsa  -out server.key 2048</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[root@5ef46ce6b610 site1]<span class="comment"># mkdir /etc/nginx/ssl</span></span><br><span class="line">[root@5ef46ce6b610 site1]<span class="comment"># cd /etc/nginx/ssl/</span></span><br><span class="line">[root@5ef46ce6b610 ssl]<span class="comment"># </span></span><br><span class="line">[root@5ef46ce6b610 ssl]<span class="comment"># ls</span></span><br><span class="line">[root@5ef46ce6b610 ssl]<span class="comment"># openssl genrsa  -out server.key 2048</span></span><br><span class="line">Generating RSA private key, 2048 bit long modulus (2 primes)</span><br><span class="line">..............+++++</span><br><span class="line">.....................................................................................................................................................................................+++++</span><br><span class="line">e is 65537 (0x010001)</span><br><span class="line">[root@5ef46ce6b610 ssl]<span class="comment"># ls</span></span><br><span class="line">server.key</span><br><span class="line">[root@5ef46ce6b610 ssl]<span class="comment"># cat server.key </span></span><br><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">MIIEowIBAAKCAQEAmfzZmG91slq8a5CNaNF28QFSyBxh4AO6ztTCzKpPXoxCNANm</span><br><span class="line">8BnmWLd3EIwBZCYWh6JUrfc8HxTATbWyHw0KqE6rEDlui15bg9crtu1xrD8XIbpg</span><br><span class="line">/uzfDDemg9evxdXqQ4PjcbojxRkkuKF8OSyaG38Z8K0Fd9ZXbbX4Hy0rGhDrPIby</span><br><span class="line">WcZBfOH4V6MpPEM703p7yfGOd/TAxz9j9TgTj8hzsTL1qGHz/g8x75Ok+Sukmln6</span><br><span class="line">c3m9Vq2W5EiN0oo/uFJGvs3QmiF7wbWAdFFOTnjJ7C6XYFmzizI6oNCShegQMgoK</span><br><span class="line">Z2G4fTnidnNKD9gKn8Qz3HWTf7Y6VMflqY3Y2QIDAQABAoIBAEo6wQnicPIRG1Me</span><br><span class="line">04v7rUJwSN9+DxBVu++IUH8oeioxophAK5cCZS/PAO5RDzqfwayQbBGQZML21dyg</span><br><span class="line">AcVGHCUWBxBDHy6/xY3AY6pCu9E0eIohtjAtLzhMe1CC4JCVleAF69YezK9ud20p</span><br><span class="line">KyDEh2VJ189VGJW0FWElnv4oX+aoEcirH+nTgxtYLh1AOE5Ts9MExSokl+g4u8CY</span><br><span class="line">3k/qNXz+0RfqUAoUgue8BPAo3xqY1EXiL0kAkch73ipAW++Nd8y53M7Pcjxh+xSl</span><br><span class="line">BSBBr1xE4dEQyZiYwMUxwdYVwChTr28T2hFIbc2SO1J5h0KsG5+HxiPJgPjNAsMC</span><br><span class="line">gjL5PIECgYEAymcXhZOfOXHTl8CANGM981Pp/i1QtjDpTehCOFidlucL2WKSfx9O</span><br><span class="line">kwClI0oR5DnAt9nieQrjRIVNpAhsqc8DaFEDCqDj6snUEu4lTMHmUNhiEeYgl01X</span><br><span class="line">UYP+xUf68b4VSWqZL9Lnf50Mo9ztTEcRaJPITYBKUV0IoXpgfpSwVP0CgYEAwsOy</span><br><span class="line">pTKk8wx0qWlRU8P7/t2fdtBYe1eR/xR/i50Nkzmna4M9BP0UDTMZcKFgLcIC4yr9</span><br><span class="line">Q/3zBYw5UrAMVK7aFX1WSdrIohqPNnejcOpO28SfxxR9amDpaeOGo4E5ijyLeB9B</span><br><span class="line">EUCBv9xaCE0/gsY4atmWE4PpGMHoj3QABuY6KA0CgYEAwLYdiDpBDRHatA8+QiMH</span><br><span class="line">til8jl0ZDw9M47ezbTC6gxZjisw2zcDCMGcZ1JrOpC1019glsLf0IaaGgRrgU2He</span><br><span class="line">TbFsou8DcuZN/OQwMYAgyXLtFTu2ZjjmXZ++sJnTTd59KBTN2+IENtYSVeahLdIw</span><br><span class="line">uhCTU29F02gwModxXrQ1nAUCgYBHSDyv/ZMlaV+hSWx8jfRC2XYtlB9uNSS4CRaN</span><br><span class="line">UJPRWH6P+N5yXvXhxtv+vvFmjeVkoy1Cn0U8uI+aVdiNfdlPmCnmqe5YdgQIWU02</span><br><span class="line">XGs0QAiCYltsfb+wA5gZa4hVsccR1c6Is+VJBSrmcu9Vu5qWcMBesB618vJc3oXM</span><br><span class="line">AKM0WQKBgHqQX7HKA3g2UarzwBLpPugQobmU8ku4cvUF2n1ZkL6mq4BuXwKf3UPT</span><br><span class="line">wjVkFLFG+OcI+NmPB1NzU0szXYExBVSIYHHizQ8sX1ILUYOzLzJVGtWL221kiPhk</span><br><span class="line">ldheBAdeoRY7yfo0OcaHxPFmgQJPqqgISTFSlTRy+r1AFsqPr1D0</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure><p>3)    生成服务器CSR证书请求文件，注意<strong>站点名称要一致</strong></p><p><code>openssl req -new -key server.key -out server.csr</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">[root@5ef46ce6b610 ssl]<span class="comment"># openssl req -new -key server.key -out server.csr</span></span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter <span class="string">'.'</span>, the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [XX]:CN</span><br><span class="line">State or Province Name (full name) []:Hebei</span><br><span class="line">Locality Name (eg, city) [Default City]:Shijiazhuang     </span><br><span class="line">Organization Name (eg, company) [Default Company Ltd]:It</span><br><span class="line">Organizational Unit Name (eg, section) []:www.test.com</span><br><span class="line">Common Name (eg, your name or your server<span class="string">'s hostname) []:test@qq.com</span></span><br><span class="line"><span class="string">Email Address []:test@qq.com</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Please enter the following '</span>extra<span class="string">' attributes</span></span><br><span class="line"><span class="string">to be sent with your certificate request</span></span><br><span class="line"><span class="string">A challenge password []:</span></span><br><span class="line"><span class="string">An optional company name []:</span></span><br><span class="line"><span class="string">[root@5ef46ce6b610 ssl]# ls</span></span><br><span class="line"><span class="string">server.csr  server.key</span></span><br><span class="line"><span class="string">[root@5ef46ce6b610 ssl]# cat server.csr </span></span><br><span class="line"><span class="string">-----BEGIN CERTIFICATE REQUEST-----</span></span><br><span class="line"><span class="string">MIIC0DCCAbgCAQAwgYoxCzAJBgNVBAYTAkNOMQ4wDAYDVQQIDAVIZWJlaTEVMBMG</span></span><br><span class="line"><span class="string">A1UEBwwMU2hpamlhemh1YW5nMQswCQYDVQQKDAJJdDEVMBMGA1UECwwMd3d3LnRl</span></span><br><span class="line"><span class="string">c3QuY29tMRQwEgYDVQQDDAt0ZXN0QHFxLmNvbTEaMBgGCSqGSIb3DQEJARYLdGVz</span></span><br><span class="line"><span class="string">dEBxcS5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCZ/NmYb3Wy</span></span><br><span class="line"><span class="string">WrxrkI1o0XbxAVLIHGHgA7rO1MLMqk9ejEI0A2bwGeZYt3cQjAFkJhaHolSt9zwf</span></span><br><span class="line"><span class="string">FMBNtbIfDQqoTqsQOW6LXluD1yu27XGsPxchumD+7N8MN6aD16/F1epDg+NxuiPF</span></span><br><span class="line"><span class="string">GSS4oXw5LJobfxnwrQV31ldttfgfLSsaEOs8hvJZxkF84fhXoyk8QzvTenvJ8Y53</span></span><br><span class="line"><span class="string">9MDHP2P1OBOPyHOxMvWoYfP+DzHvk6T5K6SaWfpzeb1WrZbkSI3Sij+4Uka+zdCa</span></span><br><span class="line"><span class="string">IXvBtYB0UU5OeMnsLpdgWbOLMjqg0JKF6BAyCgpnYbh9OeJ2c0oP2AqfxDPcdZN/</span></span><br><span class="line"><span class="string">tjpUx+WpjdjZAgMBAAGgADANBgkqhkiG9w0BAQsFAAOCAQEAGTlfc6+S5ptsyJ47</span></span><br><span class="line"><span class="string">lN8+neD6+9wX+5zomp3TUHbikSAdUvwNHnZJb2M3Mrg5q+Lde9MLj0W3rlVNx8Sr</span></span><br><span class="line"><span class="string">4OMVvO/f/C/cUp0r6Qn2RRUtP9HRCthuQTP+61cXr8WUpOjcbnr6VE2tJ285KdU2</span></span><br><span class="line"><span class="string">uR9ODTwfl5iP6hwyBlXLkDohhDuGAYlEL93yt3OzCTddeVFqklhD5cAlWX3s+pqm</span></span><br><span class="line"><span class="string">Xzv70KUy68rCL1YDjgXX6u6QZ+63z+pmQoXv/Bk6JYUAqalKeeQH/VtHGwaJ6UuP</span></span><br><span class="line"><span class="string">QF40i8ffeFuk8ZmgCB1jm57MPR1oyorgI72063wE6cvrf0OLFSCJfufyab5mvzV/</span></span><br><span class="line"><span class="string">bNjXbQ==</span></span><br><span class="line"><span class="string">-----END CERTIFICATE REQUEST-----</span></span><br></pre></td></tr></table></figure></p><p>4)    生成服务器认证证书<br><code>openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@5ef46ce6b610 ssl]<span class="comment"># openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt</span></span><br><span class="line">Signature ok</span><br><span class="line">subject=C = CN, ST = Hebei, L = Shijiazhuang, O = It, OU = www.test.com, CN = <span class="built_in">test</span>@qq.com, emailAddress = <span class="built_in">test</span>@qq.com</span><br><span class="line">Getting Private key</span><br><span class="line">[root@5ef46ce6b610 ssl]<span class="comment"># ls</span></span><br><span class="line">server.crt  server.csrserver.key</span><br><span class="line">[root@5ef46ce6b610 ssl]<span class="comment"># cat server.crt </span></span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIIDnTCCAoUCFDma9qKjZRh7KOsFlB/xS+FVG7xJMA0GCSqGSIb3DQEBCwUAMIGK</span><br><span class="line">MQswCQYDVQQGEwJDTjEOMAwGA1UECAwFSGViZWkxFTATBgNVBAcMDFNoaWppYXpo</span><br><span class="line">dWFuZzELMAkGA1UECgwCSXQxFTATBgNVBAsMDHd3dy50ZXN0LmNvbTEUMBIGA1UE</span><br><span class="line">AwwLdGVzdEBxcS5jb20xGjAYBgkqhkiG9w0BCQEWC3Rlc3RAcXEuY29tMB4XDTIw</span><br><span class="line">MDQwOTA3MTcxNloXDTIxMDQwOTA3MTcxNlowgYoxCzAJBgNVBAYTAkNOMQ4wDAYD</span><br><span class="line">VQQIDAVIZWJlaTEVMBMGA1UEBwwMU2hpamlhemh1YW5nMQswCQYDVQQKDAJJdDEV</span><br><span class="line">MBMGA1UECwwMd3d3LnRlc3QuY29tMRQwEgYDVQQDDAt0ZXN0QHFxLmNvbTEaMBgG</span><br><span class="line">CSqGSIb3DQEJARYLdGVzdEBxcS5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAw</span><br><span class="line">ggEKAoIBAQCZ/NmYb3WyWrxrkI1o0XbxAVLIHGHgA7rO1MLMqk9ejEI0A2bwGeZY</span><br><span class="line">t3cQjAFkJhaHolSt9zwfFMBNtbIfDQqoTqsQOW6LXluD1yu27XGsPxchumD+7N8M</span><br><span class="line">N6aD16/F1epDg+NxuiPFGSS4oXw5LJobfxnwrQV31ldttfgfLSsaEOs8hvJZxkF8</span><br><span class="line">4fhXoyk8QzvTenvJ8Y539MDHP2P1OBOPyHOxMvWoYfP+DzHvk6T5K6SaWfpzeb1W</span><br><span class="line">rZbkSI3Sij+4Uka+zdCaIXvBtYB0UU5OeMnsLpdgWbOLMjqg0JKF6BAyCgpnYbh9</span><br><span class="line">OeJ2c0oP2AqfxDPcdZN/tjpUx+WpjdjZAgMBAAEwDQYJKoZIhvcNAQELBQADggEB</span><br><span class="line">AFrdSAQ4MM6sHUZWKJ2YzcXUjt/kG+h23itQ0uF4OqW05U0pSFCf6iG/SVtC9TIh</span><br><span class="line">z76uih7Nk2NwJ5IPfyYJfM+CXLf2vxv8y9QuA8D9dWQqMcliOl1XI3E36mK9mMfj</span><br><span class="line">+x7TCaNbq02AvlYVyp9Ex7SwI8zfn54i34uM9+OhJGWWeGDKDzNtjQSQzlM0NAuP</span><br><span class="line">i/WzDgNbl+ve27WHI9pXWAytLoEoh7NND5fKBLoqqK3Urky1vaL1YPv+MSIQ56Nr</span><br><span class="line">uLQ8Yxqz3TH0y/wNJVE3BSZvayTeP5bvLWVU8jHLWZSRQelx++UpNFEtD/nALJAJ</span><br><span class="line">e1BLIz/apbR6z4cmpvZoGLQ=</span><br><span class="line">-----END CERTIFICATE-----</span><br></pre></td></tr></table></figure><h3 id="配置HTTPS网站"><a href="#配置HTTPS网站" class="headerlink" title="配置HTTPS网站"></a>配置HTTPS网站</h3><p>1)    在主机编辑hosts文件，并使用ping命令检查<br>   <code>虚拟机的IP地址    www.test.com</code></p><p>2)    编辑/etc/nginx/nginx.conf文件，配置HTTPS站点<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">   listen 443;</span><br><span class="line">   server_name  www.test.com;</span><br><span class="line">   root /var/www/html;</span><br><span class="line">   ssl on;</span><br><span class="line">   ssl_certificate /etc/nginx/ssl/server.crt;</span><br><span class="line">   ssl_certificate_key /etc/nginx/ssl/server.key;</span><br><span class="line">   location / &#123;</span><br><span class="line">   index index.html;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3)    编辑 /var/www/html/index.html，重载nginx<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>this is https site!!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>systemctl restart nginx</code></p><p>4)    重载nginx，在主机使用浏览器访问 <strong><a href="https://www.test.com" target="_blank" rel="noopener">https://www.test.com</a></strong><br> <img src="https://img-blog.csdnimg.cn/2020040915302657.png" alt="在这里插入图片描述"><br>5)    在浏览器中查看网站证书，<br><img src="https://img-blog.csdnimg.cn/20200409153032840.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;环境要求&quot;&gt;&lt;a href=&quot;#环境要求&quot; class=&quot;headerlink&quot; title=&quot;环境要求&quot;&gt;&lt;/a&gt;环境要求&lt;/h2&gt;&lt;p&gt;vmware虚拟机双核2G内存以上&lt;br&gt;安装有CentOS7和docker&lt;/p&gt;
&lt;h2 id=&quot;配置nginx图片防盗
      
    
    </summary>
    
      <category term="高可用负载均衡" scheme="https://plutoacharon.github.io/categories/%E9%AB%98%E5%8F%AF%E7%94%A8%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
    
      <category term="高可用负载均衡" scheme="https://plutoacharon.github.io/tags/%E9%AB%98%E5%8F%AF%E7%94%A8%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
      <category term="Docker" scheme="https://plutoacharon.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>HA高可用与负载均衡入门到实战（一）----Docker中安装与配置Nginx</title>
    <link href="https://plutoacharon.github.io/2020/04/09/HA%E9%AB%98%E5%8F%AF%E7%94%A8%E4%B8%8E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%89%EF%BC%89----%20%E9%85%8D%E7%BD%AENginx%E6%94%AF%E6%8C%81PHP%E5%B9%B6%E5%AE%9E%E7%8E%B0%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/"/>
    <id>https://plutoacharon.github.io/2020/04/09/HA高可用与负载均衡入门到实战（三）---- 配置Nginx支持PHP并实现动静分离/</id>
    <published>2020-04-09T12:30:30.000Z</published>
    <updated>2020-04-09T12:30:51.705Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p>vmware虚拟机双核2G内存以上<br>安装有CentOS7和docker</p><h2 id="配置nginx支持php"><a href="#配置nginx支持php" class="headerlink" title="配置nginx支持php"></a>配置nginx支持php</h2><h3 id="启动进入容器nginx"><a href="#启动进入容器nginx" class="headerlink" title="启动进入容器nginx"></a>启动进入容器nginx</h3><ol><li>启动容器docker run -d –privileged -p 80:80 nginx /usr/sbin/init<br><img src="https://img-blog.csdnimg.cn/20200409130628512.png" alt="在这里插入图片描述"><br>2)    查看容器docker ps<br><img src="https://img-blog.csdnimg.cn/20200409130650454.png" alt="在这里插入图片描述"><br>3)    进入容器docker exec -it 容器ID /bin/bash<br><img src="https://img-blog.csdnimg.cn/20200409130658431.png" alt="在这里插入图片描述"><h3 id="使用yum方式安装php-fpm"><a href="#使用yum方式安装php-fpm" class="headerlink" title="使用yum方式安装php-fpm"></a>使用yum方式安装php-fpm</h3></li></ol><p>1)    使用yum 方式安装php-fpm</p><p>2)    查看php-fpm配置文件：/etc/php-fpm.conf和/etc/php-fpm.d/<a href="http://www.conf" target="_blank" rel="noopener">www.conf</a></p><p>3)    编辑/etc/php-fpm.d/<a href="http://www.conf，修改监听地址和端口" target="_blank" rel="noopener">www.conf，修改监听地址和端口</a><br> <img src="https://img-blog.csdnimg.cn/20200409130800437.png" alt="在这里插入图片描述"></p><p>4)    启动php-fpm，systemctl start php-fpm</p><p>5)    配置php-fpm自启动，systemctl enable php-fpm</p><p>6)    netstat -antp，查看php-fpm监听端口；<br> <img src="https://img-blog.csdnimg.cn/20200409130837812.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="配置nginx支持php-1"><a href="#配置nginx支持php-1" class="headerlink" title="配置nginx支持php"></a>配置nginx支持php</h3><p>1)    编辑/etc/nginx/nginx.conf文件, 重新启动nginx服务</p><p>删除原有server代码块</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">   listen 80;</span><br><span class="line">   server_name  localhost;</span><br><span class="line">    location / &#123;</span><br><span class="line">     root /var/www;</span><br><span class="line">     index  index.html;</span><br><span class="line">    &#125;</span><br><span class="line">location ~ \.php$ &#123;</span><br><span class="line">       fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">       fastcgi_index  index.php;</span><br><span class="line">       fastcgi_param  SCRIPT_FILENAME  /var/www/$fastcgi_script_name;</span><br><span class="line">       include        fastcgi_params;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>关于FastCGI</strong>：</p><p>请求处理流程：CGI规范允许Web服务器根据浏览器请求调用CGI程序，并将其输出结果通过响应发送给浏览器，从而使Web服务器支持处理复杂的网站业务需求<br><img src="https://img-blog.csdnimg.cn/20200409133304831.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>2)    在/var/www目录下建立index.php文件<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> phpinfo();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>3)    在主机中使用浏览器访问http://虚拟机地址/index.php</p><p><img src="https://img-blog.csdnimg.cn/20200409132134974.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="配置Nginx-Apache实现动静分离"><a href="#配置Nginx-Apache实现动静分离" class="headerlink" title="配置Nginx+Apache实现动静分离"></a>配置Nginx+Apache实现动静分离</h2><p>动静分离：</p><p>由Nginx提供对外访问，静态请求直接由Nginx处理，动态请求转交给Apache处理，这样就实现了动静分离。<br>动态请求是指该请求需要服务器端的程序处理。静态请求不需要程序处理，直接读取文件并返回即可。<br><img src="https://img-blog.csdnimg.cn/20200409133509694.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="启动进入容器centos-v1"><a href="#启动进入容器centos-v1" class="headerlink" title="启动进入容器centos:v1"></a>启动进入容器centos:v1</h3><p>1)    启动容器docker run -d –privileged centos:v1 /usr/sbin/init<br><img src="https://img-blog.csdnimg.cn/20200409132232847.png" alt="在这里插入图片描述"><br>2)    查看容器docker ps -a</p><p>3)    进入容器docker exec -it 容器ID /bin/bash</p><h3 id="使用yum方式安装apache和php"><a href="#使用yum方式安装apache和php" class="headerlink" title="使用yum方式安装apache和php"></a>使用yum方式安装apache和php</h3><p>1)    使用yum方式安装httpd</p><p>2)    使用yum方式安装php</p><p>3)    编辑/var/www/html/site.php文件<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span> php</span><br><span class="line"><span class="keyword">echo</span> “site2”;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>4)    重启httpd，netstat -antp查看监听端口<br> <img src="https://img-blog.csdnimg.cn/20200409132357678.png" alt="在这里插入图片描述"><br>5)    配置httpd自启动，systemctl enable httpd</p><p>6)    在虚拟机使用curl http://容器地址/site.php<br><img src="https://img-blog.csdnimg.cn/20200409132426899.png" alt="在这里插入图片描述">在虚拟机中保存容器，docker commit 容器ID php-apache</p><h3 id="配置nginx支持动静分离"><a href="#配置nginx支持动静分离" class="headerlink" title="配置nginx支持动静分离"></a>配置nginx支持动静分离</h3><p>1)    进入容器nginx</p><p>2)    编辑/etc/nginx/nginx.conf文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">   listen 80;</span><br><span class="line">   server_name  localhost;</span><br><span class="line">    location / &#123;</span><br><span class="line">     root /var/www;</span><br><span class="line">     index  index.html;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">       proxy_pass   http://172.17.0.3;</span><br><span class="line">       proxy_set_header host $host;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3)    重新启动nginx服务<br>4)    在主机中使用浏览器访问http://虚拟机地址/site.php</p><p><img src="https://img-blog.csdnimg.cn/20200409132640385.png" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;实验环境&quot;&gt;&lt;a href=&quot;#实验环境&quot; class=&quot;headerlink&quot; title=&quot;实验环境&quot;&gt;&lt;/a&gt;实验环境&lt;/h2&gt;&lt;p&gt;vmware虚拟机双核2G内存以上&lt;br&gt;安装有CentOS7和docker&lt;/p&gt;
&lt;h2 id=&quot;配置nginx支持ph
      
    
    </summary>
    
      <category term="高可用负载均衡" scheme="https://plutoacharon.github.io/categories/%E9%AB%98%E5%8F%AF%E7%94%A8%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
    
      <category term="高可用负载均衡" scheme="https://plutoacharon.github.io/tags/%E9%AB%98%E5%8F%AF%E7%94%A8%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
      <category term="Docker" scheme="https://plutoacharon.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>HA高可用与负载均衡入门到实战（一）----Docker中安装与配置Nginx</title>
    <link href="https://plutoacharon.github.io/2020/04/09/HA%E9%AB%98%E5%8F%AF%E7%94%A8%E4%B8%8E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89----Docker%E4%B8%AD%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AENginx%20/"/>
    <id>https://plutoacharon.github.io/2020/04/09/HA高可用与负载均衡入门到实战（一）----Docker中安装与配置Nginx /</id>
    <published>2020-04-09T12:30:30.000Z</published>
    <updated>2020-04-09T12:30:36.250Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实现Docker容器中安装配置Nginx"><a href="#实现Docker容器中安装配置Nginx" class="headerlink" title="实现Docker容器中安装配置Nginx"></a>实现Docker容器中安装配置Nginx</h2><h3 id="1-启动进入容器"><a href="#1-启动进入容器" class="headerlink" title="1. 启动进入容器"></a>1. 启动进入容器</h3><p><strong>1.1 拉取centos镜像:</strong><br><code>docker pull centos</code></p><blockquote><p>注意: 这样拉取的是最新的centos8镜像,如果想要拉取centos7则使用<code>docker pull centos:7</code></p></blockquote><p><strong>1.2 启动进入容器</strong><br><code>docker run -d --privileged --name nginx centos:v1 /usr/sbin/init</code><br>我这里起名为<code>myNginx</code>, 名字都可以只要不和其他容器冲突就行<br><img src="https://img-blog.csdnimg.cn/20200319122650212.png" alt="在这里插入图片描述"><br><code>docker exec -it 容器ID /bin/bash</code>进入容器<br><img src="https://img-blog.csdnimg.cn/20200319122659668.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="2-在容器中安装Nginx"><a href="#2-在容器中安装Nginx" class="headerlink" title="2. 在容器中安装Nginx"></a>2. 在容器中安装Nginx</h3><p><strong>2.1 在容器中编辑/etc/yum.repos.d/nginx.repo设置yum源</strong></p><pre><code>[nginx]name=nginx repobaseurl=http://nginx.org/packages/centos/$releasever/$basearch/gpgcheck=0enabled=1</code></pre><p><strong>2.2 yum install -y nginx安装</strong><br><img src="https://img-blog.csdnimg.cn/20200319122936842.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>2.3 启动nginx</strong></p><pre><code>systemctl start nginxsystemctl enable nginx #设置开机自动启动</code></pre><p><strong>2.4 保存容器</strong><br><code>docker commit 容器ID  nginx</code><br><img src="https://img-blog.csdnimg.cn/20200319123051761.png" alt="在这里插入图片描述"></p><h3 id="3-启动Nginx"><a href="#3-启动Nginx" class="headerlink" title="3. 启动Nginx"></a>3. 启动Nginx</h3><p><strong>3.1 启动容器</strong><br><code>docker run -d  -p 80:80 --privileged nginx /usr/sbin/init</code><br><img src="https://img-blog.csdnimg.cn/20200319123202712.png" alt="在这里插入图片描述"></p><p><strong>3.2 主机中使用浏览器访问虚拟机IP地址</strong><br><img src="https://img-blog.csdnimg.cn/20200319123229811.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="4-配置nginx主目录"><a href="#4-配置nginx主目录" class="headerlink" title="4. 配置nginx主目录"></a>4. 配置nginx主目录</h3><p><strong>4.1 进入nginx容器，查看/etc/nginx/nginx.conf文件</strong><br>更改root目录<br><img src="https://img-blog.csdnimg.cn/20200319123432591.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>4.2 建立/var/webroot/www目录</strong></p><p>编辑index.html文件<br><img src="https://img-blog.csdnimg.cn/20200319123534990.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>4.3 重新启动nginx服务并在主机使用浏览器访问</strong><br><img src="https://img-blog.csdnimg.cn/20200319123609739.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="5-配置Nginx错误页重定向"><a href="#5-配置Nginx错误页重定向" class="headerlink" title="5. 配置Nginx错误页重定向"></a>5. 配置Nginx错误页重定向</h3><p><strong>5.1 编辑/etc/nginx/nginx.conf文件，配置error_page指令指定404页面</strong><br><img src="https://img-blog.csdnimg.cn/2020031912371967.png" alt="在这里插入图片描述"><br><strong>5.2 在/var/webroot/www目录，编辑404.html文件</strong><br><img src="https://img-blog.csdnimg.cn/20200319123744306.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200319123755113.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>5.3 配置error_page 404 =200更改响应状态码</strong><br><img src="https://img-blog.csdnimg.cn/20200319123820117.png" alt="在这里插入图片描述"><br>重启服务<br><img src="https://img-blog.csdnimg.cn/2020031912382874.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="6-配置nginx访问控制权"><a href="#6-配置nginx访问控制权" class="headerlink" title="6. 配置nginx访问控制权"></a>6. 配置nginx访问控制权</h3><p><strong>6.1 在server块内增加deny all指令</strong><br><img src="https://img-blog.csdnimg.cn/20200319123935234.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200319123949645.png" alt="在这里插入图片描述"><br><strong>6.2 使用location块进行访问控制</strong><br><img src="https://img-blog.csdnimg.cn/20200319124034356.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200319124101805.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200319124049615.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>可以看到,当直接访问<code>直接访问http://192.168.0.131/</code>deny拒绝<br>访问<code>访问index.html页面</code>allow允许</p><h4 id="原因"><a href="#原因" class="headerlink" title="原因:"></a>原因:</h4><p><code>http://192.168.0.131/</code>的结果是 <code>403 Forbidden</code>，说明被匹配到<code>location / {..deny all;}</code>了</p><p>原因很简单HTTP 请求 GET / 被“严格精确”匹配到了普通<code>location / {}</code> ，则会停止搜索正则<code>location ；</code></p><p><code>http://192.168.0.131/index.html</code> 结果是之前设置的index页面，说明没有被<code>location / {…deny all;}</code>匹配，否则会 403 Forbidden。</p><p>但 /index.html 的确也是以“ / ”开头的，只不过此时的普通<code>location /</code>的匹配结果是<code>最大前缀</code>匹配，所以 Nginx 会继续搜索正则<code>location ， location ~ \.html$</code>表达了以<code>.html</code>结尾的都<code>allow all</code>; 于是接着就访问到了实际存在的<code>index.html</code>页面。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;实现Docker容器中安装配置Nginx&quot;&gt;&lt;a href=&quot;#实现Docker容器中安装配置Nginx&quot; class=&quot;headerlink&quot; title=&quot;实现Docker容器中安装配置Nginx&quot;&gt;&lt;/a&gt;实现Docker容器中安装配置Nginx&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="高可用负载均衡" scheme="https://plutoacharon.github.io/categories/%E9%AB%98%E5%8F%AF%E7%94%A8%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
    
      <category term="高可用负载均衡" scheme="https://plutoacharon.github.io/tags/%E9%AB%98%E5%8F%AF%E7%94%A8%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
      <category term="Docker" scheme="https://plutoacharon.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>HA高可用与负载均衡入门到实战（一）----Docker中安装与配置Nginx</title>
    <link href="https://plutoacharon.github.io/2020/04/09/HA%E9%AB%98%E5%8F%AF%E7%94%A8%E4%B8%8E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98%EF%BC%88%E4%BA%8C%EF%BC%89----%E6%97%A5%E5%BF%97%E5%92%8C%E9%85%8D%E7%BD%AENginx%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA/"/>
    <id>https://plutoacharon.github.io/2020/04/09/HA高可用与负载均衡入门到实战（二）----日志和配置Nginx虚拟主机/</id>
    <published>2020-04-09T12:30:30.000Z</published>
    <updated>2020-04-09T12:30:45.331Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p>vmware虚拟机双核2G内存以上<br>安装有CentOS7和docker</p><h2 id="查看与管理nginx日志"><a href="#查看与管理nginx日志" class="headerlink" title="查看与管理nginx日志"></a>查看与管理nginx日志</h2><h3 id="启用nginx容器"><a href="#启用nginx容器" class="headerlink" title="启用nginx容器"></a>启用nginx容器</h3><ol><li>启动容器docker run -d –privileged -p 80:80 nginx /usr/sbin/init</li><li>查看容器docker ps</li><li>进入容器docker exec -it 容器ID /bin/bash<br><img src="https://img-blog.csdnimg.cn/2020040911025214.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200409110300595.png" alt="在这里插入图片描述"><h3 id="配置nginx日志"><a href="#配置nginx日志" class="headerlink" title="配置nginx日志"></a>配置nginx日志</h3>1)    打开/etc/nginx/nginx.conf文件，查看log_format与access_log的配置<br>2)    配置日志文件存放位置/var/log/nginx/access.log<br><img src="https://img-blog.csdnimg.cn/20200409110404766.png" alt="在这里插入图片描述"><br>3)    使用浏览器访问nginx并查看日志记录<br><img src="https://img-blog.csdnimg.cn/20200409110422861.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>4)    打开/etc/nginx/nginx.conf文件，查看error_log的配置<br><img src="https://img-blog.csdnimg.cn/20200409110454962.png" alt="在这里插入图片描述"></li></ol><p>5)    使用浏览器访问nginx并查看错误日志记录<br><img src="https://img-blog.csdnimg.cn/20200409112245758.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20200409112253725.png" alt="在这里插入图片描述"></p><h3 id="配置nginx日志文件切割"><a href="#配置nginx日志文件切割" class="headerlink" title="配置nginx日志文件切割"></a>配置nginx日志文件切割</h3><p>1)    编写shell脚本/var/log/nginx/autolog.sh，自动备份前一天的日志<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#nginx日志存放的目录</span></span><br><span class="line">log_path=”/var/<span class="built_in">log</span>/nginx”</span><br><span class="line"><span class="comment">#备份日志文件</span></span><br><span class="line">mv <span class="variable">$log_path</span>/access.log  <span class="variable">$log_path</span>/`date +<span class="string">"%Y%m%d%H%M"</span>`.<span class="built_in">log</span></span><br><span class="line"><span class="comment">#重新打开nginx日志文件</span></span><br><span class="line">nginx -s reopen</span><br></pre></td></tr></table></figure></p><ol start="2"><li>赋予权限755，并执行<br><img src="https://img-blog.csdnimg.cn/20200409112642620.png" alt="在这里插入图片描述"><br>3)    设置定时任务，每天零点零分自动执行脚本<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br><span class="line">0 0 * * * /var/<span class="built_in">log</span>/nginx/autolog.sh &gt;/dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure></li></ol><p>4)    查看定时任务<br><code>crontab -l</code></p><h2 id="配置nginx虚拟主机"><a href="#配置nginx虚拟主机" class="headerlink" title="配置nginx虚拟主机"></a>配置nginx虚拟主机</h2><h3 id="配置-虚拟主机站点文件"><a href="#配置-虚拟主机站点文件" class="headerlink" title="配置    虚拟主机站点文件"></a>配置    虚拟主机站点文件</h3><p>1)    建立/var/webroot/site1和/var/webroot/site2目录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /var/webroot</span><br><span class="line">mkdir /var/webroot/site1</span><br><span class="line">mkdir /var/webroot/site2</span><br></pre></td></tr></table></figure></p><p>2)    在两个目录下新建index.html文件，内容分别为site1和site2；<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">"site1"</span> &gt;&gt; /var/wwwroot/site1/index.html</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"site2"</span> &gt;&gt; /var/wwwroot/site2/index.html</span><br></pre></td></tr></table></figure></p><h3 id="配置基于端口的虚拟主机"><a href="#配置基于端口的虚拟主机" class="headerlink" title="配置基于端口的虚拟主机"></a>配置基于端口的虚拟主机</h3><ol><li>编辑nginx配置文件</li></ol><p>vim /etc/nginx/conf.d/vhosts.conf</p><ol start="2"><li>添加以下内容<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 8081;</span><br><span class="line">    root /var/webroot/site1;</span><br><span class="line">    index index.html;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">  listen 8082;</span><br><span class="line">  root /var/webroot/site2;</span><br><span class="line">  index index.html;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="启动nginx服务"><a href="#启动nginx服务" class="headerlink" title="启动nginx服务"></a>启动nginx服务</h4><p><code>systemctl restart nginx</code></p><h4 id="在宿主机访问两个站点"><a href="#在宿主机访问两个站点" class="headerlink" title="在宿主机访问两个站点"></a>在宿主机访问两个站点</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://ip地址:8081/</span><br><span class="line">http://ip地址:8082/</span><br></pre></td></tr></table></figure><h3 id="配置基于域名的虚拟主机"><a href="#配置基于域名的虚拟主机" class="headerlink" title="配置基于域名的虚拟主机"></a>配置基于域名的虚拟主机</h3><h4 id="在主机编辑C-Windows-System32-drivers-etc-hosts文件"><a href="#在主机编辑C-Windows-System32-drivers-etc-hosts文件" class="headerlink" title="在主机编辑C:\Windows\System32\drivers\etc\hosts文件"></a>在主机编辑C:\Windows\System32\drivers\etc\hosts文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">虚拟机地址  site1.test.com</span><br><span class="line">虚拟机地址  site2.test.com</span><br></pre></td></tr></table></figure><h4 id="编辑-etc-nginx-conf-d-virtual-conf文件，配置基于名字的虚拟主机"><a href="#编辑-etc-nginx-conf-d-virtual-conf文件，配置基于名字的虚拟主机" class="headerlink" title="编辑/etc/nginx/conf.d/virtual.conf文件，配置基于名字的虚拟主机"></a>编辑/etc/nginx/conf.d/virtual.conf文件，配置基于名字的虚拟主机</h4><p>删除原内容，重新添加以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name site1.test.com;</span><br><span class="line">    root /var/webroot/site1;</span><br><span class="line">    index index.html;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name site2.test.com;</span><br><span class="line">  root /var/webroot/site2;</span><br><span class="line">  index index.html;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="重启nginx服务"><a href="#重启nginx服务" class="headerlink" title="重启nginx服务"></a>重启nginx服务</h4><p><code>systemctl restart nginx</code></p><h4 id="访问站点"><a href="#访问站点" class="headerlink" title="访问站点"></a>访问站点</h4><p><img src="https://img-blog.csdnimg.cn/20200409122430662.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;实验环境&quot;&gt;&lt;a href=&quot;#实验环境&quot; class=&quot;headerlink&quot; title=&quot;实验环境&quot;&gt;&lt;/a&gt;实验环境&lt;/h2&gt;&lt;p&gt;vmware虚拟机双核2G内存以上&lt;br&gt;安装有CentOS7和docker&lt;/p&gt;
&lt;h2 id=&quot;查看与管理nginx日
      
    
    </summary>
    
      <category term="高可用负载均衡" scheme="https://plutoacharon.github.io/categories/%E9%AB%98%E5%8F%AF%E7%94%A8%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
    
      <category term="高可用负载均衡" scheme="https://plutoacharon.github.io/tags/%E9%AB%98%E5%8F%AF%E7%94%A8%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
      <category term="Docker" scheme="https://plutoacharon.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes(K8s)入门到实践(三)----Kubernetes Centos7集群安装</title>
    <link href="https://plutoacharon.github.io/2020/04/04/Kubernetes-K8s-%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5-%E4%B8%89-Kubernetes-Centos7%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/"/>
    <id>https://plutoacharon.github.io/2020/04/04/Kubernetes-K8s-入门到实践-三-Kubernetes-Centos7集群安装/</id>
    <published>2020-04-03T23:38:12.000Z</published>
    <updated>2020-04-03T23:59:02.964Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p><a href="https://blog.csdn.net/qq_43442524/article/details/104483555" target="_blank" rel="noopener">Kubernetes(K8s)入门到实践(一)—-Kubernetes入门</a></p><p><a href="https://blog.csdn.net/qq_43442524/article/details/104496523" target="_blank" rel="noopener">Kubernetes(K8s)入门到实践(二)—-Kubernetes的基本概念和术语</a></p><p><a href="https://blog.csdn.net/qq_43442524/article/details/105293018" target="_blank" rel="noopener">Kubernetes(K8s)入门到实践(三)—-Kubernetes Centos7集群安装</a></p><h2 id="系统初始化"><a href="#系统初始化" class="headerlink" title="系统初始化"></a>系统初始化</h2><p>安装Kubernetes对软件和硬件的系统要求：</p><p>1、安装 k8s 的节点必须是大于 1 核心的 CPU<br>2、 建议三台虚拟机内存都是2G及以上</p><h3 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname k8s-master01</span><br><span class="line">hostnamectl set-hostname k8s-node01</span><br><span class="line">hostnamectl set-hostname k8s-node02</span><br></pre></td></tr></table></figure><h3 id="修改主机映射"><a href="#修改主机映射" class="headerlink" title="修改主机映射"></a>修改主机映射</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.0.50 k8s-master01</span><br><span class="line">192.168.0.51 k8s-node01</span><br><span class="line">192.168.0.52 k8s-node02</span><br></pre></td></tr></table></figure><h3 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y conntrack ntpdate ntp ipvsadm ipset jq iptables curl sysstat libseccomp wget vim net-tools git</span><br></pre></td></tr></table></figure><h3 id="设置防火墙为-Iptables-并设置空规则"><a href="#设置防火墙为-Iptables-并设置空规则" class="headerlink" title="设置防火墙为 Iptables 并设置空规则"></a>设置防火墙为 Iptables 并设置空规则</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl  stop firewalld  &amp;&amp;  systemctl  <span class="built_in">disable</span> firewalld</span><br><span class="line">yum -y install iptables-services  &amp;&amp;  systemctl  start iptables  &amp;&amp;  systemctl  <span class="built_in">enable</span> iptables&amp;&amp;  iptables -F  &amp;&amp;  service iptables save</span><br></pre></td></tr></table></figure><h3 id="关闭-SELINUX"><a href="#关闭-SELINUX" class="headerlink" title="关闭 SELINUX"></a>关闭 SELINUX</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">swapoff -a &amp;&amp; sed -i <span class="string">'/ swap / s/^\(.*\)$/#\1/g'</span> /etc/fstab</span><br><span class="line">setenforce 0 &amp;&amp; sed -i <span class="string">'s/^SELINUX=.*/SELINUX=disabled/'</span> /etc/selinux/config</span><br></pre></td></tr></table></figure><h3 id="调整优化内核参数，对于-K8S"><a href="#调整优化内核参数，对于-K8S" class="headerlink" title="调整优化内核参数，对于 K8S"></a>调整优化内核参数，对于 K8S</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysctl.d/kubernetes.conf</span><br><span class="line"></span><br><span class="line">net.bridge.bridge-nf-call-iptables=1</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables=1</span><br><span class="line">net.ipv4.ip_forward=1</span><br><span class="line">net.ipv4.tcp_tw_recycle=0</span><br><span class="line">vm.swappiness=0 <span class="comment"># 禁止使用 swap 空间，只有当系统 OOM 时才允许使用它</span></span><br><span class="line">vm.overcommit_memory=1 <span class="comment"># 不检查物理内存是否够用</span></span><br><span class="line">vm.panic_on_oom=0 <span class="comment"># 开启 OOM</span></span><br><span class="line">fs.inotify.max_user_instances=8192</span><br><span class="line">fs.inotify.max_user_watches=1048576</span><br><span class="line">fs.file-max=52706963</span><br><span class="line">fs.nr_open=52706963</span><br><span class="line">net.ipv6.conf.all.disable_ipv6=1</span><br><span class="line">net.netfilter.nf_conntrack_max=2310720</span><br><span class="line"></span><br><span class="line">sysctl -p /etc/sysctl.d/kubernetes.conf</span><br></pre></td></tr></table></figure><h3 id="调整系统时区"><a href="#调整系统时区" class="headerlink" title="调整系统时区"></a>调整系统时区</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart rsyslog</span><br><span class="line">systemctl restart crond</span><br></pre></td></tr></table></figure><h3 id="设置-rsyslogd-和-systemd-journald"><a href="#设置-rsyslogd-和-systemd-journald" class="headerlink" title="设置 rsyslogd 和 systemd journald"></a>设置 rsyslogd 和 systemd journald</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /var/<span class="built_in">log</span>/journal</span><br><span class="line">mkdir /etc/systemd/journald.conf.d</span><br><span class="line">vim /etc/systemd/journald.conf.d/99-prophet.conf</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Journal]</span><br><span class="line"><span class="comment"># 持久化保存到磁盘</span></span><br><span class="line">Storage=persistent</span><br><span class="line"><span class="comment"># 压缩历史日志Compress=yes</span></span><br><span class="line">SyncIntervalSec=5mRateLimitInterval=30sRateLimitBurst=1000</span><br><span class="line"><span class="comment"># 最大占用空间 10GSystemMaxUse=10G</span></span><br><span class="line"><span class="comment"># 单日志文件最大 200MSystemMaxFileSize=200M</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志保存时间 2 周</span></span><br><span class="line">MaxRetentionSec=2week</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不将日志转发到 syslog</span></span><br><span class="line">ForwardToSyslog=no</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart systemd-journald</span><br></pre></td></tr></table></figure><h3 id="关闭系统不需要服务"><a href="#关闭系统不需要服务" class="headerlink" title="关闭系统不需要服务"></a>关闭系统不需要服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop postfix &amp;&amp; systemctl <span class="built_in">disable</span> postfix</span><br></pre></td></tr></table></figure><h3 id="升级系统内核为-4-44"><a href="#升级系统内核为-4-44" class="headerlink" title="升级系统内核为 4.44"></a>升级系统内核为 4.44</h3><p>CentOS 7.x 系统自带的 3.10.x 内核存在一些 Bugs，导致运行的 Docker、Kubernetes 不稳定<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm</span><br><span class="line"><span class="comment"># 安装完成后检查 /boot/grub2/grub.cfg 中对应内核 menuentry 中是否包含 initrd16 配置，如果没有，再安装一次！</span></span><br><span class="line">yum --enablerepo=elrepo-kernel install -y kernel<span class="_">-lt</span></span><br><span class="line"><span class="comment"># 设置开机从新内核启动</span></span><br><span class="line">grub2-set-default <span class="string">'CentOS Linux (4.4.189-1.el7.elrepo.x86_64) 7 (Core)'</span></span><br></pre></td></tr></table></figure></p><p>重启检查内核:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]<span class="comment"># uname -r</span></span><br><span class="line">4.4.218-1.el7.elrepo.x86_64</span><br><span class="line">[root@k8s-master01 ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure></p><h2 id="Kubeadm"><a href="#Kubeadm" class="headerlink" title="Kubeadm"></a>Kubeadm</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/modules/ipvs.modules</span><br><span class="line"></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">modprobe -- ip_vs</span><br><span class="line">modprobe -- ip_vs_rr</span><br><span class="line">modprobe -- ip_vs_wrr</span><br><span class="line">modprobe -- ip_vs_sh</span><br><span class="line">modprobe -- nf_conntrack_ipv4</span><br><span class="line"></span><br><span class="line">chmod 755 /etc/sysconfig/modules/ipvs.modules &amp;&amp; bash /etc/sysconfig/modules/ipvs.modules &amp;&amp;lsmod | grep -e ip_vs -e nf_conntrack_ipv4</span><br></pre></td></tr></table></figure><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"></span><br><span class="line">yum-config-manager \</span><br><span class="line">--add-repo \  </span><br><span class="line">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line">yum update -y &amp;&amp; yum install -y docker-ce</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里安装完docker以后重启系统发现系统内核重新变回3.10,所以我们需要让内核变回4.4版本</span></span><br></pre></td></tr></table></figure><p>重启选择<br><img src="https://img-blog.csdnimg.cn/20200403155904836.png" alt="在这里插入图片描述"><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动docker</span></span><br><span class="line">systemctl start docker &amp;&amp; systemctl <span class="built_in">enable</span> docker </span><br><span class="line"><span class="comment">## 创建 /etc/docker 目录</span></span><br><span class="line">mkdir /etc/docker</span><br><span class="line"><span class="comment"># 配置 daemon.json</span></span><br><span class="line">vim /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"exec-opts"</span>: [<span class="string">"native.cgroupdriver=systemd"</span>],</span><br><span class="line"><span class="string">"log-driver"</span>: <span class="string">"json-file"</span>,</span><br><span class="line"><span class="string">"log-opts"</span>: &#123;</span><br><span class="line"><span class="string">"max-size"</span>: <span class="string">"100m"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mkdir -p /etc/systemd/system/docker.service.d</span><br><span class="line"><span class="comment"># 重启docker服务</span></span><br><span class="line">systemctl daemon-reload &amp;&amp; systemctl restart docker &amp;&amp; systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure></p><h2 id="安装-Kubeadm-（主从配置）"><a href="#安装-Kubeadm-（主从配置）" class="headerlink" title="安装 Kubeadm （主从配置）"></a>安装 Kubeadm （主从配置）</h2><h3 id="加入主节点以及其余工作节点"><a href="#加入主节点以及其余工作节点" class="headerlink" title="加入主节点以及其余工作节点"></a>加入主节点以及其余工作节点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span><br><span class="line">        http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">yum -y  install  kubeadm-1.15.1 kubectl-1.15.1 kubelet-1.15.1</span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet.service</span><br></pre></td></tr></table></figure><p>由于镜像在谷歌云中，需要科学上网才可以下载，这里直接使用离线镜像导入<br><img src="https://img-blog.csdnimg.cn/20200403165133408.png" alt="在这里插入图片描述"><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf kubeadm-basic.images.tar.gz</span><br><span class="line"></span><br><span class="line">vim load-images.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">ls /root/kubeadm-basic.images &gt; /tmp/image-list.txt</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /root/kubeadm-basic.images</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $( cat /tmp/image-list.txt)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        docker load -i <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">rm -rf /tmp/image-list.txt</span><br><span class="line"></span><br><span class="line">chmod a+x load-images.sh</span><br><span class="line">./load-images.sh</span><br></pre></td></tr></table></figure></p><p>其他两个结点也要这样操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">kubeadm config <span class="built_in">print</span> init-defaults &gt; kubeadm-config.yaml</span><br><span class="line"></span><br><span class="line">localAPIEndpoint:</span><br><span class="line">        advertiseAddress: 192.168.66.10</span><br><span class="line">kubernetesVersion: v1.15.1</span><br><span class="line">networking:      </span><br><span class="line">        podSubnet: <span class="string">"10.244.0.0/16"</span>      </span><br><span class="line">        serviceSubnet: 10.96.0.0/12</span><br><span class="line">---</span><br><span class="line">apiVersion: kubeproxy.config.k8s.io/v1alpha1    </span><br><span class="line">kind: KubeProxyConfiguration    </span><br><span class="line">featureGates:      </span><br><span class="line">SupportIPVSProxyMode: <span class="literal">true</span>    </span><br><span class="line">mode: ipvs</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init --config=kubeadm-config.yaml --experimental-upload-certs | tee kubeadm-init.log</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200403171457634.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="部署网络"><a href="#部署网络" class="headerlink" title="部署网络"></a>部署网络</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure><p>目前master处于<code>NotReady</code>状态<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]<span class="comment"># kubectl get node</span></span><br><span class="line">NAME           STATUS     ROLES    AGE   VERSION</span><br><span class="line">k8s-master01   NotReady   master   19m   v1.15.1</span><br></pre></td></tr></table></figure></p><p>将核心文件移入新建文件夹<code>install-k8s</code>中, 方便管理<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]<span class="comment"># mkdir install-k8s</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># mv kubeadm-</span></span><br><span class="line">kubeadm-basic.images/        kubeadm-config.yaml          </span><br><span class="line">kubeadm-basic.images.tar.gz  kubeadm-init.log             </span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># mv kubeadm-config.yaml kubeadm-init.log install-k8s/</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># cd install-k8s/</span></span><br><span class="line">[root@k8s-master01 install-k8s]<span class="comment"># mkdir core</span></span><br><span class="line">[root@k8s-master01 install-k8s]<span class="comment"># mv * core/</span></span><br><span class="line">mv: 无法将目录<span class="string">"core"</span> 移动至自身的子目录<span class="string">"core/core"</span> 下</span><br><span class="line">[root@k8s-master01 install-k8s]<span class="comment"># ls</span></span><br><span class="line">core</span><br><span class="line">[root@k8s-master01 install-k8s]<span class="comment"># mkdir plugin</span></span><br><span class="line">[root@k8s-master01 install-k8s]<span class="comment"># cd plugin/</span></span><br><span class="line">[root@k8s-master01 plugin]<span class="comment"># mkdir flannel</span></span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 plugin]<span class="comment"># cd flannel</span></span><br><span class="line">[root@k8s-master01 flannel]<span class="comment"># wget --no-check-certificate  https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span></span><br><span class="line">[root@k8s-master01 flannel]<span class="comment"># ls</span></span><br><span class="line">flannel  kube-flannel.yml</span><br><span class="line">[root@k8s-master01 flannel]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>根据flannel的资源清单，创建网络</p><blockquote><p>如果flannal报错<code>Init:ImagePullBackOff</code><br>查看我<a href="https://blog.csdn.net/qq_43442524/article/details/105298366" target="_blank" rel="noopener">这篇文章</a>:<code>https://blog.csdn.net/qq_43442524/article/details/105298366</code></p></blockquote><p>运行<br><code>kubectl create -f kube-flannel.yml</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 flannel]<span class="comment"># kubectl get pod -n kube-system</span></span><br><span class="line">NAME                                   READY   STATUS                  RESTARTS   AGE</span><br><span class="line">coredns-5c98db65d4-f9rb7               0/1     Pending                 0          36m</span><br><span class="line">coredns-5c98db65d4-xcd9s               0/1     Pending                 0          36m</span><br><span class="line">etcd-k8s-master01                      1/1     Running                 0          35m</span><br><span class="line">kube-apiserver-k8s-master01            1/1     Running                 0          35m</span><br><span class="line">kube-controller-manager-k8s-master01   1/1     Running                 0          35m</span><br><span class="line">kube-flannel-ds-amd64-bnvtd            1/1     Running                 0          91m</span><br><span class="line">kube-proxy-t47n9                       1/1     Running                 0          36m</span><br><span class="line">kube-scheduler-k8s-master01            1/1     Running                 0          35m</span><br><span class="line">[root@k8s-master01 flannel]<span class="comment"># kubectl get node</span></span><br><span class="line">NAME           STATUS   ROLES    AGE     VERSION</span><br><span class="line">k8s-master01   Ready    master   3h22m   v1.15.1</span><br><span class="line">[root@k8s-master01 flannel]<span class="comment">#</span></span><br></pre></td></tr></table></figure></p><p>现在就是Ready状态了</p><h3 id="添加node节点"><a href="#添加node节点" class="headerlink" title="添加node节点"></a>添加node节点</h3><p>查看刚才移到<code>/root/install-k8s/core</code>的<code>kubeadm-init.log</code>最后一行:<br><img src="https://img-blog.csdnimg.cn/20200403203856766.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>复制到其他两个节点运行, 查看<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 core]<span class="comment"># kubectl get node</span></span><br><span class="line">NAME           STATUS   ROLES    AGE     VERSION</span><br><span class="line">k8s-master01   Ready    master   3h26m   v1.15.1</span><br><span class="line">k8s-node01     Ready    &lt;none&gt;   32s     v1.15.1</span><br><span class="line">k8s-node02     Ready    &lt;none&gt;   29s     v1.15.1</span><br><span class="line">[root@k8s-master01 core]<span class="comment">#</span></span><br></pre></td></tr></table></figure></p><p>成功!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_43442524/article/details/104483555&quot; 
      
    
    </summary>
    
      <category term="Kubernetes" scheme="https://plutoacharon.github.io/categories/Kubernetes/"/>
    
    
      <category term="Kubernetes" scheme="https://plutoacharon.github.io/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>quay.io国内无法访问，解决Kubernetes应用flannel失败，报错Init:ImagePullBackOff</title>
    <link href="https://plutoacharon.github.io/2020/04/04/quay-io%E5%9B%BD%E5%86%85%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%EF%BC%8C%E8%A7%A3%E5%86%B3Kubernetes%E5%BA%94%E7%94%A8flannel%E5%A4%B1%E8%B4%A5%EF%BC%8C%E6%8A%A5%E9%94%99Init-ImagePullBackOff/"/>
    <id>https://plutoacharon.github.io/2020/04/04/quay-io国内无法访问，解决Kubernetes应用flannel失败，报错Init-ImagePullBackOff/</id>
    <published>2020-04-03T23:35:34.000Z</published>
    <updated>2020-04-03T23:36:59.202Z</updated>
    
    <content type="html"><![CDATA[<p>按照搭建Kubernetes时官网给的命令<br><code>kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</code><br>部署完成时查看<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 flannel]<span class="comment"># kubectl get pod -n kube-system</span></span><br><span class="line">NAME                                   READY   STATUS                  RESTARTS   AGE</span><br><span class="line">coredns-5c98db65d4-f9rb7               0/1     Pending                 0          36m</span><br><span class="line">coredns-5c98db65d4-xcd9s               0/1     Pending                 0          36m</span><br><span class="line">etcd-k8s-master01                      1/1     Running                 0          35m</span><br><span class="line">kube-apiserver-k8s-master01            1/1     Running                 0          35m</span><br><span class="line">kube-controller-manager-k8s-master01   1/1     Running                 0          35m</span><br><span class="line">kube-flannel-ds-amd64-trlph            0/1     Init:ImagePullBackOff   0          2m2s</span><br><span class="line">kube-proxy-t47n9                       1/1     Running                 0          36m</span><br><span class="line">kube-scheduler-k8s-master01            1/1     Running                 0          35m</span><br><span class="line">[root@k8s-master01 flannel]<span class="comment">#</span></span><br></pre></td></tr></table></figure></p><p>flannel状态为<code>Init:ImagePullBackOff</code></p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>查看<code>kube-flannel.yml</code>文件时发现<code>quay.io/coreos/flannel:v0.12.0-amd64</code></p><p><code>quay.io</code>网站目前国内无法访问</p><p>在<code>https://github.com/coreos/flannel/releases</code>中下载<code>flannel:v0.12.0-amd64.docker</code>导入到docker中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 flannel]<span class="comment"># docker load &lt; flanneld-v0.12.0-amd64.docker </span></span><br><span class="line">7412f8eefb77: Loading layer  35.26MB/35.26MB</span><br><span class="line">05116c9ff7bf: Loading layer   5.12kB/5.12kB</span><br><span class="line">Loaded image: quay.io/coreos/flannel:v0.12.0-amd64</span><br><span class="line">[root@k8s-master01 flannel]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY                           TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">quay.io/coreos/flannel               v0.12.0-amd64       4e9f801d2217        3 weeks ago         52.8MB</span><br><span class="line">k8s.gcr.io/kube-scheduler            v1.15.1             b0b3c4c404da        8 months ago        81.1MB</span><br><span class="line">k8s.gcr.io/kube-apiserver            v1.15.1             68c3eb07bfc3        8 months ago        207MB</span><br><span class="line">k8s.gcr.io/kube-controller-manager   v1.15.1             d75082f1d121        8 months ago        159MB</span><br><span class="line">k8s.gcr.io/kube-proxy                v1.15.1             89a062da739d        8 months ago        82.4MB</span><br><span class="line">k8s.gcr.io/coredns                   1.3.1               eb516548c180        14 months ago       40.3MB</span><br><span class="line">k8s.gcr.io/etcd                      3.3.10              2c4adeb21b4f        16 months ago       258MB</span><br><span class="line">k8s.gcr.io/pause                     3.1                 da86e6ba6ca1        2 years ago         742kB</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 flannel]<span class="comment"># kubectl get pod -n kube-system</span></span><br><span class="line">NAME                                   READY   STATUS    RESTARTS   AGE</span><br><span class="line">coredns-5c98db65d4-f9rb7               1/1     Running   0          3h16m</span><br><span class="line">coredns-5c98db65d4-xcd9s               1/1     Running   0          3h16m</span><br><span class="line">etcd-k8s-master01                      1/1     Running   0          3h15m</span><br><span class="line">kube-apiserver-k8s-master01            1/1     Running   0          3h15m</span><br><span class="line">kube-controller-manager-k8s-master01   1/1     Running   0          3h15m</span><br><span class="line">kube-flannel-ds-amd64-bnvtd            1/1     Running   0          91m</span><br><span class="line">kube-proxy-t47n9                       1/1     Running   0          3h16m</span><br><span class="line">kube-scheduler-k8s-master01            1/1     Running   0          3h15m</span><br><span class="line">[root@k8s-master01 flannel]<span class="comment">#</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;按照搭建Kubernetes时官网给的命令&lt;br&gt;&lt;code&gt;kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml&lt;/c
      
    
    </summary>
    
      <category term="Kubernetes" scheme="https://plutoacharon.github.io/categories/Kubernetes/"/>
    
    
      <category term="Kubernetes" scheme="https://plutoacharon.github.io/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Golang1.14 go modules 怎么导入本地其它项目的包? 看完这篇文章, 终于搞懂了</title>
    <link href="https://plutoacharon.github.io/2020/04/04/Golang1-14-go-modules-%E6%80%8E%E4%B9%88%E5%AF%BC%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%85%B6%E5%AE%83%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%8C%85-%E7%9C%8B%E5%AE%8C%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0-%E7%BB%88%E4%BA%8E%E6%90%9E%E6%87%82%E4%BA%86/"/>
    <id>https://plutoacharon.github.io/2020/04/04/Golang1-14-go-modules-怎么导入本地其它项目的包-看完这篇文章-终于搞懂了/</id>
    <published>2020-04-03T23:32:35.000Z</published>
    <updated>2020-04-03T23:32:54.310Z</updated>
    
    <content type="html"><![CDATA[<p>相信大家在本地使用go mod开发项目时, 肯定会遇到很多依赖包的问题。因为go mod在最近的1.13中使用了<code>Go GO111MODULE</code>·<br>模块进行包管理。<br><a href="https://blog.csdn.net/qq_43442524/article/details/104906475" target="_blank" rel="noopener">设置Go GO111MODULE</a></p><p>有的小伙伴使用过程中肯定非常痛苦，因为不是很熟练， 而且里面还有很多不人性化的设置，网上的资料甚少，都是一篇文章你抄我，我抄你， 查阅大量文章之后无果，一怒之下我决定好好研究一下<code>go mod</code>。</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>在本地下我有<code>logCollect</code>与<code>logCollect/logBeegoWeb</code>两个<code>go modules</code>模块, 那么我该如何在当前项目中加载另一个本地正在开发的模块呢?</p><p><img src="https://img-blog.csdnimg.cn/20200331102324451.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200331102953623.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p><strong><code>logBeegoWeb/go.mod</code></strong></p><blockquote><p>这里我go.mod里导入了很多包, 为了不影响观看体验, 所以这里就暂时没有写进去</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">module logBeegoWeb</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="number">1.14</span></span><br><span class="line"></span><br><span class="line">require (</span><br><span class="line">logCollect v0<span class="number">.0</span><span class="number">.0</span></span><br><span class="line">)</span><br><span class="line">replace logCollect =&gt; E:\Go\Gopath\src\demoCode\logCollect</span><br></pre></td></tr></table></figure><h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><p><code>logCollect v0.0.0</code>： logCollect是你要导入的包名称, 后面是版本号, 因为是本地开发，所以设置为<code>v0.0.0</code></p><p><code>replace logCollect =&gt; E:\Go\Gopath\src\demoCode\logCollect</code> 这里需要使用<code>repalce</code>将<code>logCollect</code>设置为不从网上拉取, 而是加入本地路径导入</p><p>想要导入本地项目, 只需要加入<code>包名与版本号</code>和<code>replace 本地地址</code></p><blockquote><p>注意: 该方法是导入其他mod下的包, 如果导入的包没有<code>go mod init</code>初始化<br>报错找不到mod文件: <code>go: lock@v0.0.0: parsing ..\..\lock\go.mod: open E:\Go\Gopath\src\demoCode\lock\go.mod: The system cannot find the file specified.</code></p></blockquote><p>在<code>Go Modules</code>查看, 导入本地项目成功!<br><img src="https://img-blog.csdnimg.cn/20200331103550533.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;相信大家在本地使用go mod开发项目时, 肯定会遇到很多依赖包的问题。因为go mod在最近的1.13中使用了&lt;code&gt;Go GO111MODULE&lt;/code&gt;·&lt;br&gt;模块进行包管理。&lt;br&gt;&lt;a href=&quot;https://blog.csdn.net/qq_434
      
    
    </summary>
    
      <category term="Golang" scheme="https://plutoacharon.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://plutoacharon.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Golang实战之海量日志收集系统（九）beegoWeb入门</title>
    <link href="https://plutoacharon.github.io/2020/04/04/Golang%E5%AE%9E%E6%88%98%E4%B9%8B%E6%B5%B7%E9%87%8F%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B9%9D%EF%BC%89beegoWeb%E5%85%A5%E9%97%A8/"/>
    <id>https://plutoacharon.github.io/2020/04/04/Golang实战之海量日志收集系统（九）beegoWeb入门/</id>
    <published>2020-04-03T23:31:06.000Z</published>
    <updated>2020-04-03T23:31:50.308Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Beego-web开发"><a href="#Beego-web开发" class="headerlink" title="Beego web开发"></a>Beego web开发</h2><p>beego 是一个快速开发 Go 应用的 HTTP 框架，他可以用来快速开发 API、Web 及后端服务等各种应用，是一个 RESTful 的框架，主要设计灵感来源于 tornado、sinatra 和 flask 这三个框架，但是结合了 Go 本身的一些特性（interface、struct 嵌入等）而设计的一个框架。</p><h3 id="安装beego"><a href="#安装beego" class="headerlink" title="安装beego"></a>安装beego</h3><p><code>go get github.com/astaxie/beego</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/astaxie/beego"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">beego.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器搜索<code>localhost:8080</code><br><img src="https://img-blog.csdnimg.cn/20200330115429261.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="运行Beego小Demo"><a href="#运行Beego小Demo" class="headerlink" title="运行Beego小Demo"></a>运行Beego小Demo</h3><h4 id="beego-的执行逻辑"><a href="#beego-的执行逻辑" class="headerlink" title="beego 的执行逻辑"></a>beego 的执行逻辑</h4><p>beego 是一个典型的 MVC 架构，它的执行逻辑如下图所示：</p><p><img src="https://img-blog.csdnimg.cn/20200330164635457.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>图片源自: <a href="https://beego.me/docs/intro/" target="_blank" rel="noopener">https://beego.me/docs/intro/</a></p></blockquote><h4 id="beego-项目结构"><a href="#beego-项目结构" class="headerlink" title="beego 项目结构"></a>beego 项目结构</h4><p>一般的 beego 项目的目录如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">├── conf</span><br><span class="line">│   └── app.conf</span><br><span class="line">├── controllers</span><br><span class="line">│   ├── admin</span><br><span class="line">│   └── default.go</span><br><span class="line">├── main.go</span><br><span class="line">├── models</span><br><span class="line">│   └── models.go</span><br><span class="line">├── static</span><br><span class="line">│   ├── css</span><br><span class="line">│   ├── ico</span><br><span class="line">│   ├── img</span><br><span class="line">│   └── js</span><br><span class="line">└── views</span><br><span class="line">    ├── admin</span><br><span class="line">    └── index.tpl</span><br></pre></td></tr></table></figure></p><p>从上面的目录结构我们可以看出来 M（models 目录）、V（views 目录）和 C（controllers 目录）的结构， main.go 是入口文件</p><h4 id="编写index-html"><a href="#编写index-html" class="headerlink" title="编写index.html"></a>编写index.html</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">│  go.mod</span><br><span class="line">│  go.sum</span><br><span class="line">│</span><br><span class="line">├─controller</span><br><span class="line">│  └─IndexController</span><br><span class="line">│          index.go</span><br><span class="line">│</span><br><span class="line">├─main</span><br><span class="line">│      main.go</span><br><span class="line">│</span><br><span class="line">├─model</span><br><span class="line">├─router</span><br><span class="line">│      router.go</span><br><span class="line">│</span><br><span class="line">└─views</span><br><span class="line">    └─index</span><br><span class="line">            index.html</span><br></pre></td></tr></table></figure><p><strong><code>main.go</code></strong><br>main 函数是入口函数, 引入了一个包 <code>_ &quot;demoCode/beego_example/router&quot;</code>,这个包只引入执行了里面的 init 函数<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">_ <span class="string">"demoCode/beego_example/router"</span></span><br><span class="line"><span class="string">"github.com/astaxie/beego"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">beego.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><code>router.go</code></strong></p><p>路由包里面我们看到执行了路由注册<code>beego.Router</code>, 这个函数的功能是映射 URL 到 <code>controller</code></p><p>第一个参数是 URL (用户请求的地址)，这里我们注册的是<code>/index</code>带参数<code>/index</code>的 URL</p><p>第二个参数是对应的 <code>Controller</code>，也就是我们即将把请求分发到那个控制器来执行相应的逻辑,</p><p>第三个参数就是用来设置对应 <code>method</code> 到函数名</p><ul><li><code>*</code>表示任意的 <code>method</code> 都执行该函数</li><li>使用 <code>httpmethod:funcname</code> 格式来展示</li><li>多个不同的格式使用 <code>;</code>分割</li><li>多个 method 对应同一个 <code>funcname</code>，<code>method</code> 之间通过 , 来分割</li></ul><p>可用的 HTTP Method：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">*: 包含以下所有的函数</span><br><span class="line">get: GET 请求</span><br><span class="line">post: POST 请求</span><br><span class="line">put: PUT 请求</span><br><span class="line">delete: DELETE 请求</span><br><span class="line">patch: PATCH 请求</span><br><span class="line">options: OPTIONS 请求</span><br><span class="line">head: HEAD 请求</span><br></pre></td></tr></table></figure></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> router</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"demoCode/beego_example/controller/IndexController"</span></span><br><span class="line"><span class="string">"github.com/astaxie/beego"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">beego.Router(<span class="string">"/index"</span>, &amp;IndexController.IndexController&#123;&#125;, <span class="string">"*:Index"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样用户就可以通过访问 <code>/index</code> 去执行 <code>IndexController</code> 的逻辑。这就是我们所谓的路由<br><strong><code>index.go</code></strong></p><p>在index函数中定义, <code>Index()</code>的<code>TplName</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> IndexController</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"github.com/astaxie/beego"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> IndexController <span class="keyword">struct</span> &#123;</span><br><span class="line">beego.Controller</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *IndexController)</span> <span class="title">Index</span><span class="params">()</span></span> &#123;</span><br><span class="line">p.TplName = <span class="string">"index/index.html"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><code>index.html</code></strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200330152155532.png" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Beego-web开发&quot;&gt;&lt;a href=&quot;#Beego-web开发&quot; class=&quot;headerlink&quot; title=&quot;Beego web开发&quot;&gt;&lt;/a&gt;Beego web开发&lt;/h2&gt;&lt;p&gt;beego 是一个快速开发 Go 应用的 HTTP 框架，他可以用来
      
    
    </summary>
    
      <category term="Golang日志收集系统" scheme="https://plutoacharon.github.io/categories/Golang%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Golang" scheme="https://plutoacharon.github.io/tags/Golang/"/>
    
      <category term="Golang日志收集系统" scheme="https://plutoacharon.github.io/tags/Golang%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Golang语言学习从入门到实战----Go操作Mysql实现增删改查</title>
    <link href="https://plutoacharon.github.io/2020/04/04/Golang%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98-Go%E6%93%8D%E4%BD%9CMysql%E5%AE%9E%E7%8E%B0%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
    <id>https://plutoacharon.github.io/2020/04/04/Golang语言学习从入门到实战-Go操作Mysql实现增删改查/</id>
    <published>2020-04-03T23:29:49.000Z</published>
    <updated>2020-04-03T23:30:34.786Z</updated>
    
    <content type="html"><![CDATA[<h2 id="建库建表"><a href="#建库建表" class="headerlink" title="建库建表"></a>建库建表</h2><p>新建<code>person</code>表<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> person(</span><br><span class="line">user_id <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">username <span class="built_in">varchar</span>(<span class="number">260</span>),</span><br><span class="line">sex <span class="built_in">varchar</span>(<span class="number">260</span>),</span><br><span class="line">email <span class="built_in">varchar</span>(<span class="number">260</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><h2 id="Golang操作Mysql数据库"><a href="#Golang操作Mysql数据库" class="headerlink" title="Golang操作Mysql数据库"></a>Golang操作Mysql数据库</h2><h3 id="安装sqlx"><a href="#安装sqlx" class="headerlink" title="安装sqlx"></a>安装sqlx</h3><p><code>go get github.com/jmoiron/sqlx</code>,</p><p>sqlx是一个go语言包，在内置database／sql包之上增加了很多扩展，简化数据库操作代码的书写</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>定义初始化mysql函数:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">database, err := sqlx.Open(<span class="string">"mysql"</span>, <span class="string">"root:123456@tcp(192.168.0.131:3306)/goTest"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"open mysql failed,"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">Db = database</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>注意: <code>MySQL ERROR 1130 (HY000): Host &#39;XXXX&#39; is not allowed to connect to this MySQL server</code>要Mysql开启远程连接<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> mysql;</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> host = <span class="string">'%'</span> <span class="keyword">where</span> <span class="keyword">user</span> = <span class="string">'root'</span>;</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure></p></blockquote><p>重启mysql</p><h4 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">_ <span class="string">"github.com/go-sql-driver/mysql"</span></span><br><span class="line"><span class="string">"github.com/jmoiron/sqlx"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">UserId   <span class="keyword">int</span>    <span class="string">`db:"user_id"`</span></span><br><span class="line">Username <span class="keyword">string</span> <span class="string">`db:"username"`</span></span><br><span class="line">Sex      <span class="keyword">string</span> <span class="string">`db:"sex"`</span></span><br><span class="line">Email    <span class="keyword">string</span> <span class="string">`db:"email"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Db *sqlx.DB</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">database, err := sqlx.Open(<span class="string">"mysql"</span>, <span class="string">"root:123456@tcp(192.168.0.131:3306)/goTest"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"open mysql failed,"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">Db = database</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r, err := Db.Exec(<span class="string">"insert into person(username, sex, email)values(?, ?, ?)"</span>, <span class="string">"stu001"</span>, <span class="string">"man"</span>, <span class="string">"stu01@qq.com"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"exec failed, "</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">id, err := r.LastInsertId()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"exec failed, "</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"insert succ:"</span>, id)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from person;</span><br><span class="line">+<span class="comment">---------+----------+------+--------------+</span></span><br><span class="line">| user_id | username | sex  | email        |</span><br><span class="line">+<span class="comment">---------+----------+------+--------------+</span></span><br><span class="line">|       1 | stu001   | man  | stu01@qq.com |</span><br><span class="line">+<span class="comment">---------+----------+------+--------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p>插入数据成功!</p><h4 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line">_ <span class="string">"github.com/go-sql-driver/mysql"</span></span><br><span class="line"><span class="string">"github.com/jmoiron/sqlx"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">UserId   <span class="keyword">int</span>    <span class="string">`db:"user_id"`</span></span><br><span class="line">Username <span class="keyword">string</span> <span class="string">`db:"username"`</span></span><br><span class="line">Sex      <span class="keyword">string</span> <span class="string">`db:"sex"`</span></span><br><span class="line">Email    <span class="keyword">string</span> <span class="string">`db:"email"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Db *sqlx.DB</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">database, err := sqlx.Open(<span class="string">"mysql"</span>, <span class="string">"root:123456@tcp(192.168.0.131:3306)/goTest"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"open mysql failed,"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">Db = database</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">_, err := Db.Exec(<span class="string">"update person set username=? where user_id=?"</span>, <span class="string">"stu003"</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"exec failed, "</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"修改成功"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from person;</span><br><span class="line">+<span class="comment">---------+----------+------+--------------+</span></span><br><span class="line">| user_id | username | sex  | email        |</span><br><span class="line">+<span class="comment">---------+----------+------+--------------+</span></span><br><span class="line">|       1 | stu003   | man  | stu01@qq.com |</span><br><span class="line">+<span class="comment">---------+----------+------+--------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><h4 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line">_ <span class="string">"github.com/go-sql-driver/mysql"</span></span><br><span class="line"><span class="string">"github.com/jmoiron/sqlx"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">UserId   <span class="keyword">int</span>    <span class="string">`db:"user_id"`</span></span><br><span class="line">Username <span class="keyword">string</span> <span class="string">`db:"username"`</span></span><br><span class="line">Sex      <span class="keyword">string</span> <span class="string">`db:"sex"`</span></span><br><span class="line">Email    <span class="keyword">string</span> <span class="string">`db:"email"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Db *sqlx.DB</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">database, err := sqlx.Open(<span class="string">"mysql"</span>, <span class="string">"root:123456@tcp(192.168.0.131:3306)/goTest"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"open mysql failed,"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">Db = database</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person []Person</span><br><span class="line">err := Db.Select(&amp;person, <span class="string">"select user_id, username, sex, email from person where user_id=?"</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"exec failed, "</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"select succ:"</span>, person)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> succ: [&#123;<span class="number">1</span> stu003 man stu01@qq.com&#125;]</span><br></pre></td></tr></table></figure></p><h4 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line">_ <span class="string">"github.com/go-sql-driver/mysql"</span></span><br><span class="line"><span class="string">"github.com/jmoiron/sqlx"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">UserId   <span class="keyword">int</span>    <span class="string">`db:"user_id"`</span></span><br><span class="line">Username <span class="keyword">string</span> <span class="string">`db:"username"`</span></span><br><span class="line">Sex      <span class="keyword">string</span> <span class="string">`db:"sex"`</span></span><br><span class="line">Email    <span class="keyword">string</span> <span class="string">`db:"email"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Db *sqlx.DB</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">database, err := sqlx.Open(<span class="string">"mysql"</span>, <span class="string">"root:123456@tcp(192.168.0.131:3306)/goTest"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"open mysql failed,"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">Db = database</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">_, err := Db.Exec(<span class="string">"delete from person where user_id=?"</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"exec failed, "</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"delete succ"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from person;</span><br><span class="line">Empty <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p>删除成功!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;建库建表&quot;&gt;&lt;a href=&quot;#建库建表&quot; class=&quot;headerlink&quot; title=&quot;建库建表&quot;&gt;&lt;/a&gt;建库建表&lt;/h2&gt;&lt;p&gt;新建&lt;code&gt;person&lt;/code&gt;表&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table
      
    
    </summary>
    
      <category term="Golang" scheme="https://plutoacharon.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://plutoacharon.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Win10家庭版没有组策略怎么办? 教你如何启用组策略gpedit.msc</title>
    <link href="https://plutoacharon.github.io/2020/03/29/Win10%E5%AE%B6%E5%BA%AD%E7%89%88%E6%B2%A1%E6%9C%89%E7%BB%84%E7%AD%96%E7%95%A5%E6%80%8E%E4%B9%88%E5%8A%9E-%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E5%90%AF%E7%94%A8%E7%BB%84%E7%AD%96%E7%95%A5gpedit-msc/"/>
    <id>https://plutoacharon.github.io/2020/03/29/Win10家庭版没有组策略怎么办-教你如何启用组策略gpedit-msc/</id>
    <published>2020-03-29T03:27:52.000Z</published>
    <updated>2020-03-29T03:28:39.674Z</updated>
    
    <content type="html"><![CDATA[<p>今日在优化Windows cpu时遇到了Win10打不开组策略gpedit.msc的问题, 仅以此篇记录开启组策略功能过程</p><h3 id="1-创建cmd脚本"><a href="#1-创建cmd脚本" class="headerlink" title="1. 创建cmd脚本"></a>1. 创建cmd脚本</h3><p>在桌面新建一个txt文件, 将下面的代码复制到txt中, 并且更改后缀为<code>cmd</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">pushd</span> <span class="string">"%~dp0"</span></span><br><span class="line">dir /b C:\Windows\servicing\Packages\Microsoft-Windows-GroupPolicy-ClientExtensions-Package~3*.mum &gt;List.txt</span><br><span class="line">dir /b C:\Windows\servicing\Packages\Microsoft-Windows-GroupPolicy-ClientTools-Package~3*.mum &gt;&gt;List.txt</span><br><span class="line"><span class="keyword">for</span> /f %%i <span class="keyword">in</span> (<span class="string">'findstr /i . List.txt 2^&gt;nul'</span>) <span class="keyword">do</span> dism /online /norestart /add-package:<span class="string">"C:\Windows\servicing\Packages\%%i"</span></span><br><span class="line">pause</span><br></pre></td></tr></table></figure></p><p><img src="https://img-blog.csdnimg.cn/2020032617292670.png" alt="在这里插入图片描述"><br>右键该脚本, 点击以管理员方式运行<br><img src="https://img-blog.csdnimg.cn/20200326173008891.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200326173026239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>桌面会生成一个<code>List.txt</code>文件, 不用管, 删除即可。<br><img src="https://img-blog.csdnimg.cn/20200326173651241.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="2-打开组策略gpedit-msc"><a href="#2-打开组策略gpedit-msc" class="headerlink" title="2. 打开组策略gpedit.msc"></a>2. 打开组策略gpedit.msc</h3><p>键盘输入<code>win+R</code>, 输入<code>gpedit.msc</code><br><img src="https://img-blog.csdnimg.cn/20200326173132836.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200326173138218.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>打开成功!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今日在优化Windows cpu时遇到了Win10打不开组策略gpedit.msc的问题, 仅以此篇记录开启组策略功能过程&lt;/p&gt;
&lt;h3 id=&quot;1-创建cmd脚本&quot;&gt;&lt;a href=&quot;#1-创建cmd脚本&quot; class=&quot;headerlink&quot; title=&quot;1. 创建
      
    
    </summary>
    
      <category term="其他" scheme="https://plutoacharon.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>Golang实战之海量日志收集系统（八）logTransfer之将日志入库到Elasticsearch并通过Kibana进行展示</title>
    <link href="https://plutoacharon.github.io/2020/03/29/Golang%E5%AE%9E%E6%88%98%E4%B9%8B%E6%B5%B7%E9%87%8F%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%85%AB%EF%BC%89logTransfer%E4%B9%8B%E5%B0%86%E6%97%A5%E5%BF%97%E5%85%A5%E5%BA%93%E5%88%B0Elasticsearch%E5%B9%B6%E9%80%9A%E8%BF%87Kibana%E8%BF%9B%E8%A1%8C%E5%B1%95%E7%A4%BA/"/>
    <id>https://plutoacharon.github.io/2020/03/29/Golang实战之海量日志收集系统（八）logTransfer之将日志入库到Elasticsearch并通过Kibana进行展示/</id>
    <published>2020-03-29T03:27:27.000Z</published>
    <updated>2020-03-29T03:29:08.042Z</updated>
    
    <content type="html"><![CDATA[<p>前面我们将logTransfor的配置初始化成功了, 下面将从Kafka中消费数据, 并将日志入库到Elasticsearch并通过Kibana进行展示<br><img src="https://img-blog.csdnimg.cn/2020032911191857.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>图源自 :  <a href="https://www.cnblogs.com/zhaof/p/8948516.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhaof/p/8948516.html</a></p></blockquote><h2 id="将日志保存到ES中"><a href="#将日志保存到ES中" class="headerlink" title="将日志保存到ES中"></a>将日志保存到ES中</h2><h3 id="初始化Es"><a href="#初始化Es" class="headerlink" title="初始化Es"></a>初始化Es</h3><p>在<code>main</code>函数中添加初始化<code>InitEs</code>函数<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化Es</span></span><br><span class="line">err = es.InitEs(logConfig.EsAddr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logs.Error(<span class="string">"初始化Elasticsearch失败, err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">logs.Debug(<span class="string">"初始化Es成功"</span>)</span><br></pre></td></tr></table></figure></p><p>初始化Es<br><strong><code>elasticsearch.go</code></strong><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> es</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/olivere/elastic/v7"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Tweet <span class="keyword">struct</span> &#123;</span><br><span class="line">User    <span class="keyword">string</span></span><br><span class="line">Message <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">esClient *elastic.Client</span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitEs</span><span class="params">(addr <span class="keyword">string</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">client, err := elastic.NewClient(elastic.SetSniff(<span class="literal">false</span>), elastic.SetURL(addr))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"connect es error"</span>, err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">esClient = client</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>注意: Es的地址需要填写为<code>http://localhost:9200/</code></p></blockquote><p>运行main函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">020/03/28 18:01:53.360 [D]  初始化日志模块成功</span><br><span class="line">2020/03/28 18:01:53.374 [D]  初始化Kafka成功</span><br><span class="line">2020/03/28 18:01:53.381 [D]  初始化Es成功</span><br></pre></td></tr></table></figure></p><h3 id="编写run与SendToES函数"><a href="#编写run与SendToES函数" class="headerlink" title="编写run与SendToES函数"></a>编写run与SendToES函数</h3><p>在<code>main</code>函数中添加<code>run</code>函数, 用于运行kafka消费数据到Es<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 运行</span></span><br><span class="line">err = run()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logs.Error(<span class="string">"运行错误, err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><code>run.go</code></strong><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/Shopify/sarama"</span></span><br><span class="line"><span class="string">"github.com/astaxie/beego/logs"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">partitionList, err := kafkaClient.Client.Partitions(kafkaClient.Topic)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logs.Error(<span class="string">"Failed to get the list of partitions: "</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> partition := <span class="keyword">range</span> partitionList &#123;</span><br><span class="line">pc, errRet := kafkaClient.Client.ConsumePartition(kafkaClient.Topic, <span class="keyword">int32</span>(partition), sarama.OffsetNewest)</span><br><span class="line"><span class="keyword">if</span> errRet != <span class="literal">nil</span> &#123;</span><br><span class="line">err = errRet</span><br><span class="line">logs.Error(<span class="string">"Failed to start consumer for partition %d: %s\n"</span>, partition, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> pc.AsyncClose()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(pc sarama.PartitionConsumer)</span></span> &#123;</span><br><span class="line">kafkaClient.wg.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> msg := <span class="keyword">range</span> pc.Messages() &#123;</span><br><span class="line">logs.Debug(<span class="string">"Partition:%d, Offset:%d, Key:%s, Value:%s"</span>, msg.Partition, msg.Offset, <span class="keyword">string</span>(msg.Key), <span class="keyword">string</span>(msg.Value))</span><br><span class="line">err = es.SendToES(kafkaClient.topic, msg.Value)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logs.Warn(<span class="string">"send to es failed, err:%v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">kafkaClient.wg.Done()</span><br><span class="line">&#125;(pc)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">kafkaClient.wg.Wait()</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><code>es.go</code></strong><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> es</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/olivere/elastic/v7"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> LogMessage <span class="keyword">struct</span> &#123;</span><br><span class="line">App     <span class="keyword">string</span></span><br><span class="line">Topic   <span class="keyword">string</span></span><br><span class="line">Message <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">esClient *elastic.Client</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitEs</span><span class="params">(addr <span class="keyword">string</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">client, err := elastic.NewClient(elastic.SetSniff(<span class="literal">false</span>), elastic.SetURL(addr))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"connect es error"</span>, err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">esClient = client</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SendToES</span><span class="params">(topic <span class="keyword">string</span>, data []<span class="keyword">byte</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">msg := &amp;LogMessage&#123;&#125;</span><br><span class="line">msg.Topic = topic</span><br><span class="line">msg.Message = <span class="keyword">string</span>(data)</span><br><span class="line"></span><br><span class="line">_, err = esClient.Index().</span><br><span class="line">Index(topic).</span><br><span class="line">BodyJson(msg).</span><br><span class="line">Do(context.Background())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="构建测试"><a href="#构建测试" class="headerlink" title="构建测试"></a>构建测试</h2><p>运行logAgent数据, 从etcd中读取日志配置, 经过Kafka生产</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">25</span>:<span class="number">17.581</span> [D]  导入日志成功&amp;&#123;debug E:\\Go\\logCollect\\logAgent\\logs\\my.log <span class="number">100</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">9092</span> [] <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">2379</span> /backend/logagent/config/&#125;</span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">25</span>:<span class="number">17.589</span> [D]  resp from etcd:[]</span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">25</span>:<span class="number">17.590</span> [D]  resp from etcd:[]</span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">25</span>:<span class="number">17.590</span> [D]  resp from etcd:[]</span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">25</span>:<span class="number">17.591</span> [D]  resp from etcd:[]</span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">25</span>:<span class="number">17.613</span> [D]  resp from etcd:[key:<span class="string">"/backend/logagent/config/192.168.0.11"</span> create_revision:<span class="number">6</span> mod_revision:<span class="number">12</span> version:<span class="number">7</span> value:<span class="string">"[&#123;\"logpath\":\"E:/nginx/logs/access.log\",\"topic\":\"nginx_log\"&#125;,&#123;\"logpath\":\"E:/nginx/logs/error.log\",\"topic\":\"nginx_log_err\"&#125;,&#123;\"logpath\":\"E:/nginx/logs/error2.log\",\"topic\":\"nginx_log_err2\"&#125;]"</span> ]</span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">25</span>:<span class="number">17.613</span> [D]  日志设置为[&#123;E:/nginx/logs/access.log nginx_log&#125; &#123;E:/nginx/logs/error.log nginx_log_err&#125; &#123;E:/nginx/logs/error2.log nginx_log_err2&#125;]</span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">25</span>:<span class="number">17.613</span> [D]  resp from etcd:[]</span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">25</span>:<span class="number">17.613</span> [D]  连接etcd成功</span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">25</span>:<span class="number">17.613</span> [D]  初始化etcd成功!</span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">25</span>:<span class="number">17.613</span> [D]  初始化tailf成功!</span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">25</span>:<span class="number">17.613</span> [D]  开始监控key: /backend/logagent/config/<span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">25</span>:<span class="number">17.613</span> [D]  开始监控key: /backend/logagent/config/<span class="number">169.254</span><span class="number">.109</span><span class="number">.181</span></span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">25</span>:<span class="number">17.614</span> [D]  开始监控key: /backend/logagent/config/<span class="number">192.168</span><span class="number">.106</span><span class="number">.1</span></span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">25</span>:<span class="number">17.615</span> [D]  开始监控key: /backend/logagent/config/<span class="number">169.254</span><span class="number">.30</span><span class="number">.148</span></span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">25</span>:<span class="number">17.616</span> [D]  开始监控key: /backend/logagent/config/<span class="number">169.254</span><span class="number">.153</span><span class="number">.68</span></span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">25</span>:<span class="number">17.616</span> [D]  开始监控key: /backend/logagent/config/<span class="number">192.168</span><span class="number">.0</span><span class="number">.11</span></span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">25</span>:<span class="number">17.617</span> [D]  初始化Kafka producer成功,地址为: <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">9092</span></span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">25</span>:<span class="number">17.617</span> [D]  初始化Kafka成功!</span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">26</span>:<span class="number">31.675</span> [D]  get config from etcd ,Type: PUT, Key:/backend/logagent/config/<span class="number">192.168</span><span class="number">.0</span><span class="number">.11</span>, Value:[&#123;<span class="string">"logpath"</span>:<span class="string">"E:\\Go\\logCollect\\logAgent\\logs\\my.log"</span>,<span class="string">"topic"</span>:<span class="string">"nginx_log"</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">26</span>:<span class="number">31.675</span> [D]  get config from etcd success, [&#123;E:\Go\logCollect\logAgent\logs\my.log nginx_log&#125;]</span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">26</span>:<span class="number">31.675</span> [W]  tail obj 退出, 配置项为conf:&#123;E:/nginx/logs/error2.log nginx_log_err2&#125;</span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">26</span>:<span class="number">31.675</span> [W]  tail obj 退出, 配置项为conf:&#123;E:/nginx/logs/access.log nginx_log&#125;</span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">26</span>:<span class="number">31.675</span> [W]  tail obj 退出, 配置项为conf:&#123;E:/nginx/logs/error.log nginx_log_err&#125;</span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">26</span>:<span class="number">31.947</span> [D]  read success, pid:<span class="number">0</span>, offset:<span class="number">34210</span>, topic:nginx_log</span><br><span class="line"></span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">26</span>:<span class="number">31.948</span> [D]  read success, pid:<span class="number">0</span>, offset:<span class="number">34211</span>, topic:nginx_log</span><br><span class="line"></span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">26</span>:<span class="number">32.177</span> [D]  read success, pid:<span class="number">0</span>, offset:<span class="number">34212</span>, topic:nginx_log</span><br><span class="line"></span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">26</span>:<span class="number">32.178</span> [D]  read success, pid:<span class="number">0</span>, offset:<span class="number">34213</span>, topic:nginx_log</span><br><span class="line"></span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">26</span>:<span class="number">32.180</span> [D]  read success, pid:<span class="number">0</span>, offset:<span class="number">34214</span>, topic:nginx_log</span><br><span class="line"></span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">26</span>:<span class="number">32.180</span> [D]  read success, pid:<span class="number">0</span>, offset:<span class="number">34215</span>, topic:nginx_log</span><br><span class="line"></span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">26</span>:<span class="number">32.427</span> [D]  read success, pid:<span class="number">0</span>, offset:<span class="number">34216</span>, topic:nginx_log</span><br><span class="line"></span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">26</span>:<span class="number">32.428</span> [D]  read success, pid:<span class="number">0</span>, offset:<span class="number">34217</span>, topic:nginx_log</span><br><span class="line"></span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">26</span>:<span class="number">32.430</span> [D]  read success, pid:<span class="number">0</span>, offset:<span class="number">34218</span>, topic:nginx_log</span><br><span class="line"></span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">26</span>:<span class="number">32.432</span> [D]  read success, pid:<span class="number">0</span>, offset:<span class="number">34219</span>, topic:nginx_log</span><br><span class="line"></span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">26</span>:<span class="number">32.432</span> [D]  read success, pid:<span class="number">0</span>, offset:<span class="number">34220</span>, topic:nginx_log</span><br><span class="line"></span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">26</span>:<span class="number">32.433</span> [D]  read success, pid:<span class="number">0</span>, offset:<span class="number">34221</span>, topic:nginx_log</span><br></pre></td></tr></table></figure><p>启动<code>logTransfer</code>, 收集日志信息, 并将日志信息传入Es中<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">29</span>:<span class="number">17.109</span> [D]  初始化日志模块成功</span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">29</span>:<span class="number">17.118</span> [D]  初始化Kafka成功</span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">29</span>:<span class="number">17.120</span> [D]  初始化Es成功</span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">29</span>:<span class="number">25.518</span> [D]  Partition:<span class="number">0</span>, Offset:<span class="number">153210</span>, Key:, Value:<span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">29</span>:<span class="number">25.265</span> [D]  开始监控key: /backend/logagent/config/<span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">29</span>:<span class="number">27.361</span> [D]  Partition:<span class="number">0</span>, Offset:<span class="number">153211</span>, Key:, Value:<span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">29</span>:<span class="number">25.265</span> [D]  开始监控key: /backend/logagent/config/<span class="number">169.254</span><span class="number">.30</span><span class="number">.148</span></span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">29</span>:<span class="number">27.531</span> [D]  Partition:<span class="number">0</span>, Offset:<span class="number">153212</span>, Key:, Value:<span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">29</span>:<span class="number">25.265</span> [D]  开始监控key: /backend/logagent/config/<span class="number">169.254</span><span class="number">.153</span><span class="number">.68</span></span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">29</span>:<span class="number">27.743</span> [D]  Partition:<span class="number">0</span>, Offset:<span class="number">153213</span>, Key:, Value:<span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">29</span>:<span class="number">25.266</span> [D]  开始监控key: /backend/logagent/config/<span class="number">192.168</span><span class="number">.0</span><span class="number">.11</span></span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">29</span>:<span class="number">27.870</span> [D]  Partition:<span class="number">0</span>, Offset:<span class="number">153214</span>, Key:, Value:<span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">29</span>:<span class="number">25.267</span> [D]  初始化Kafka producer成功,地址为: <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">9092</span></span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">29</span>:<span class="number">28.012</span> [D]  Partition:<span class="number">0</span>, Offset:<span class="number">153215</span>, Key:, Value:<span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">29</span>:<span class="number">25.267</span> [D]  初始化Kafka成功!</span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">29</span>:<span class="number">28.191</span> [D]  Partition:<span class="number">0</span>, Offset:<span class="number">153216</span>, Key:, Value:<span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">29</span>:<span class="number">25.518</span> [D]  read success, pid:<span class="number">0</span>, offset:<span class="number">153210</span>, topic:nginx_log</span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">29</span>:<span class="number">28.311</span> [D]  Partition:<span class="number">0</span>, Offset:<span class="number">153217</span>, Key:, Value:</span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">29</span>:<span class="number">28.456</span> [D]  Partition:<span class="number">0</span>, Offset:<span class="number">153218</span>, Key:, Value:<span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">29</span>:<span class="number">25.521</span> [D]  read success, pid:<span class="number">0</span>, offset:<span class="number">153211</span>, topic:nginx_log</span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">29</span>:<span class="number">28.600</span> [D]  Partition:<span class="number">0</span>, Offset:<span class="number">153219</span>, Key:, Value:</span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">29</span>:<span class="number">28.744</span> [D]  Partition:<span class="number">0</span>, Offset:<span class="number">153220</span>, Key:, Value:<span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">29</span>:<span class="number">25.522</span> [D]  read success, pid:<span class="number">0</span>, offset:<span class="number">153212</span>, topic:nginx_log</span><br></pre></td></tr></table></figure></p><p>打开<code>http://localhost:5601/</code> kibana<br><img src="https://img-blog.csdnimg.cn/2020032820372182.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>添加刚才传入的<code>Topic</code>为索引, 然后打开<code>Discover</code>查看<br><img src="https://img-blog.csdnimg.cn/2020032820364455.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>已经能看到最新的数据了, 成功收集!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前面我们将logTransfor的配置初始化成功了, 下面将从Kafka中消费数据, 并将日志入库到Elasticsearch并通过Kibana进行展示&lt;br&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/2020032911191857.pn
      
    
    </summary>
    
      <category term="Golang日志收集系统" scheme="https://plutoacharon.github.io/categories/Golang%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Golang" scheme="https://plutoacharon.github.io/tags/Golang/"/>
    
      <category term="Golang日志收集系统" scheme="https://plutoacharon.github.io/tags/Golang%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Golang实战之海量日志收集系统（七）logTransfer之从kafka中获取日志信息</title>
    <link href="https://plutoacharon.github.io/2020/03/29/Golang%E5%AE%9E%E6%88%98%E4%B9%8B%E6%B5%B7%E9%87%8F%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%83%EF%BC%89logTransfer%E4%B9%8B%E4%BB%8Ekafka%E4%B8%AD%E8%8E%B7%E5%8F%96%E6%97%A5%E5%BF%97%E4%BF%A1%E6%81%AF/"/>
    <id>https://plutoacharon.github.io/2020/03/29/Golang实战之海量日志收集系统（七）logTransfer之从kafka中获取日志信息/</id>
    <published>2020-03-29T03:27:00.000Z</published>
    <updated>2020-03-29T03:51:59.417Z</updated>
    
    <content type="html"><![CDATA[<p>在前六章中已经完成了日志收集的<code>logAgent</code>端, 接下来需要将日志数据写入到<code>Kafka</code>中, 然后将数据落地到<code>Elastciseartch</code>中</p><p>项目架构图:</p><p><img src="https://img-blog.csdnimg.cn/20200329111745132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>图源自:<a href="https://www.cnblogs.com/zhaof/p/8910761.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhaof/p/8910761.html</a></p></blockquote><p>项目逻辑图:</p><p><img src="https://img-blog.csdnimg.cn/20200329111816615.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="Elastciseartch与Kinaba下载与安装"><a href="#Elastciseartch与Kinaba下载与安装" class="headerlink" title="Elastciseartch与Kinaba下载与安装"></a>Elastciseartch与Kinaba下载与安装</h3><p><a href="https://blog.csdn.net/qq_43442524/article/details/105144156" target="_blank" rel="noopener">Elastciseartch与Kinaba下载与安装</a>, 参考我这篇博客</p><h3 id="使用Golang控制Elasticsearch"><a href="#使用Golang控制Elasticsearch" class="headerlink" title="使用Golang控制Elasticsearch"></a>使用Golang控制Elasticsearch</h3><p>环境版本:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">go 1.14</span><br><span class="line">elasticsearch-7.6.1</span><br><span class="line">kibana-7.6.1-windows-x86_64</span><br></pre></td></tr></table></figure></p><p>我们使用第三方库<code>github.com/olivere/elastic</code></p><p>6.X包路径为<code>github.com/olivere/elastic</code> 7.X的包路径为<code>github.com/olivere/elastic/v7</code>，根据自己安装的elasticsearch版本进行区分</p><p>elastic库的官方文档<code>https://olivere.github.io/elastic/</code>上面有更加详细的实例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/olivere/elastic/v7"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Tweet <span class="keyword">struct</span> &#123;</span><br><span class="line">User    <span class="keyword">string</span></span><br><span class="line">Message <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">client, err := elastic.NewClient(elastic.SetSniff(<span class="literal">false</span>), elastic.SetURL(<span class="string">"http://localhost:9200/"</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"connect es error"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"conn es succ"</span>)</span><br><span class="line"></span><br><span class="line">tweet := Tweet&#123;User: <span class="string">"haohan"</span>, Message: <span class="string">"This is a test"</span>&#125;</span><br><span class="line">_, err = client.Index().</span><br><span class="line">Index(<span class="string">"twitter"</span>).</span><br><span class="line">Id(<span class="string">"1"</span>).</span><br><span class="line">BodyJson(tweet).</span><br><span class="line">Do(context.Background())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// Handle error</span></span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"insert succ"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插入成功<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conn es succ</span><br><span class="line">insert succ</span><br></pre></td></tr></table></figure></p><p><img src="https://img-blog.csdnimg.cn/20200327172051712.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="kafka消费示例"><a href="#kafka消费示例" class="headerlink" title="kafka消费示例"></a>kafka消费示例</h3><p>前面介绍了写数据到kafka中，数据需要从消息队列里面取出最终落地到es中。简单介绍下从kafka中获取数据<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/Shopify/sarama"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line"><span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">consumer, err := sarama.NewConsumer(strings.Split(<span class="string">"localhost:9092"</span>,<span class="string">","</span>), <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Failed to start consumer: %s"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">partitionList, err := consumer.Partitions(<span class="string">"nginx_log"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Failed to get the list of partitions: "</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(partitionList)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照分区来消费</span></span><br><span class="line"><span class="keyword">for</span> partition := <span class="keyword">range</span> partitionList &#123;</span><br><span class="line">pc, err := consumer.ConsumePartition(<span class="string">"nginx_log"</span>, <span class="keyword">int32</span>(partition), sarama.OffsetNewest)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Failed to start consumer for partition %d: %s\n"</span>, partition, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> pc.AsyncClose()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(pc sarama.PartitionConsumer)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> msg := <span class="keyword">range</span> pc.Messages() &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Partition:%d, Offset:%d, Key:%s, Value:%s"</span>, msg.Partition, msg.Offset, <span class="keyword">string</span>(msg.Key), <span class="keyword">string</span>(msg.Value))</span><br><span class="line">fmt.Println()</span><br><span class="line"></span><br><span class="line">&#125;(pc)</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Hour)</span><br><span class="line">_ = consumer.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Partition:0, Offset:34208, Key:, Value:This is a test!</span><br><span class="line">Partition:0, Offset:34209, Key:, Value:</span><br></pre></td></tr></table></figure><p>已经能够从kafka中拿到日志信息了</p><p>下面开始logTransfer服务的开发，数据已经到kafka了，现在要从kafka中消费数据，然后写到es中，logTransfer做的就是这个工作</p><h3 id="初识化logTransfer配置"><a href="#初识化logTransfer配置" class="headerlink" title="初识化logTransfer配置"></a>初识化logTransfer配置</h3><p>项目目录:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">├─config</span><br><span class="line">│      logTransfer.conf</span><br><span class="line">│</span><br><span class="line">├─es</span><br><span class="line">│      elasticsearch.go</span><br><span class="line">│   </span><br><span class="line">├─logs</span><br><span class="line">│      my.log</span><br><span class="line">│</span><br><span class="line">└─main</span><br><span class="line">kafka.go</span><br><span class="line">        config.go</span><br><span class="line">        log.go</span><br><span class="line">        main.go</span><br></pre></td></tr></table></figure></p><p>在<code>main.go</code>中填写初始化信息:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/astaxie/beego/logs"</span></span><br><span class="line"><span class="string">"logCollect/logTransfer/kafka"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 初始化配置</span></span><br><span class="line">err := InitConfig(<span class="string">"ini"</span>, <span class="string">"E:\\Go\\logCollect\\logTransfer\\config\\logTransfer.conf"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">logs.Debug(<span class="string">"初始化配置成功"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化日志模块</span></span><br><span class="line">err = initLogger(logConfig.LogPath, logConfig.LogLevel)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">logs.Debug(<span class="string">"初始化日志模块成功"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化Kafka</span></span><br><span class="line">err = kafka.InitKafka(logConfig.KafkaAddr, logConfig.KafkaTopic)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logs.Error(<span class="string">"初始化Kafka失败, err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">logs.Debug(<span class="string">"初始化Kafka成功"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><code>logTransfer.conf</code></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[logs]</span><br><span class="line">log_level = debug</span><br><span class="line">log_path = &quot;E:\\Go\\logCollect\\logTransfer\\logs\\my.log&quot;</span><br><span class="line"></span><br><span class="line">[kafka]</span><br><span class="line">server_addr = localhost:9092</span><br><span class="line">topic = nginx_log</span><br><span class="line"></span><br><span class="line">[elasticsearch]</span><br><span class="line">addr = http://localhost:9200/</span><br></pre></td></tr></table></figure></p><p><code>config.go</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/astaxie/beego/config"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> LogConfig <span class="keyword">struct</span> &#123;</span><br><span class="line">KafkaAddr  <span class="keyword">string</span></span><br><span class="line">KafkaTopic <span class="keyword">string</span></span><br><span class="line">EsAddr     <span class="keyword">string</span></span><br><span class="line">LogPath    <span class="keyword">string</span></span><br><span class="line">LogLevel   <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">logConfig *LogConfig</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitConfig</span><span class="params">(confType <span class="keyword">string</span>, filename <span class="keyword">string</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">conf, err := config.NewConfig(confType, filename)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"初始化配置文件出错:%v\n"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 导入配置信息</span></span><br><span class="line">logConfig = &amp;LogConfig&#123;&#125;</span><br><span class="line"><span class="comment">// 日志级别</span></span><br><span class="line">logConfig.LogLevel = conf.String(<span class="string">"logs::log_level"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(logConfig.LogLevel) == <span class="number">0</span> &#123;</span><br><span class="line">logConfig.LogLevel = <span class="string">"debug"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 日志输出路径</span></span><br><span class="line">logConfig.LogPath = conf.String(<span class="string">"logs::log_path"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(logConfig.LogPath) == <span class="number">0</span> &#123;</span><br><span class="line">logConfig.LogPath = <span class="string">"E:\\Go\\logCollect\\logTransfer\\logs\\my.log"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Kafka</span></span><br><span class="line">logConfig.KafkaAddr = conf.String(<span class="string">"kafka::server_addr"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(logConfig.KafkaAddr) == <span class="number">0</span> &#123;</span><br><span class="line">err = fmt.Errorf(<span class="string">"初识化Kafka addr失败"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">logConfig.KafkaTopic = conf.String(<span class="string">"kafka::topic"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(logConfig.KafkaAddr) == <span class="number">0</span> &#123;</span><br><span class="line">err = fmt.Errorf(<span class="string">"初识化Kafka topic失败"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Es</span></span><br><span class="line">logConfig.EsAddr = conf.String(<span class="string">"elasticsearch::addr"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(logConfig.EsAddr) == <span class="number">0</span> &#123;</span><br><span class="line">err = fmt.Errorf(<span class="string">"初识化Es addr失败"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><code>log,go</code></strong><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/astaxie/beego/logs"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">convertLogLevel</span><span class="params">(level <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> level &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"debug"</span>:</span><br><span class="line"><span class="keyword">return</span> logs.LevelDebug</span><br><span class="line"><span class="keyword">case</span> <span class="string">"warn"</span>:</span><br><span class="line"><span class="keyword">return</span> logs.LevelWarn</span><br><span class="line"><span class="keyword">case</span> <span class="string">"info"</span>:</span><br><span class="line"><span class="keyword">return</span> logs.LevelInfo</span><br><span class="line"><span class="keyword">case</span> <span class="string">"trace"</span>:</span><br><span class="line"><span class="keyword">return</span> logs.LevelTrace</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> logs.LevelDebug</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initLogger</span><span class="params">(logPath <span class="keyword">string</span>, logLevel <span class="keyword">string</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">config := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">config[<span class="string">"filename"</span>] = logPath</span><br><span class="line">config[<span class="string">"level"</span>] = convertLogLevel(logLevel)</span><br><span class="line">configStr, err := json.Marshal(config)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"初始化日志, 序列化失败:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">_ = logs.SetLogger(logs.AdapterFile, <span class="keyword">string</span>(configStr))</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><code>kafka.go</code></strong><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> kafka</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/Shopify/sarama"</span></span><br><span class="line"><span class="string">"github.com/astaxie/beego/logs"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> KafkaClient <span class="keyword">struct</span> &#123;</span><br><span class="line">client sarama.Consumer</span><br><span class="line">addr   <span class="keyword">string</span></span><br><span class="line">topic  <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">kafkaClient *KafkaClient</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitKafka</span><span class="params">(addr <span class="keyword">string</span>, topic <span class="keyword">string</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">kafkaClient = &amp;KafkaClient&#123;&#125;</span><br><span class="line">consumer, err := sarama.NewConsumer(strings.Split(addr, <span class="string">","</span>), <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logs.Error(<span class="string">"启动Kafka消费者错误: %s"</span>, err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">kafkaClient.client = consumer</span><br><span class="line">kafkaClient.addr = addr</span><br><span class="line">kafkaClient.topic = topic</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行<code>main</code>函数, 构建测试<br>输出日志在<code>logs/my.log</code>中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020/03/28 17:30:02.744 [D]  初始化日志模块成功</span><br><span class="line">2020/03/28 17:30:02.778 [D]  初始化Kafka成功</span><br></pre></td></tr></table></figure></p><p>初始化成功, 下面将使用Kafka消费数据, 并且将获取到的数据存入ES中</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在前六章中已经完成了日志收集的&lt;code&gt;logAgent&lt;/code&gt;端, 接下来需要将日志数据写入到&lt;code&gt;Kafka&lt;/code&gt;中, 然后将数据落地到&lt;code&gt;Elastciseartch&lt;/code&gt;中&lt;/p&gt;
&lt;p&gt;项目架构图:&lt;/p&gt;
&lt;p&gt;&lt;img s
      
    
    </summary>
    
      <category term="Golang日志收集系统" scheme="https://plutoacharon.github.io/categories/Golang%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Golang" scheme="https://plutoacharon.github.io/tags/Golang/"/>
    
      <category term="Golang日志收集系统" scheme="https://plutoacharon.github.io/tags/Golang%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Windows10配置Elasticsearch7与 Kibana7</title>
    <link href="https://plutoacharon.github.io/2020/03/29/Windows10%E9%85%8D%E7%BD%AEElasticsearch7%E4%B8%8E-Kibana7/"/>
    <id>https://plutoacharon.github.io/2020/03/29/Windows10配置Elasticsearch7与-Kibana7/</id>
    <published>2020-03-29T03:26:39.000Z</published>
    <updated>2020-03-29T03:30:14.008Z</updated>
    
    <content type="html"><![CDATA[<p>Elasticsearch 是一个实时的分布式搜索分析引擎，它能让你以前所未有的速度和规模，<br>去探索你的数据。 它被用作全文检索、结构化搜索、分析以及这三个功能的组合</p><p>Kibana 是一款开源的数据分析和可视化平台，它是 Elastic Stack 成员之一，设计用于和 Elasticsearch 协作。您可以使用 Kibana 对 Elasticsearch 索引中的数据进行搜索、查看、交互操作。您可以很方便的利用图表、表格及地图对数据进行多元化的分析和呈现。</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="https://www.elastic.co/cn/downloads/elasticsearch" target="_blank" rel="noopener">Elasticsearch下载</a>: <code>https://www.elastic.co/cn/downloads/elasticsearch</code></p><p><a href="https://www.elastic.co/cn/downloads/kibana" target="_blank" rel="noopener">Kibana下载地址</a>: <code>https://www.elastic.co/cn/downloads/kibana</code></p><h2 id="配置与启动"><a href="#配置与启动" class="headerlink" title="配置与启动"></a>配置与启动</h2><h3 id="启动Elasticsearch"><a href="#启动Elasticsearch" class="headerlink" title="启动Elasticsearch"></a>启动Elasticsearch</h3><blockquote><p>注意: 启动Elasticsearch需要配置Java环境</p></blockquote><p>解压文件, 打开cmd, 在安装目录下输入<code>.\bin\elasticsearch.bat</code><br><img src="https://img-blog.csdnimg.cn/20200327162317528.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>浏览器输入<code>localhost:9200</code>查看<br><img src="https://img-blog.csdnimg.cn/20200327162403537.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>安装成功</p><h3 id="启动Kibana"><a href="#启动Kibana" class="headerlink" title="启动Kibana"></a>启动Kibana</h3><blockquote><p>注意: <code>Kibana 的版本需要和 Elasticsearch 的版本一致</code>。这是官方支持的配置。<br>运行不同主版本号的 Kibana 和 Elasticsearch 是不支持的（例如 Kibana 5.x 和 Elasticsearch 2.x），若主版本号相同，运行 Kibana 子版本号比 Elasticsearch 子版本号新的版本也是不支持的（例如 Kibana 5.1 和 Elasticsearch 5.0）。<br>运行一个 Elasticsearch 子版本号大于 Kibana 的版本基本不会有问题，这种情况一般是便于先将 Elasticsearch 升级（例如 Kibana 5.0 和 Elasticsearch 5.1）。在这种配置下，Kibana 启动日志中会出现一个警告，所以一般只是使用于 Kibana 即将要升级到和 Elasticsearch 相同版本的场景。<br>运行不同的 Kibana 和 Elasticsearch 补丁版本一般是支持的（例如：Kibana 5.0.0 和 Elasticsearch 5.0.1），尽管我们鼓励用户去运行最新的补丁更新版本。</p></blockquote><p>Kibana官方手册:<code>https://www.elastic.co/guide/cn/kibana/current/index.html</code></p><p>下载解压缩后, 在安装目录下打开cmd输入<code>.\bin\kibana.bat</code><br><img src="https://img-blog.csdnimg.cn/20200327162745424.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>输入<code>http://localhost:5601/</code>启动成功<br><img src="https://img-blog.csdnimg.cn/20200327162957941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如果想要查看中文版的<code>Kinaba</code>, 修改<code>kibana-7.6.1-windows-x86_64\config\kibana.yml</code>的最后一行</p><p>重启<br><img src="https://img-blog.csdnimg.cn/20200327163452940.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200327163609875.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><code>http://localhost:5601/status</code>检查 Kibana 状态</p><p>访问 Kibana 的服务器状态页，状态页展示了服务器资源使用情况和已安装插件列表</p><p><img src="https://img-blog.csdnimg.cn/20200327163836716.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Elasticsearch 是一个实时的分布式搜索分析引擎，它能让你以前所未有的速度和规模，&lt;br&gt;去探索你的数据。 它被用作全文检索、结构化搜索、分析以及这三个功能的组合&lt;/p&gt;
&lt;p&gt;Kibana 是一款开源的数据分析和可视化平台，它是 Elastic Stack 成员
      
    
    </summary>
    
      <category term="Golang日志收集系统" scheme="https://plutoacharon.github.io/categories/Golang%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Golang" scheme="https://plutoacharon.github.io/tags/Golang/"/>
    
      <category term="Golang日志收集系统" scheme="https://plutoacharon.github.io/tags/Golang%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Golang实战之海量日志收集系统（六）监视etcd配置项的变更</title>
    <link href="https://plutoacharon.github.io/2020/03/29/Golang%E5%AE%9E%E6%88%98%E4%B9%8B%E6%B5%B7%E9%87%8F%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%85%AD%EF%BC%89%E7%9B%91%E8%A7%86etcd%E9%85%8D%E7%BD%AE%E9%A1%B9%E7%9A%84%E5%8F%98%E6%9B%B4/"/>
    <id>https://plutoacharon.github.io/2020/03/29/Golang实战之海量日志收集系统（六）监视etcd配置项的变更/</id>
    <published>2020-03-29T03:26:18.000Z</published>
    <updated>2020-03-29T03:29:30.622Z</updated>
    
    <content type="html"><![CDATA[<p>在上一篇中我们已经实现了从<code>etcd</code>中获取配置信息并创建<code>tailTask</code>任务</p><p>现在我们来通过<code>etcd</code>的<code>watch</code>实现新配置的变更</p><h2 id="监视etcd配置项的变更"><a href="#监视etcd配置项的变更" class="headerlink" title="监视etcd配置项的变更"></a>监视etcd配置项的变更</h2><h3 id="实现watch各个不同ip"><a href="#实现watch各个不同ip" class="headerlink" title="实现watch各个不同ip"></a>实现watch各个不同ip</h3><p>在真实生产环境中时会常常添加新的服务器, 这时我们需要借助之前的<code>ip.go</code>获取所有ip节点, 并且实时监控</p><p>修改<code>EtcdClient</code>结构体增加<code>keys</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> EtcdClient <span class="keyword">struct</span> &#123;</span><br><span class="line">client *clientv3.Client</span><br><span class="line">keys   []<span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在main/etcd.go中添加<code>initEtcdWatcher</code>与<code>watchKey</code>函数并且在函数<code>initEtcd</code>中调用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化多个watch监控etcd中配置节点</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initEtcdWatcher</span><span class="params">(addr <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, key := <span class="keyword">range</span> etcdClient.keys &#123;</span><br><span class="line"><span class="keyword">go</span> watchKey(addr,key)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">watchKey</span><span class="params">(addr <span class="keyword">string</span>, key <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化连接etcd</span></span><br><span class="line">cli, err := clientv3.New(clientv3.Config&#123;</span><br><span class="line"><span class="comment">//Endpoints:   []string&#123;"localhost:2379", "localhost:22379", "localhost:32379"&#125;,</span></span><br><span class="line">Endpoints:   []<span class="keyword">string</span>&#123;addr&#125;,</span><br><span class="line">DialTimeout: <span class="number">5</span> * time.Second,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logs.Error(<span class="string">"连接etcd失败:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logs.Debug(<span class="string">"开始监控key:"</span>,key)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Watch操作</span></span><br><span class="line">wch := cli.Watch(context.Background(), key)</span><br><span class="line"><span class="keyword">for</span> resp := <span class="keyword">range</span> wch &#123;</span><br><span class="line"><span class="keyword">for</span> _, ev := <span class="keyword">range</span> resp.Events &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Type: %v, Key:%v, Value:%v\n"</span>, ev.Type, <span class="keyword">string</span>(ev.Kv.Key), <span class="keyword">string</span>(ev.Kv.Value))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">2020/03/24 15:21:27.632 [D]  导入日志成功&amp;&#123;debug E:\\Go\\logagent\\logs\\my.log 100 0.0.0.0:9092 [&#123;E:\\Go\\logagent\\logs\\my.log nginx_log&#125;] 0.0.0.0:2379 /backend/logagent/config/&#125;</span><br><span class="line">2020/03/24 15:21:27.646 [D]  resp from etcd:[]</span><br><span class="line">2020/03/24 15:21:27.646 [D]  resp from etcd:[]</span><br><span class="line">2020/03/24 15:21:27.647 [D]  resp from etcd:[]</span><br><span class="line">2020/03/24 15:21:27.647 [D]  resp from etcd:[]</span><br><span class="line">2020/03/24 15:21:27.647 [D]  resp from etcd:[key:&quot;/backend/logagent/config/192.168.0.11&quot; create_revision:6 mod_revision:9 version:4 value:&quot;[&#123;\&quot;logpath\&quot;:\&quot;E:/nginx/logs/access.log\&quot;,\&quot;topic\&quot;:\&quot;nginx_log\&quot;&#125;,&#123;\&quot;logpath\&quot;:\&quot;E:/nginx/logs/error.log\&quot;,\&quot;topic\&quot;:\&quot;nginx_log_err\&quot;&#125;]&quot; ]</span><br><span class="line">2020/03/24 15:21:27.647 [D]  日志设置为[&#123;E:/nginx/logs/access.log nginx_log&#125; &#123;E:/nginx/logs/error.log nginx_log_err&#125;]</span><br><span class="line">2020/03/24 15:21:27.648 [D]  resp from etcd:[]</span><br><span class="line">2020/03/24 15:21:27.648 [D]  连接etcd成功</span><br><span class="line">2020/03/24 15:21:27.648 [D]  初始化etcd成功!</span><br><span class="line">2020/03/24 15:21:27.648 [D]  初始化tailf成功!</span><br><span class="line">2020/03/24 15:21:27.648 [D]  开始监控key: /backend/logagent/config/169.254.109.181</span><br><span class="line">2020/03/24 15:21:27.648 [D]  开始监控key: /backend/logagent/config/192.168.0.1</span><br><span class="line">2020/03/24 15:21:27.648 [D]  开始监控key: /backend/logagent/config/192.168.106.1</span><br><span class="line">2020/03/24 15:21:27.650 [D]  开始监控key: /backend/logagent/config/169.254.30.148</span><br><span class="line">2020/03/24 15:21:27.650 [D]  开始监控key: /backend/logagent/config/192.168.0.11</span><br><span class="line">2020/03/24 15:21:27.651 [D]  开始监控key: /backend/logagent/config/169.254.153.68</span><br><span class="line">2020/03/24 15:21:27.653 [D]  初始化Kafka producer成功,地址为: 0.0.0.0:9092</span><br><span class="line">2020/03/24 15:21:27.653 [D]  初始化Kafka成功!</span><br></pre></td></tr></table></figure><h3 id="实现watch新的配置"><a href="#实现watch新的配置" class="headerlink" title="实现watch新的配置"></a>实现watch新的配置</h3><h4 id="修改etcd-etcd-go"><a href="#修改etcd-etcd-go" class="headerlink" title="修改etcd/etcd.go"></a>修改<code>etcd/etcd.go</code></h4><p><code>etcd/etcd.go</code>新增<code>initEtcdWatcher</code>与<code>watchKey</code>函数，用于监视<code>etcd</code>的<code>key</code>的变化，当有变化时通知</p><p>其中通过<code>ev.Type</code>判断是<code>delect</code>还是<code>put</code>处理</p><p>当<code>getConfSucc</code>得到配置成功, 进行tailf中的<code>UpdateConfig</code>操作, 进行更新配置<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化多个watch监控etcd中配置节点</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initEtcdWatcher</span><span class="params">(addr <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, key := <span class="keyword">range</span> etcdClient.keys &#123;</span><br><span class="line"><span class="keyword">go</span> watchKey(addr, key)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">watchKey</span><span class="params">(addr <span class="keyword">string</span>, key <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化连接etcd</span></span><br><span class="line">cli, err := clientv3.New(clientv3.Config&#123;</span><br><span class="line"><span class="comment">//Endpoints:   []string&#123;"localhost:2379", "localhost:22379", "localhost:32379"&#125;,</span></span><br><span class="line">Endpoints:   []<span class="keyword">string</span>&#123;addr&#125;,</span><br><span class="line">DialTimeout: <span class="number">5</span> * time.Second,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logs.Error(<span class="string">"连接etcd失败:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logs.Debug(<span class="string">"开始监控key:"</span>, key)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Watch操作</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">var</span> collectConf []tailf.CollectConf</span><br><span class="line"><span class="keyword">var</span> getConfSucc = <span class="literal">true</span></span><br><span class="line">wch := cli.Watch(context.Background(), key)</span><br><span class="line"><span class="keyword">for</span> resp := <span class="keyword">range</span> wch &#123;</span><br><span class="line"><span class="keyword">for</span> _, ev := <span class="keyword">range</span> resp.Events &#123;</span><br><span class="line"><span class="comment">// DELETE处理</span></span><br><span class="line"><span class="keyword">if</span> ev.Type == mvccpb.DELETE &#123;</span><br><span class="line">logs.Warn(<span class="string">"删除Key[%s]配置"</span>, key)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// PUT处理</span></span><br><span class="line"><span class="keyword">if</span> ev.Type == mvccpb.PUT &amp;&amp; <span class="keyword">string</span>(ev.Kv.Key) == key &#123;</span><br><span class="line">err = json.Unmarshal(ev.Kv.Value, &amp;collectConf)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logs.Error(<span class="string">"反序列化key[%s]失败:"</span>, err)</span><br><span class="line">getConfSucc = <span class="literal">false</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">logs.Debug(<span class="string">"get config from etcd ,Type: %v, Key:%v, Value:%v\n"</span>, ev.Type, <span class="keyword">string</span>(ev.Kv.Key), <span class="keyword">string</span>(ev.Kv.Value))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> getConfSucc &#123;</span><br><span class="line">logs.Debug(<span class="string">"get config from etcd success, %v"</span>, collectConf)</span><br><span class="line">_ = tailf.UpdateConfig(collectConf)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="修改tailf-tail-go"><a href="#修改tailf-tail-go" class="headerlink" title="修改tailf/tail.go"></a>修改<code>tailf/tail.go</code></h4><p>在<code>TailObj</code>结构体中添加<code>status</code>(当前配置状态)与<code>exitChan</code>(管道里有数值时即为退出)<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> TailObj <span class="keyword">struct</span> &#123;</span><br><span class="line">tail     *tail.Tail</span><br><span class="line">conf     CollectConf</span><br><span class="line">status   <span class="keyword">int</span></span><br><span class="line">exitChan <span class="keyword">chan</span> <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义常量</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">StatusNormal = <span class="number">1</span> <span class="comment">// 正常状态</span></span><br><span class="line">StatusDelete = <span class="number">2</span> <span class="comment">// 删除状态</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>在<code>UpdateConfig</code>函数中遍历所有配置项</p><p>当<code>isRuning</code>为false时, 即可认为此项配置不存在, 需要新建任务, 调用<code>createNewTask</code>函数</p><p>重新遍历所有配置项, 如果<code>obj.status == StatusDelete</code>时, 将<code>obj.exitChan &lt;- 1</code>传入数值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新增etcd配置项</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UpdateConfig</span><span class="params">(confs []CollectConf)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建新的tailtask</span></span><br><span class="line"><span class="keyword">for</span> _, oneConf := <span class="keyword">range</span> confs &#123;</span><br><span class="line"><span class="comment">// 对于已经运行的所有实例, 路径是否一样</span></span><br><span class="line"><span class="keyword">var</span> isRuning = <span class="literal">false</span></span><br><span class="line"><span class="keyword">for</span> _, obj := <span class="keyword">range</span> tailObjMgr.tailsObjs &#123;</span><br><span class="line"><span class="comment">// 路径一样则证明是同一实例</span></span><br><span class="line"><span class="keyword">if</span> oneConf.LogPath == obj.conf.LogPath &#123;</span><br><span class="line">isRuning = <span class="literal">true</span></span><br><span class="line">obj.status = StatusNormal</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查是否已经存在</span></span><br><span class="line"><span class="keyword">if</span> isRuning &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果不存在该配置项 新建一个tailtask任务</span></span><br><span class="line">createNewTask(oneConf)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历所有查看是否存在删除操作</span></span><br><span class="line"><span class="keyword">var</span> tailObjs []*TailObj</span><br><span class="line"><span class="keyword">for</span> _, obj := <span class="keyword">range</span> tailObjMgr.tailsObjs &#123;</span><br><span class="line">obj.status = StatusDelete</span><br><span class="line"><span class="keyword">for</span> _, oneConf := <span class="keyword">range</span> confs &#123;</span><br><span class="line"><span class="keyword">if</span> oneConf.LogPath == obj.conf.LogPath &#123;</span><br><span class="line">obj.status = StatusNormal</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果status为删除, 则将exitChan置为1</span></span><br><span class="line"><span class="keyword">if</span> obj.status == StatusDelete &#123;</span><br><span class="line">obj.exitChan &lt;- <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将obj存入临时的数组中</span></span><br><span class="line">tailObjs = <span class="built_in">append</span>(tailObjs, obj)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将临时数组传入tailsObjs中</span></span><br><span class="line">tailObjMgr.tailsObjs = tailObjs</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>createNewTask</code>函数为新建一个tailtask<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createNewTask</span><span class="params">(conf CollectConf)</span></span> &#123;</span><br><span class="line"><span class="comment">// 初始化Tailf实例</span></span><br><span class="line">tails, errTail := tail.TailFile(conf.LogPath, tail.Config&#123;</span><br><span class="line">ReOpen:    <span class="literal">true</span>,</span><br><span class="line">Follow:    <span class="literal">true</span>,</span><br><span class="line">Location:  &amp;tail.SeekInfo&#123;Offset: <span class="number">0</span>, Whence: <span class="number">2</span>&#125;,</span><br><span class="line">MustExist: <span class="literal">false</span>,</span><br><span class="line">Poll:      <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> errTail != <span class="literal">nil</span> &#123;</span><br><span class="line">logs.Error(<span class="string">"收集文件[%s]错误: %v"</span>, conf.LogPath, errTail)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 导入配置项</span></span><br><span class="line">obj := &amp;TailObj&#123;</span><br><span class="line">conf:     conf,</span><br><span class="line">exitChan: <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.tail = tails</span><br><span class="line">tailObjMgr.tailsObjs = <span class="built_in">append</span>(tailObjMgr.tailsObjs, obj)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> readFromTail(obj)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改<code>readFromTail</code>函数, 当向<code>TextMsg</code>即想Kafka传入数据时, 判断该<code>tailObj.exitChan</code>是否为退出<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读入日志数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readFromTail</span><span class="params">(tailObj *TailObj)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> <span class="literal">true</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> msg, ok := &lt;-tailObj.tail.Lines:</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">logs.Warn(<span class="string">"Tail file close reopen, filename:%s\n"</span>, tailObj.tail.Filename)</span><br><span class="line">time.Sleep(<span class="number">100</span> * time.Millisecond)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">textMsg := &amp;TextMsg&#123;</span><br><span class="line">Msg:   msg.Text,</span><br><span class="line">Topic: tailObj.conf.Topic,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 放入chan里</span></span><br><span class="line">tailObjMgr.msgChan &lt;- textMsg</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果exitChan为1, 则删除对应配置项</span></span><br><span class="line"><span class="keyword">case</span> &lt;-tailObj.exitChan:</span><br><span class="line">logs.Warn(<span class="string">"tail obj 退出, 配置项为conf:%v"</span>, tailObj.conf)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后修改<code>InitTail</code>函数<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化tail</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitTail</span><span class="params">(conf []CollectConf, chanSize <span class="keyword">int</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">tailObjMgr = &amp;TailObjMgr&#123;</span><br><span class="line">msgChan: <span class="built_in">make</span>(<span class="keyword">chan</span> *TextMsg, chanSize), <span class="comment">// 定义Chan管道</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载配置项</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(conf) == <span class="number">0</span> &#123;</span><br><span class="line">logs.Error(<span class="string">"无效的日志collect配置: "</span>, conf)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环导入</span></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> conf &#123;</span><br><span class="line">createNewTask(v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">go build</span><br><span class="line">./logagent</span><br><span class="line">[169.254.109.181 169.254.30.148 192.168.106.1 192.168.0.1 192.168.0.11 169.254.153.68]</span><br><span class="line">开始</span><br><span class="line">2020/03/25 11:32:57 Waiting for E:/nginx/logs/access.log to appear...</span><br><span class="line">2020/03/25 11:32:57 Waiting for E:/nginx/logs/error.log to appear...</span><br></pre></td></tr></table></figure><p>向etcd中进行<code>PUT</code>与<code>DELECE</code></p><p><code>delece</code>操作时</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">2020/03/25 11:44:09.733 [D]  导入日志成功&amp;&#123;debug E:\\Go\\logagent\\logs\\my.log 100 0.0.0.0:9092 [&#123;E:\\Go\\logagent\\logs\\my.log nginx_log&#125;] 0.0.0.0:2379 /backend/logagent/config/&#125;</span><br><span class="line">2020/03/25 11:44:09.738 [D]  resp from etcd:[]</span><br><span class="line">2020/03/25 11:44:09.739 [D]  resp from etcd:[]</span><br><span class="line">2020/03/25 11:44:09.739 [D]  resp from etcd:[]</span><br><span class="line">2020/03/25 11:44:09.740 [D]  resp from etcd:[]</span><br><span class="line">2020/03/25 11:44:09.741 [D]  resp from etcd:[key:&quot;/backend/logagent/config/192.168.0.11&quot; create_revision:6 mod_revision:10 version:5 value:&quot;[&#123;\&quot;logpath\&quot;:\&quot;E:/nginx/logs/access.log\&quot;,\&quot;topic\&quot;:\&quot;nginx_log\&quot;&#125;,&#123;\&quot;logpath\&quot;:\&quot;E:/nginx/logs/error.log\&quot;,\&quot;topic\&quot;:\&quot;nginx_log_err\&quot;&#125;,&#123;\&quot;logpath\&quot;:\&quot;E:/nginx/logs/error2.log\&quot;,\&quot;topic\&quot;:\&quot;nginx_log_err2\&quot;&#125;]&quot; ]</span><br><span class="line">2020/03/25 11:44:09.741 [D]  日志设置为[&#123;E:/nginx/logs/access.log nginx_log&#125; &#123;E:/nginx/logs/error.log nginx_log_err&#125; &#123;E:/nginx/logs/error2.log nginx_log_err2&#125;]</span><br><span class="line">2020/03/25 11:44:09.741 [D]  resp from etcd:[]</span><br><span class="line">2020/03/25 11:44:09.741 [D]  连接etcd成功</span><br><span class="line">2020/03/25 11:44:09.741 [D]  初始化etcd成功!</span><br><span class="line">2020/03/25 11:44:09.741 [D]  初始化tailf成功!</span><br><span class="line">2020/03/25 11:44:09.741 [D]  开始监控key: /backend/logagent/config/169.254.109.181</span><br><span class="line">2020/03/25 11:44:09.741 [D]  开始监控key: /backend/logagent/config/169.254.30.148</span><br><span class="line">2020/03/25 11:44:09.741 [D]  开始监控key: /backend/logagent/config/192.168.0.1</span><br><span class="line">2020/03/25 11:44:09.742 [D]  开始监控key: /backend/logagent/config/192.168.0.11</span><br><span class="line">2020/03/25 11:44:09.742 [D]  开始监控key: /backend/logagent/config/192.168.106.1</span><br><span class="line">2020/03/25 11:44:09.742 [D]  开始监控key: /backend/logagent/config/169.254.153.68</span><br><span class="line">2020/03/25 11:44:09.745 [D]  初始化Kafka producer成功,地址为: 0.0.0.0:9092</span><br><span class="line">2020/03/25 11:44:09.745 [D]  初始化Kafka成功!</span><br><span class="line">2020/03/25 11:44:30.820 [D]  get config from etcd ,Type: PUT, Key:/backend/logagent/config/192.168.0.11, Value:[&#123;&quot;logpath&quot;:&quot;E:/nginx/logs/access.log&quot;,&quot;topic&quot;:&quot;nginx_log&quot;&#125;,&#123;&quot;logpath&quot;:&quot;E:/nginx/logs/error.log&quot;,&quot;topic&quot;:&quot;nginx_log_err&quot;&#125;]</span><br><span class="line"></span><br><span class="line">2020/03/25 11:44:30.820 [D]  get config from etcd success, [&#123;E:/nginx/logs/access.log nginx_log&#125; &#123;E:/nginx/logs/error.log nginx_log_err&#125;]</span><br><span class="line">2020/03/25 11:44:30.820 [W]  tail obj 退出, 配置项为conf:&#123;E:/nginx/logs/error2.log nginx_log_err2&#125;</span><br></pre></td></tr></table></figure><p><code>put</code>操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2020/03/25 11:46:18.082 [D]  get config from etcd ,Type: PUT, Key:/backend/logagent/config/192.168.0.11, Value:[&#123;&quot;logpath&quot;:&quot;E:/nginx/logs/access.log&quot;,&quot;topic&quot;:&quot;nginx_log&quot;&#125;,&#123;&quot;logpath&quot;:&quot;E:/nginx/logs/error.log&quot;,&quot;topic&quot;:&quot;nginx_log_err&quot;&#125;,&#123;&quot;logpath&quot;:&quot;E:/nginx/logs/error2.log&quot;,&quot;topic&quot;:&quot;nginx_log_err2&quot;&#125;]</span><br><span class="line"></span><br><span class="line">2020/03/25 11:46:18.082 [D]  get config from etcd success, [&#123;E:/nginx/logs/access.log nginx_log&#125; &#123;E:/nginx/logs/error.log nginx_log_err&#125; &#123;E:/nginx/logs/error2.log nginx_log_err2&#125;]</span><br></pre></td></tr></table></figure></p><p><code>Kafka</code>消费成功<br><img src="https://img-blog.csdnimg.cn/20200325115011541.png" alt="在这里插入图片描述"><br>已经成功获取到日志,</p><p>至此<code>logAgent</code> 的部分就写完了, 后续开发<code>logTransfe</code>r将从<code>Kafka</code>里面获取日志信息入库。可以存<code>Elasticsearch</code>，供<code>Kibana</code>进行可视化查询, 最后通过<code>beego</code>开发<code>web</code>界面管理<code>etcd</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在上一篇中我们已经实现了从&lt;code&gt;etcd&lt;/code&gt;中获取配置信息并创建&lt;code&gt;tailTask&lt;/code&gt;任务&lt;/p&gt;
&lt;p&gt;现在我们来通过&lt;code&gt;etcd&lt;/code&gt;的&lt;code&gt;watch&lt;/code&gt;实现新配置的变更&lt;/p&gt;
&lt;h2 id=&quot;监视
      
    
    </summary>
    
      <category term="Golang日志收集系统" scheme="https://plutoacharon.github.io/categories/Golang%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Golang" scheme="https://plutoacharon.github.io/tags/Golang/"/>
    
      <category term="Golang日志收集系统" scheme="https://plutoacharon.github.io/tags/Golang%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Golang实战之海量日志收集系统（五）根据etcd配置项创建多个tailTask</title>
    <link href="https://plutoacharon.github.io/2020/03/29/Golang%E5%AE%9E%E6%88%98%E4%B9%8B%E6%B5%B7%E9%87%8F%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%BA%94%EF%BC%89%E6%A0%B9%E6%8D%AEetcd%E9%85%8D%E7%BD%AE%E9%A1%B9%E5%88%9B%E5%BB%BA%E5%A4%9A%E4%B8%AAtailTask/"/>
    <id>https://plutoacharon.github.io/2020/03/29/Golang实战之海量日志收集系统（五）根据etcd配置项创建多个tailTask/</id>
    <published>2020-03-29T03:25:55.000Z</published>
    <updated>2020-03-29T03:51:18.721Z</updated>
    
    <content type="html"><![CDATA[<p>通过上一篇从etcd中获取配置信息, 现在要拿着这些配置项进行日志收集</p><h2 id="根据etcd的配置项创建多个tailtask"><a href="#根据etcd的配置项创建多个tailtask" class="headerlink" title="根据etcd的配置项创建多个tailtask"></a>根据etcd的配置项创建多个tailtask</h2><p>项目结构:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line"></span><br><span class="line">│  go.mod</span><br><span class="line">│  go.sum</span><br><span class="line">│</span><br><span class="line">│</span><br><span class="line">├─conf</span><br><span class="line">│      logagent.conf</span><br><span class="line">│</span><br><span class="line">├─kafka</span><br><span class="line">│      kafka.go</span><br><span class="line">│</span><br><span class="line">├─logs</span><br><span class="line">│      my.log</span><br><span class="line">│</span><br><span class="line">├─main</span><br><span class="line">│      config.go</span><br><span class="line">│      etcd.go</span><br><span class="line">│      ip.go</span><br><span class="line">│      log.go</span><br><span class="line">│      main.go</span><br><span class="line">│      server.go</span><br><span class="line">│</span><br><span class="line">├─tailf</span><br><span class="line">│      tail.go</span><br><span class="line">│</span><br><span class="line">└─tools</span><br><span class="line">    └─SetConf</span><br><span class="line">            main.go</span><br></pre></td></tr></table></figure></p><h3 id="新增tools包-包含SetConf里的main-go将设置的配置信息导入到etcd中"><a href="#新增tools包-包含SetConf里的main-go将设置的配置信息导入到etcd中" class="headerlink" title="新增tools包,  包含SetConf里的main.go将设置的配置信息导入到etcd中"></a>新增tools包,  包含<code>SetConf</code>里的<code>main.go</code>将设置的配置信息导入到etcd中</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/coreos/etcd/clientv3"</span></span><br><span class="line"><span class="string">"logagent/tailf"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义etcd的前缀key</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">EtcdKey = <span class="string">"/backend/logagent/config/192.168.0.11"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SetLogConfToEtcd</span><span class="params">()</span></span> &#123;</span><br><span class="line">cli, err := clientv3.New(clientv3.Config&#123;</span><br><span class="line">Endpoints:   []<span class="keyword">string</span>&#123;<span class="string">"localhost:2379"</span>, <span class="string">"localhost:22379"</span>, <span class="string">"localhost:32379"</span>&#125;,</span><br><span class="line">DialTimeout: <span class="number">5</span> * time.Second,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"connect failed, err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"connect succ"</span>)</span><br><span class="line"><span class="keyword">defer</span> cli.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> logConfArr []tailf.CollectConf</span><br><span class="line">logConfArr = <span class="built_in">append</span>(</span><br><span class="line">logConfArr,</span><br><span class="line">tailf.CollectConf&#123;</span><br><span class="line">LogPath: <span class="string">"E:/nginx/logs/access.log"</span>,</span><br><span class="line">Topic:   <span class="string">"nginx_log"</span>,</span><br><span class="line">&#125;,</span><br><span class="line">)</span><br><span class="line">logConfArr = <span class="built_in">append</span>(</span><br><span class="line">logConfArr,</span><br><span class="line">tailf.CollectConf&#123;</span><br><span class="line">LogPath: <span class="string">"E:/nginx/logs/error.log"</span>,</span><br><span class="line">Topic:   <span class="string">"nginx_log_err"</span>,</span><br><span class="line">&#125;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Json打包</span></span><br><span class="line">data, err := json.Marshal(logConfArr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"json failed, "</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctx, cancel := context.WithTimeout(context.Background(), time.Second)</span><br><span class="line">_, err = cli.Put(ctx, EtcdKey, <span class="keyword">string</span>(data))</span><br><span class="line">cancel()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"put failed, err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctx, cancel = context.WithTimeout(context.Background(), time.Second)</span><br><span class="line">resp, err := cli.Get(ctx, EtcdKey)</span><br><span class="line">cancel()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"get failed, err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, ev := <span class="keyword">range</span> resp.Kvs &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%s : %s\n"</span>, ev.Key, ev.Value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">SetLogConfToEtcd()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接运行文件</p><pre><code>connect succ/backend/logagent/config/192.168.0.11 : [{&quot;path&quot;:&quot;E:/nginx/logs/access.log&quot;,&quot;topic&quot;:&quot;nginx_log&quot;},{&quot;path&quot;:&quot;E:/nginx/logs/error.log&quot;,&quot;topic&quot;:&quot;nginx_log_err&quot;}]</code></pre><p>成功将配置信息导入到etcd中, 下一步需要根据etcd中的配置项, 创建多个tailtask<br>我们想要实现的是</p><pre><code>E:/nginx/logs/access.log 日志文件发送到kafka的nginx_log中E:/nginx/logs/error.log 日志文件发送到kafka的nginx_log_err中</code></pre><h3 id="main包中新建etcd-go文件"><a href="#main包中新建etcd-go文件" class="headerlink" title="main包中新建etcd.go文件"></a>main包中新建etcd.go文件</h3><p>用于初始化连接etcd与从etcd中取出配置信息</p><p>因为存入etcd时传入的是json格式，所以取出使用时需要反序列化<code>json.Unmarshal(v.Value, &amp;collectConf)</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/astaxie/beego/logs"</span></span><br><span class="line"><span class="string">"github.com/coreos/etcd/clientv3"</span></span><br><span class="line"><span class="string">"logagent/tailf"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> EtcdClient <span class="keyword">struct</span> &#123;</span><br><span class="line">client *clientv3.Client</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">etcdClient *EtcdClient</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initEtcd</span><span class="params">(addr <span class="keyword">string</span>, key <span class="keyword">string</span>)</span> <span class="params">(collectConf []tailf.CollectConf, err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 初始化连接etcd</span></span><br><span class="line">cli, err := clientv3.New(clientv3.Config&#123;</span><br><span class="line"><span class="comment">//Endpoints:   []string&#123;"localhost:2379", "localhost:22379", "localhost:32379"&#125;,</span></span><br><span class="line">Endpoints:   []<span class="keyword">string</span>&#123;addr&#125;,</span><br><span class="line">DialTimeout: <span class="number">5</span> * time.Second,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logs.Error(<span class="string">"连接etcd失败:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">etcdClient = &amp;EtcdClient&#123;</span><br><span class="line">client: cli,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果Key不是以"/"结尾, 则自动加上"/"</span></span><br><span class="line"><span class="keyword">if</span> strings.HasSuffix(key, <span class="string">"/"</span>) == <span class="literal">false</span> &#123;</span><br><span class="line">key = key + <span class="string">"/"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, ip := <span class="keyword">range</span> localIPArray &#123;</span><br><span class="line">etcdKey := fmt.Sprintf(<span class="string">"%s%s"</span>, key, ip)</span><br><span class="line">ctx, cancel := context.WithTimeout(context.Background(), time.Second)</span><br><span class="line">resp, err := cli.Get(ctx, etcdKey)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logs.Error(<span class="string">"etcd get请求失败:"</span>, err)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">cancel()</span><br><span class="line">logs.Debug(<span class="string">"resp from etcd:%v"</span>, resp.Kvs)</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> resp.Kvs &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">string</span>(v.Key) == etcdKey &#123;</span><br><span class="line"><span class="comment">// 将从etcd中取出来的json格式反序列化为结构体</span></span><br><span class="line">err = json.Unmarshal(v.Value, &amp;collectConf)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logs.Error(<span class="string">"反序列化失败:"</span>, err)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">logs.Debug(<span class="string">"日志设置为%v"</span>, collectConf)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logs.Debug(<span class="string">"连接etcd成功"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改logagent-conf配置文件"><a href="#修改logagent-conf配置文件" class="headerlink" title="修改logagent.conf配置文件"></a>修改logagent.conf配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[logs]</span><br><span class="line">log_level = debug</span><br><span class="line">log_path = E:\\Go\\logagent\\logs\\my.log</span><br><span class="line"></span><br><span class="line">[collect]</span><br><span class="line">log_path = E:\\Go\\logagent\\logs\\my.log</span><br><span class="line">topic = nginx_log</span><br><span class="line">chan_size = 100</span><br><span class="line"></span><br><span class="line">[kafka]</span><br><span class="line">server_addr = 0.0.0.0:9092</span><br><span class="line"></span><br><span class="line">[etcd]</span><br><span class="line">addr = 0.0.0.0:2379</span><br><span class="line">configKey= /backend/logagent/config/</span><br></pre></td></tr></table></figure><h3 id="main包中新建ip-go文件"><a href="#main包中新建ip-go文件" class="headerlink" title="main包中新建ip.go文件"></a>main包中新建ip.go文件</h3><p>使用<code>net</code>包取出本机所有的网卡ip去连接etcd</p><p>考虑到以后添加新服务器时不需要手动添加ip，这里将ip信息全部存入<code>localIPArray</code>数组中<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">localIPArray []<span class="keyword">string</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">addrs, err := net.InterfaceAddrs()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(fmt.Sprintf(<span class="string">"获取网卡ip失败, %v"</span>, err))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, addr := <span class="keyword">range</span> addrs &#123;</span><br><span class="line"><span class="keyword">if</span> ipnet, ok := addr.(*net.IPNet); ok &amp;&amp; !ipnet.IP.IsLoopback() &#123;</span><br><span class="line"><span class="keyword">if</span> ipnet.IP.To4() != <span class="literal">nil</span> &#123;</span><br><span class="line">localIPArray = <span class="built_in">append</span>(localIPArray, ipnet.IP.String())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(localIPArray)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="config-go加入etcd配置"><a href="#config-go加入etcd配置" class="headerlink" title="config.go加入etcd配置"></a>config.go加入etcd配置</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// etcd</span></span><br><span class="line">logConfig.etcdAddr = conf.String(<span class="string">"etcd::addr"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(logConfig.etcdAddr) == <span class="number">0</span> &#123;</span><br><span class="line">err = fmt.Errorf(<span class="string">"初识化etcd addr失败"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logConfig.etcdKey = conf.String(<span class="string">"etcd::configKey"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(logConfig.etcdKey) == <span class="number">0</span> &#123;</span><br><span class="line">err = fmt.Errorf(<span class="string">"初识化etcd configKey失败"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 日志配置</span></span><br><span class="line"><span class="keyword">type</span> Config <span class="keyword">struct</span> &#123;</span><br><span class="line">logLevel <span class="keyword">string</span></span><br><span class="line">logPath  <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">chanSize    <span class="keyword">int</span></span><br><span class="line">KafkaAddr   <span class="keyword">string</span></span><br><span class="line">collectConf []tailf.CollectConf</span><br><span class="line"></span><br><span class="line">etcdAddr <span class="keyword">string</span></span><br><span class="line">etcdKey  <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="tail-go修改序列化"><a href="#tail-go修改序列化" class="headerlink" title="tail.go修改序列化"></a>tail.go修改序列化</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> CollectConf <span class="keyword">struct</span> &#123;</span><br><span class="line">LogPath <span class="keyword">string</span> <span class="string">`json:"logpath"`</span></span><br><span class="line">Topic   <span class="keyword">string</span> <span class="string">`json:"topic"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="main-go函数"><a href="#main-go函数" class="headerlink" title="main.go函数"></a>main.go函数</h3><p>将<code>initEtcd</code>初始化etcd函数放到<code>InitTail</code>函数之前, 使etcd中的配置项与tailf连接起来<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/astaxie/beego/logs"</span></span><br><span class="line"><span class="string">"logagent/kafka"</span></span><br><span class="line"><span class="string">"logagent/tailf"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"开始"</span>)</span><br><span class="line"><span class="comment">// 读取初始化配置文件</span></span><br><span class="line">filename := <span class="string">"E:\\Go\\logagent\\conf\\logagent.conf"</span></span><br><span class="line">err := loadInitConf(<span class="string">"ini"</span>, filename)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"导入配置文件错误:%v\n"</span>, err)</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">"导入配置文件错误"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化日志信息</span></span><br><span class="line">err = initLogger()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"导入日志文件错误:%v\n"</span>, err)</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">"导入日志文件错误"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出成功信息</span></span><br><span class="line">logs.Debug(<span class="string">"导入日志成功%v"</span>, logConfig)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初识化etcd</span></span><br><span class="line">collectConf, err := initEtcd(logConfig.etcdAddr, logConfig.etcdKey)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logs.Error(<span class="string">"初始化etcd失败"</span>,err)</span><br><span class="line">&#125;</span><br><span class="line">logs.Debug(<span class="string">"初始化etcd成功!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化tailf</span></span><br><span class="line">err = tailf.InitTail(collectConf, logConfig.chanSize)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logs.Error(<span class="string">"初始化tailf失败:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">logs.Debug(<span class="string">"初始化tailf成功!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化Kafka</span></span><br><span class="line">err = kafka.InitKafka(logConfig.KafkaAddr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logs.Error(<span class="string">"初识化Kafka producer失败:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">logs.Debug(<span class="string">"初始化Kafka成功!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行</span></span><br><span class="line">err = serverRun()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logs.Error(<span class="string">"serverRun failed:"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">logs.Info(<span class="string">"程序退出"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行， 成功将etcd中的配置项经过tailf得到配置， 创建了多个tailtask<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[169.254.109.181 169.254.30.148 192.168.106.1 192.168.0.1 192.168.0.11 169.254.153.68]</span><br><span class="line">开始</span><br><span class="line">&#123;E:/nginx/logs/access.log nginx_log&#125;</span><br><span class="line">&#123;E:/nginx/logs/error.log nginx_log_err&#125;</span><br><span class="line">2020/03/23 18:14:44 Waiting for E:/nginx/logs/access.log to appear...</span><br><span class="line">2020/03/23 18:14:44 Waiting for E:/nginx/logs/error.log to appear...</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通过上一篇从etcd中获取配置信息, 现在要拿着这些配置项进行日志收集&lt;/p&gt;
&lt;h2 id=&quot;根据etcd的配置项创建多个tailtask&quot;&gt;&lt;a href=&quot;#根据etcd的配置项创建多个tailtask&quot; class=&quot;headerlink&quot; title=&quot;根据etc
      
    
    </summary>
    
      <category term="Golang日志收集系统" scheme="https://plutoacharon.github.io/categories/Golang%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Golang" scheme="https://plutoacharon.github.io/tags/Golang/"/>
    
      <category term="Golang日志收集系统" scheme="https://plutoacharon.github.io/tags/Golang%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Golang实战之海量日志收集系统（四）etcd介绍与使用etcd获取配置信息</title>
    <link href="https://plutoacharon.github.io/2020/03/29/Golang%E5%AE%9E%E6%88%98%E4%B9%8B%E6%B5%B7%E9%87%8F%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%9B%9B%EF%BC%89etcd%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8etcd%E8%8E%B7%E5%8F%96%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/"/>
    <id>https://plutoacharon.github.io/2020/03/29/Golang实战之海量日志收集系统（四）etcd介绍与使用etcd获取配置信息/</id>
    <published>2020-03-29T03:25:39.000Z</published>
    <updated>2020-03-29T03:29:39.195Z</updated>
    
    <content type="html"><![CDATA[<h2 id="etcd介绍"><a href="#etcd介绍" class="headerlink" title="etcd介绍"></a>etcd介绍</h2><p>高可用的分布式key-value存储，可以用于配置共享和服务发现</p><ul><li>类似的项目：<code>Zookeeper</code>和<code>consul</code></li><li>开发语言：<code>go</code></li><li>接口：提供<code>Restful</code>的接口，使用简单</li><li>实现算法：基于raft算法的强一致性，高可用的服务存储目录</li></ul><p><strong>etcd的应用场景：</strong></p><ul><li>服务发现和服务注册</li><li>配置中心(我们实现的日志收集客户端需要用到)</li><li>分布式锁</li><li>master选举</li></ul><p><strong>etcd的命令验证</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PS E:\Study\etcd-v3.4.5-windows-amd64&gt; .\etcdctl.exe put name xu</span><br><span class="line">OK</span><br><span class="line">PS E:\Study\etcd-v3.4.5-windows-amd64&gt; .\etcdctl.exe get name</span><br><span class="line">name</span><br><span class="line">xu</span><br><span class="line">PS E:\Study\etcd-v3.4.5-windows-amd64&gt;</span><br></pre></td></tr></table></figure></p><h2 id="context-介绍和使用"><a href="#context-介绍和使用" class="headerlink" title="context 介绍和使用"></a>context 介绍和使用</h2><p><code>Context</code>即为上下文管理，那么context的作用是做什么，主要有如下两个作用：</p><ul><li>控制goroutine的超时</li><li>保存上下文数据</li></ul><p><strong>context的超时控制</strong>：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Result <span class="keyword">struct</span> &#123;</span><br><span class="line">r   *http.Response</span><br><span class="line">err error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">process</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// context的超时控制</span></span><br><span class="line">ctx, cancel := context.WithTimeout(context.Background(), <span class="number">2</span>*time.Second)</span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br><span class="line">tr := &amp;http.Transport&#123;&#125;</span><br><span class="line">client := &amp;http.Client&#123;Transport: tr&#125;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> Result, <span class="number">1</span>)</span><br><span class="line"><span class="comment">// 如果请求成功了会将数据存入到管道中</span></span><br><span class="line">req, err := http.NewRequest(<span class="string">"GET"</span>, <span class="string">"http://www.baidu.com"</span>, <span class="literal">nil</span>)</span><br><span class="line"><span class="comment">//req, err := http.NewRequest("GET", "https://www.google.com", nil)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"http request failed, err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">resp, err := client.Do(req)</span><br><span class="line">pack := Result&#123;r: resp, err: err&#125;</span><br><span class="line">c &lt;- pack</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-ctx.Done(): <span class="comment">// 如果超时, ctx.Done()返回一个管道,当管道里有数据即可说明超时</span></span><br><span class="line"><span class="comment">//tr.CancelRequest(req)</span></span><br><span class="line">tr.CloseIdleConnections()</span><br><span class="line">res := &lt;-c</span><br><span class="line">fmt.Println(<span class="string">"Timeout! err:"</span>, res.err)</span><br><span class="line"><span class="keyword">case</span> res := &lt;-c: <span class="comment">// c管道里的数据传给res, 如果res里有数据则证明请求成功</span></span><br><span class="line"><span class="keyword">defer</span> res.r.Body.Close()</span><br><span class="line">out, _ := ioutil.ReadAll(res.r.Body)</span><br><span class="line">fmt.Printf(<span class="string">"Server Response: %s"</span>, out)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">process()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><pre><code>req, err := http.NewRequest(&quot;GET&quot;, &quot;http://www.baidu.com&quot;, nil)正常返回百度网站的网页htmlreq, err := http.NewRequest(&quot;GET&quot;, &quot;https://www.google.com&quot;, nil)返回失败Timeout! err: Get &quot;https://www.google.com&quot;: dial tcp 205.186.152.122:443: connectex: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond.</code></pre><p><strong>context保存上下文</strong><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">process</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">ret, ok := ctx.Value(<span class="string">"trace_id"</span>).(<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">ret = <span class="number">789</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"ret:%d\n"</span>, ret)</span><br><span class="line"></span><br><span class="line">s, _ := ctx.Value(<span class="string">"session"</span>).(<span class="keyword">string</span>)</span><br><span class="line">fmt.Printf(<span class="string">"seesion:%s\n"</span>, s)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := context.WithValue(context.Background(), <span class="string">"trace_id"</span>, <span class="number">123</span>)</span><br><span class="line">ctx = context.WithValue(ctx, <span class="string">"session"</span>, <span class="string">"This is a session"</span>)</span><br><span class="line">process(ctx)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><pre><code>ret:123seesion:This is a session</code></pre><h2 id="结合etcd和context使用"><a href="#结合etcd和context使用" class="headerlink" title="结合etcd和context使用"></a>结合etcd和context使用</h2><blockquote><p>我这里使用的是Go1.14, 安装<code>github.com/coreos/etcd/clientv3</code>时报错<code>etcd undefined: resolver.BuildOption</code><br>原因: grpc版本过高, 将grpc版本替换成v1.26.0版本<br>详细参考这篇博客: <a href="https://blog.csdn.net/qq_43442524/article/details/104997539" target="_blank" rel="noopener">解决Golang1.14 etcd/clientv3报错：etcd undefined: resolver.BuildOption</a></p></blockquote><p><strong>连接etcd</strong></p><p>连接前要先启动etcd</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/coreos/etcd/clientv3"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">cli, err := clientv3.New(clientv3.Config&#123;</span><br><span class="line">Endpoints:   []<span class="keyword">string</span>&#123;<span class="string">"localhost:2379"</span>, <span class="string">"localhost:22379"</span>, <span class="string">"localhost:32379"</span>&#125;,</span><br><span class="line">DialTimeout: <span class="number">5</span> * time.Second,&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"connect failed, err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"connect succ"</span>)</span><br><span class="line"><span class="keyword">defer</span> cli.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>通过连接etcd，存值并取值</strong><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/coreos/etcd/clientv3"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">EtcdExmaple()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">EtcdExmaple</span><span class="params">()</span></span> &#123;</span><br><span class="line">cli, err := clientv3.New(clientv3.Config&#123;</span><br><span class="line">Endpoints:   []<span class="keyword">string</span>&#123;<span class="string">"localhost:2379"</span>, <span class="string">"localhost:22379"</span>, <span class="string">"localhost:32379"</span>&#125;,</span><br><span class="line">DialTimeout: <span class="number">5</span> * time.Second,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"connect failed, err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"connect succ"</span>)</span><br><span class="line"><span class="keyword">defer</span> cli.Close()</span><br><span class="line"><span class="comment">// put操作</span></span><br><span class="line">ctx, cancel := context.WithTimeout(context.Background(), time.Second)</span><br><span class="line">_, err = cli.Put(ctx, <span class="string">"/logagent/conf/"</span>, <span class="string">"sample_value"</span>)</span><br><span class="line">cancel()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"put failed, err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// get操作</span></span><br><span class="line">ctx, cancel = context.WithTimeout(context.Background(), time.Second)</span><br><span class="line">resp, err := cli.Get(ctx, <span class="string">"/logagent/conf/"</span>)</span><br><span class="line">cancel()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"get failed, err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, ev := <span class="keyword">range</span> resp.Kvs &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%s : %s\n"</span>, ev.Key, ev.Value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Watch操作</strong><br>通过<code>watch</code>监控配置更改<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/coreos/etcd/clientv3"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">cli, err := clientv3.New(clientv3.Config&#123;</span><br><span class="line">Endpoints:   []<span class="keyword">string</span>&#123;<span class="string">"localhost:2379"</span>&#125;,</span><br><span class="line">DialTimeout: time.Second,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"connect to etcd failed, err: %v\n"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"connect etcd success."</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">defer</span> cli.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Watch操作</span></span><br><span class="line">wch := cli.Watch(context.Background(), <span class="string">"/logagent/conf/"</span>)</span><br><span class="line"><span class="keyword">for</span> resp := <span class="keyword">range</span> wch &#123;</span><br><span class="line"><span class="keyword">for</span> _, ev := <span class="keyword">range</span> resp.Events &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Type: %v, Key:%v, Value:%v\n"</span>, ev.Type, <span class="keyword">string</span>(ev.Kv.Key), <span class="keyword">string</span>(ev.Kv.Value))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>构建运行，然后尝试通过etcdctl向etcd指定的<code>key /logagent/conf/</code>发送数据测试<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PS E:\Study\etcd-v3.4.5-windows-amd64&gt; .\etcdctl.exe put /logagent/conf/ 1</span><br><span class="line">OK</span><br><span class="line">PS E:\Study\etcd-v3.4.5-windows-amd64&gt; .\etcdctl.exe put /logagent/conf/ 2</span><br><span class="line">OK</span><br><span class="line">PS E:\Study\etcd-v3.4.5-windows-amd64&gt;</span><br></pre></td></tr></table></figure></p><p>终端查看<br><img src="https://img-blog.csdnimg.cn/20200323141112578.png" alt="在这里插入图片描述"><br><strong>实现一个kafka的消费者代码的简单例子：</strong><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line"><span class="string">"sync"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"><span class="string">"github.com/Shopify/sarama"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">consumer, err := sarama.NewConsumer(strings.Split(<span class="string">"localhost:9092"</span>,<span class="string">","</span>), <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Failed to start consumer: %s"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">partitionList, err := consumer.Partitions(<span class="string">"nginx_log"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Failed to get the list of partitions: "</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(partitionList)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照分区来消费</span></span><br><span class="line"><span class="keyword">for</span> partition := <span class="keyword">range</span> partitionList &#123;</span><br><span class="line">pc, err := consumer.ConsumePartition(<span class="string">"nginx_log"</span>, <span class="keyword">int32</span>(partition), sarama.OffsetNewest)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Failed to start consumer for partition %d: %s\n"</span>, partition, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> pc.AsyncClose()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(pc sarama.PartitionConsumer)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> msg := <span class="keyword">range</span> pc.Messages() &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Partition:%d, Offset:%d, Key:%s, Value:%s"</span>, msg.Partition, msg.Offset, <span class="keyword">string</span>(msg.Key), <span class="keyword">string</span>(msg.Value))</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line">&#125;(pc)</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Hour)</span><br><span class="line">consumer.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但是上面的代码并不是最佳代码，因为这是通过time.sleep等待goroutine的执行，我们可以更改为通过sync.WaitGroup方式实现</p><p><strong>使用sync.WaitGroup优化</strong></p><ul><li><p>等待一组goroutine结束</p></li><li><p>使用Add方法设置等待的数量加1</p></li><li><p>使用Done方法设置等待的数量减1</p></li><li><p>当等待的数量等于0时,Wait函数返回</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/Shopify/sarama"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line"><span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">wg sync.WaitGroup</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">consumer, err := sarama.NewConsumer(strings.Split(<span class="string">"localhost:9092"</span>,<span class="string">","</span>), <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Failed to start consumer: %s"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">partitionList, err := consumer.Partitions(<span class="string">"nginx_log"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Failed to get the list of partitions: "</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(partitionList)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照分区来消费</span></span><br><span class="line"><span class="keyword">for</span> partition := <span class="keyword">range</span> partitionList &#123;</span><br><span class="line">pc, err := consumer.ConsumePartition(<span class="string">"nginx_log"</span>, <span class="keyword">int32</span>(partition), sarama.OffsetNewest)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Failed to start consumer for partition %d: %s\n"</span>, partition, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> pc.AsyncClose()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(pc sarama.PartitionConsumer)</span></span> &#123;</span><br><span class="line">wg.Add(<span class="number">1</span>) <span class="comment">// 增加一个goroutine</span></span><br><span class="line"><span class="keyword">for</span> msg := <span class="keyword">range</span> pc.Messages() &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Partition:%d, Offset:%d, Key:%s, Value:%s"</span>, msg.Partition, msg.Offset, <span class="keyword">string</span>(msg.Key), <span class="keyword">string</span>(msg.Value))</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line">wg.Done() <span class="comment">// 说明一个goroutine结束</span></span><br><span class="line">&#125;(pc)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//time.Sleep(time.Hour)</span></span><br><span class="line">wg.Wait() <span class="comment">// 当wg的内置计数为0时返回, 即所有goroutine运行结束</span></span><br><span class="line">_ = consumer.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>从etcd中获取配置信息</strong></p><p>根据key从etcd中获取配置项<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/coreos/etcd/clientv3"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义etcd的前缀key</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">EtcdKey = <span class="string">"/backend/logagent/config/192.168.0.11"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要收集的日志的配置信息</span></span><br><span class="line"><span class="keyword">type</span> LogConf <span class="keyword">struct</span> &#123;</span><br><span class="line">Path  <span class="keyword">string</span> <span class="string">`json:"path"`</span>  <span class="comment">// 日志存放的路径</span></span><br><span class="line">Topic <span class="keyword">string</span> <span class="string">`json:"topic"`</span> <span class="comment">// 日志要发往Kafka中的哪个Topic</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SetLogConfToEtcd</span><span class="params">()</span></span> &#123;</span><br><span class="line">cli, err := clientv3.New(clientv3.Config&#123;</span><br><span class="line">Endpoints:   []<span class="keyword">string</span>&#123;<span class="string">"localhost:2379"</span>, <span class="string">"localhost:22379"</span>, <span class="string">"localhost:32379"</span>&#125;,</span><br><span class="line">DialTimeout: <span class="number">5</span> * time.Second,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"connect failed, err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"connect succ"</span>)</span><br><span class="line"><span class="keyword">defer</span> cli.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 日志配置</span></span><br><span class="line"><span class="keyword">var</span> logConfArr []LogConf</span><br><span class="line">logConfArr = <span class="built_in">append</span>(</span><br><span class="line">logConfArr,</span><br><span class="line">LogConf&#123;</span><br><span class="line">Path:  <span class="string">"E:/nginx/logs/access.log"</span>,</span><br><span class="line">Topic: <span class="string">"nginx_log"</span>,</span><br><span class="line">&#125;,</span><br><span class="line">)</span><br><span class="line">logConfArr = <span class="built_in">append</span>(</span><br><span class="line">logConfArr,</span><br><span class="line">LogConf&#123;</span><br><span class="line">Path:  <span class="string">"E:/nginx/logs/error.log"</span>,</span><br><span class="line">Topic: <span class="string">"nginx_log_err"</span>,</span><br><span class="line">&#125;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Json打包</span></span><br><span class="line">data, err := json.Marshal(logConfArr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"json failed, "</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctx, cancel := context.WithTimeout(context.Background(), time.Second)</span><br><span class="line">_, err = cli.Put(ctx, EtcdKey, <span class="keyword">string</span>(data))</span><br><span class="line">cancel()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"put failed, err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctx, cancel = context.WithTimeout(context.Background(), time.Second)</span><br><span class="line">resp, err := cli.Get(ctx, EtcdKey)</span><br><span class="line">cancel()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"get failed, err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, ev := <span class="keyword">range</span> resp.Kvs &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%s : %s\n"</span>, ev.Key, ev.Value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">SetLogConfToEtcd()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试能否正常拿到值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">connect succ</span><br><span class="line">/backend/logagent/config/192.168.0.11 : [&#123;&quot;path&quot;:&quot;E:/nginx/logs/access.log&quot;,&quot;topic&quot;:&quot;nginx_log&quot;&#125;,&#123;&quot;path&quot;:&quot;E:/nginx/logs/error.log&quot;,&quot;topic&quot;:&quot;nginx_log_err&quot;&#125;]</span><br></pre></td></tr></table></figure></p><p>现在我们可以通过操作etcd拿到配置信息，下一步就是拿着这些配置项进行日志收集</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;etcd介绍&quot;&gt;&lt;a href=&quot;#etcd介绍&quot; class=&quot;headerlink&quot; title=&quot;etcd介绍&quot;&gt;&lt;/a&gt;etcd介绍&lt;/h2&gt;&lt;p&gt;高可用的分布式key-value存储，可以用于配置共享和服务发现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类似的项目：&lt;c
      
    
    </summary>
    
      <category term="Golang日志收集系统" scheme="https://plutoacharon.github.io/categories/Golang%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Golang" scheme="https://plutoacharon.github.io/tags/Golang/"/>
    
      <category term="Golang日志收集系统" scheme="https://plutoacharon.github.io/tags/Golang%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Golang实战之海量日志收集系统（三）简单版本logAgent的实现</title>
    <link href="https://plutoacharon.github.io/2020/03/29/Golang%E5%AE%9E%E6%88%98%E4%B9%8B%E6%B5%B7%E9%87%8F%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%89%EF%BC%89%E7%AE%80%E5%8D%95%E7%89%88%E6%9C%AClogAgent%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>https://plutoacharon.github.io/2020/03/29/Golang实战之海量日志收集系统（三）简单版本logAgent的实现/</id>
    <published>2020-03-29T03:25:23.000Z</published>
    <updated>2020-03-29T03:29:44.280Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简单版本LogAgent的实现"><a href="#简单版本LogAgent的实现" class="headerlink" title="简单版本LogAgent的实现"></a>简单版本LogAgent的实现</h2><p>这里主要是先实现核心的功能，后续再做优化和改进，主要实现能够根据配置文件中配置的日志路径去读取日志并将读取的实时推送到kafka消息队列中</p><p>关于logagent的主要结构如下：<br><img src="https://img-blog.csdnimg.cn/20200322144539472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre><code>.├─conf│      logagent.conf│├─kafka│      kafka.go│├─logs│      my.log│├─main│      config.go│      log.go│      main.go│      server.go│├─tailf│      tail.go│  go.mod└─ go.sum</code></pre><p>现在使用<code>tail</code>库能读取到日志，使用<code>sarama</code>库能到推送消息到<code>kafka</code>，我们结合这两个库，实现一边读取文件日志，一遍写入到<code>kafka</code></p><pre><code>logagent.conf :配置文件my.log:产生的日志文件config.go:用于初始化读取配置文件中的内容，这里的配置文件加载是通过之前自己实现的配置文件热加载包处理的kafka.go:对kafka的操作，包括初始化kafka连接，以及给kafka发送消息server.go:主要是tail 的相关操作，用于去读日志文件并将内容放到channel中log.go:日志的处理与序列化tail.go: 用于去读日志文件main.go: 初始化入口文件,与执行server的入口函数</code></pre><h2 id="LogAgent的初步框架实现"><a href="#LogAgent的初步框架实现" class="headerlink" title="LogAgent的初步框架实现"></a>LogAgent的初步框架实现</h2><p>现在使用tail库能读取到日志，使用sarama库能到推送消息到kafka，我们结合这两个库，实现一边读取文件日志，一遍写入到kafka</p><p>新建kafka/kafka.go和taillog/tail.go，分别先建立一个初始化函数</p><p><strong><code>kafka/kafka.go</code></strong><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> kafka</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/Shopify/sarama"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    client sarama.SyncProducer</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Init</span><span class="params">(addrs []<span class="keyword">string</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">config := sarama.NewConfig()</span><br><span class="line"></span><br><span class="line">config.Producer.RequiredAcks = sarama.WaitForAll          <span class="comment">// 发送完数据需要leader和follow都确认</span></span><br><span class="line">config.Producer.Partitioner = sarama.NewRandomPartitioner <span class="comment">// 新选出⼀个partition</span></span><br><span class="line">config.Producer.Return.Successes = <span class="literal">true</span>                   <span class="comment">// 成功交付的消息将在success channel返回</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接kafka</span></span><br><span class="line">client, err = sarama.NewSyncProducer([]<span class="keyword">string</span>&#123;addrs&#125;, config)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"producer closed, err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><code>tail/tail.go</code></strong><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tail</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/hpcloud/tail"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">tailObj *tail.Tail</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Init</span><span class="params">(filename <span class="keyword">string</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">config := tail.Config&#123;</span><br><span class="line">ReOpen:    <span class="literal">true</span>,</span><br><span class="line">Follow:    <span class="literal">true</span>,</span><br><span class="line">Location:  &amp;tail.SeekInfo&#123;Offset: <span class="number">0</span>, Whence: <span class="number">2</span>&#125;,</span><br><span class="line">MustExist: <span class="literal">false</span>,</span><br><span class="line">Poll:      <span class="literal">true</span>&#125;</span><br><span class="line">tailObj, err = tail.TailFile(filename, config)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"tail file failed, err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><code>main.go</code></strong><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"logAgent/kafka"</span></span><br><span class="line"><span class="string">"logAgent/taillog"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 1.初始化kafka</span></span><br><span class="line">err := kafka.Init([]<span class="keyword">string</span>&#123;<span class="string">"127.0.0.1:29092"</span>&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"init kafka failed ,err:%v\n"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"init kafka success"</span>)</span><br><span class="line"><span class="comment">// 2.初始化taillog</span></span><br><span class="line">err = taillog.Init(<span class="string">"./my.log"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"init taillog failed, err:%v\n"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"init taillog success"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>都初始化之后，就是怎么将日志发给kafka了</p><p>在<code>tail/tail.go</code>中创建一个ReadChan函数<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadChan</span><span class="params">()</span> &lt;-<span class="title">chan</span> *<span class="title">tail</span>.<span class="title">Line</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> tailObj.Lines</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在<code>kafka/kafka.go</code>中创建一个<code>SendToKafka</code>的函数，该函数接收从外部提供的topic和data参数<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SendToKafka</span><span class="params">(topic, data <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// 构造⼀个消息</span></span><br><span class="line">msg := &amp;sarama.ProducerMessage&#123;&#125;</span><br><span class="line">msg.Topic = topic</span><br><span class="line">msg.Value = sarama.StringEncoder(data)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送消息</span></span><br><span class="line">pid, offset, err := client.SendMessage(msg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"send msg failed, err: %v\n"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"pid:%v offset:%v\n"</span>, pid, offset)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在main.go中创建run函数，执行具体的任务，并在main函数中调用它<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> line := &lt;-taillog.ReadChan():</span><br><span class="line">kafka.SendToKafka(<span class="string">"web_log"</span>, line.Text)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">time.Sleep(time.Millisecond * <span class="number">500</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>往my.log中写入一点数据进行测试</p><h2 id="LogAgent的初步框架改进"><a href="#LogAgent的初步框架改进" class="headerlink" title="LogAgent的初步框架改进"></a>LogAgent的初步框架改进</h2><p>通过<code>github.com/astaxie/beego/logs</code>解析配置文件, 将所有的配置信息写入<code>logagent.conf</code>中</p><p><strong><code>logagent.conf</code></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[logs]</span><br><span class="line">log_level = debug</span><br><span class="line">log_path = E:\\Go\\logagent\\logs\\my.log</span><br><span class="line"></span><br><span class="line">[collect]</span><br><span class="line">log_path = E:\\Go\\logagent\\logs\\my.log</span><br><span class="line">topic = nginx_log</span><br><span class="line">chan_size = 100</span><br><span class="line"></span><br><span class="line">[kafka]</span><br><span class="line">server_addr = 0.0.0.0:9092</span><br></pre></td></tr></table></figure></p><p>引入完整代码:</p><p><strong><code>main.go</code></strong></p><p>主要功能是初始化配置</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/astaxie/beego/logs"</span></span><br><span class="line"><span class="string">"logagent/kafka"</span></span><br><span class="line"><span class="string">"logagent/tailf"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"开始"</span>)</span><br><span class="line"><span class="comment">// 读取初始化配置文件</span></span><br><span class="line">filename := <span class="string">"E:\\Go\\logagent\\conf\\logagent.conf"</span></span><br><span class="line">err := loadInitConf(<span class="string">"ini"</span>, filename)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"导入配置文件错误:%v\n"</span>, err)</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">"导入配置文件错误"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化日志信息</span></span><br><span class="line">err = initLogger()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"导入日志文件错误:%v\n"</span>, err)</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">"导入日志文件错误"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出成功信息</span></span><br><span class="line">logs.Debug(<span class="string">"导入日志成功%v"</span>, logConfig)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化tailf</span></span><br><span class="line">err = tailf.InitTail(logConfig.CollectConf, logConfig.chanSize)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logs.Error(<span class="string">"初始化tailf失败:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">logs.Debug(<span class="string">"初始化tailf成功!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化Kafka</span></span><br><span class="line">err = kafka.InitKafka(logConfig.KafkaAddr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logs.Error(<span class="string">"初识化kafka producer失败:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">logs.Debug(<span class="string">"初始化Kafka成功!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行</span></span><br><span class="line">err = serverRun()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logs.Error(<span class="string">"serverRun failed:"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">logs.Info(<span class="string">"程序退出"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>config.go</code></strong><br>导入<code>logagent.conf</code>的配置信息<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"errors"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/astaxie/beego/config"</span></span><br><span class="line"><span class="string">"logagent/tailf"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">logConfig *Config</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 日志配置</span></span><br><span class="line"><span class="keyword">type</span> Config <span class="keyword">struct</span> &#123;</span><br><span class="line">logLevel    <span class="keyword">string</span></span><br><span class="line">logPath     <span class="keyword">string</span></span><br><span class="line">chanSize    <span class="keyword">int</span></span><br><span class="line">KafkaAddr   <span class="keyword">string</span></span><br><span class="line">CollectConf []tailf.CollectConf</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 日志收集配置</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">loadCollectConf</span><span class="params">(conf config.Configer)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> c tailf.CollectConf</span><br><span class="line"></span><br><span class="line">c.LogPath = conf.String(<span class="string">"collect::log_path"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(c.LogPath) == <span class="number">0</span> &#123;</span><br><span class="line">err = errors.New(<span class="string">"无效的 collect::log_path "</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.Topic = conf.String(<span class="string">"collect::topic"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(c.Topic) == <span class="number">0</span> &#123;</span><br><span class="line">err = errors.New(<span class="string">"无效的 collect::topic "</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logConfig.CollectConf = <span class="built_in">append</span>(logConfig.CollectConf, c)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入初始化配置</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">loadInitConf</span><span class="params">(confType, filename <span class="keyword">string</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">conf, err := config.NewConfig(confType, filename)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"初始化配置文件出错:%v\n"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 导入配置信息</span></span><br><span class="line">logConfig = &amp;Config&#123;&#125;</span><br><span class="line"><span class="comment">// 日志级别</span></span><br><span class="line">logConfig.logLevel = conf.String(<span class="string">"logs::log_level"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(logConfig.logLevel) == <span class="number">0</span> &#123;</span><br><span class="line">logConfig.logLevel = <span class="string">"debug"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 日志输出路径</span></span><br><span class="line">logConfig.logPath = conf.String(<span class="string">"logs::log_path"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(logConfig.logPath) == <span class="number">0</span> &#123;</span><br><span class="line">logConfig.logPath = <span class="string">"E:\\Go\\logagent\\logs\\my.log"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 管道大小</span></span><br><span class="line">logConfig.chanSize, err = conf.Int(<span class="string">"collect::chan_size"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logConfig.chanSize = <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Kafka</span></span><br><span class="line">logConfig.KafkaAddr = conf.String(<span class="string">"kafka::server_addr"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(logConfig.KafkaAddr) == <span class="number">0</span> &#123;</span><br><span class="line">err = fmt.Errorf(<span class="string">"初识化Kafka失败"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = loadCollectConf(conf)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"导入日志收集配置错误:%v"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><code>log.go</code></strong></p><p>解析日志</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/astaxie/beego/logs"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">convertLogLevel</span><span class="params">(level <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> level &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"debug"</span>:</span><br><span class="line"><span class="keyword">return</span> logs.LevelDebug</span><br><span class="line"><span class="keyword">case</span> <span class="string">"warn"</span>:</span><br><span class="line"><span class="keyword">return</span> logs.LevelWarn</span><br><span class="line"><span class="keyword">case</span> <span class="string">"info"</span>:</span><br><span class="line"><span class="keyword">return</span> logs.LevelInfo</span><br><span class="line"><span class="keyword">case</span> <span class="string">"trace"</span>:</span><br><span class="line"><span class="keyword">return</span> logs.LevelTrace</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> logs.LevelDebug</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initLogger</span><span class="params">()</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">config := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">config[<span class="string">"filename"</span>] = logConfig.logPath</span><br><span class="line">config[<span class="string">"level"</span>] = convertLogLevel(logConfig.logLevel)</span><br><span class="line">configStr, err := json.Marshal(config)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"初始化日志, 序列化失败:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">_ = logs.SetLogger(logs.AdapterFile, <span class="keyword">string</span>(configStr))</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>tail.go</code></strong></p><p>定义<code>TailObjMgr</code>结构体, 将tail监控到的配置消息通过<code>tailObjMgr.msgChan &lt;- textMsg</code>放入管道中</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tailf</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/astaxie/beego/logs"</span></span><br><span class="line"><span class="string">"github.com/hpcloud/tail"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将日志收集配置放在tailf包下,方便其他包引用</span></span><br><span class="line"><span class="keyword">type</span> CollectConf <span class="keyword">struct</span> &#123;</span><br><span class="line">LogPath <span class="keyword">string</span></span><br><span class="line">Topic   <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存入Collect</span></span><br><span class="line"><span class="keyword">type</span> TailObj <span class="keyword">struct</span> &#123;</span><br><span class="line">tail *tail.Tail</span><br><span class="line">conf CollectConf</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义Message信息</span></span><br><span class="line"><span class="keyword">type</span> TextMsg <span class="keyword">struct</span> &#123;</span><br><span class="line">Msg   <span class="keyword">string</span></span><br><span class="line">Topic <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 管理系统所有tail对象</span></span><br><span class="line"><span class="keyword">type</span> TailObjMgr <span class="keyword">struct</span> &#123;</span><br><span class="line">tailsObjs []*TailObj</span><br><span class="line">msgChan   <span class="keyword">chan</span> *TextMsg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义全局变量</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">tailObjMgr *TailObjMgr</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetOneLine</span><span class="params">()</span> <span class="params">(msg *TextMsg)</span></span> &#123;</span><br><span class="line">msg = &lt;- tailObjMgr.msgChan</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitTail</span><span class="params">(conf []CollectConf, chanSize <span class="keyword">int</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载配置项</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(conf) == <span class="number">0</span> &#123;</span><br><span class="line">err = fmt.Errorf(<span class="string">"无效的log collect conf:%v"</span>, conf)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">tailObjMgr = &amp;TailObjMgr&#123;</span><br><span class="line">msgChan: <span class="built_in">make</span>(<span class="keyword">chan</span> *TextMsg, chanSize), <span class="comment">// 定义Chan管道</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 循环导入</span></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> conf &#123;</span><br><span class="line"><span class="comment">// 初始化Tail</span></span><br><span class="line">fmt.Println(v)</span><br><span class="line">tails, errTail := tail.TailFile(v.LogPath, tail.Config&#123;</span><br><span class="line">ReOpen:    <span class="literal">true</span>,</span><br><span class="line">Follow:    <span class="literal">true</span>,</span><br><span class="line">Location:  &amp;tail.SeekInfo&#123;Offset: <span class="number">0</span>, Whence: <span class="number">2</span>&#125;,</span><br><span class="line">MustExist: <span class="literal">false</span>,</span><br><span class="line">Poll:      <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> errTail != <span class="literal">nil</span> &#123;</span><br><span class="line">err = errTail</span><br><span class="line">fmt.Println(<span class="string">"tail 操作文件错误:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 导入配置项</span></span><br><span class="line">obj := &amp;TailObj&#123;</span><br><span class="line">conf: v,</span><br><span class="line">tail: tails,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tailObjMgr.tailsObjs = <span class="built_in">append</span>(tailObjMgr.tailsObjs, obj)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> readFromTail(obj)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读入日志数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readFromTail</span><span class="params">(tailObj *TailObj)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> <span class="literal">true</span> &#123;</span><br><span class="line">msg, ok := &lt;-tailObj.tail.Lines</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">logs.Warn(<span class="string">"Tail file close reopen, filename:%s\n"</span>, tailObj.tail.Filename)</span><br><span class="line">time.Sleep(<span class="number">100</span> * time.Millisecond)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">textMsg := &amp;TextMsg&#123;</span><br><span class="line">Msg:   msg.Text,</span><br><span class="line">Topic: tailObj.conf.Topic,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 放入chan里面</span></span><br><span class="line">tailObjMgr.msgChan &lt;- textMsg</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>server.go</code></strong><br>在server.go中添加了<code>sendToKafka</code>函数, 该函数作用是取出<code>tail.go</code>文件中放入管道中的msg</p><p>并且调用<code>kafka</code>包中<code>kafka.go</code>的<code>SendToKafka</code>函数发送消息到Kafka中</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/astaxie/beego/logs"</span></span><br><span class="line"><span class="string">"logagent/kafka"</span></span><br><span class="line"><span class="string">"logagent/tailf"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">serverRun</span><span class="params">()</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">msg := tailf.GetOneLine()</span><br><span class="line">err = sendToKafka(msg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logs.Error(<span class="string">"发送消息到Kafka 失败, err:%v"</span>, err)</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sendToKafka</span><span class="params">(msg *tailf.TextMsg)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">//fmt.Printf("读取 msg:%s, topic:%s\n", msg.Msg, msg.Topic) // 将消息打印在终端</span></span><br><span class="line">_ = kafka.SendToKafka(msg.Msg, msg.Topic)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>kafka.go</code></strong></p><p>定义了初始化kafka函数<code>InitKafka</code>与发送消息到Kafka的函数<code>SendToKafka</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> kafka</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/Shopify/sarama"</span></span><br><span class="line"><span class="string">"github.com/astaxie/beego/logs"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">client sarama.SyncProducer</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitKafka</span><span class="params">(addr <span class="keyword">string</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Kafka生产者配置</span></span><br><span class="line">config := sarama.NewConfig()</span><br><span class="line">config.Producer.RequiredAcks = sarama.WaitForAll          <span class="comment">// 发送完数据需要leader和follow都确认</span></span><br><span class="line">config.Producer.Partitioner = sarama.NewRandomPartitioner <span class="comment">// 新选出⼀个partition</span></span><br><span class="line">config.Producer.Return.Successes = <span class="literal">true</span>                   <span class="comment">// 成功交付的消息将在success channel返回</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建一个生产者对象</span></span><br><span class="line">client, err = sarama.NewSyncProducer([]<span class="keyword">string</span>&#123;addr&#125;, config)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logs.Error(<span class="string">"初识化Kafka producer失败:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">logs.Debug(<span class="string">"初始化Kafka producer成功,地址为:"</span>, addr)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SendToKafka</span><span class="params">(data, topic <span class="keyword">string</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">msg := &amp;sarama.ProducerMessage&#123;&#125;</span><br><span class="line">msg.Topic = topic</span><br><span class="line">msg.Value = sarama.StringEncoder(data)</span><br><span class="line"></span><br><span class="line">pid, offset, err := client.SendMessage(msg)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logs.Error(<span class="string">"发送信息失败, err:%v, data:%v, topic:%v"</span>, err, data, topic)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logs.Debug(<span class="string">"read success, pid:%v, offset:%v, topic:%v\n"</span>, pid, offset, topic)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>开发环境</strong>:</p><pre><code>我这里的环境是Go1.14, 使用了Go module模块, 所以想要快速运行该项目需要在项目文件夹下 go mod init, 运行时自动下载依赖</code></pre><p>运行main函数:</p><pre><code>E:\Go\logagent\main&gt;go build</code></pre><blockquote><p>注: 如果想使用Goland直接运行,这里需要同时运行main包下的四个go文件<br><img src="https://img-blog.csdnimg.cn/20200322173519713.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><p>运行完如图:kafka消费成功, 写入<code>my.log</code>成功<br><img src="https://img-blog.csdnimg.cn/20200322173222598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200322173259494.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简单版本LogAgent的实现&quot;&gt;&lt;a href=&quot;#简单版本LogAgent的实现&quot; class=&quot;headerlink&quot; title=&quot;简单版本LogAgent的实现&quot;&gt;&lt;/a&gt;简单版本LogAgent的实现&lt;/h2&gt;&lt;p&gt;这里主要是先实现核心的功能，后续再做
      
    
    </summary>
    
      <category term="Golang日志收集系统" scheme="https://plutoacharon.github.io/categories/Golang%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Golang" scheme="https://plutoacharon.github.io/tags/Golang/"/>
    
      <category term="Golang日志收集系统" scheme="https://plutoacharon.github.io/tags/Golang%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Golang实战之海量日志收集系统（二）收集应用程序日志到Kafka中</title>
    <link href="https://plutoacharon.github.io/2020/03/29/Golang%E5%AE%9E%E6%88%98%E4%B9%8B%E6%B5%B7%E9%87%8F%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%BA%8C%EF%BC%89%E6%94%B6%E9%9B%86%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%97%A5%E5%BF%97%E5%88%B0Kafka%E4%B8%AD/"/>
    <id>https://plutoacharon.github.io/2020/03/29/Golang实战之海量日志收集系统（二）收集应用程序日志到Kafka中/</id>
    <published>2020-03-29T03:25:07.000Z</published>
    <updated>2020-03-29T03:29:48.903Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Kafka库的基本操作"><a href="#Kafka库的基本操作" class="headerlink" title="Kafka库的基本操作"></a>Kafka库的基本操作</h2><p>我们需要先把两者启动，先启动Zookeeper,再启动Kafka</p><p>启动ZooKeeper:<code>./bin/zkServer.sh start</code><br>启动kafka:<code>./bin/kafka-server-start.sh ./config/server.properties</code></p><p>我这里使用的是Golang1.14最新版本,并且开启了Go Module, 所以下载的包都会整合在go.mod下</p><p>这里使用sarama对kafka进行操作<br><code>go get github.com/Shopify/sarama</code></p><p><code>main.go</code>内容如下：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/Shopify/sarama"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">config := sarama.NewConfig()</span><br><span class="line">config.Producer.RequiredAcks = sarama.WaitForAll         <span class="comment">// 发送完数据需要leader和follow都确认</span></span><br><span class="line">config.Producer.Partitioner = sarama.NewRandomPartitioner<span class="comment">// 新选出⼀个partition</span></span><br><span class="line">config.Producer.Return.Successes = <span class="literal">true</span>                  <span class="comment">// 成功交付的消息将在success channel返回</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接kafka</span></span><br><span class="line">client, err := sarama.NewSyncProducer([]<span class="keyword">string</span>&#123;<span class="string">"localhost:9092"</span>&#125;, config) </span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"producer close, err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">defer</span> client.Close()</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">// 构造⼀个消息</span></span><br><span class="line">msg := &amp;sarama.ProducerMessage&#123;&#125;</span><br><span class="line">msg.Topic = <span class="string">"nginx_log"</span></span><br><span class="line">msg.Value = sarama.StringEncoder(<span class="string">"this is a good test, my message is good"</span>)</span><br><span class="line"><span class="comment">// 发送消息</span></span><br><span class="line">pid, offset, err := client.SendMessage(msg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"send message failed,"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"pid:%v offset:%v\n"</span>, pid, offset)</span><br><span class="line">time.Sleep(<span class="number">10</span> * time.Millisecond)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>连接Kafka 成功,并且成功生产出数据并在本地消费<br><img src="https://img-blog.csdnimg.cn/20200322114026174.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>接下来我们还需要知道一个工具的使用tailf</p><h2 id="tailf"><a href="#tailf" class="headerlink" title="tailf"></a>tailf</h2><p>我们的agent需要读日志目录下的日志文件，而日志文件是不停的增加并且切换文件的，所以我们就需要借助于tailf这个包来读文件，当然这里的tailf和linux里的tail -f命令虽然不同，但是效果是差不多的，都是为了获取日志文件新增加的内容。</p><p>而我们的客户端非常重要的一个地方就是要读日志文件并且将读到的日志文件推送到kafka</p><p>这里需要我们下载一个包：<code>go get github.com/hpcloud/tail</code></p><p>我们通过下面一个例子对这个包进行一个基本的使用，更详细的api说明看：<code>https://godoc.org/github.com/hpcloud/tail</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/hpcloud/tail"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// tail demo</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fileName := <span class="string">"E:\\Go\\logagent\\tailf\\main\\my.log"</span></span><br><span class="line">config := tail.Config&#123;</span><br><span class="line">ReOpen:    <span class="literal">true</span>,</span><br><span class="line">Follow:    <span class="literal">true</span>,</span><br><span class="line">Location:  &amp;tail.SeekInfo&#123;Offset: <span class="number">0</span>, Whence: <span class="number">2</span>&#125;,</span><br><span class="line">MustExist: <span class="literal">false</span>,</span><br><span class="line">Poll:      <span class="literal">true</span>&#125;</span><br><span class="line">tails, err := tail.TailFile(fileName, config)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"tail file failed, err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">msg *tail.Line</span><br><span class="line">ok  <span class="keyword">bool</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">msg, ok = &lt;-tails.Lines</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">fmt.Printf(<span class="string">"tail file close reopen, filename:%s\n"</span>, tails.Filename)</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"msg:"</span>, msg.Text)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://img-blog.csdnimg.cn/20200322115343200.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="日志库的使用"><a href="#日志库的使用" class="headerlink" title="日志库的使用"></a>日志库的使用</h2><p>这里是通过beego的日志库实现的，beego的日志库是可以单独拿出来用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/astaxie/beego/config"</span></span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">conf, err := config.NewConfig(<span class="string">"ini"</span>, <span class="string">"E:\\Go\\logagent\\conf\\logagent.conf"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"new config failed, err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">port, err := conf.Int(<span class="string">"server::port"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"read server:port failed, err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"Port:"</span>, port)</span><br><span class="line">log_level := conf.String(<span class="string">"logs::log_level"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(log_level) == <span class="number">0</span> &#123;</span><br><span class="line">log_level = <span class="string">"debug"</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"log_level:"</span>, log_level)</span><br><span class="line"></span><br><span class="line">log_path := conf.String(<span class="string">"logs::log_path"</span>)</span><br><span class="line">fmt.Println(<span class="string">"log_path:"</span>, log_path)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将<code>logagent.conf</code>各个配置读取出来<br><img src="https://img-blog.csdnimg.cn/20200322120215795.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Kafka库的基本操作&quot;&gt;&lt;a href=&quot;#Kafka库的基本操作&quot; class=&quot;headerlink&quot; title=&quot;Kafka库的基本操作&quot;&gt;&lt;/a&gt;Kafka库的基本操作&lt;/h2&gt;&lt;p&gt;我们需要先把两者启动，先启动Zookeeper,再启动Kafka&lt;/
      
    
    </summary>
    
      <category term="Golang日志收集系统" scheme="https://plutoacharon.github.io/categories/Golang%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Golang" scheme="https://plutoacharon.github.io/tags/Golang/"/>
    
      <category term="Golang日志收集系统" scheme="https://plutoacharon.github.io/tags/Golang%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Golang实战之海量日志收集系统（一）项目背景介绍</title>
    <link href="https://plutoacharon.github.io/2020/03/29/Golang%E5%AE%9E%E6%88%98%E4%B9%8B%E6%B5%B7%E9%87%8F%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%89%E9%A1%B9%E7%9B%AE%E8%83%8C%E6%99%AF%E4%BB%8B%E7%BB%8D/"/>
    <id>https://plutoacharon.github.io/2020/03/29/Golang实战之海量日志收集系统（一）项目背景介绍/</id>
    <published>2020-03-29T03:24:46.000Z</published>
    <updated>2020-03-29T03:29:53.753Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><p><strong>项目架构图：</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMuZG93bmsuY2MvaXRlbS81ZTdjYTY2YzUwNGY0YmNiMDRiZjI3YjUuanBn?x-oss-process=image/format,png" alt="项目架构图"></p><hr><ul><li>每个系统都有日志，当系统出现问题时，需要通过日志解决问题</li><li>当系统机器比较少时，登陆到服务器上查看即可满足</li><li>当系统机器规模巨大，登陆到机器上查看几乎不现实</li></ul><p>每个业务系统都有自己的⽇志，当业务系统出现问题时，需要通过查找⽇志信息来定位和解决问题。 当业务系统服务器⽐较少时，登陆到服务器上查看即可满⾜。但当系统机器规模巨⼤，登陆到服务器上查看⼏乎不现实（分布式的系统，⼀个系统部署在⼗⼏甚至几十台服务器上）</p><p>平常我们在进行业务开发时常常不免遇到下面几个问题:</p><ul><li>当系统出现问题后，如何根据日志迅速的定位问题出在一个应用层？</li><li>在平常的工作中如何根据日志分析出一个请求到系统主要在那个应用层耗时较大？</li><li>在平常的工作中如何获取一个请求到达系统后在各个层测日志汇总？</li></ul><p>针对以上问题，我们想要实现的一个解决方案是：</p><ul><li>把机器上的日志实时收集，统一的存储到中心系统</li><li>然后再对这些日志建立索引，通过搜索即可以找到对应日志</li><li>通过提供界面友好的web界面，通过web即可以完成日志搜索    </li></ul><p>关于实现这个系统时可能会面临的问题：</p><ul><li>实时日志量非常大，每天几十亿条(虽然现在我们公司的系统还没达到这个级别)</li><li>日志准实时收集，延迟控制在分钟级别</li><li>能够水平可扩展</li></ul><p><strong>业界方案</strong></p><p>有早期的ELK到现在的EFK。ELK在每台服务器上部署logstash，比较重量级，所以演化成客户端部署filebeat的EFK，由filebeat收集向logstash中写数据，最后落地到elasticsearch，通过kibana界面进行日志检索。</p><p><strong>优缺点</strong></p><p>优点：现成的解决方案，直接拿过来用，能够实现日志收集与检索。</p><p><strong>缺点：</strong></p><ul><li>运维成本⾼，每增加⼀个⽇志收集项，都需要⼿动修改配置</li><li>监控缺失，⽆法准确获取logstash的状态。⽆法做到定制化开发与维护</li><li>⽆法做到定制化开发与维护</li></ul><h2 id="日志收集系统设计"><a href="#日志收集系统设计" class="headerlink" title="日志收集系统设计"></a>日志收集系统设计</h2><p><img src="https://img-blog.csdnimg.cn/20200322110406560.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>各个组件说明：</strong></p><p>Log Agent，日志收集客户端，用来收集服务器上的日志<br>Kafka，高吞吐量的分布式队列<br>Elasticsearch，开源的搜索引擎，提供基于http restful的web接口<br>Flink,Spark，分布式计算框架，能够对大量数据进行分布式处理的平台</p><h2 id="关于Kakfa的介绍"><a href="#关于Kakfa的介绍" class="headerlink" title="关于Kakfa的介绍"></a>关于Kakfa的介绍</h2><ul><li><p><code>Kafka</code>是一个分布式发布 - 订阅消息系统和一个强大的队列，可以处理大量的数据，并使您能够将消息从一个端点传递到另一个端点。 </p></li><li><p><code>Kafka</code>适合离线和在线消息消费。</p></li><li><p><code>Kafka</code>消息保留在磁盘上，并在群集内复制以防止数据丢失。 </p></li><li><p><code>Kafka</code>构建在ZooKeeper同步服务之上。 它与Flink和Spark非常好的集成，用于实时流式数据分析。</p></li></ul><p><strong>Kafka中有几个基本的消息术语：</strong></p><ul><li>Kafka将消息以topic为单位进行归纳。</li><li>将向Kafka topic发布消息的程序成为producers.</li><li>将预订topics并消费消息的程序成为consumer.</li><li>Kafka以集群的方式运行，可以由一个或多个服务组成，每个服务叫做一个broker</li></ul><p><strong>Kafka的优点：</strong></p><ul><li>可靠性 - Kafka是分布式，分区，复制和容错的。</li><li>可扩展性 - Kafka消息传递系统轻松缩放，无需停机。</li><li>耐用性 - Kafka使用分布式提交日志，这意味着消息会尽可能快地保留在磁盘上，因此它是持久的。</li><li>性能 - Kafka对于发布和订阅消息都具有高吞吐量。 即使存储了许多TB的消息，它也保持稳定的性能。</li><li>Kafka非常快，并保证零停机和零数据丢失。</li></ul><p><strong>Kafka的应用场景：</strong></p><ul><li><p>异步处理, 把非关键流程异步化，提高系统的响应时间和健壮性<br><img src="https://img-blog.csdnimg.cn/20200322111016142.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20200322111019731.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>应用解耦,通过消息队列<br><img src="https://img-blog.csdnimg.cn/20200322111111790.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200322111115747.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li>流量削峰<br><img src="https://img-blog.csdnimg.cn/20200322111149430.png" alt="在这里插入图片描述"><h2 id="ZooKeeper介绍"><a href="#ZooKeeper介绍" class="headerlink" title="ZooKeeper介绍"></a>ZooKeeper介绍</h2><code>ZooKeeper</code>是一种分布式协调服务，用于管理大型主机。在分布式环境中协调和管理服务是一个复杂的过程。ZooKeeper通过其简单的架构和API解决了这个问题。<code>ZooKeeper</code>允许开发人员专注于核心应用程序逻辑，而不必担心应用程序的分布式特性。<br><code>Apache ZooKeeper</code>是由集群（节点组）使用的一种服务，用于在自身之间协调，并通过稳健的同步技术维护共享数据。ZooKeeper本身是一个分布式应用程序，为写入分布式应用程序提供服务。</li></ul><p>ZooKeeper主要包含几下几个组件：</p><ul><li>Client（客户端）：我们的分布式应用集群中的一个节点，从服务器访问信息。对于特定的时间间隔，每个客户端向服务器发送消息以使服务器知道客户端是活跃的。类似地，当客户端连接时，服务器发送确认码。如果连接的服务器没有响应，客户端会自动将消息重定向到另一个服务器。</li><li>Server（服务器）：服务器，我们的ZooKeeper总体中的一个节点，为客户端提供所有的服务。向客户端发送确认码以告知服务器是活跃的。</li><li>Ensemble：ZooKeeper服务器组。形成ensemble所需的最小节点数为3。</li><li>Leader： 服务器节点，如果任何连接的节点失败，则执行自动恢复。Leader在服务启动时被选举。</li><li>Follower：跟随leader指令的服务器节点。</li><li>ZooKeeper的应用场景：</li></ul><p><strong>服务注册&amp;服务发现</strong><br><img src="https://img-blog.csdnimg.cn/20200322111430665.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>配置中心</strong><br><img src="https://img-blog.csdnimg.cn/20200322111517741.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>分布式锁<br>Zookeeper是强一致的多个客户端同时在Zookeeper上创建相同znode，只有一个创建成功</li></ul><h2 id="关于Log-Agent"><a href="#关于Log-Agent" class="headerlink" title="关于Log Agent"></a>关于Log Agent</h2><p>主要实现的功能是：</p><p>类似于我们在linux下通过tail的方法读日志文件，讲读取的内容发给Kafka<br>我们这里的tailf是可以动态变化的，当配置文件发生变化时，可以通知我们程序自动增加需要增加的配置文件<br>tailf去获取相应的日志并发给kafka producer</p><p>主要由一下几部目录组成：<br>Kafka<br>tailf<br>configlog<br><img src="https://img-blog.csdnimg.cn/20200322111653137.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>该项目中Zookeeper与Kafka可以安装在Liunx环境中使用远程连接,也可以在Windows本地安装连接使用</p><p>具体安装参考我的这篇博客: <a href="https://blog.csdn.net/qq_43442524/article/details/104896833" target="_blank" rel="noopener">Windows10安装运行Kafka2.1.0与Zookeeper3.4.14</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;项目背景&quot;&gt;&lt;a href=&quot;#项目背景&quot; class=&quot;headerlink&quot; title=&quot;项目背景&quot;&gt;&lt;/a&gt;项目背景&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;项目架构图：&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;https://imgconvert.csdnim
      
    
    </summary>
    
      <category term="Golang日志收集系统" scheme="https://plutoacharon.github.io/categories/Golang%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Golang" scheme="https://plutoacharon.github.io/tags/Golang/"/>
    
      <category term="Golang日志收集系统" scheme="https://plutoacharon.github.io/tags/Golang%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
</feed>
