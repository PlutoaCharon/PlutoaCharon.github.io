<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>浩翰Redamancy的博客</title>
  
  <subtitle>文质彬彬 然后君子</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://plutoacharon.github.io/"/>
  <updated>2020-03-12T04:26:28.120Z</updated>
  <id>https://plutoacharon.github.io/</id>
  
  <author>
    <name>浩翰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Liunx Shell编程入门----编写系统监控脚本与FTP探测脚本</title>
    <link href="https://plutoacharon.github.io/2020/03/12/Liunx-Shell%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8-%E7%BC%96%E5%86%99%E7%B3%BB%E7%BB%9F%E7%9B%91%E6%8E%A7%E8%84%9A%E6%9C%AC%E4%B8%8EFTP%E6%8E%A2%E6%B5%8B%E8%84%9A%E6%9C%AC/"/>
    <id>https://plutoacharon.github.io/2020/03/12/Liunx-Shell编程入门-编写系统监控脚本与FTP探测脚本/</id>
    <published>2020-03-12T04:26:03.000Z</published>
    <updated>2020-03-12T04:26:28.120Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-编写系统监控脚本sysmon-sh"><a href="#1-编写系统监控脚本sysmon-sh" class="headerlink" title="1. 编写系统监控脚本sysmon.sh"></a>1. 编写系统监控脚本sysmon.sh</h2><p>使该脚本实现: 监控系统中内存、cpu、磁盘的占用率</p><h3 id="1-1-命令解释"><a href="#1-1-命令解释" class="headerlink" title="1.1 命令解释"></a>1.1 命令解释</h3><h4 id="cat-proc-meminfo"><a href="#cat-proc-meminfo" class="headerlink" title="cat /proc/meminfo"></a><code>cat /proc/meminfo</code></h4><p><img src="https://img-blog.csdnimg.cn/20200312105343250.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><code>/proc/meminfo</code>是了解Linux系统内存使用状况的主要接口</p><p>我们最常用的<code>free</code>、<code>vmstat</code>等命令就是通过它获取数据的 ，<code>/proc/meminfo</code>所包含的信息比<code>free</code>等命令要丰富得多</p><h4 id="Linux-bc-命令"><a href="#Linux-bc-命令" class="headerlink" title="Linux bc 命令"></a>Linux <code>bc</code> 命令</h4><p>bc 命令是任意精度计算器语言，通常在linux下当计算器用。</p><p>它类似基本的计算器, 使用这个计算器可以做基本的数学运算。</p><p>提示系统没有bc命令,需要<code>yum install bc</code> 安装</p><h4 id="监控内存使用率"><a href="#监控内存使用率" class="headerlink" title="监控内存使用率"></a>监控内存使用率</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">memory_used_rate</span></span><br><span class="line">LoadMemory=$(cat /proc/meminfo | awk '&#123;print $2&#125;')</span><br><span class="line">Total=$(echo $LoadMemory | awk '&#123;print $1&#125;')</span><br><span class="line">Free1=$(echo $LoadMemory | awk '&#123;print $2&#125;')</span><br><span class="line">Free2=$(echo $LoadMemory | awk '&#123;print $3&#125;')</span><br><span class="line">Free3=$(echo $LoadMemory | awk '&#123;print $4&#125;')</span><br><span class="line">Used=`expr $Total - $Free1 - $Free2 - $Free3`</span><br><span class="line">Used_Rate=`expr  $Used/$Total*100 | bc -l`</span><br><span class="line">Memory_Used_Rate=`expr  $Used_Rate/1 | bc`</span><br><span class="line">echo $Memory_Used_Rate%</span><br></pre></td></tr></table></figure><h4 id="监控磁盘占用率"><a href="#监控磁盘占用率" class="headerlink" title="监控磁盘占用率"></a>监控磁盘占用率</h4><p>使用 <code>df</code>命令查看磁盘 <code>-h</code>格式化为方便查看的格式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# df -h /dev/sda*</span><br><span class="line">文件系统        容量  已用  可用 已用% 挂载点</span><br><span class="line">devtmpfs        475M     0  475M    0% /dev</span><br><span class="line">/dev/sda1      1014M  160M  855M   16% /boot</span><br><span class="line">devtmpfs        475M     0  475M    0% /dev</span><br></pre></td></tr></table></figure></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">disk_used_rate</span></span><br><span class="line">Location=/dev/sda1 # 这里根据自己的磁盘位置修改</span><br><span class="line">Disk_Used_Rate=$(df -h | grep $Location | awk '&#123;print $5&#125;')</span><br><span class="line">echo $Disk_Used_Rate</span><br></pre></td></tr></table></figure><h4 id="监控cpu使用率"><a href="#监控cpu使用率" class="headerlink" title="监控cpu使用率"></a>监控cpu使用率</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">cpu_used_rate</span></span><br><span class="line">Log=$(cat /proc/stat | grep 'cpu ' | awk '&#123;print $2" "$3" "$4" "$5" "$6" "$7" "$8&#125;')</span><br><span class="line">Free=$(echo $Log | awk '&#123;print $4&#125;')</span><br><span class="line">Total=$(echo $Log | awk '&#123;print $1+$2+$3+$4+$5+$6+$7&#125;')</span><br><span class="line">Cpu_Used=`expr $Total - $Free`</span><br><span class="line">Cpu_Used_Rate=`expr  $Cpu_Used/$Total*100 |bc -l`</span><br><span class="line">echo  $Cpu_Used_Rate</span><br></pre></td></tr></table></figure><h3 id="1-2-脚本代码"><a href="#1-2-脚本代码" class="headerlink" title="1.2 脚本代码"></a>1.2 脚本代码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Colors</span></span><br><span class="line">red='\033[31m' # 定义红色</span><br><span class="line">green='\033[32m' # 定义绿色</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">memory_used_rate</span></span><br><span class="line">LoadMemory=$(cat /proc/meminfo | awk '&#123;print $2&#125;')</span><br><span class="line">Total=$(echo $LoadMemory | awk '&#123;print $1&#125;')</span><br><span class="line">Free1=$(echo $LoadMemory | awk '&#123;print $2&#125;')</span><br><span class="line">Free2=$(echo $LoadMemory | awk '&#123;print $3&#125;')</span><br><span class="line">Free3=$(echo $LoadMemory | awk '&#123;print $4&#125;')</span><br><span class="line">Used=`expr $Total - $Free1 - $Free2 - $Free3`</span><br><span class="line">Used_Rate=`expr  $Used/$Total*100 | bc -l`</span><br><span class="line">Memory_Used_Rate=`expr  $Used_Rate/1 | bc`</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> disk_used_rate</span></span><br><span class="line">Location=/dev/sda1</span><br><span class="line">Disk_Used_Rate=$(df -h | grep $Location | awk '&#123;print $5&#125;')</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">cpu_used_rate</span></span><br><span class="line">Log=$(cat /proc/stat | grep 'cpu ' | awk '&#123;print $2" "$3" "$4" "$5" "$6" "$7" "$8&#125;')</span><br><span class="line">Free=$(echo $Log | awk '&#123;print $4&#125;')</span><br><span class="line">Total=$(echo $Log | awk '&#123;print $1+$2+$3+$4+$5+$6+$7&#125;')</span><br><span class="line">Cpu_Used=`expr $Total - $Free`</span><br><span class="line">Cpu_Used_Rate=`expr  $Cpu_Used/$Total*100 |bc -l`</span><br><span class="line">cpu_Used_Rate=`expr  $Cpu_Used_Rate/1 | bc`</span><br><span class="line"></span><br><span class="line">echo -e "+----------------------------------------------------------------"</span><br><span class="line"></span><br><span class="line">echo -e "$&#123;green&#125; 内存使用率:$&#123;red&#125;"$Memory_Used_Rate%</span><br><span class="line">echo -e "$&#123;green&#125; 磁盘使用率:$&#123;red&#125;"$Disk_Used_Rate</span><br><span class="line">echo -e "$&#123;green&#125; Cpu使用率:$&#123;red&#125;"$cpu_Used_Rate%</span><br><span class="line"></span><br><span class="line">echo -e "+----------------------------------------------------------------"</span><br><span class="line">echo -e " "</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200312112520510.png" alt="在这里插入图片描述"></p><p><code>crontab -e</code>进入定时系统,设置计划任务<br>输入:<code>*/1 * * * * /root/bin/sysmon.sh</code><br><img src="https://img-blog.csdnimg.cn/20200312112828168.png" alt="在这里插入图片描述"><br>收到邮件:<br><img src="https://img-blog.csdnimg.cn/20200312113409759.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200312113341808.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-编写FTP探测脚本"><a href="#2-编写FTP探测脚本" class="headerlink" title="2. 编写FTP探测脚本"></a>2. 编写FTP探测脚本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 输入想要查询的ip段</span></span><br><span class="line">IP1=`echo $1 |awk -F"." '&#123;print $1&#125;'`</span><br><span class="line">IP2=`echo $1 |awk -F"." '&#123;print $2&#125;'`</span><br><span class="line">IP3=`echo $1 |awk -F"." '&#123;print $3&#125;'`</span><br><span class="line">IP4=`echo $1 |awk -F"." '&#123;print $4&#125;'`</span><br><span class="line"></span><br><span class="line">for ((i=3; i&gt;0; i--))</span><br><span class="line">do</span><br><span class="line">    echo -e "倒数"$i"秒,开始扫描"</span><br><span class="line">done</span><br><span class="line"><span class="meta">#</span><span class="bash"> 开始连接</span></span><br><span class="line">wget  ftp://$IP1.$IP2.$IP3.$IP4 &amp;&gt;null</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果连接成功</span></span><br><span class="line">if [ $? -eq 0 ]</span><br><span class="line">then echo "$IP1.$IP2.$IP3.$i is open"</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200312115210243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-编写系统监控脚本sysmon-sh&quot;&gt;&lt;a href=&quot;#1-编写系统监控脚本sysmon-sh&quot; class=&quot;headerlink&quot; title=&quot;1. 编写系统监控脚本sysmon.sh&quot;&gt;&lt;/a&gt;1. 编写系统监控脚本sysmon.sh&lt;/h2&gt;&lt;p&gt;
      
    
    </summary>
    
      <category term="Liunx" scheme="https://plutoacharon.github.io/categories/Liunx/"/>
    
    
      <category term="Shell" scheme="https://plutoacharon.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Golang语言学习从入门到实战----链表定义</title>
    <link href="https://plutoacharon.github.io/2020/03/12/Golang%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98-%E9%93%BE%E8%A1%A8%E5%AE%9A%E4%B9%89/"/>
    <id>https://plutoacharon.github.io/2020/03/12/Golang语言学习从入门到实战-链表定义/</id>
    <published>2020-03-12T04:25:35.000Z</published>
    <updated>2020-03-12T04:25:47.786Z</updated>
    
    <content type="html"><![CDATA[<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="1-链表定义"><a href="#1-链表定义" class="headerlink" title="1. 链表定义"></a>1. 链表定义</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每个节点包含下一个节点的地址, 这样把所有的节点都串起来了, 通常把链表中的第一个节点叫做链表头</span></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Next* Student</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  定义一个简单的链表</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个链表结构</span></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Age <span class="keyword">int</span></span><br><span class="line">Score <span class="keyword">float32</span></span><br><span class="line">next* Student</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 定义一个头结点</span></span><br><span class="line"><span class="keyword">var</span> head Student</span><br><span class="line">head.Name = <span class="string">"hua"</span></span><br><span class="line">head.Age = <span class="number">18</span></span><br><span class="line">head.Score = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stu1 Student</span><br><span class="line">stu1.Name = <span class="string">"stu1"</span></span><br><span class="line">stu1.Age = <span class="number">20</span></span><br><span class="line">stu1.Score = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将两个结点链接起来</span></span><br><span class="line">head.next = &amp;stu1</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p *Student = &amp;head <span class="comment">// p指向链表的头部</span></span><br><span class="line"><span class="keyword">for</span> p != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(*p)</span><br><span class="line">p = p.next</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <img src="https://img-blog.csdnimg.cn/20200311215259336.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>输出:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;hua <span class="number">18</span> <span class="number">100</span> <span class="number">0xc000054330</span>&#125;</span><br><span class="line">&#123;stu1 <span class="number">20</span> <span class="number">20</span> &lt;<span class="literal">nil</span>&gt;&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-尾部插入法"><a href="#2-尾部插入法" class="headerlink" title="2. 尾部插入法"></a>2. 尾部插入法</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每个节点包含下一个节点的地址, 这样把所有的节点都串起来了, 通常把链表中的第一个节点叫做链表头</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个链表结构</span></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Age <span class="keyword">int</span></span><br><span class="line">Score <span class="keyword">float32</span></span><br><span class="line">next* Student</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">trans</span><span class="params">(p *Student)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> p!=<span class="literal">nil</span>&#123;</span><br><span class="line">fmt.Println(*p)</span><br><span class="line">p = p.next</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> head Student</span><br><span class="line">head.Name = <span class="string">"hua"</span></span><br><span class="line">head.Age = <span class="number">18</span></span><br><span class="line">head.Score = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 尾部插入法</span></span><br><span class="line"><span class="keyword">var</span> tail = &amp;head</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line"><span class="keyword">var</span> stu = Student&#123;</span><br><span class="line">Name:  fmt.Sprintf(<span class="string">"stu%d"</span>, i),</span><br><span class="line">Age:   rand.Intn(<span class="number">100</span>),</span><br><span class="line">Score: rand.Float32()*<span class="number">100</span>,</span><br><span class="line">&#125;</span><br><span class="line">tail.next = &amp;stu</span><br><span class="line">tail = &amp;stu</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">trans(&amp;head)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;hua <span class="number">18</span> <span class="number">100</span> <span class="number">0xc0000a6360</span>&#125;</span><br><span class="line">&#123;stu0 <span class="number">81</span> <span class="number">94.05091</span> <span class="number">0xc0000a6390</span>&#125;</span><br><span class="line">&#123;stu1 <span class="number">47</span> <span class="number">43.77142</span> <span class="number">0xc0000a63c0</span>&#125;</span><br><span class="line">&#123;stu2 <span class="number">81</span> <span class="number">68.682304</span> <span class="number">0xc0000a63f</span>0&#125;</span><br><span class="line">&#123;stu3 <span class="number">25</span> <span class="number">15.651925</span> <span class="number">0xc0000a6420</span>&#125;</span><br><span class="line">&#123;stu4 <span class="number">56</span> <span class="number">30.091187</span> <span class="number">0xc0000a6450</span>&#125;</span><br><span class="line">&#123;stu5 <span class="number">94</span> <span class="number">81.36399</span> <span class="number">0xc0000a6480</span>&#125;</span><br><span class="line">&#123;stu6 <span class="number">62</span> <span class="number">38.06572</span> <span class="number">0xc0000a64b0</span>&#125;</span><br><span class="line">&#123;stu7 <span class="number">28</span> <span class="number">46.888985</span> <span class="number">0xc0000a64e0</span>&#125;</span><br><span class="line">&#123;stu8 <span class="number">11</span> <span class="number">29.310184</span> <span class="number">0xc0000a6510</span>&#125;</span><br><span class="line">&#123;stu9 <span class="number">37</span> <span class="number">21.855305</span> &lt;<span class="literal">nil</span>&gt;&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-头部插入法"><a href="#3-头部插入法" class="headerlink" title="3. 头部插入法"></a>3. 头部插入法</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每个节点包含下一个节点的地址, 这样把所有的节点都串起来了, 通常把链表中的第一个节点叫做链表头</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个链表结构</span></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Age <span class="keyword">int</span></span><br><span class="line">Score <span class="keyword">float32</span></span><br><span class="line">next* Student</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">trans</span><span class="params">(p *Student)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> p!=<span class="literal">nil</span>&#123;</span><br><span class="line">fmt.Println(*p)</span><br><span class="line">p = p.next</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> head *Student = <span class="built_in">new</span>(Student)</span><br><span class="line">head.Name = <span class="string">"hua"</span></span><br><span class="line">head.Age = <span class="number">18</span></span><br><span class="line">head.Score = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 头部插入法</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">stu := Student&#123;</span><br><span class="line">Name:  fmt.Sprintf(<span class="string">"stu%d"</span>, i),</span><br><span class="line">Age:   rand.Intn(<span class="number">100</span>),</span><br><span class="line">Score: rand.Float32()*<span class="number">100</span>,</span><br><span class="line">&#125;</span><br><span class="line">stu.next = head</span><br><span class="line">head = &amp;stu</span><br><span class="line">&#125;</span><br><span class="line">trans(head)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;stu9 <span class="number">37</span> <span class="number">21.855305</span> <span class="number">0xc000054510</span>&#125;</span><br><span class="line">&#123;stu8 <span class="number">11</span> <span class="number">29.310184</span> <span class="number">0xc0000544e0</span>&#125;</span><br><span class="line">&#123;stu7 <span class="number">28</span> <span class="number">46.888985</span> <span class="number">0xc0000544b0</span>&#125;</span><br><span class="line">&#123;stu6 <span class="number">62</span> <span class="number">38.06572</span> <span class="number">0xc000054480</span>&#125;</span><br><span class="line">&#123;stu5 <span class="number">94</span> <span class="number">81.36399</span> <span class="number">0xc000054450</span>&#125;</span><br><span class="line">&#123;stu4 <span class="number">56</span> <span class="number">30.091187</span> <span class="number">0xc000054420</span>&#125;</span><br><span class="line">&#123;stu3 <span class="number">25</span> <span class="number">15.651925</span> <span class="number">0xc0000543f</span>0&#125;</span><br><span class="line">&#123;stu2 <span class="number">81</span> <span class="number">68.682304</span> <span class="number">0xc0000543c0</span>&#125;</span><br><span class="line">&#123;stu1 <span class="number">47</span> <span class="number">43.77142</span> <span class="number">0xc000054390</span>&#125;</span><br><span class="line">&#123;stu0 <span class="number">81</span> <span class="number">94.05091</span> <span class="number">0xc000054360</span>&#125;</span><br><span class="line">&#123;hua <span class="number">18</span> <span class="number">100</span> &lt;<span class="literal">nil</span>&gt;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;链表&quot;&gt;&lt;a href=&quot;#链表&quot; class=&quot;headerlink&quot; title=&quot;链表&quot;&gt;&lt;/a&gt;链表&lt;/h2&gt;&lt;h3 id=&quot;1-链表定义&quot;&gt;&lt;a href=&quot;#1-链表定义&quot; class=&quot;headerlink&quot; title=&quot;1. 链表定义&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="Golang" scheme="https://plutoacharon.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://plutoacharon.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Golang语言学习从入门到实战----结构体以及内存分布</title>
    <link href="https://plutoacharon.github.io/2020/03/12/Golang%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98-%E7%BB%93%E6%9E%84%E4%BD%93%E4%BB%A5%E5%8F%8A%E5%86%85%E5%AD%98%E5%88%86%E5%B8%83/"/>
    <id>https://plutoacharon.github.io/2020/03/12/Golang语言学习从入门到实战-结构体以及内存分布/</id>
    <published>2020-03-12T04:24:11.000Z</published>
    <updated>2020-03-12T04:24:40.923Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Golang语言面向对象编程说明"><a href="#1-Golang语言面向对象编程说明" class="headerlink" title="1.Golang语言面向对象编程说明"></a>1.Golang语言面向对象编程说明</h2><ul><li><code>Golang</code>也支持<code>面向对象编程(OOP)</code>，但是和传统的面向对象编程有区别，并不是纯粹的面向对象语言。所以我们说<code>Golang</code>支持面向对象编程特性是比较准确的。</li><li><code>Golang</code>没有<code>类</code>(class)，Go语言的<code>结构体(</code>struct<code>)</code>和其它编程语言的类(class)有同等的地位，你可以理解<code>Golang</code>是基于<code>struct</code>来实现OOP特性的。</li><li><code>Golang</code>面向对象编程非常简洁，去掉了传统OOP语言的继承、方法重载、构造函数和析构函数、隐藏的this指针等等</li><li><code>Golang</code>仍然有<code>面向对象编程的继承，封装和多态</code>的特性，只是实现的方式和其它OOP语言不一样，比如继承：<code>Golang</code>没有<code>extends</code>关键字，继承是通过<code>匿名字段</code>来实现。</li><li><code>Golang</code>面向对象(OOP)很优雅，OOP本身就是语言类型系统(typesystem)的一部分，通过接口<code>interface</code>关联，耦合性低，也非常灵活。后面同学们会充分体会到这个特点。也就是说在<code>Golang</code>中面向接口编程是非常重要的特性</li></ul><h3 id="1-1-Golang中的struct"><a href="#1-1-Golang中的struct" class="headerlink" title="1.1 Golang中的struct"></a>1.1 Golang中的struct</h3><ol><li><p>用来自定义复杂的数据结构</p></li><li><p><code>struct</code>里面可以包含多个字段(属性)</p></li><li><p><code>struct</code>类型可以定义方法, 注意和函数的区分</p></li><li><p><code>struct</code>类型是值类型</p></li><li><p><code>struct</code>类型可以嵌套</p></li><li><p>Go语言中没有<code>class</code>类型,只有<code>struct</code>类型</p></li></ol><h3 id="1-2-struct的定义"><a href="#1-2-struct的定义" class="headerlink" title="1.2 struct的定义"></a>1.2 struct的定义</h3><ol><li><code>struct</code> 声明:</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> 标识符 <span class="keyword">struct</span>&#123;</span><br><span class="line">field1 <span class="keyword">type</span></span><br><span class="line">field2 <span class="keyword">type</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span>&#123;</span><br><span class="line">Name  <span class="keyword">string</span></span><br><span class="line">Age   <span class="keyword">int</span></span><br><span class="line">Score <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="2"><li>字段/属性</li></ol><ul><li><p>结构体字段=属性=field</p></li><li><p>字段是结构体的一个组成部分，一般是基本数据类型、数组,也可是引用类型。</p></li><li><p>字段声明语法同变量，示例：字段名字段类型</p></li><li>字段的类型可以为：基本类型、数组或引用类型</li><li>在创建一个结构体变量后，如果没有给字段赋值，都对应一个零值(默认值)，规则同前面讲的一样:布尔类型是false，数值是0，字符串是””。</li><li>数组类型的默认值和它的元素类型相关，比如score[3] int则为[0,0,0]指针，slice，和map的零值都是nil，即还没有分配</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name   <span class="keyword">string</span></span><br><span class="line">Age    <span class="keyword">int</span></span><br><span class="line">Scores [<span class="number">5</span>]<span class="keyword">float64</span></span><br><span class="line">ptr    *<span class="keyword">int</span>              <span class="comment">// 指针</span></span><br><span class="line">slice  []<span class="keyword">int</span>             <span class="comment">// 切片</span></span><br><span class="line">map1   <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span> <span class="comment">// map</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义结构体变量</span></span><br><span class="line"><span class="keyword">var</span> p1 Person</span><br><span class="line">fmt.Println(p1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> p1.ptr == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"ok1"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> p1.slice == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"ok2"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> p1.map1 == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"ok3"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p1.slice = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line">p1.slice[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">p1.map1 = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line">p1.map1[<span class="string">"key1"</span>] = <span class="string">"tom"</span></span><br><span class="line"></span><br><span class="line">fmt.Println(p1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="number">0</span> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>] &lt;<span class="literal">nil</span>&gt; [] <span class="keyword">map</span>[]&#125;</span><br><span class="line">ok1</span><br><span class="line">ok2</span><br><span class="line">ok3</span><br><span class="line">&#123; <span class="number">0</span> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>] &lt;<span class="literal">nil</span>&gt; [<span class="number">100</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>] <span class="keyword">map</span>[key1:tom]&#125;</span><br></pre></td></tr></table></figure></p><ol start="3"><li>不同结构体变量的字段是独立，互不影响，</li></ol><p>一个结构体变量字段的更改，不影响另外一个,结构体是值类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Monster <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Age <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 不同结构体变量的字段是独立,互不影响 </span></span><br><span class="line"><span class="comment">// 一个结构体变量字段的更改,不会影响下一个</span></span><br><span class="line"><span class="keyword">var</span> monster_one Monster</span><br><span class="line"><span class="keyword">var</span> monster_two Monster</span><br><span class="line"></span><br><span class="line">monster_one.Name = <span class="string">"牛"</span></span><br><span class="line">monster_one.Age = <span class="number">123</span></span><br><span class="line"></span><br><span class="line">monster_two.Name = <span class="string">"猴"</span></span><br><span class="line">monster_two.Age = <span class="number">143</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"monster_one="</span>, monster_one)</span><br><span class="line">fmt.Println(<span class="string">"monster_two="</span>, monster_two)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">monster_one= &#123;牛 <span class="number">123</span>&#125;</span><br><span class="line">monster_two= &#123;猴 <span class="number">143</span>&#125;</span><br></pre></td></tr></table></figure></p><ol start="4"><li>创建结构体变量和访问结构体字段</li></ol><p>方式1-直接声明<code>var person Person</code></p><p>方式2-{} <code>var person Person = Person{}</code></p><p>方式3-&amp; <code>varperson*Person=new(Person)</code></p><p>方式4-{} <code>var person *Person = &amp;Person{}</code></p><p>说明:</p><ul><li>第3种和第4种方式返回的是结构体指针</li><li>结构体指针访问字段的标准方式应该是：<code>(*结构体指针).字段名</code>，比如<code>(*person).Name = &quot;tom&quot;</code></li><li>go做了一个简化，也支持<code>结构体指针</code>.字段名,比如<code>person.Name=&quot;tom&quot;</code>。</li><li>这更加符合程序员使用的习惯，go编译器底层对<code>person.Name</code>做了转<code>(*person).Name。</code></li></ul><ol start="5"><li>struct类型的内存分配机制</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Age <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> p1 Person</span><br><span class="line"></span><br><span class="line">p1.Age = <span class="number">10</span></span><br><span class="line">p1.Name = <span class="string">"小明"</span></span><br><span class="line"><span class="keyword">var</span> p2 Person = p1</span><br><span class="line"></span><br><span class="line">fmt.Println(p2.Age)</span><br><span class="line"></span><br><span class="line">p2.Name = <span class="string">"tom"</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"p2.Name=%v p1.Name=%v"</span>, p2.Name, p1.Name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line">p2.Name=tom p1.Name=小明</span><br></pre></td></tr></table></figure><p>内存图:<br><img src="https://img-blog.csdnimg.cn/20200311213429277.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Age <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> p1 Person</span><br><span class="line">p1.Age = <span class="number">10</span></span><br><span class="line">p1.Name = <span class="string">"小明"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 *Person = &amp;p1</span><br><span class="line"></span><br><span class="line">fmt.Println((*p2).Age)</span><br><span class="line">fmt.Println(p2.Age)</span><br><span class="line"></span><br><span class="line">p2.Name = <span class="string">"小红"</span></span><br><span class="line">fmt.Printf(<span class="string">"p2.Name=%v p1.Name=%v \n"</span>, p2.Name, p1.Name)</span><br><span class="line">fmt.Printf(<span class="string">"p2.Name=%v p1.Name=%v \n"</span>, (*p2).Name, p1.Name)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"p1的地址%p\n"</span>, &amp;p1)</span><br><span class="line">fmt.Printf(<span class="string">"p2的地址%p p2的值%p"</span>, &amp;p2,p2)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line">p2.Name=小红 p1.Name=小红 </span><br><span class="line">p2.Name=小红 p1.Name=小红 </span><br><span class="line">p1的地址<span class="number">0xc0000044c0</span></span><br><span class="line">p2的地址<span class="number">0xc000006028</span> p2的值<span class="number">0xc0000044c0</span></span><br></pre></td></tr></table></figure></p><p>内存图:<br><img src="https://img-blog.csdnimg.cn/20200311214007258.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-Golang语言面向对象编程说明&quot;&gt;&lt;a href=&quot;#1-Golang语言面向对象编程说明&quot; class=&quot;headerlink&quot; title=&quot;1.Golang语言面向对象编程说明&quot;&gt;&lt;/a&gt;1.Golang语言面向对象编程说明&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="Golang" scheme="https://plutoacharon.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://plutoacharon.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Python算法学习: 竞码编程-蓝桥杯校内选拔赛(初赛)重现赛</title>
    <link href="https://plutoacharon.github.io/2020/03/09/Python%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E7%AB%9E%E7%A0%81%E7%BC%96%E7%A8%8B-%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%A0%A1%E5%86%85%E9%80%89%E6%8B%94%E8%B5%9B-%E5%88%9D%E8%B5%9B-%E9%87%8D%E7%8E%B0%E8%B5%9B/"/>
    <id>https://plutoacharon.github.io/2020/03/09/Python算法学习-竞码编程-蓝桥杯校内选拔赛-初赛-重现赛/</id>
    <published>2020-03-09T06:06:31.000Z</published>
    <updated>2020-03-09T06:07:07.464Z</updated>
    
    <content type="html"><![CDATA[<p>oj网站地址:<a href="http://oj.hzjingma.com/contest/view?id=72" target="_blank" rel="noopener">竞码编程-蓝桥杯校内选拔赛(初赛)重现赛</a><br>@[TOC]</p><h2 id="试题A：第N个素数"><a href="#试题A：第N个素数" class="headerlink" title="试题A：第N个素数"></a>试题A：第N个素数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPrime</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, n):</span><br><span class="line">        <span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">10000</span>):</span><br><span class="line">    <span class="keyword">if</span> isPrime(i):</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">300</span>:</span><br><span class="line">        print(i)</span><br><span class="line">        print(count)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="试题B：coffee的签到题"><a href="#试题B：coffee的签到题" class="headerlink" title="试题B：coffee的签到题"></a>试题B：coffee的签到题</h2><p>如果n是偶数，则无法全部进行染色，如果是奇数，则可以全部进行染色<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">print(<span class="string">"no"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"yes"</span>)</span><br></pre></td></tr></table></figure></p><h2 id="试题C：不一样的日期"><a href="#试题C：不一样的日期" class="headerlink" title="试题C：不一样的日期"></a>试题C：不一样的日期</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">YY,MM,DD,dd = map(int,input().split())</span><br><span class="line"><span class="keyword">if</span> dd &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,dd+<span class="number">1</span>):</span><br><span class="line">        DD += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> DD &gt; <span class="number">13</span>:</span><br><span class="line">            MM += <span class="number">1</span></span><br><span class="line">            DD = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> MM &gt; <span class="number">23</span>:</span><br><span class="line">            YY += <span class="number">1</span></span><br><span class="line">            MM = <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,abs(dd)+<span class="number">1</span>):</span><br><span class="line">        DD -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> DD &lt;= <span class="number">0</span>:</span><br><span class="line">            MM -= <span class="number">1</span></span><br><span class="line">            DD = <span class="number">13</span></span><br><span class="line">        <span class="keyword">if</span> MM &lt;= <span class="number">0</span>:</span><br><span class="line">            YY -= <span class="number">1</span></span><br><span class="line">            MM = <span class="number">23</span></span><br><span class="line">print(YY,MM,DD)</span><br></pre></td></tr></table></figure><h2 id="试题D：三位分节法"><a href="#试题D：三位分节法" class="headerlink" title="试题D：三位分节法"></a>试题D：三位分节法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">str = input()</span><br><span class="line">str = str[::<span class="number">-1</span>] <span class="comment"># 字符串翻转</span></span><br><span class="line">ans = <span class="string">""</span></span><br><span class="line">cnt = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(str)):</span><br><span class="line">    <span class="keyword">if</span> cnt == <span class="number">3</span>:</span><br><span class="line">        ans = ans + <span class="string">","</span></span><br><span class="line">        cnt = <span class="number">0</span></span><br><span class="line">    cnt += <span class="number">1</span></span><br><span class="line">    ans = ans + str[i]</span><br><span class="line">ans = ans[::<span class="number">-1</span>]</span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure><h2 id="试题E：水坑题"><a href="#试题E：水坑题" class="headerlink" title="试题E：水坑题"></a>试题E：水坑题</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a,b = map(int, input().split())</span><br><span class="line">ans = (a*b) % (pow(<span class="number">10</span>,<span class="number">9</span>)+<span class="number">7</span>)</span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure><h2 id="试题F：站队"><a href="#试题F：站队" class="headerlink" title="试题F：站队"></a>试题F：站队</h2><p>Python部分数据超时<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line">data = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">    tmp = list(map(int, input().split()))</span><br><span class="line">    tmp.append(i)</span><br><span class="line">    data.append(tmp)</span><br><span class="line"></span><br><span class="line">data = sorted(data,key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>])</span><br><span class="line">data = sorted(data,key=<span class="keyword">lambda</span> x:x[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>):</span><br><span class="line">    print(data[i][<span class="number">2</span>], end=<span class="string">" "</span>)</span><br><span class="line">print(data[n<span class="number">-1</span>][<span class="number">2</span>])</span><br></pre></td></tr></table></figure></p><h2 id="试题G：冷门进制"><a href="#试题G：冷门进制" class="headerlink" title="试题G：冷门进制"></a>试题G：冷门进制</h2><h2 id="试题H：拯救阿拉德大陆"><a href="#试题H：拯救阿拉德大陆" class="headerlink" title="试题H：拯救阿拉德大陆"></a>试题H：拯救阿拉德大陆</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line">nums = list(map(int, input().split()))</span><br><span class="line">ans = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">        <span class="keyword">if</span> i % num == <span class="number">0</span>:</span><br><span class="line">            ans += <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure><h2 id="试题J：馋嘴羊"><a href="#试题J：馋嘴羊" class="headerlink" title="试题J：馋嘴羊"></a>试题J：馋嘴羊</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.setrecursionlimit(<span class="number">1000000</span>) <span class="comment"># 限制递归深度为</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> y &lt; <span class="number">0</span> <span class="keyword">or</span> x &gt; n - <span class="number">1</span> <span class="keyword">or</span> y &gt; m - <span class="number">1</span> <span class="keyword">or</span> vis[x][y] == <span class="number">1</span> <span class="keyword">or</span> arr[x][y] == <span class="string">'0'</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    vis[x][y] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">global</span> ans</span><br><span class="line">    ans += <span class="number">1</span></span><br><span class="line">    dfs(x - <span class="number">1</span>, y)</span><br><span class="line">    dfs(x + <span class="number">1</span>, y)</span><br><span class="line">    dfs(x, y + <span class="number">1</span>)</span><br><span class="line">    dfs(x, y - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    n, m ,x, y= map(int, input().split())</span><br><span class="line"></span><br><span class="line">    arr = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        str = input()</span><br><span class="line">        arr.append(list(str))</span><br><span class="line"></span><br><span class="line">    vis = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(m)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)] <span class="comment"># 判断是否走过,0为未走过,1为走过</span></span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    dfs(x,y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    print(ans)</span><br></pre></td></tr></table></figure><h2 id="连通块问题"><a href="#连通块问题" class="headerlink" title="连通块问题"></a>连通块问题</h2><p>题目地址:<code>http://oj.hzjingma.com/p/29?view=classic</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(grid, i, j)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="number">0</span> &lt;= i &lt; len(grid) <span class="keyword">or</span> <span class="keyword">not</span> <span class="number">0</span> &lt;= j &lt; len(grid[<span class="number">0</span>]) <span class="keyword">or</span> grid[i][j] == <span class="string">'.'</span>: <span class="keyword">return</span></span><br><span class="line">    grid[i][j] = <span class="string">'.'</span></span><br><span class="line">    dfs(grid, i + <span class="number">1</span>, j)</span><br><span class="line">    dfs(grid, i, j + <span class="number">1</span>)</span><br><span class="line">    dfs(grid, i - <span class="number">1</span>, j)</span><br><span class="line">    dfs(grid, i, j - <span class="number">1</span>)</span><br><span class="line">    dfs(grid, i + <span class="number">1</span>, j + <span class="number">1</span>)</span><br><span class="line">    dfs(grid, i - <span class="number">1</span>, j + <span class="number">1</span>)</span><br><span class="line">    dfs(grid, i - <span class="number">1</span>, j - <span class="number">1</span>)</span><br><span class="line">    dfs(grid, i + <span class="number">1</span>, j - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    n, m = map(int, input().split())</span><br><span class="line"></span><br><span class="line">    arr = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        str = input()</span><br><span class="line">        arr.append(list(str))</span><br><span class="line"></span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(m):</span><br><span class="line">            <span class="keyword">if</span> arr[i][j] == <span class="string">'W'</span>:</span><br><span class="line">                dfs(arr,i, j)</span><br><span class="line">                ans += <span class="number">1</span></span><br><span class="line">    print(ans)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;oj网站地址:&lt;a href=&quot;http://oj.hzjingma.com/contest/view?id=72&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;竞码编程-蓝桥杯校内选拔赛(初赛)重现赛&lt;/a&gt;&lt;br&gt;@[TOC]&lt;/p&gt;
&lt;h2 id=&quot;
      
    
    </summary>
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/categories/Python%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/tags/Python%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>牛客网校招全国统一模拟笔试2020年2月场运维方向编程题解</title>
    <link href="https://plutoacharon.github.io/2020/03/09/%E7%89%9B%E5%AE%A2%E7%BD%91%E6%A0%A1%E6%8B%9B%E5%85%A8%E5%9B%BD%E7%BB%9F%E4%B8%80%E6%A8%A1%E6%8B%9F%E7%AC%94%E8%AF%952020%E5%B9%B42%E6%9C%88%E5%9C%BA%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91%E7%BC%96%E7%A8%8B%E9%A2%98%E8%A7%A3/"/>
    <id>https://plutoacharon.github.io/2020/03/09/牛客网校招全国统一模拟笔试2020年2月场运维方向编程题解/</id>
    <published>2020-03-09T06:05:56.000Z</published>
    <updated>2020-03-09T06:07:06.463Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-添加字符"><a href="#1-添加字符" class="headerlink" title="1. 添加字符"></a>1. 添加字符</h2><p>题目描述:</p><p>牛牛手里有一个字符串A，羊羊的手里有一个字符串B，B的长度大于等于A，所以牛牛想把A串变得和B串一样长，这样羊羊就愿意和牛牛一起玩了。<br>而且A的长度增加到和B串一样长的时候，对应的每一位相等的越多，羊羊就越喜欢。比如”abc”和”abd”对应相等的位数为2，为前两位。<br>牛牛可以在A的开头或者结尾添加任意字符，使得长度和B一样。现在问牛牛对A串添加完字符之后，不相等的位数最少有多少位？</p><pre><code>输入:abecabc输出:1</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">str1 = input()</span><br><span class="line">str2 = input()</span><br><span class="line">len_str1 = len(str1)</span><br><span class="line">len_str2 = len(str2)</span><br><span class="line">ans = len_str1</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len_str1 &lt; len_str2:</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i+len_str1 &lt;= len_str2:</span><br><span class="line">        cnt = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len_str1):</span><br><span class="line">            <span class="keyword">if</span> str1[j] != str2[i+j]:</span><br><span class="line">                cnt +=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> cnt &lt; ans:</span><br><span class="line">            ans = cnt</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len_str1):</span><br><span class="line">        <span class="keyword">if</span> str1[j] != str2[j]:</span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> cnt &lt; ans:</span><br><span class="line">        ans = cnt</span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure><h2 id="2-排序子序列"><a href="#2-排序子序列" class="headerlink" title="2. 排序子序列"></a>2. 排序子序列</h2><p>牛牛定义排序子序列为一个数组中一段连续的子序列,并且这段子序列是非递增或者非递减排序的。</p><p>牛牛有一个长度为n的整数数组A,他现在有一个任务是把数组A分为若干段排序子序列</p><p>牛牛想知道他最少可以把这个数组分为几段排序子序列</p><p>如样例所示:</p><p>牛牛可以把数组A划分为[1,2,3]和[2,2,1]两个排序子序列,至少需要划分为2个排序子序列,所以输出2</p><p><img src="https://img-blog.csdnimg.cn/20200306202320493.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre><code>示例1：输入61 2 3 2 2 1输出2</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">n = input()</span><br><span class="line">a = list(map(int, input().split()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">1</span> <span class="keyword">or</span> n == <span class="number">2</span>:</span><br><span class="line">    print(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">ans = <span class="number">1</span></span><br><span class="line">flag = <span class="number">0</span>  <span class="comment"># 1增 0平 -1减</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(a)):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> flag == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> a[i - <span class="number">1</span>] &lt; a[i]:</span><br><span class="line">            flag = <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> a[i - <span class="number">1</span>] &gt; a[i]:</span><br><span class="line">            flag = <span class="number">-1</span></span><br><span class="line">    <span class="keyword">elif</span> (flag &lt; <span class="number">0</span>) == (a[i] &gt; a[i - <span class="number">1</span>]): </span><br><span class="line"></span><br><span class="line">        ans += <span class="number">1</span></span><br><span class="line">        flag = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure><h2 id="组队竞赛"><a href="#组队竞赛" class="headerlink" title="组队竞赛"></a>组队竞赛</h2><p>牛牛举办了一次编程比赛,参加比赛的有3*n个选手,每个选手都有一个水平值a_i.现在要将这些选手进行组队,一共组成n个队伍,即每个队伍3人.牛牛发现队伍的水平值等于该队伍队员中第二高水平值。</p><p>例如:</p><p>一个队伍三个队员的水平值分别是3,3,3.那么队伍的水平值是3<br>一个队伍三个队员的水平值分别是3,2,3.那么队伍的水平值是3<br>一个队伍三个队员的水平值分别是1,5,2.那么队伍的水平值是2<br>为了让比赛更有看点,牛牛想安排队伍使所有队伍的水平值总和最大。</p><p>如样例所示:</p><p>如果牛牛把6个队员划分到两个队伍<br>如果方案为:<br>team1:{1,2,5}, team2:{5,5,8}, 这时候水平值总和为7.<br>而如果方案为:<br>team1:{2,5,8}, team2:{1,5,5}, 这时候水平值总和为10.<br>没有比总和为10更大的方案,所以输出10.<br>输入描述：<br>输出描述：<br>示例1：</p><pre><code>输入的第一行为一个正整数n(1 ≤ n ≤ 10^5)第二行包括3*n个整数a_i(1 ≤ a_i ≤ 10^9),表示每个参赛选手的水平值.输出一个整数表示所有队伍的水平值总和最大值.输入:25 2 8 5 1 5输出:10</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line">list1 = list(map(int, input().split()))</span><br><span class="line">list1 = sorted(list1, reverse=<span class="literal">True</span>)</span><br><span class="line">ans = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    ans += int(list1[<span class="number">2</span>*i+<span class="number">1</span>])</span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-添加字符&quot;&gt;&lt;a href=&quot;#1-添加字符&quot; class=&quot;headerlink&quot; title=&quot;1. 添加字符&quot;&gt;&lt;/a&gt;1. 添加字符&lt;/h2&gt;&lt;p&gt;题目描述:&lt;/p&gt;
&lt;p&gt;牛牛手里有一个字符串A，羊羊的手里有一个字符串B，B的长度大于等于A，所以牛牛
      
    
    </summary>
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/categories/Python%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/tags/Python%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Golang语言学习从入门到实战----defer</title>
    <link href="https://plutoacharon.github.io/2020/03/07/Golang%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98-defer/"/>
    <id>https://plutoacharon.github.io/2020/03/07/Golang语言学习从入门到实战-defer/</id>
    <published>2020-03-07T02:06:48.000Z</published>
    <updated>2020-03-07T02:07:16.091Z</updated>
    
    <content type="html"><![CDATA[<h2 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h2><p>在函数中，程序员经常需要创建资源(比如：数据库连接、文件句柄、锁等)，为了在函数执行完毕后，及时的<strong>释放资源</strong>，Go的设计者提供<code>defer(延时机制)</code></p><h3 id="简单的demo"><a href="#简单的demo" class="headerlink" title="简单的demo"></a>简单的demo</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">res := sum(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">fmt.Println(<span class="string">"number4 res="</span>, res)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(n1 <span class="keyword">int</span>, n2 <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="comment">// 函数执行完毕后，及时的释放资源</span></span><br><span class="line"><span class="comment">// 先进后出</span></span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">"number1 n1 = "</span>, n1)</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">"number2 n2 = "</span>, n2)</span><br><span class="line"></span><br><span class="line">res := n1 + n2</span><br><span class="line">fmt.Println(<span class="string">"number3 res = "</span>, res) <span class="comment">// 最先执行</span></span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:</p><pre><code>number3 res =  30number2 n2 =  20number1 n1 =  10number4 res= 30</code></pre><ul><li>当<code>go</code>执行到一个<code>defer</code>时，不会立即执行<code>defer</code>后的语句，而是将<code>defer</code>后的语句压入到一个”栈”(比喻)中, 然后继续执行函数下一个语句。</li><li><p>当函数执行完毕后，在从<code>defer</code>栈中，依次从栈顶取出语句执行(注：遵守栈先入后出的机制)</p></li><li><p>在defer将语句放入到栈时，也会将相关的值拷贝同时入栈</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出:</span></span><br><span class="line"><span class="comment">number3 res =  30</span></span><br><span class="line"><span class="comment">number2 n2 =  20</span></span><br><span class="line"><span class="comment">number1 n1 =  10</span></span><br><span class="line"><span class="comment">number4 res= 30</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">res := sum(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">fmt.Println(<span class="string">"number4 res="</span>, res)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(n1 <span class="keyword">int</span>, n2 <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="comment">// 函数执行完毕后，及时的释放资源</span></span><br><span class="line"><span class="comment">// 先进后出</span></span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">"number1 n1 = "</span>, n1)</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">"number2 n2 = "</span>, n2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加一段</span></span><br><span class="line">n1++</span><br><span class="line">n2++</span><br><span class="line"></span><br><span class="line">res := n1 + n2</span><br><span class="line">fmt.Println(<span class="string">"number3 res = "</span>, res) <span class="comment">// 最先执行</span></span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>输出:</p><pre><code>number3 res =  32 // 输出结果为32number2 n2 =  20 // 栈中的数值仍是存入前的数值number1 n1 =  10number4 res= 32</code></pre><h3 id="使用defer-recover来处理错误"><a href="#使用defer-recover来处理错误" class="headerlink" title="使用defer+recover来处理错误"></a>使用defer+recover来处理错误</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">test()</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"main()下面的代码..."</span>)</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">err := <span class="built_in">recover</span>() <span class="comment">// recover()内置函数,可以捕获到异常</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;  <span class="comment">// 捕获到异常</span></span><br><span class="line">fmt.Println(<span class="string">"err="</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">num1 := <span class="number">10</span></span><br><span class="line">num2 := <span class="number">0</span></span><br><span class="line">res := num1 / num2</span><br><span class="line">fmt.Println(<span class="string">"res="</span>, res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:</p><pre><code>err= runtime error: integer divide by zeromain()下面的代码...</code></pre><h3 id="defer在Go中的数据结构"><a href="#defer在Go中的数据结构" class="headerlink" title="defer在Go中的数据结构"></a>defer在Go中的数据结构</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> _defer <span class="keyword">struct</span> &#123;</span><br><span class="line">siz     <span class="keyword">int32</span></span><br><span class="line">started <span class="keyword">bool</span></span><br><span class="line">sp      <span class="keyword">uintptr</span></span><br><span class="line">pc      <span class="keyword">uintptr</span></span><br><span class="line">fn      *funcval</span><br><span class="line">_panic  *_panic</span><br><span class="line">link    *_defer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>runtime._defer</code> 结构体是延迟调用链表上的一个元素，所有的结构体都会通过 <code>link</code>字段串联成链表。</p><p><img src="https://img-blog.csdnimg.cn/20200306145913609.png" alt="在这里插入图片描述"></p><ul><li>siz 是参数和结果的内存大小；</li><li>sp 和 pc 分别代表栈指针和调用方的程序计数器；</li><li>fn 是 defer 关键字中传入的函数；</li><li>_panic 是触发延迟调用的结构体，可能为空；</li></ul><p>除了上述的这些字段之外，<code>runtime._defer</code> 中还包含一些垃圾回收机制使用的字段，这里为了减少理解的成本就都省去了</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><code>defer</code>关键字的实现主要依靠编译器和运行时的协作</p><h4 id="编译期；"><a href="#编译期；" class="headerlink" title="编译期；"></a>编译期；</h4><p>将 <code>defer</code> 关键字被转换<code>runtime.deferproc</code>；<br>在调用<code>defer</code> 关键字的函数返回之前插入<code>runtime.deferreturn；</code></p><h4 id="运行时："><a href="#运行时：" class="headerlink" title="运行时："></a>运行时：</h4><p><code>runtime.deferproc</code>会将一个新的 <code>runtime._defer</code>结构体追加到当前<code>Goroutine</code>的链表头；<br><code>runtime.deferreturn</code>会从 <code>Goroutine</code>的链表中取出<code>runtime._defer</code> 结构并依次执行；</p><ul><li>后调用的<code>defer</code>函数会先执行：<ul><li>后调用的<code>defer</code>函数会被追加到<code>Goroutine _defer</code>链表的最前面；</li><li>运行<code>runtime._defer</code>时是从前到后依次执行；</li></ul></li><li>函数的参数会被预先计算；<ul><li>调用<code>runtime.deferproc</code>函数创建新的延迟调用时就会立刻拷贝函数的参数，函数的参数不会等到真正执行时计算；</li></ul></li></ul><p>更多关于Golang defer的编译过程与运行过程可以参考:</p><p>参考链接:<a href="https://draveness.me/golang/docs/part2-foundation/ch05-keyword/golang-defer/#533-" target="_blank" rel="noopener">https://draveness.me/golang/docs/part2-foundation/ch05-keyword/golang-defer/#533-</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;defer&quot;&gt;&lt;a href=&quot;#defer&quot; class=&quot;headerlink&quot; title=&quot;defer&quot;&gt;&lt;/a&gt;defer&lt;/h2&gt;&lt;p&gt;在函数中，程序员经常需要创建资源(比如：数据库连接、文件句柄、锁等)，为了在函数执行完毕后，及时的&lt;strong&gt;释
      
    
    </summary>
    
      <category term="Golang" scheme="https://plutoacharon.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://plutoacharon.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Golang语言学习从入门到实战----闭包</title>
    <link href="https://plutoacharon.github.io/2020/03/07/Golang%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98-%E9%97%AD%E5%8C%85/"/>
    <id>https://plutoacharon.github.io/2020/03/07/Golang语言学习从入门到实战-闭包/</id>
    <published>2020-03-07T02:05:52.000Z</published>
    <updated>2020-03-07T02:06:19.885Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Golang闭包"><a href="#Golang闭包" class="headerlink" title="Golang闭包"></a>Golang闭包</h2><p>基本介绍：闭包就是一个函数和与其相关的引用环境组合的一个整体(实体)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AddUpper</span><span class="params">()</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> n <span class="keyword">int</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">n += x</span><br><span class="line"><span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">f := AddUpper()</span><br><span class="line">fmt.Println(f(<span class="number">1</span>))</span><br><span class="line">fmt.Println(f(<span class="number">100</span>))</span><br><span class="line">fmt.Println(f(<span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:</p><pre><code>11011101</code></pre><h3 id="代码的说明"><a href="#代码的说明" class="headerlink" title="代码的说明:"></a>代码的说明:</h3><ul><li>AddUpper是一个函数，返回的数据类型是<code>func (int) int</code></li><li>返回的是一个匿名函数,但是这个匿名函数引用到函数外的n,因此这个匿名函数就和n形成一个整体，构成<code>闭包</code></li><li>闭包是类,函数是操作，n是字段。函数和它使用到n构成<code>闭包</code>。</li><li>当我们反复的调用f函数时，因为<code>n</code>是初始化一次，因此每调用一次就进行累计。</li><li>我们要搞清楚闭包的关键，就是要分析出返回的函数它使用(引用)到哪些变量，因为函数和它引用到的变量共同构成<code>闭包</code></li></ul><h3 id="闭包的实践"><a href="#闭包的实践" class="headerlink" title="闭包的实践"></a>闭包的实践</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f1 := makesuffix(<span class="string">".jpg"</span>)</span><br><span class="line">fmt.Println(<span class="string">"文件处理后"</span>, f1(<span class="string">"test1"</span>))</span><br><span class="line">fmt.Println(<span class="string">"文件处理后"</span>, f1(<span class="string">"test2.jpg"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makesuffix</span><span class="params">(suffix <span class="keyword">string</span>)</span> <span class="title">func</span><span class="params">(<span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> !strings.HasSuffix(name, suffix) &#123; <span class="comment">// strings.HasSuffix,该函数可以判断某个字符串是否有指定的后缀。</span></span><br><span class="line"><span class="keyword">return</span> name + suffix</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:</p><pre><code>文件处理后 test1.jpg文件处理后 test2.jpg</code></pre><p>返回的匿名函数和<code>makeSuffix (suffix string)</code>的<code>suffix</code>变量组合成一个闭包,因为返回的函数引用到<code>suffix</code>这个变量</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Golang闭包&quot;&gt;&lt;a href=&quot;#Golang闭包&quot; class=&quot;headerlink&quot; title=&quot;Golang闭包&quot;&gt;&lt;/a&gt;Golang闭包&lt;/h2&gt;&lt;p&gt;基本介绍：闭包就是一个函数和与其相关的引用环境组合的一个整体(实体)&lt;/p&gt;
&lt;figure
      
    
    </summary>
    
      <category term="Golang" scheme="https://plutoacharon.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://plutoacharon.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Liunx Shell编程入门----编写简单的开机欢迎脚本与操作服务脚本</title>
    <link href="https://plutoacharon.github.io/2020/03/07/Liunx-Shell%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8-%E7%BC%96%E5%86%99%E7%AE%80%E5%8D%95%E7%9A%84%E5%BC%80%E6%9C%BA%E6%AC%A2%E8%BF%8E%E8%84%9A%E6%9C%AC%E4%B8%8E%E6%93%8D%E4%BD%9C%E6%9C%8D%E5%8A%A1%E8%84%9A%E6%9C%AC/"/>
    <id>https://plutoacharon.github.io/2020/03/07/Liunx-Shell编程入门-编写简单的开机欢迎脚本与操作服务脚本/</id>
    <published>2020-03-07T02:04:56.000Z</published>
    <updated>2020-03-07T02:05:20.441Z</updated>
    
    <content type="html"><![CDATA[<h3 id="开机欢迎脚本"><a href="#开机欢迎脚本" class="headerlink" title="开机欢迎脚本"></a>开机欢迎脚本</h3><p>在用户目录/<code>root</code>下编写存储<code>welcome.sh</code>脚本，赋予执行权限，并在<code>~/.bash_profile</code>中调用该脚本，使得在用户登录时显示欢迎信息</p><p>如<code>login_pwd=$(pwd)</code> 等号旁边不要添加空格<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 基本信息</span></span><br><span class="line">login_pwd=$(pwd)</span><br><span class="line">login_date=$(date)</span><br><span class="line">login_users=$(users)</span><br><span class="line">login_uptime=$(uptime)</span><br><span class="line">version=$(uname -a)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 颜色</span></span><br><span class="line">red='\033[31m' # 定义红色</span><br><span class="line">blue='\033[34m'# 定义蓝色</span><br><span class="line">green='\033[32m'# 定义绿色</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出信息</span></span><br><span class="line">echo -e " "</span><br><span class="line">echo -e "$&#123;blue&#125;+----------------------------------------------------------------"</span><br><span class="line">echo -e "$&#123;green&#125;    Welcome xuhaohan!                    “</span><br><span class="line">echo -e "$&#123;blue&#125;+----------------------------------------------------------------"</span><br><span class="line"></span><br><span class="line">echo -e "$&#123;green&#125;Server IP: $&#123;red&#125;192.168.0.131"</span><br><span class="line">echo -e "$&#123;green&#125;Date: $&#123;red&#125;"$login_date</span><br><span class="line">echo -e "$&#123;green&#125;Users: $&#123;red&#125;"$login_users</span><br><span class="line">echo -e "$&#123;green&#125;Uptime: $&#123;red&#125;"$login_uptime</span><br><span class="line">echo -e "$&#123;green&#125;版本信息: $&#123;red&#125;"$version</span><br><span class="line">echo -e "$&#123;blue&#125;+----------------------------------------------------------------"</span><br><span class="line">echo -e " "</span><br></pre></td></tr></table></figure></p><p><code>chmod a+x welcome.sh</code>添加可执行权限</p><p>将<code>welcome.sh</code>脚本加入<code>~/.bash_profile</code>中,这样当我们登陆的时候就会自动调用<code>welcome.sh</code><br>脚本<br><img src="https://img-blog.csdnimg.cn/20200305125420846.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>登陆之后<br><img src="https://img-blog.csdnimg.cn/20200305125439115.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="操作服务脚本"><a href="#操作服务脚本" class="headerlink" title="操作服务脚本"></a>操作服务脚本</h3><p>在<code>/root/bin</code>目录下编写<code>status、 start、stop</code>脚本，可以根据脚本后面的服务名称分别显示服务状态、开启服务、停止服务</p><ol><li>通过<code>$1</code>获取服务名称</li><li>判断<code>/etc/init.d/</code>目录下是否存在同名文件<br>A.    如果文件不存在，提示不存在这个服务<br>B.    如果文件存在，则执行这个文件，带上<code>status、 start、stop</code>参数<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">if [ -f "/etc/init.d/$1" ];then # -f查看文件是否存在</span><br><span class="line">systemctl status $1</span><br><span class="line">else</span><br><span class="line">echo "文件不存在"</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://img-blog.csdnimg.cn/20200305125828998.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200305125837825.png" alt="在这里插入图片描述"></p><p><code>stop start</code>脚本类似</p><p>start.sh<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">if [ -f "/etc/init.d/$1" ];then # -f查看文件是否存在</span><br><span class="line">systemctl start $1</span><br><span class="line">else</span><br><span class="line">echo "文件不存在"</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></p><p>stop.sh脚本<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">if [ -f "/etc/init.d/$1" ];then # -f查看文件是否存在</span><br><span class="line">systemctl stop $1</span><br><span class="line">else</span><br><span class="line">echo "文件不存在"</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;开机欢迎脚本&quot;&gt;&lt;a href=&quot;#开机欢迎脚本&quot; class=&quot;headerlink&quot; title=&quot;开机欢迎脚本&quot;&gt;&lt;/a&gt;开机欢迎脚本&lt;/h3&gt;&lt;p&gt;在用户目录/&lt;code&gt;root&lt;/code&gt;下编写存储&lt;code&gt;welcome.sh&lt;/code&gt;脚本，
      
    
    </summary>
    
      <category term="Liunx" scheme="https://plutoacharon.github.io/categories/Liunx/"/>
    
    
      <category term="Shell" scheme="https://plutoacharon.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Golang语言学习从入门到实战----指针和内存布局</title>
    <link href="https://plutoacharon.github.io/2020/03/07/Golang%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98-%E6%8C%87%E9%92%88%E5%92%8C%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80/"/>
    <id>https://plutoacharon.github.io/2020/03/07/Golang语言学习从入门到实战-指针和内存布局/</id>
    <published>2020-03-07T02:03:56.000Z</published>
    <updated>2020-03-07T02:04:33.736Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于Golang语言的指针与内存讲解"><a href="#关于Golang语言的指针与内存讲解" class="headerlink" title="关于Golang语言的指针与内存讲解"></a>关于Golang语言的指针与内存讲解</h2><ul><li>基本数据类型，变量存的就是值，也叫值类型</li><li>获取变量的地址，用&amp;，比如：<code>var num int</code>,获取num的地址：<code>&amp;num</code><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 基本数据类型在内存布局</span></span><br><span class="line"><span class="keyword">var</span> num <span class="keyword">int</span> = <span class="number">1</span></span><br><span class="line"><span class="comment">// num 的地址是什么, &amp;num</span></span><br><span class="line">fmt.Println(<span class="string">"num的地址="</span>, &amp;num)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://img-blog.csdnimg.cn/20200302193908191.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>基本数据类型在内存的布局:</strong></p><p><img src="https://img-blog.csdnimg.cn/20200302194410688.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>指针类型，指针变量存的是一个地址，这个地址指向的空间存的才是值</li><li>比如：<code>var ptr *int = &amp;num</code>举例说明：指针在内存的布局<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 基本数据类型在内存布局</span></span><br><span class="line"><span class="keyword">var</span> num <span class="keyword">int</span> = <span class="number">1</span></span><br><span class="line"><span class="comment">// num 的地址是什么, &amp;num</span></span><br><span class="line">fmt.Println(<span class="string">"num的地址="</span>, &amp;num)</span><br><span class="line"><span class="comment">// 下面的 var ptr *int = &amp;num</span></span><br><span class="line"><span class="comment">// 1. ptr是一个指针变量</span></span><br><span class="line"><span class="comment">// 2. ptr的类型 *int</span></span><br><span class="line"><span class="comment">// 3. ptr本身的值&amp;num</span></span><br><span class="line"><span class="keyword">var</span> ptr *<span class="keyword">int</span> = &amp;num</span><br><span class="line">fmt.Printf(<span class="string">"prt=%v"</span>, ptr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://img-blog.csdnimg.cn/2020030219550637.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>指针类型在内存的布局:<br><img src="https://img-blog.csdnimg.cn/2020030219571451.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>注意: ptr此时也是有地址的,<code>0xc00000a0a8</code>不过是ptr指针所指向的地址</p></blockquote><h3 id="获取指针类型所指向的值"><a href="#获取指针类型所指向的值" class="headerlink" title="获取指针类型所指向的值"></a>获取指针类型所指向的值</h3><p>使用：<code>*</code>，比如：<code>var ptr *int</code>,使用<code>*ptr</code>获取<code>ptr</code>指向的值<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 基本数据类型在内存布局</span></span><br><span class="line"><span class="keyword">var</span> num <span class="keyword">int</span> = <span class="number">1</span></span><br><span class="line"><span class="comment">// num 的地址是什么, &amp;num</span></span><br><span class="line">fmt.Println(<span class="string">"num的地址="</span>, &amp;num)</span><br><span class="line"><span class="comment">// 下面的 var ptr *int = &amp;num</span></span><br><span class="line"><span class="comment">// 1. ptr是一个指针变量</span></span><br><span class="line"><span class="comment">// 2. ptr的类型 *int</span></span><br><span class="line"><span class="comment">// 3. ptr本身的值&amp;num</span></span><br><span class="line"><span class="keyword">var</span> ptr *<span class="keyword">int</span> = &amp;num</span><br><span class="line">fmt.Printf(<span class="string">"prt=%v\n"</span>, ptr)</span><br><span class="line">fmt.Printf(<span class="string">"ptr的地址=%v\n"</span>, &amp;ptr)</span><br><span class="line">fmt.Printf(<span class="string">"ptr指向的值 =%v"</span>, *ptr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://img-blog.csdnimg.cn/20200302200210228.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200302200323311.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="关于指针的一些知识点举例"><a href="#关于指针的一些知识点举例" class="headerlink" title="关于指针的一些知识点举例"></a>关于指针的一些知识点举例</h3><p>不能使用非地址形式的变量定义指针<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">int</span> = <span class="number">300</span></span><br><span class="line"><span class="keyword">var</span> ptr *<span class="keyword">int</span> = a</span><br><span class="line">fmt.Println(ptr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://img-blog.csdnimg.cn/20200302200615696.png" alt="在这里插入图片描述"></p><p>类型不匹配<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">int</span> = <span class="number">300</span></span><br><span class="line"><span class="keyword">var</span>ptr *<span class="keyword">float32</span> = &amp;a</span><br><span class="line">fmt.Println(ptr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://img-blog.csdnimg.cn/20200302200824536.png" alt="在这里插入图片描述"><br>指针转换<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">int</span> = <span class="number">300</span></span><br><span class="line"><span class="keyword">var</span> b <span class="keyword">int</span> = <span class="number">400</span></span><br><span class="line"><span class="keyword">var</span> ptr *<span class="keyword">int</span> = &amp;a</span><br><span class="line">*ptr = <span class="number">100</span></span><br><span class="line">ptr = &amp;b</span><br><span class="line">*ptr = <span class="number">200</span></span><br><span class="line">fmt.Printf(<span class="string">"a=%d, b=%d, *ptr=%d"</span>, a,b,*ptr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>a=100, b=200, *ptr=200</code></p><h3 id="指针的使用细节"><a href="#指针的使用细节" class="headerlink" title="指针的使用细节"></a>指针的使用细节</h3><ul><li>值类型，都有对应的指针类型，形式为<code>*</code>数据类型，比如<code>int</code>的对应的指针就是<code>*int</code>,<code>float32</code>对应的指针类型就是<code>*float32</code>,依次类推。</li><li>值类型包括：基本数据类型<code>int</code>系列,<code>float</code>系列,<code>bool</code>,<code>string</code>、数组和结构体<code>struct</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;关于Golang语言的指针与内存讲解&quot;&gt;&lt;a href=&quot;#关于Golang语言的指针与内存讲解&quot; class=&quot;headerlink&quot; title=&quot;关于Golang语言的指针与内存讲解&quot;&gt;&lt;/a&gt;关于Golang语言的指针与内存讲解&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="Golang" scheme="https://plutoacharon.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://plutoacharon.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Python算法学习: 竞码编程-蓝桥杯模拟赛3题解</title>
    <link href="https://plutoacharon.github.io/2020/03/07/Python%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E7%AB%9E%E7%A0%81%E7%BC%96%E7%A8%8B-%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%A8%A1%E6%8B%9F%E8%B5%9B3%E9%A2%98%E8%A7%A3/"/>
    <id>https://plutoacharon.github.io/2020/03/07/Python算法学习-竞码编程-蓝桥杯模拟赛3题解/</id>
    <published>2020-03-07T02:03:10.000Z</published>
    <updated>2020-03-07T02:03:36.326Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="文章目录">TOC</a></p><h2 id="A-试题A：生存还是毁灭-这是一个问题-7’"><a href="#A-试题A：生存还是毁灭-这是一个问题-7’" class="headerlink" title="A. 试题A：生存还是毁灭,这是一个问题 7’"></a>A. 试题A：生存还是毁灭,这是一个问题 7’</h2><p>描述<br>对于给定的文章，求出出现频率最高的字母。</p><p>对于字母的出现频率，我们定义为：该字母在整个文章中出现的次数。</p><p>例如：“To be or not to be, that is the question!”</p><p>出现频率最高的字母是：t,总共出现了77次。</p><p>对于以下莎士比亚的《哈姆雷特》经典片段，你能帮JM找到出现频率最高的字母出现的次数吗？</p><p>输出出现频率最高的字母出现的次数。</p><p>注意：字母<strong>不区分大小写。</strong></p><p>思路:</p><pre><code>这里我将a-z A-Z的ascii 编码作为筛选点, 将所有的字母传入新列表然后寻找</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">''' To be, or not to be: that is the question,</span></span><br><span class="line"><span class="string">Whether it's nobler in the mind to suffer</span></span><br><span class="line"><span class="string">The slings and arrows of outrageous fortune,</span></span><br><span class="line"><span class="string">Or to take arms against a sea of troubles,</span></span><br><span class="line"><span class="string">And by opposing end them. To die,to sleep;</span></span><br><span class="line"><span class="string">No more; and by a sleep to say we end</span></span><br><span class="line"><span class="string">The heartache, and the thousand natural shocks</span></span><br><span class="line"><span class="string">That flesh is heir to, it's a consummation</span></span><br><span class="line"><span class="string">Devoutly to be wished. To die, to sleep.</span></span><br><span class="line"><span class="string">To sleep, perchance to dream: ay, there's the rub;</span></span><br><span class="line"><span class="string">For in that sleep of death what dreams may come</span></span><br><span class="line"><span class="string">When we have shuffled off this mortal coil,</span></span><br><span class="line"><span class="string">Must give us pause. There's the respect</span></span><br><span class="line"><span class="string">That makes calamity of so long life;</span></span><br><span class="line"><span class="string">For who would bear the whips and scorns of time,</span></span><br><span class="line"><span class="string">The oppressor's wrong, the proud man's contumely,</span></span><br><span class="line"><span class="string">The pangs of despised love, the law's delay,</span></span><br><span class="line"><span class="string">The insolence of office, and the spurns</span></span><br><span class="line"><span class="string">That patient merit of the unworthy takes,</span></span><br><span class="line"><span class="string">When he himself might his quietus make</span></span><br><span class="line"><span class="string">With a bare bodkin? Who would fardels bear,</span></span><br><span class="line"><span class="string">To grunt and sweat under a weary life,</span></span><br><span class="line"><span class="string">But that the dread of something after death,</span></span><br><span class="line"><span class="string">The undiscovered country from whose bourn</span></span><br><span class="line"><span class="string">No traveller returns, puzzles the will,</span></span><br><span class="line"><span class="string">And makes us rather bear those ills we have</span></span><br><span class="line"><span class="string">Than fly to others that we know not of?</span></span><br><span class="line"><span class="string">Thus conscience does make cowards of us all,</span></span><br><span class="line"><span class="string">And thus the native hue of resolution</span></span><br><span class="line"><span class="string">Is sicklied or with the pale cast of thought,</span></span><br><span class="line"><span class="string">And enterprises of great pith and moment</span></span><br><span class="line"><span class="string">With this regard their currents turn awry</span></span><br><span class="line"><span class="string">And lose the name of action.'''</span></span><br><span class="line">strq = <span class="string">""</span></span><br><span class="line">tmp = <span class="number">0</span></span><br><span class="line">ans = <span class="number">0</span></span><br><span class="line"><span class="comment"># 97 122 65 90</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str:</span><br><span class="line">    <span class="keyword">if</span> <span class="number">65</span>&lt;=ord(i)&lt;=<span class="number">90</span> <span class="keyword">or</span> <span class="number">97</span>&lt;=ord(i)&lt;=<span class="number">122</span>:</span><br><span class="line">        strq += i.lower()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> strq:</span><br><span class="line">    tmp = strq.count(i)</span><br><span class="line">    <span class="keyword">if</span> tmp&gt;ans:</span><br><span class="line">        ans = tmp</span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure><h2 id="B-试题B：小小神枪手-开局98K-8’"><a href="#B-试题B：小小神枪手-开局98K-8’" class="headerlink" title="B. 试题B：小小神枪手 开局98K 8’"></a>B. 试题B：小小神枪手 开局98K 8’</h2><p>描述<br>JM是一个吃鸡玩家，开局98K，人物描边大师。</p><p>已知JM的初始射击命中率为75\%75%。如果JM一击未中，则会由于种种原因(心理压力)导致JM的命中率在上一枪的命中率基础上，减低10\%10%。</p><p>例如：第一枪的命中率为75\%75%，则第二枪的命中率为75\% <em> 90\%75%∗90%，第三枪的命中率为75\% </em> 90\% * 90\%75%∗90%∗90%，以此类推。</p><p>当然，当命中率低于50\%50%的时候，JM则会放弃射击。</p><p>现在，JM想知道，他击中敌人的期望次数是多少？ 保留66位小数。</p><p>注意：</p><p>1、射击命中则停止射击<br>2、放弃射击则不统计次数。</p><p>思路:<br><img src="https://img-blog.csdnimg.cn/20200301142842132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>    这里就是很简单的数学期望问题<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n1 = <span class="number">0.75</span></span><br><span class="line">n2 = <span class="number">0.675000</span></span><br><span class="line">n3 = <span class="number">0.607500</span></span><br><span class="line">n4 = <span class="number">0.546750</span></span><br><span class="line">ans = n1 + <span class="number">2</span>*((<span class="number">1</span>-n1)*n2) + <span class="number">3</span>*((<span class="number">1</span>-n1)*(<span class="number">1</span>-n2)*n3) + <span class="number">4</span>*((<span class="number">1</span>-n1)*(<span class="number">1</span>-n2)*(<span class="number">1</span>-n3)*n4)</span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure></p><h2 id="C-试题C：关云长单刀会金莲，贾宝玉三打白骨精-10’"><a href="#C-试题C：关云长单刀会金莲，贾宝玉三打白骨精-10’" class="headerlink" title="C. 试题C：关云长单刀会金莲，贾宝玉三打白骨精 10’"></a>C. 试题C：关云长单刀会金莲，贾宝玉三打白骨精 10’</h2><p>描述<br>三国在国，治国，兴国，安国，丧国。 </p><p>水浒在气，勇气，义气，豪气，霸气。 </p><p>红楼在情，亲情，爱情，宦情，民情。 </p><p>西游在趣，情趣，游曲，野趣，妖趣。</p><p>由于四大名著的魅力实在是太大了，JM决定把整个3月空出来，再次品味一下这四大名著。</p><p>JM 决定在3月的31天中挑出连续的4天学习《水浒传》，连续的3天看《西游记》，连续的5天看《三国演义》，连续的3天看《红楼梦》。注意：同一天不可能看两本名著。</p><p>现在，JM同学想知道，他有多少种时间安排方法，能够满足他学习的需求。</p><p>例如：</p><p>第1-5天看《三国演义》，第6-8天看《西游记》，第9-11天看《红楼梦》，第12-15天看《水浒传》，这是一种合法的方案<br>第2-5天看《水浒传》，第10-14天看《三国演义》，第17-19天看《西游记》，第29-31天看《红楼梦》，这也是一种合法的方案。</p><p>思路:</p><pre><code>我们通过枚举每一个名著的开始阅读时间，然后判断这种可能方案，满不满足要求。也就是每一本名著读书的那天，不能读其他的。我们可以用一个变量 vis，记录每一天是否已经读过了</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">我们通过枚举每一个名著的开始阅读时间，然后判断这种可能方案，满不满足要求。也就是每一本名著读书的那天，不能读其他的。</span></span><br><span class="line"><span class="string">我们可以用一个变量 vis，记录每一天是否已经读过了</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_True</span><span class="params">(a,b,c,d)</span>:</span></span><br><span class="line">    vis = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">32</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        vis[a+i] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">if</span> vis[b+i] != <span class="number">1</span>:</span><br><span class="line">            vis[b+i] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        <span class="keyword">if</span> vis[c + i] != <span class="number">1</span>:</span><br><span class="line">            vis[c + i] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">if</span> vis[d + i] != <span class="number">1</span>:</span><br><span class="line">            vis[d + i] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># a = 《水浒传》 4天</span></span><br><span class="line">    <span class="comment"># b = 《西游记》 3天</span></span><br><span class="line">    <span class="comment"># c = 《三国演义》 5天</span></span><br><span class="line">    <span class="comment"># d = 《红楼梦》 3天</span></span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">29</span>): <span class="comment"># 第28天为最晚读书日期</span></span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">30</span>):<span class="comment"># 第29天为最晚读书日期</span></span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">28</span>):<span class="comment"># 第27天为最晚读书日期</span></span><br><span class="line">                <span class="keyword">for</span> d <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">30</span>):<span class="comment"># 第28天为最晚读书日期</span></span><br><span class="line">                    <span class="keyword">if</span> is_True(a,b,c,d):</span><br><span class="line">                        ans += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    print(ans)</span><br></pre></td></tr></table></figure><h2 id="D-试题D：抽刀断水水更流，举杯销愁愁更愁-10’"><a href="#D-试题D：抽刀断水水更流，举杯销愁愁更愁-10’" class="headerlink" title="D. 试题D：抽刀断水水更流，举杯销愁愁更愁 10’"></a>D. 试题D：抽刀断水水更流，举杯销愁愁更愁 10’</h2><p>忧郁的JM，借酒消愁。略微喝醉的他，和下酒花生聊起了天。</p><p>JM：“你知道质数是什么吗？”</p><p>花生：“……”</p><p>JM：“质数是指在大于11的自然数中，除了11和它本身以外不再有其他因数的自然数。”</p><p>花生：“……”</p><p>JM：“现在我有一个质数集合{3, 5, 7, 11, 13, 19, 23, 29, 31, 37, 41, 53, 59, 61, 67, 71, 97, 101, 127, 197, 211, 431}3,5,7,11,13,19,23,29,31,37,41,53,59,61,67,71,97,101,127,197,211,431，你可以从中挑出任意多个(0-12个)不同的数出来构成一个新数（取出数的和）”</p><p>JM：“构成的新数从小到大依次为：0, 3, 5, 7, 8, 10, 11, 12, 13…，0,3,5,7,8,10,11,12,13…，你知道[0, 1694][0,1694]中有多少个数是没法构成的吗？”<br>花生：”……“</p><p>JM：“例如：1，2，4…1，2，4…均是不能够从质数集合中挑数构成”</p><p>你来帮帮花生吧~</p><p>思路:</p><pre><code>这道题乍一看很简单,但是写代码的时候思路总是理不清楚上网查了一下发现这道题可以用二进制枚举的方法总共 22 个数，选择其中的 0 -12 个数，加上来组成一个新数。我们可以用二进制枚举，对于 22 个数，每一个数，只有拿或不拿两种情况，也就是 0 或者 1。所以总共有 2 ^ 22 约等于 4e6。不会超时。因为我们用二进制枚举，每一位对应这个数要不要取，如果取，那就累和。还要注意，最后只能取 12 个，所以我们要判断，这种取法中 1 的个数，如果是 &gt;12 ，那这种方案不成立。然后算出所有情况的数，用 set 统计（可能有重复的，去重）。最后答案是问，无法构成的个数，因此答案是 ： 总数（1695） - set 中的数（可以构成了这么多数）</code></pre><p>具体可以参考我的这篇博客:<a href="https://blog.csdn.net/qq_43442524/article/details/104589224" target="_blank" rel="noopener">Python算法学习:全排列的回溯实现与二进制枚举</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">nums = [<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">19</span>,<span class="number">23</span>,<span class="number">29</span>,<span class="number">31</span>,<span class="number">37</span>,<span class="number">41</span>,<span class="number">53</span>,<span class="number">59</span>,<span class="number">61</span>,<span class="number">67</span>,<span class="number">71</span>,<span class="number">97</span>,<span class="number">101</span>,<span class="number">127</span>,<span class="number">197</span>,<span class="number">211</span>,<span class="number">431</span>]</span><br><span class="line">ans = [] <span class="comment">#存放所有答案</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>&lt;&lt;<span class="number">22</span>): <span class="comment"># 2^22-1种情况(这里是取0或者取22个数的全部可能情况)</span></span><br><span class="line">    cnt = <span class="number">0</span> <span class="comment"># 计数 控制取数不超过12</span></span><br><span class="line">    res = <span class="number">0</span> <span class="comment"># 结果</span></span><br><span class="line">    tmp = i</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">22</span>): <span class="comment"># 查看22位中都有哪一位放了数字,即是1</span></span><br><span class="line">        <span class="keyword">if</span> (tmp &gt;&gt; j) &amp; <span class="number">1</span>: <span class="comment"># 如果第j位是1,则符合</span></span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">            res += nums[j]</span><br><span class="line">        <span class="keyword">if</span> cnt &lt;= <span class="number">12</span>:    <span class="comment"># 不超过12位</span></span><br><span class="line">            ans.append(res)</span><br><span class="line">ans = set(ans)         <span class="comment"># 使用集合的特性,去重</span></span><br><span class="line">cnt = <span class="number">1695</span></span><br><span class="line">print(ans)</span><br><span class="line">print(cnt - len(ans))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;文章目录&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;A-试题A：生存还是毁灭-这是一个问题-7’&quot;&gt;&lt;a href=&quot;#A-试题A：生存还是毁灭-这是一个问题-7’&quot; class=&quot;headerlink&quot; title=&quot;A. 试题A：生存还是毁灭,这是一
      
    
    </summary>
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/categories/Python%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/tags/Python%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Python算法学习:全排列的回溯实现与二进制枚举</title>
    <link href="https://plutoacharon.github.io/2020/03/07/Python%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E5%85%A8%E6%8E%92%E5%88%97%E7%9A%84%E5%9B%9E%E6%BA%AF%E5%AE%9E%E7%8E%B0%E4%B8%8E%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%9E%9A%E4%B8%BE/"/>
    <id>https://plutoacharon.github.io/2020/03/07/Python算法学习-全排列的回溯实现与二进制枚举/</id>
    <published>2020-03-07T02:01:51.000Z</published>
    <updated>2020-03-07T02:02:11.422Z</updated>
    
    <content type="html"><![CDATA[<h2 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h2><h3 id="LeetCode-46-全排列"><a href="#LeetCode-46-全排列" class="headerlink" title="LeetCode 46. 全排列"></a>LeetCode 46. 全排列</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">给定一个没有重复数字的序列，返回其所有可能的全排列。</span><br><span class="line"></span><br><span class="line">示例:</span><br><span class="line"></span><br><span class="line">输入: [1,2,3]</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">  [1,2,3],</span><br><span class="line">  [1,3,2],</span><br><span class="line">  [2,1,3],</span><br><span class="line">  [2,3,1],</span><br><span class="line">  [3,1,2],</span><br><span class="line">  [3,2,1]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>方法1:使用库函数<code>itertools.permutations</code><br><a href="https://www.docs4dev.com/docs/zh/python/3.7.2rc1/all/library-itertools.html" target="_blank" rel="noopener">Python 中文文档3.7.2rc1itertools</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法一</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">输入:</span></span><br><span class="line"><span class="string">1 2 3</span></span><br><span class="line"><span class="string">输出:</span></span><br><span class="line"><span class="string">(1, 2, 3)</span></span><br><span class="line"><span class="string">(1, 3, 2)</span></span><br><span class="line"><span class="string">(2, 1, 3)</span></span><br><span class="line"><span class="string">(2, 3, 1)</span></span><br><span class="line"><span class="string">(3, 1, 2)</span></span><br><span class="line"><span class="string">(3, 2, 1)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line">n = list(map(int, input().split()))</span><br><span class="line">list = list(itertools.permutations(n))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(list)):</span><br><span class="line">    print(list[i])</span><br></pre></td></tr></table></figure><p>方法二:回溯<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">res = []</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backtrack</span><span class="params">(nums, tmp)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">        res.append(tmp)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">        backtrack(nums[:i] + nums[i+<span class="number">1</span>:], tmp + [nums[i]])</span><br><span class="line">backtrack(nums, [])</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure></p><p>回溯算法框架:</p><p>解决一个回溯问题，实际上就是一个决策树的遍历过程。你只需要思考 3 个问题：</p><p>1、路径：也就是已经做出的选择。</p><p>2、选择列表：也就是你当前可以做的选择。</p><p>3、结束条件：也就是到达决策树底层，无法再做选择的条件。</p><p>代码方面，回溯算法的框架：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">result = []</span><br><span class="line">def backtrack(路径, 选择列表):</span><br><span class="line">    if 满足结束条件:</span><br><span class="line">        result.add(路径)</span><br><span class="line">        return</span><br><span class="line">    </span><br><span class="line">    for 选择 in 选择列表:</span><br><span class="line">        做选择</span><br><span class="line">        backtrack(路径, 选择列表)</span><br><span class="line">        撤销选择</span><br></pre></td></tr></table></figure></p><p>其核心就是 for 循环里面的递归，在递归调用之前「做选择」，在递归调用之后「撤销选择」<br><img src="https://img-blog.csdnimg.cn/20200301122759971.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="二进制枚举"><a href="#二进制枚举" class="headerlink" title="二进制枚举"></a>二进制枚举</h2><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>先给出子集的定义:子集是一个数学概念：如果集合A的任意一个元素都是集合B的元素，那么集合A称为集合B的子集。</p><h4 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h4><p>在写程序的时候，有时候我们可能需要暴力枚举出所有的情况，这时可以考虑通过二进制来枚举子集来尝试解决问题。</p><h4 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h4><p>假设我们现在有5个小球，上面分别标号了0,1,2,3,4代表这些小球的权值,现在要像你求出这些小球的权值可以组成的所有情况。</p><p>假设我们现在有5个小球，上面分别标号了0,1,2,3,4代表这些小球的权值,现在要像你求出这些小球的权值可以组成的所有情况。</p><p>我们用二进制的思维来考虑这个问题，因为有5个小球，所以我们用5个比特位来分别标记小球存在还是不存在，对于这样一种情况，比如我们现在要选择3个小球，分别是0,3,4号小球，那么我们用二进制1表是当前的小球存在，用0表示当前小球不存在</p><table><thead><tr><th>二进制下标</th><th>4</th><th>3</th><th>2</th><th>1</th><th>0</th></tr></thead><tbody><tr><td>二进制</td><td>1</td><td>1</td><td>0</td><td>0</td><td>1</td></tr></tbody></table><p>小球状态|    存在|    存在|    不存在    |不存在|    存在|</p><p>我们可以用5个比特位来表示这种情况，如果小球全部选择的话那么二进制表示就是<code>11111</code>,二进制的<code>11111</code>转化为十进制数字就是31，这个数字正好就是<code>2^5 -1</code>，那么我们可以用从<code>0~(2^5−1)</code>这些数表示完所有的选取状态(因为这个范围内的二进制数情况正好包括了这些选取状况).</p><p>所以我们遍历每一个集合：</p><p><code>for i in range(1&lt;&lt;n):</code></p><p>设s = 1（二进制为00001）代表我们选0位置上的数值；</p><p><strong>那么我们如何找到每个位置上的数值呢？</strong></p><p>我们遍历的是二进制的十进制表示，我们当然可以转化为二进制再枚举每一位，但是，这很麻烦；</p><p>一个很巧妙的方式就是利用位运算。</p><pre><code>1&lt;&lt;0=1(0);1&lt;&lt;1=2(10);1&lt;&lt;2=4(100);1&lt;&lt;3=8(1000);1&lt;&lt;4=16(10000);...1&lt;&lt;7=128(10000000);...</code></pre><p>看出来了吧！我们只需要将n&amp;(1&lt;&lt;i)我们便可以得到每一位是不是1 （1&lt;&lt; i 除了那一位，剩余的都是0，所以我们就可以得到那一位是不是1）</p><h4 id="按位与运算符（-amp-）"><a href="#按位与运算符（-amp-）" class="headerlink" title="按位与运算符（&amp;）"></a>按位与运算符（&amp;）</h4><p>参加运算的两个数据，按二进制位进行“与”运算。</p><p>运算规则：0&amp;0=0;  0&amp;1=0;   1&amp;0=0;    1&amp;1=1;</p><pre><code>即：两位同时为“1”，结果才为“1”，否则为0</code></pre><p>例如：3&amp;5  即 0000 0011&amp; 0000 0101 = 00000001  因此，3&amp;5的值得1。</p><h4 id="左移运算（-lt-lt-）"><a href="#左移运算（-lt-lt-）" class="headerlink" title="左移运算（&lt;&lt;）"></a>左移运算（&lt;&lt;）</h4><p> a &lt;&lt; b就表示把a转为二进制后左移b位（在后面添b个0）。例如100的二进制为1100100，而110010000转成十进制是400，那么100 &lt;&lt; 2 = 400。<br> 可以看出，a &lt;&lt; b的值实际上就是a乘以2的b次方，因为在二进制数后添一个0就相当于该数乘以2(这样做要求保证高位的1不被移出)。</p><h3 id="题目举例"><a href="#题目举例" class="headerlink" title="题目举例:"></a>题目举例:</h3><p>忧郁的JM，借酒消愁。略微喝醉的他，和下酒花生聊起了天。</p><p>JM：“你知道质数是什么吗？”</p><p>花生：“……”</p><p>JM：“质数是指在大于11的自然数中，除了11和它本身以外不再有其他因数的自然数。”</p><p>花生：“……”</p><p>JM：“现在我有一个质数集合{3, 5, 7, 11, 13, 19, 23, 29, 31, 37, 41, 53, 59, 61, 67, 71, 97, 101, 127, 197, 211, 431}3,5,7,11,13,19,23,29,31,37,41,53,59,61,67,71,97,101,127,197,211,431，你可以从中挑出任意多个(0-12个)不同的数出来构成一个新数（取出数的和）”</p><p>JM：“构成的新数从小到大依次为：0, 3, 5, 7, 8, 10, 11, 12, 13…，0,3,5,7,8,10,11,12,13…，你知道[0, 1694][0,1694]中有多少个数是没法构成的吗？”<br>花生：”……“</p><p>JM：“例如：1，2，4…1，2，4…均是不能够从质数集合中挑数构成”</p><p>你来帮帮花生吧~</p><p>思路:</p><pre><code>总共 22 个数，选择其中的 0 -12 个数，加上来组成一个新数。我们可以用二进制枚举，对于 22 个数，每一个数，只有拿或不拿两种情况，也就是 0 或者 1。所以总共有 2 ^ 22 约等于 4e6。不会超时。因为我们用二进制枚举，每一位对应这个数要不要取，如果取，那就累和。还要注意，最后只能取 12 个，所以我们要判断，这种取法中 1 的个数，如果是 &gt;12 ，那这种方案不成立。然后算出所有情况的数，用 set 统计（可能有重复的，去重）。最后答案是问，无法构成的个数，因此答案是 ： 总数（1695） - set 中的数（可以构成了这么多数）</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">nums = [<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">19</span>,<span class="number">23</span>,<span class="number">29</span>,<span class="number">31</span>,<span class="number">37</span>,<span class="number">41</span>,<span class="number">53</span>,<span class="number">59</span>,<span class="number">61</span>,<span class="number">67</span>,<span class="number">71</span>,<span class="number">97</span>,<span class="number">101</span>,<span class="number">127</span>,<span class="number">197</span>,<span class="number">211</span>,<span class="number">431</span>]</span><br><span class="line">ans = [] <span class="comment">#存放所有答案</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>&lt;&lt;<span class="number">22</span>): <span class="comment"># 2^22-1种情况(这里是取0或者取22个数的全部可能情况)</span></span><br><span class="line">    cnt = <span class="number">0</span> <span class="comment"># 计数 控制取数不超过12</span></span><br><span class="line">    res = <span class="number">0</span> <span class="comment"># 结果</span></span><br><span class="line">    tmp = i</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">22</span>): <span class="comment"># 查看22位中都有哪一位放了数字,即是1</span></span><br><span class="line">        <span class="keyword">if</span> (tmp &gt;&gt; j) &amp; <span class="number">1</span>: <span class="comment"># 如果第j位是1,则符合</span></span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">            res += nums[j]</span><br><span class="line">        <span class="keyword">if</span> cnt &lt;= <span class="number">12</span>:    <span class="comment"># 不超过12位</span></span><br><span class="line">            ans.append(res)</span><br><span class="line">ans = set(ans)         <span class="comment"># 使用集合的特性,去重</span></span><br><span class="line">cnt = <span class="number">1695</span></span><br><span class="line">print(ans)</span><br><span class="line">print(cnt - len(ans))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;全排列&quot;&gt;&lt;a href=&quot;#全排列&quot; class=&quot;headerlink&quot; title=&quot;全排列&quot;&gt;&lt;/a&gt;全排列&lt;/h2&gt;&lt;h3 id=&quot;LeetCode-46-全排列&quot;&gt;&lt;a href=&quot;#LeetCode-46-全排列&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/categories/Python%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/tags/Python%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Git上传文件时报错:error: failed to push some refs to &#39;https://github.com/XXX&#39;</title>
    <link href="https://plutoacharon.github.io/2020/03/07/Git%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E6%97%B6%E6%8A%A5%E9%94%99-error-failed-to-push-some-refs-to-https-github-com-XXX/"/>
    <id>https://plutoacharon.github.io/2020/03/07/Git上传文件时报错-error-failed-to-push-some-refs-to-https-github-com-XXX/</id>
    <published>2020-03-07T02:01:01.000Z</published>
    <updated>2020-03-07T02:01:16.950Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200227122341464.png" alt="在这里插入图片描述"></p><p>报错信息:</p><pre><code>$ git push -u origin masterTo https://github.com/PlutoaCharon/LanQiaoCode_python.git ! [rejected]        master -&gt; master (non-fast-forward)error: failed to push some refs to &apos;https://github.com/PlutoaCharon/LanQiaoCode_python.git&apos;hint: Updates were rejected because the tip of your current branch is behindhint: its remote counterpart. Integrate the remote changes (e.g.hint: &apos;git pull ...&apos;) before pushing again.hint: See the &apos;Note about fast-forwards&apos; in &apos;git push --help&apos; for details.</code></pre><p>当我在进行 <code>git push -u origin master</code>向GitHub上上传文件夹时报错。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p><img src="https://img-blog.csdnimg.cn/20200227122519476.png" alt="在这里插入图片描述"><br>出现这个问题是你的本地库中没有README.MD 文件，而我在创建仓库的时候先自动创建了README文件。</p><p>解决方法也很简单<br>输入<code>git pull --rebase origin master</code><br>就能把github中的MD文件拉下来了。。<br>在输入 <code>git push -u origin master</code> 就可以成功上传代码了。<br><img src="https://img-blog.csdnimg.cn/20200227122706303.png" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200227122341464.png&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;报错信息:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git push -u origin master
To 
      
    
    </summary>
    
      <category term="GitHub" scheme="https://plutoacharon.github.io/categories/GitHub/"/>
    
    
      <category term="GitHub" scheme="https://plutoacharon.github.io/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes(K8s)入门到实践(二)----Kubernetes的基本概念和术语</title>
    <link href="https://plutoacharon.github.io/2020/03/07/Kubernetes-K8s-%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5-%E4%BA%8C-Kubernetes%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E6%9C%AF%E8%AF%AD/"/>
    <id>https://plutoacharon.github.io/2020/03/07/Kubernetes-K8s-入门到实践-二-Kubernetes的基本概念和术语/</id>
    <published>2020-03-07T02:00:25.000Z</published>
    <updated>2020-03-07T02:00:42.801Z</updated>
    
    <content type="html"><![CDATA[<p>上一节详细描述了Kubernetes的历史和发展过程。这一节就重点描述一下Kubernetes中的大部分概念如Node、Pod、Replication  Controller、Service等。</p><p><strong>Kubernetes架构图:</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2t1YmVybmV0ZXMva3ViZXJuZXRlcy9yZWxlYXNlLTEuMi9kb2NzL2Rlc2lnbi9hcmNoaXRlY3R1cmUucG5n?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><h3 id="1-1-Master"><a href="#1-1-Master" class="headerlink" title="1.1 Master"></a>1.1 Master</h3><p>Kubernetes里的<code>Master</code>指的是集群控制节点，在每个Kubernetes集群里都需要有一个Master来负责整个集群的管理和控制，基本上Kubernetes的所有控制命令都发给它，它负责具体的执行过程，我们后面执行的所有命令基本都是在Master上运行的。</p><p>Master通常会占据一个独立的服务器（高可用部署建议用3台服务器），主要原因是它太重要了，是整个集群的“首脑”，如果它宕机或者不可用，那么对集群内容器应用的管理都将失效。</p><p>在Master上运行着以下关键进程。</p><ul><li>Kubernetes  API  Server（kube-apiserver）：提供了HTTP  Rest接口的关键服务进程，是Kubernetes里所有资源的增、删、改、查等操作的唯一入口，也是集群控制的入口进程。</li><li>Kubernetes  Controller  Manager（kube-controller-manager）：Kubernetes里所有资源对象的自动化控制中心，可以将其理解为资源对象的“大总管”。</li><li>Kubernetes  Scheduler（kube-scheduler）：负责资源调度（Pod调度）的进程，相当于公交公司的“调度室”。</li><li>在Master上通常还需要部署etcd服务，因为Kubernetes里的所有资源对象的数据都被保存在etcd中。<h3 id="1-2-Node"><a href="#1-2-Node" class="headerlink" title="1.2 Node"></a>1.2 Node</h3>除了Master，Kubernetes集群中的其他机器被称为<code>Node</code></li></ul><p>在较早的版本中也被称为Minion。与Master一样，Node可以是一台物理主机，也可以是一台虚拟机。Node是Kubernetes集群中<br>的工作负载节点，每个Node都会被Master分配一些工作负载（Docker容器），当某个Node宕机时，其上的工作负载会被Master自动转移到其他节点上。</p><p>在每个Node上都运行着以下关键进程：</p><ul><li>kubelet：负责Pod对应的容器的创建、启停等任务，同时与Master密切协作，实现集群管理的基本功能。</li><li>kube-proxy：实现Kubernetes  Service的通信与负载均衡机制的重要组件。</li><li>Docker  Engine（docker）：Docker引擎，负责本机的容器创建和管理工作。</li></ul><p>Node可以在运行期间动态增加到Kubernetes集群中，前提是在这个节点上已经正确安装、配置和启动了上述关键进程，在默认情况下kubelet会向Master注册自己，这也是Kubernetes推荐的Node管理方式。</p><p>一旦Node被纳入集群管理范围，kubelet进程就会定时向Master汇报自身的情报，例如操作系统、Docker版本、机器的CPU和内存情况，以及当前有哪些Pod在运行等，这样Master就可以获知每个Node的资源使用情况，并实现高效均衡的资源调度策略。</p><p>而某个Node在超过指定时间不上报信息时，会被Master判定为“失联”，Node的状态被标记为不可用（Not Ready），随后Master会触发“工作负载大转移”的自动流程。</p><h3 id="1-3-Pod"><a href="#1-3-Pod" class="headerlink" title="1.3 Pod"></a>1.3 Pod</h3><p>Pod是Kubernetes最重要的基本概念，我们看到每个Pod都有一个特殊的被称为“根容器”的Pause容器。</p><p>Pause容器对应的镜像属于Kubernetes平台的一部分，除了Pause容器，每个Pod还包含一个或多个紧密相关的用户业务容器。</p><p><img src="https://img-blog.csdnimg.cn/20200225142409363.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="为什么设计Pod？"><a href="#为什么设计Pod？" class="headerlink" title="为什么设计Pod？"></a>为什么设计Pod？</h4><p>原因一：在一组容器作为一个单元的情况下，我们难以简单地对“整体”进行判断及有效地行动。比如，一个容器死亡了，此时算是整体死亡么？是N/M的死亡率么？引入业务无关并且不易死亡的Pause容器作为Pod的根容器，以它的状态代表整个容器组的状态，就简单、巧妙地解决了这个难题。</p><p>原因二：Pod里的多个业务容器共享Pause容器的IP，共享Pause容器挂接的Volume，这样既简化了密切关联的业务容器之间的通信问题，也很好地解决了它们之间的文件共享问题。</p><p>Kubernetes为每个Pod都分配了唯一的IP地址，称之为<code>Pod  IP</code>，一个Pod里的多个容器共享<code>Pod  IP</code>地址。Kubernetes要求底层网络支持集群内任意两个Pod之间的TCP/IP直接通信，这通常采用虚拟二层网络技术来实现，例如<code>Flannel</code>、Open  vSwitch等，因此我们需要牢记一点：在Kubernetes里，一个Pod里的容器与另外主机上的Pod容器能够直接通信。</p><blockquote><p><code>Flannel</code>是CoreOS 团队针对Kubernetes 设计的一个网络规划服务，简单来说，它的功能是让集群中的不同节点主机创建的Docker 容器都具有全集群唯一的虚拟IP地址。而且它还能在这些IP 地址之间建立一个覆盖网络（Overlay Network），通过这个覆盖网络，将数据包原封不动地传递到目标容器内<br><img src="https://img-blog.csdnimg.cn/20200225144322360.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><p><code>ETCD</code> 之 <code>Flannel</code>提供说明：  &gt; 存储管理Flannel 可分配的IP 地址段资源  &gt; 监控ETCD 中每个 Pod 的实际地址，并在内存中建立维护 Pod 节点路由表</p><h4 id="不同情况下网络通信方式同一个Pod-内部通讯："><a href="#不同情况下网络通信方式同一个Pod-内部通讯：" class="headerlink" title="不同情况下网络通信方式同一个Pod 内部通讯："></a>不同情况下网络通信方式同一个Pod 内部通讯：</h4><p>同一个Pod 共享同一个网络命名空间，共享同一个Linux 协议栈Pod1 至Pod2    &gt; Pod1 与Pod2 不在同一台主机，Pod的地址是与docker0在同一个网段的，但docker0网段与宿主机网卡是两个完全不同的IP网段，并且不同Node之间的通信只能通过宿主机的物理网卡进行。</p><p>将Pod的IP和所在Node的IP关联起来，通过这个关联让Pod可以互相访问    &gt; Pod1 与Pod2 在同一台机器，由Docker0 网桥直接转发请求至Pod2，不需要经过Flannel </p><p>目前基于性能考虑，全部为iptables 维护和转发Pod 到外网：Pod 向外网发送请求，查找路由表, 转发数据包到宿主机的网卡，宿主网卡完成路由选择后，iptables执行Masquerade，把源IP 更改为宿主网卡的IP，然后向外网服务器发送请求外网访问Pod：Service<br><img src="https://img-blog.csdnimg.cn/20200225144508351.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>Pod及周边对象<br><img src="https://img-blog.csdnimg.cn/20200225145755276.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="1-4-Label"><a href="#1-4-Label" class="headerlink" title="1.4 Label"></a>1.4 Label</h3><p>Label（标签）是Kubernetes系统中另外一个核心概念。一个Label是一个key=value的键值对，其中key与value由用户自己指定。</p><p>Label可以被附加到各种资源对象上，例如Node、Pod、Service、RC等，一个资源对象可以定义任意数量的Label，同一个Label也可以被添加到任意数量的资源对象上。</p><p>Label通常在资源对象定义时确定，也可以在对象创建后动态添加或者删除。</p><p>一些常用的Label:</p><ul><li>版本标签：”release”:”stable”、”release”:”canary”。</li><li>环境标签：”environment”:”dev”、”environment”:”qa”、”environment”:”production</li><li>架构标签：”tier”:”frontend”、”tier”:”backend”、”tier”:”middleware”</li><li>分区标签：”partition”:”customerA”、”partition”:”customerB”</li><li>质量管控标签：”track”:”daily”、”track”:”weekly”</li></ul><p>Label相当于我们熟悉的“标签”。</p><p>给某个资源对象定义一个Label，就相当于给它打了一个标签，随后可以通过<code>Label  Selector（标签选择器）</code>查询和筛选拥有某些Label的资源对象，Kubernetes通过这种方式实现了类似SQL的简单又通用的对象查询机制。</p><p><code>Label Selector</code>在Kubernetes中的重要使用场景如下:</p><ul><li><code>kube-controller</code>进程通过在资源对象RC上定义的Label  Selector来筛选要监控的Pod副本数量，使Pod副本数量始终符合预期设定的全自动控制流程。</li><li><code>kube-proxy</code>进程通过Service的Label  Selector来选择对应的Pod，自动建立每个Service到对应Pod的请求转发路由表，从而实现Service的智能负载均衡机制。</li><li>通过对某些Node定义特定的Label，并且在Pod定义文件中使用NodeSelector这种标签调度策略，<code>kube-scheduler</code>进程可以实现Pod定向调度的特性。<br><img src="https://img-blog.csdnimg.cn/20200225151216891.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200225151225710.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h3 id="1-5-Replication-Controller"><a href="#1-5-Replication-Controller" class="headerlink" title="1.5 Replication Controller"></a>1.5 Replication Controller</h3><p><code>Replication Controller</code>（RC）是Kubernetes系统中的核心概念之一，简单来说，它其实定义了一个期望的场景，即声明某种Pod的副本数量在任意时刻都符合某个预期值，所以RC的定义包括如下几个部分：</p><ul><li>Pod期待的副本数量</li><li>用于筛选目标Pod的Label Selector</li><li>当Pod的副本数量小于预期数量时，用于创建新Pod的Pod模板（template）</li></ul><p>在我们定义了一个RC并将其提交到Kubernetes集群中后，Master上的<code>Controller  Manager</code>组件就得到通知，定期巡检系统中当前存活的目标Pod，并确保目标Pod实例的数量刚好等于此RC的期望值，如果有过多的Pod副本在运行，系统就会停掉一些Pod，否则系统会再自动创建一些Pod。</p><p>通过RC，Kubernetes实现了用户应用集群的高可用性，并且大大减少了系统管理员在传统IT环境中需要完成的许多手工运维工作（如主机监控脚本、应用监控脚本、故障恢复脚本等）。</p><p>在Kubernetes  1.2中，升级为另外一个新概念—<code>Replica  Set</code>，官方解释其为“下一代的RC”。<code>Replica Set</code>与RC当前的唯一区别是，<code>Replica Sets</code>支持基于集合的Label  selector（Set-based  selector），而RC只支持基于等式的Label  Selector（equality-based  selector），这使得Replica  Set的功能更强。</p><p><code>RC（Replica Set)</code>的一些特性与作用：</p><ul><li>在大多数情况下，我们通过定义一个RC实现Pod的创建及副本数量的自动控制。</li><li>在RC里包括完整的Pod定义模板。</li><li>RC通过Label Selector机制实现对Pod副本的自动控制。</li><li>通过改变RC里的Pod副本数量，可以实现Pod的扩容或缩容。</li><li>通过改变RC里Pod模板中的镜像版本，可以实现Pod的滚动升级。</li></ul><h3 id="1-6-Deployment"><a href="#1-6-Deployment" class="headerlink" title="1.6　Deployment"></a>1.6　Deployment</h3><p><code>Deployment</code>是Kubernetes在1.2版本中引入的新概念，用于更好地解决Pod的编排问题。为此，Deployment在内部使用了Replica Set来实现目的，无论从Deployment的作用与目的、YAML定义，还是从它的具体命令行操作来看，我们都可以把它看作RC的一次升级，两者的相似度超过90%。</p><p><code>Deployment</code>相对于RC的一个最大升级是我们可以随时知道当前Pod“部署”的进度。实际上由于一个Pod的创建、调度、绑定节点及在目标Node上启动对应的容器这一完整过程需要一定的时间，所以我们期待系统启动N个Pod副本的目标状态，实际上是一个连续变化的“部署过程”导致的最终状态。</p><p>Deployment的典型使用场景有以下几个：</p><ul><li>创建一个Deployment对象来生成对应的Replica Set并完成Pod副本的创建。</li><li>检查Deployment的状态来看部署动作是否完成（Pod副本数量是否达到预期的值）。</li><li>更新Deployment以创建新的Pod（比如镜像升级）。</li><li>如果当前Deployment不稳定，则回滚到一个早先的Deployment版本。</li><li>暂停Deployment以便于一次性修改多个PodTemplateSpec的配置项，之后再恢复Deployment，进行新的发布。</li><li>扩展Deployment以应对高负载。</li><li>查看Deployment的状态，以此作为发布是否成功的指标。</li><li>清理不再需要的旧版本ReplicaSets。    </li></ul><h3 id="1-7-HPA（HorizontalPodAutoScale）"><a href="#1-7-HPA（HorizontalPodAutoScale）" class="headerlink" title="1.7 HPA（HorizontalPodAutoScale）"></a>1.7 HPA（HorizontalPodAutoScale）</h3><p><code>Horizontal Pod Autoscaling</code> 仅适用于Deployment 和ReplicaSet ，在V1 版本中仅支持根据Pod 的CPU 利用率扩所容，在v1alpha 版本中，支持根据内存和用户自定义的metric 扩缩容</p><p>HPA与之前的RC、Deployment一样，也属于一种Kubernetes资源对象。通过追踪分析指定RC控制的所有目标Pod的负载变化情况，来确定是否需要有针对性地调整目标Pod的副本数量，这是HPA的实现原理。</p><h3 id="1-8-StatefulSet"><a href="#1-8-StatefulSet" class="headerlink" title="1.8 StatefulSet"></a>1.8 StatefulSet</h3><p><code>StatefulSet</code>是为了解决<code>有状态服务</code>的问题（对应Deployments 和ReplicaSets是为<code>无状态服务</code>而设计）</p><p>其应用场景包括：</p><ul><li>稳定的持久化存储，即Pod 重新调度后还是能访问到相同的持久化数据，基于PVC 来实现</li><li>稳定的网络标志，即Pod 重新调度后其PodName和HostName不变，基于Headless Service （即没有Cluster IP 的Service ）来实现</li><li>有序部署，有序扩展，即Pod 是有顺序的，在部署或者扩展的时候要依据定义的顺序依次依次进行（即从0 到N-1，在下一个Pod 运行之前所有之前的Pod 必须都是Running 和Ready 状态），基于init containers 来实现</li><li>有序收缩，有序删除（即从N-1 到0）<h3 id="1-9-Service"><a href="#1-9-Service" class="headerlink" title="1.9 Service"></a>1.9 Service</h3><code>Service</code>服务也是Kubernetes里的核心资源对象之一，Kubernetes里的每个Service其实就是我们经常提起的微服务架构中的一个微服务，之前讲解Pod、RC等资源对象其实都是为讲解Kubernetes  Service做铺垫的。</li></ul><p>Pod、RC与Service的逻辑关系图：</p><p><img src="https://img-blog.csdnimg.cn/20200225164134289.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>从图中可以看到，Kubernetes的Service定义了一个服务的访问入口地址，前端的应用（Pod）通过这个入口地址访问其背后的一组由Pod副本组成的集群实例，Service与其后端Pod副本集群之间则是通过<code>Label Selector</code>来实现无缝对接的。RC的作用实际上是保证Service的服务能力和服务质量始终符合预期标准。</p><p>Service 的相关知识非常重要也比较繁杂,这里不再过多赘述。详情请看<a href="http://docs.kubernetes.org.cn/703.html" target="_blank" rel="noopener">K8s中文社区-service讲解</a></p><h3 id="1-10-Job-Cron-Job"><a href="#1-10-Job-Cron-Job" class="headerlink" title="1.10 Job Cron Job"></a>1.10 Job Cron Job</h3><p>Job 负责批处理任务，即仅执行一次的任务，它保证批处理任务的一个或多个Pod 成功结束</p><p>Cron Job管理基于时间的Job，即：<em>在给定时间点只运行一次</em>周期性地在给定时间点运行</p><h3 id="1-11-Volume"><a href="#1-11-Volume" class="headerlink" title="1.11 Volume"></a>1.11 Volume</h3><p>Volume（存储卷）是Pod中能够被多个容器访问的共享目录。</p><p>Kubernetes的Volume概念、用途和目的与Docker的Volume比较类似，但两者不能等价。</p><p>首先，Kubernetes中的Volume被定义在Pod上，然后被一个Pod里的多个容器挂载到具体的文件目录下；其次，Kubernetes中的Volume与Pod的生命周期相同，但与容器的生命周期不相关，当容器终止或者重启时，Volume中的数据也不会丢失。最后，Kubernetes支持多种类型的Volume，例如GlusterFS、Ceph等先进的分布式文件系统。</p><h3 id="1-12-Namespace"><a href="#1-12-Namespace" class="headerlink" title="1.12 Namespace"></a>1.12 Namespace</h3><p>Namespace（命名空间）是Kubernetes系统中的另一个非常重要的概念，Namespace在很多情况下用于实现多租户的资源隔离。</p><p>Namespace通过将集群内部的资源对象“分配”到不同的Namespace中，形成逻辑上分组的不同项目、小组或用户组，便于不同的分组在共享使用整个集群的资源的同时还能被分别管理。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>上述这些组件是Kubernetes系统的核心组件，它们共同构成了Kubernetes系统的框架和计算模型。通过对它们进行灵活组合，用户就可以快速、方便地对容器集群进行配置、创建和管理。</p><p>下一节会详细记录一下搭建Kubernetes的过程。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上一节详细描述了Kubernetes的历史和发展过程。这一节就重点描述一下Kubernetes中的大部分概念如Node、Pod、Replication  Controller、Service等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Kubernetes架构图:&lt;/strong&gt;&lt;
      
    
    </summary>
    
      <category term="Kubernetes" scheme="https://plutoacharon.github.io/categories/Kubernetes/"/>
    
    
      <category term="Kubernetes" scheme="https://plutoacharon.github.io/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes(K8s)入门到实践(一)----Kubernetes入门</title>
    <link href="https://plutoacharon.github.io/2020/02/25/Kubernetes-K8s-%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5-%E4%B8%80-Kubernetes%E5%85%A5%E9%97%A8/"/>
    <id>https://plutoacharon.github.io/2020/02/25/Kubernetes-K8s-入门到实践-一-Kubernetes入门/</id>
    <published>2020-02-25T03:02:12.000Z</published>
    <updated>2020-02-25T03:04:01.320Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>作为一名网络工程的大学生，在前段时间学习了云计算和大数据的相关技术后，我迫切的想要获得更多的自动化持续交互的相关技术。目前非常火热的Kubernetes技术简称（K8s）是由谷歌开源的Docker容器集群管理系统，功能非常强大，也激起了我浓厚的学习兴趣。<br>以后我会将这一系列关于Kubernetes的技术文章和学习心得一并分享出来，供大家一块学习和交流。</p><h2 id="1-Kubernetes是什么"><a href="#1-Kubernetes是什么" class="headerlink" title="1. Kubernetes是什么"></a>1. Kubernetes是什么</h2><p>首先， 我们在学习Kubernetes之前一定要先了解一下什么是Kubernetes。</p><ul><li>第一，它是一个全新的基于容器技术的分布式架构领先方案，并且是由谷歌保密十几年之久的秘密武器-Borg的一个开源版本。</li><li>Borg是谷歌的一个久负盛名的内部使用的大规模集群管理系统，它基于容器技术，目的是实现资源管理的自<br>动化，以及跨多个数据中心的资源利用率的最大化。</li><li>然后，Kubernetes是一个开放的开发平台。与J2EE不同，它不局限于<code>任何一种语言</code>，没有限定任何编程接口，所以不论是用Java、Go、C++还是用Python编写的服务，都可以被映射为Kubernetes的Service（服务），并通过标准的TCP通信协议进行交互。</li><li>此外，Kubernetes平台对现有的编程语言、编程框架、中间件没有任何侵入性，因此现有的系统也很容易改造升级并迁移到Kubernetes平台上。</li><li>最后，Kubernetes是一个完备的分布式系统支撑平台。Kubernetes具有完备的集群管理能力，包括多层次的安全防护和准入机制、多租户应用支撑能力、透明的服务注册和服务发现机制、内建的智能负载均衡器、强大的故障发现和自我修复能力、服务滚动升级和在线扩容能力、可扩展的资源自动调度机制，以及多粒度的资源配额管理能力。</li><li>同时，Kubernetes提供了完善的管理工具，这些工具涵盖了包括开发、部署测试、运维监控在内的各个环节。因此，Kubernetes是一个全新的基于容器技术的分布式架构解决方案，并且是一个一站式的完备的分布式系统开发和支撑平台。</li></ul><h2 id="2-为什么要用Kubernetes"><a href="#2-为什么要用Kubernetes" class="headerlink" title="2. 为什么要用Kubernetes"></a>2. 为什么要用Kubernetes</h2><p>使用Kubernetes的理由很多，最重要的理由是，<code>IT行业从来都是由新技术驱动的</code>。而且，Docker这门容器化技术已经被很多公司采用，从单机走向集群已成为必然，云计算的蓬勃发展正在加速这一进程。Kubernetes作为当前被业界广泛认可和看好的基于Docker的大规模容器化分布式系统解决方案，得到了以谷歌为首的IT巨头们的大力宣传和持续推进。<br>关于Docker相关的知识可以移步<a href="https://blog.csdn.net/qq_43442524/category_9478911.html" target="_blank" rel="noopener">我的Docker学习专栏</a></p><h3 id="2-1-Kubernetes的优点"><a href="#2-1-Kubernetes的优点" class="headerlink" title="2.1 Kubernetes的优点"></a>2.1 Kubernetes的优点</h3><ul><li>可以“轻装上阵”地开发复杂系统。以前需要很多人（其中不乏技术达人）一起分工协作才能设计、实现和运维的分布式系统，在采用Kubernetes解决方案之后，只需一个精悍的小团队就能轻松应对。</li><li>全面拥抱微服务架构。微服务架构的核心是将一个巨大的单体应用分解为很多小的互相连接的微服务，一个微服务可能由多个实例副本支撑，副本的数量可以随着系统的负荷变化进行调整。</li><li>随时随地将系统整体“搬迁”到公有云上。</li><li>Kubernetes内在的服务弹性扩容机制可以让我们轻松应对突发流量。</li><li>Kubernetes系统架构超强的横向扩容能力很强<h2 id="3-Kubernetes的一些基本知识"><a href="#3-Kubernetes的一些基本知识" class="headerlink" title="3. Kubernetes的一些基本知识"></a>3. Kubernetes的一些基本知识</h2></li></ul><p>Kubernetes的架构和Borg的架构很相似。</p><p>Borg架构：</p><p><img src="https://img-blog.csdnimg.cn/20200224195618264.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>Kubernetes架构：</p><p><img src="https://img-blog.csdnimg.cn/20200224195641465.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>Service</strong>:<br>在Kubernetes中，Service是分布式集群架构的核心，一个Service对象拥有如下关键特征。</p><ul><li>拥有唯一指定的名称（比如mysql-server）。</li><li>拥有一个虚拟IP（Cluster IP、Service IP或VIP）和端口号。</li><li>能够提供某种远程服务能力。</li><li>被映射到提供这种服务能力的一组容器应用上。<br>Service的服务进程目前都基于Socket通信方式对外提供服务，比如Redis、Memcache、MySQL、Web  Server，或者是实现了某个具体业务的特定TCP  Server进程。</li></ul><p>虽然一个Service通常由多个相关的服务进程提供服务，每个服务进程都有一个独立的<code>Endpoint（IP+Port）</code>访问点，但Kubernetes能够让我们通过Service<code>（虚拟Cluster  IP  +Service  Port）</code>连接到指定的Service。有了Kubernetes内建的透明负载均衡和故障恢复机制，不管后端有多少服务进程，也不管某个服务进程是否由于发生故障而被重新部署到其他机器，都不会影响对服务的正常调用。更重要的是，这个Service本身一旦创建就不再变化，这意味着我们再也不用为Kubernetes集群中服务的IP地址变来变去的问题而头疼了。</p><p><strong>Pod</strong>:<br>容器给我们提供了强大的隔离功能，所以有必要把为Service提供服务的这组进程放入容器中进行隔离。为此，Kubernetes设计了Pod对象，将每个服务进程都包装到相应的Pod中，使其成为在Pod中运行的一个容器（Container）<br><img src="https://img-blog.csdnimg.cn/20200224200450995.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>Pod运行在一个被称为节点（Node）的环境中，这个节点既可以是物理机，也可以是一个虚拟机，通常在一个节点上运行几百个Pod；其次，在每个Pod中都运行着一个特殊的被称<code>为Pause</code>的容器，其他容器则为业务容器，这些业务容器共享Pause容器的网络栈和Volume挂载卷，因此它们之间的通信和数据交换更为高效，在设计时我们可以充分利用这一特性将一组密切相关的服务进程放入同一个Pod中；<br><code>每当启动一个pod的时候,pause容器也会随之启动</code></p><p>Kubernetes将集群中的机器划分为一个<code>Master</code>和一些<code>Node</code>。在Master上运行着集群管理相关的一组进程kube-apiserver、kube-controller-manager和kubescheduler，这些进程实现了整个集群的资源管理、Pod调度、弹性伸缩、安全控制、系统监控和纠错等管理功能，并且都是自动完成的。</p><p>Node作为集群中的工作节点，运行真正的应用程序，在Node上Kubernetes管理的最小运行单元是Pod。在Node上运行着Kubernetes的kubelet、kube-proxy服务进程，这些服务进程负责Pod的创建、启动、监控、重启、销毁，以及实现软件模式的负载均衡器。</p><p><img src="https://img-blog.csdnimg.cn/2020022420105479.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><code>Etce</code>:</p><p>etcd的官方将它定位成一个可信赖的分布式键值存储服务，它能够为整个分布式集群存储一些关键数据，协助分布式集群的正常运转<br><img src="https://img-blog.csdnimg.cn/20200224201406463.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>Raft:  读写信息的存储</p><p>WAL: 预写日志,并且定时对这些日志进行备份</p><p>Store: 实时把日志和数据持久化传入本地磁盘中</p><h2 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h2><p>知识整理于:<code>Kubernetes权威指南 第4版</code> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;作为一名网络工程的大学生，在前段时间学习了云计算和大数据的相关技术后，我迫切的想要获得更多的自动化持续交互的相关技术。目前非常火热的Kube
      
    
    </summary>
    
      <category term="Kubernetes" scheme="https://plutoacharon.github.io/categories/Kubernetes/"/>
    
    
      <category term="Kubernetes" scheme="https://plutoacharon.github.io/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Python算法学习: 蓝桥杯官方省赛真题(持续更新)</title>
    <link href="https://plutoacharon.github.io/2020/02/23/Python%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%AE%98%E6%96%B9%E7%9C%81%E8%B5%9B%E7%9C%9F%E9%A2%98-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"/>
    <id>https://plutoacharon.github.io/2020/02/23/Python算法学习-蓝桥杯官方省赛真题-持续更新/</id>
    <published>2020-02-23T12:35:41.000Z</published>
    <updated>2020-03-07T02:03:22.465Z</updated>
    
    <content type="html"><![CDATA[<p>全部代码我全部托管到我的GitHub上了,喜欢的麻烦点个关注和star吧😀</p><p><a href="https://github.com/PlutoaCharon/LanQiaoCode_python" target="_blank" rel="noopener">蓝桥杯官网VIP试题与历届真题代码Python实现与讲解</a></p><h3 id="试题-入门训练-Fibonacci数列"><a href="#试题-入门训练-Fibonacci数列" class="headerlink" title="试题 入门训练 Fibonacci数列"></a>试题 入门训练 Fibonacci数列</h3><pre><code>资源限制时间限制：1.0s   内存限制：256.0MB问题描述Fibonacci数列的递推公式为：Fn=Fn-1+Fn-2，其中F1=F2=1。当n比较大时，Fn也非常大，现在我们想知道，Fn除以10007的余数是多少。输入格式输入包含一个整数n。输出格式输出一行，包含一个整数，表示Fn除以10007的余数。说明：在本题中，答案是要求Fn除以10007的余数，因此我们只要能算出这个余数即可，而不需要先计算出Fn的准确值，再将计算的结果除以10007取余数，直接计算余数往往比先算出原数再取余简单。样例输入10样例输出55样例输入22样例输出7704数据规模与约定1 &lt;= n &lt;= 1,000,000</code></pre><p>代码示例:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">n=int(input())</span><br><span class="line">f1=f2=f3=<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">1</span> <span class="keyword">or</span> n == <span class="number">2</span>:</span><br><span class="line">    print(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">elif</span> n &gt; <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>,n+<span class="number">1</span>):</span><br><span class="line">        f3 = (f1 + f2) % <span class="number">10007</span></span><br><span class="line">        f1 = f2</span><br><span class="line">        f2 = f3</span><br><span class="line">    print(f3)</span><br></pre></td></tr></table></figure></p><h3 id="试题-入门训练-圆的面积"><a href="#试题-入门训练-圆的面积" class="headerlink" title="试题 入门训练 圆的面积"></a>试题 入门训练 圆的面积</h3><pre><code>资源限制时间限制：1.0s   内存限制：256.0MB问题描述给定圆的半径r，求圆的面积。输入格式输入包含一个整数r，表示圆的半径。输出格式输出一行，包含一个实数，四舍五入保留小数点后7位，表示圆的面积。说明：在本题中，输入是一个整数，但是输出是一个实数。对于实数输出的问题，请一定看清楚实数输出的要求，比如本题中要求保留小数点后7位，则你的程序必须严格的输出7位小数，输出过多或者过少的小数位数都是不行的，都会被认为错误。实数输出的问题如果没有特别说明，舍入都是按四舍五入进行。样例输入4样例输出50.2654825数据规模与约定1 &lt;= r &lt;= 10000。提示本题对精度要求较高，请注意π的值应该取较精确的值。你可以使用常量来表示π，比如PI=3.14159265358979323，也可以使用数学公式来求π，比如PI=atan(1.0)*4。</code></pre><p>代码详细:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r = int(input())</span><br><span class="line">PI=<span class="number">3.1415926535</span></span><br><span class="line">area = r**<span class="number">2</span> * PI</span><br><span class="line">print(<span class="string">'%.7f'</span> % area)</span><br></pre></td></tr></table></figure><h3 id="试题-入门训练-序列求和"><a href="#试题-入门训练-序列求和" class="headerlink" title="试题 入门训练 序列求和"></a>试题 入门训练 序列求和</h3><pre><code>资源限制时间限制：1.0s   内存限制：256.0MB问题描述求1+2+3+...+n的值。输入格式输入包括一个整数n。输出格式输出一行，包括一个整数，表示1+2+3+...+n的值。样例输入4样例输出10样例输入100说明：有一些试题会给出多组样例输入输出以帮助你更好的做题。一般在提交之前所有这些样例都需要测试通过才行，但这不代表这几组样例数据都正确了你的程序就是完全正确的，潜在的错误可能仍然导致你的得分较低。样例输出5050数据规模与约定1 &lt;= n &lt;= 1,000,000,000。说明：请注意这里的数据规模。本题直接的想法是直接使用一个循环来累加，然而，当数据规模很大时，这种“暴力”的方法往往会导致超时。此时你需要想想其他方法。你可以试一试，如果使用1000000000作为你的程序的输入，你的程序是不是能在规定的上面规定的时限内运行出来。本题另一个要值得注意的地方是答案的大小不在你的语言默认的整型(int)范围内，如果使用整型来保存结果，会导致结果错误。如果你使用C++或C语言而且准备使用printf输出结果，则你的格式字符串应该写成%I64d以输出long long类型的整数。</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">()</span>:</span></span><br><span class="line">    n = int(input())</span><br><span class="line">    <span class="keyword">return</span> n*(<span class="number">1</span>+n)/<span class="number">2</span> <span class="comment"># 等差数列时间短 直接使用a+b会超时</span></span><br><span class="line">s = int(sum())</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure><h3 id="试题-入门训练-A-B问题"><a href="#试题-入门训练-A-B问题" class="headerlink" title="试题 入门训练 A+B问题"></a>试题 入门训练 A+B问题</h3><pre><code>资源限制时间限制：1.0s   内存限制：256.0MB问题描述输入A、B，输出A+B。说明：在“问题描述”这部分，会给出试题的意思，以及所要求的目标。输入格式输入的第一行包括两个整数，由空格分隔，分别表示A、B。说明：“输入格式”是描述在测试你的程序时，所给的输入一定满足的格式。做题时你应该假设所给的输入是一定满足输入格式的要求的，所以你不需要对输入的格式进行检查。多余的格式检查可能会适得其反，使用你的程序错误。在测试的时候，系统会自动将输入数据输入到你的程序中，你不能给任何提示。比如，你在输入的时候提示“请输入A、B”之类的话是不需要的，这些多余的输出会使得你的程序被判定为错误。输出格式输出一行，包括一个整数，表示A+B的值。说明：“输出格式”是要求你的程序在输出结果的时候必须满足的格式。在输出时，你的程序必须满足这个格式的要求，不能少任何内容，也不能多任何内容。如果你的内容和输出格式要求的不一样，你的程序会被判断为错误，包括你输出了提示信息、中间调试信息、计时或者统计的信息等。样例输入12 45说明：“样例输入”给出了一组满足“输入格式”要求的输入的例子。这里给出的输入只是可能用来测试你的程序的一个输入，在测试的时候，还会有更多的输入用来测试你的程序。样例输出57说明：“样例输出”给出了一组满足“输出格式”要求的输出的例子。样例输出中的结果是和样例输入中的是对应的，因此，你可以使用样例的输入输出简单的检查你的程序。要特别指出的是，能够通过样例输入输出的程序并不一定是正确的程序，在测试的时候，会用很多组数据进行测试，而不局限于样例数据。有可能一个程序通过了样例数据，但测试的时候仍只能得0分，可能因为这个程序只在一些类似样例的特例中正确，而不具有通用性，再测试更多数据时会出现错误。比如，对于本题，如果你写一个程序不管输入是什么都输入57，则样例数据是对的，但是测试其他数据，哪怕输入是1和2，这个程序也输出57，则对于其他数据这个程序都不正确。数据规模与约定-10000 &lt;= A, B &lt;= 10000。说明：“数据规模与约定”中给出了试题中主要参数的范围。这个范围对于解题非常重要，不同的数据范围会导致试题需要使用不同的解法来解决。比如本题中给的A、B范围不大，可以使用整型(int)来保存，如果范围更大，超过int的范围，则要考虑其他方法来保存大数。有一些范围在方便的时候是在“问题描述”中直接给的，所以在做题时不仅要看这个范围，还要注意问题描述。</code></pre><p>代码详细:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a,b=map(int,input().split())</span><br><span class="line">print(a+b)</span><br></pre></td></tr></table></figure></p><h3 id="试题-基础练习-数列排序"><a href="#试题-基础练习-数列排序" class="headerlink" title="试题 基础练习 数列排序"></a>试题 基础练习 数列排序</h3><pre><code>资源限制时间限制：1.0s   内存限制：512.0MB问题描述　　给定一个长度为n的数列，将这个数列按从小到大的顺序排列。1&lt;=n&lt;=200输入格式　　第一行为一个整数n。　　第二行包含n个整数，为待排序的数，每个整数的绝对值小于10000。输出格式　　输出一行，按从小到大的顺序输出排序后的数列。样例输入58 3 6 4 9样例输出3 4 6 8 9</code></pre><p>代码详细:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line">list = list(map(int, input().split()))</span><br><span class="line">list = sorted(list)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(list)):</span><br><span class="line">    print(list[i], end= <span class="string">' '</span>)</span><br></pre></td></tr></table></figure></p><h3 id="试题-基础练习-十六进制转八进制"><a href="#试题-基础练习-十六进制转八进制" class="headerlink" title="试题 基础练习 十六进制转八进制"></a>试题 基础练习 十六进制转八进制</h3><pre><code>  资源限制时间限制：1.0s   内存限制：512.0MB问题描述　　给定n个十六进制正整数，输出它们对应的八进制数。输入格式　　输入的第一行为一个正整数n （1&lt;=n&lt;=10）。　　接下来n行，每行一个由0~9、大写字母A~F组成的字符串，表示要转换的十六进制正整数，每个十六进制数长度不超过100000。输出格式　　输出n行，每行为输入对应的八进制正整数。　　【注意】　　输入的十六进制数不会有前导0，比如012A。　　输出的八进制数也不能有前导0。样例输入　　2　　39　　123ABC样例输出　　71　　4435274　　【提示】　　先将十六进制数转换成某进制数，再由某进制数转换成八进制。</code></pre><p>代码详细:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> range(n):</span><br><span class="line">    num = input()</span><br><span class="line">    ans = format(int(num, <span class="number">16</span>), <span class="string">'o'</span>)</span><br><span class="line">    print(ans)</span><br></pre></td></tr></table></figure></p><p>详细可以查阅python的<code>int</code>函数和format函数转换进制</p><h3 id="试题-基础练习-十六进制转十进制"><a href="#试题-基础练习-十六进制转十进制" class="headerlink" title="试题 基础练习 十六进制转十进制"></a>试题 基础练习 十六进制转十进制</h3><pre><code>资源限制时间限制：1.0s   内存限制：512.0MB问题描述　　从键盘输入一个不超过8位的正的十六进制数字符串，将它转换为正的十进制数后输出。　　注：十六进制数中的10~15分别用大写的英文字母A、B、C、D、E、F表示。样例输入FFFF样例输出65535</code></pre><p>代码详细:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n = input()</span><br><span class="line">print(int(n, <span class="number">16</span>))</span><br></pre></td></tr></table></figure></p><h3 id="试题-基础练习-十进制转十六进制"><a href="#试题-基础练习-十进制转十六进制" class="headerlink" title="试题 基础练习 十进制转十六进制"></a>试题 基础练习 十进制转十六进制</h3><pre><code>资源限制时间限制：1.0s   内存限制：512.0MB问题描述　　十六进制数是在程序设计时经常要使用到的一种整数的表示方式。它有0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F共16个符号，分别表示十进制数的0至15。十六进制的计数方法是满16进1，所以十进制数16在十六进制中是10，而十进制的17在十六进制中是11，以此类推，十进制的30在十六进制中是1E。　　给出一个非负整数，将它表示成十六进制的形式。输入格式　　输入包含一个非负整数a，表示要转换的数。0&lt;=a&lt;=2147483647输出格式　　输出这个整数的16进制表示样例输入30样例输出1E</code></pre><p>代码详细:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line">print(format(n, <span class="string">'X'</span>)) <span class="comment">#X为大写,x是小写</span></span><br></pre></td></tr></table></figure></p><h3 id="试题-基础练习-特殊回文数"><a href="#试题-基础练习-特殊回文数" class="headerlink" title="试题 基础练习 特殊回文数"></a>试题 基础练习 特殊回文数</h3><pre><code>资源限制时间限制：1.0s   内存限制：512.0MB问题描述　　123321是一个非常特殊的数，它从左边读和从右边读是一样的。　　输入一个正整数n， 编程求所有这样的五位和六位十进制数，满足各位数字之和等于n 。输入格式　　输入一行，包含一个正整数n。输出格式　　按从小到大的顺序输出满足条件的整数，每个整数占一行。样例输入52样例输出899998989989998899数据规模和约定　　1&lt;=n&lt;=54。</code></pre><p>代码详细:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_pal</span><span class="params">(num)</span>:</span></span><br><span class="line">    num = str(num)</span><br><span class="line">    <span class="keyword">if</span> num == num[::<span class="number">-1</span>]:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_num</span><span class="params">(num)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    num = str(num)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(num)):</span><br><span class="line">        sum += int(num[i])</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    n = int(input())</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">10000</span>, <span class="number">1000000</span>):</span><br><span class="line">        <span class="keyword">if</span> is_pal(num) <span class="keyword">and</span> sum_num(num) == n:</span><br><span class="line">            print(num)</span><br></pre></td></tr></table></figure></p><h3 id="试题-基础练习-回文数"><a href="#试题-基础练习-回文数" class="headerlink" title="试题 基础练习 回文数"></a>试题 基础练习 回文数</h3><pre><code>资源限制时间限制：1.0s   内存限制：512.0MB问题描述　　1221是一个非常特殊的数，它从左边读和从右边读是一样的，编程求所有这样的四位十进制数。输出格式　　按从小到大的顺序输出满足条件的四位十进制数。</code></pre><p>代码详细:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_pal</span><span class="params">(num)</span>:</span></span><br><span class="line">    num = str(num)</span><br><span class="line">    <span class="keyword">if</span> num == num[::<span class="number">-1</span>]:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>, <span class="number">10000</span>):</span><br><span class="line">        <span class="keyword">if</span> is_pal(i):</span><br><span class="line">            print(i)</span><br></pre></td></tr></table></figure><h3 id="试题-基础练习-特殊的数字"><a href="#试题-基础练习-特殊的数字" class="headerlink" title="试题 基础练习 特殊的数字"></a>试题 基础练习 特殊的数字</h3><pre><code>问题描述　　153是一个非常特殊的数，它等于它的每位数字的立方和，即153=1*1*1+5*5*5+3*3*3。编程求所有满足这种条件的三位十进制数。输出格式　　按从小到大的顺序输出满足条件的三位十进制数，每个数占一行。</code></pre><p>代码详细:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_ans</span><span class="params">(num)</span>:</span></span><br><span class="line">    num_sum = pow(int(str(num)[<span class="number">0</span>]), <span class="number">3</span>) + pow(int(str(num)[<span class="number">1</span>]), <span class="number">3</span>) + pow(int(str(num)[<span class="number">2</span>]), <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">if</span> num == num_sum:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ans <span class="keyword">in</span> range(<span class="number">100</span>, <span class="number">1000</span>):</span><br><span class="line">    <span class="keyword">if</span> is_ans(ans):</span><br><span class="line">        print(ans)</span><br></pre></td></tr></table></figure></p><blockquote><p>这里使用了str转换字符串取位数,或者可以直接用除法取位数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_ans</span><span class="params">(num)</span>:</span></span><br><span class="line">    a = num % <span class="number">10</span></span><br><span class="line">    b = (num // <span class="number">10</span>) % <span class="number">10</span></span><br><span class="line">    c = (num // <span class="number">100</span>) % <span class="number">10</span></span><br><span class="line">    <span class="keyword">if</span> num == pow(a, <span class="number">3</span>) + pow(b, <span class="number">3</span>) + pow(c, <span class="number">3</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ans <span class="keyword">in</span> range(<span class="number">100</span>, <span class="number">1000</span>):</span><br><span class="line">    <span class="keyword">if</span> is_ans(ans):</span><br><span class="line">        print(ans)</span><br></pre></td></tr></table></figure><h3 id="试题-基础练习-杨辉三角形"><a href="#试题-基础练习-杨辉三角形" class="headerlink" title="试题 基础练习 杨辉三角形"></a>试题 基础练习 杨辉三角形</h3><pre><code>问题描述杨辉三角形又称Pascal三角形，它的第i+1行是(a+b)i的展开式的系数。　　它的一个重要性质是：三角形中的每个数字等于它两肩上的数字相加。　　下面给出了杨辉三角形的前4行：　　   1　　  1 1　　 1 2 1　　1 3 3 1　　给出n，输出它的前n行。输入格式输入包含一个数n。输出格式输出杨辉三角形的前n行。每一行从这一行的第一个数开始依次输出，中间使用一个空格分隔。请不要在前面输出多余的空格。样例输入4样例输出11 11 2 11 3 3 1数据规模与约定1 &lt;= n &lt;= 34。</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">triangles</span><span class="params">(num)</span>:</span></span><br><span class="line">    n = [<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">while</span> num &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(n)):</span><br><span class="line">            print(n[i], end=<span class="string">' '</span>) <span class="comment"># 将列表转为要求的格式</span></span><br><span class="line">        n = [<span class="number">1</span>] + [n[i] + n[i+<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(n) - <span class="number">1</span>)] + [<span class="number">1</span>]</span><br><span class="line">        num -= <span class="number">1</span></span><br><span class="line">        print()                  <span class="comment"># 换行</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    n = int(input())</span><br><span class="line">    triangles(n)</span><br></pre></td></tr></table></figure><h3 id="试题-基础练习-查找整数"><a href="#试题-基础练习-查找整数" class="headerlink" title="试题 基础练习 查找整数"></a>试题 基础练习 查找整数</h3><pre><code>问题描述给出一个包含n个整数的数列，问整数a在数列中的第一次出现是第几个。输入格式第一行包含一个整数n。第二行包含n个非负整数，为给定的数列，数列中的每个数都不大于10000。第三行包含一个整数a，为待查找的数。输出格式如果a在数列中出现了，输出它第一次出现的位置(位置从1开始编号)，否则输出-1。样例输入61 9 4 8 3 99样例输出2数据规模与约定1 &lt;= n &lt;= 1000。</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_ans</span><span class="params">(num, list)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(list)):</span><br><span class="line">        <span class="keyword">if</span> num == list[i]:</span><br><span class="line">            print(i+<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> num <span class="keyword">not</span> <span class="keyword">in</span> list:</span><br><span class="line">        print(<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    n = int(input())</span><br><span class="line">    list = list(map(int, input().split()))</span><br><span class="line">    num = int(input())</span><br><span class="line">    is_ans(num, list)</span><br></pre></td></tr></table></figure><h3 id="试题-基础练习-数列特征"><a href="#试题-基础练习-数列特征" class="headerlink" title="试题 基础练习 数列特征"></a>试题 基础练习 数列特征</h3><pre><code>问题描述给出n个数，找出这n个数的最大值，最小值，和。输入格式第一行为整数n，表示数的个数。第二行有n个数，为给定的n个数，每个数的绝对值都小于10000。输出格式输出三行，每行一个整数。第一行表示这些数中的最大值，第二行表示这些数中的最小值，第三行表示这些数的和。</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_ans</span><span class="params">(n, list)</span>:</span></span><br><span class="line">    list = sorted(list)</span><br><span class="line">    max = list[<span class="number">-1</span>]</span><br><span class="line">    min = list[<span class="number">0</span>]</span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> list:</span><br><span class="line">        sum += i</span><br><span class="line">    print(max)</span><br><span class="line">    print(min)</span><br><span class="line">    print(sum)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    n = int(input())</span><br><span class="line">    list = list(map(int, input().split()))</span><br><span class="line">    is_ans(n, list)</span><br></pre></td></tr></table></figure><h3 id="试题-基础练习-字母图形"><a href="#试题-基础练习-字母图形" class="headerlink" title="试题 基础练习 字母图形"></a>试题 基础练习 字母图形</h3><pre><code>问题描述利用字母可以组成一些美丽的图形，下面给出了一个例子：ABCDEFGBABCDEFCBABCDEDCBABCDEDCBABC这是一个5行7列的图形，请找出这个图形的规律，并输出一个n行m列的图形。输入格式输入一行，包含两个整数n和m，分别表示你要输出的图形的行数的列数。输出格式输出n行，每个m个字符，为你的图形。样例输入5 7样例输出ABCDEFGBABCDEFCBABCDEDCBABCDEDCBABC</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_ans</span><span class="params">(n, m)</span>:</span></span><br><span class="line">    graph = [[<span class="number">0</span> <span class="keyword">for</span> j <span class="keyword">in</span> range(m)] <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(m):</span><br><span class="line">            <span class="keyword">if</span> j &gt;= i:</span><br><span class="line">                graph[i][j] = chr(ord(<span class="string">'A'</span>)+ j - i)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                graph[i][j] = chr(ord(<span class="string">'A'</span>) + i - j)</span><br><span class="line">    <span class="keyword">return</span> graph</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    n, m = map(int, input().split())</span><br><span class="line">    gragh = is_ans(n ,m)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(m):</span><br><span class="line">            print(gragh[i][j], end=<span class="string">''</span>)</span><br><span class="line">        print()</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_31910669/article/details/103641497" target="_blank" rel="noopener">参考链接</a></p><h3 id="试题-基础练习-01字串"><a href="#试题-基础练习-01字串" class="headerlink" title="试题 基础练习 01字串"></a>试题 基础练习 01字串</h3><pre><code>问题描述对于长度为5位的一个01串，每一位都可能是0或1，一共有32种可能。它们的前几个是：0000000001000100001100100请按从小到大的顺序输出这32种01串。输入格式本试题没有输入。输出格式输出32行，按从小到大的顺序每行一个长度为5的01串。样例输出00000000010001000011&lt;以下部分省略&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">    print(<span class="string">"&#123;0:0&gt;5&#125;"</span>.format(format(i, <span class="string">'b'</span>)))</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_31910669/article/details/103641497" target="_blank" rel="noopener">参考链接</a></p><h3 id="试题-基础练习-闰年判断"><a href="#试题-基础练习-闰年判断" class="headerlink" title="试题 基础练习 闰年判断"></a>试题 基础练习 闰年判断</h3><pre><code>问题描述给定一个年份，判断这一年是不是闰年。当以下情况之一满足时，这一年是闰年：1. 年份是4的倍数而不是100的倍数；2. 年份是400的倍数。其他的年份都不是闰年。输入格式输入包含一个整数y，表示当前的年份。输出格式输出一行，如果给定的年份是闰年，则输出yes，否则输出no。</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_leapyear</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> num % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> num % <span class="number">100</span> != <span class="number">0</span> <span class="keyword">or</span> num % <span class="number">400</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    num = int(input())</span><br><span class="line">    <span class="keyword">if</span> is_leapyear(num):</span><br><span class="line">        print(<span class="string">'yes'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'no'</span>)</span><br></pre></td></tr></table></figure><h3 id="试题-基础练习-阶乘计算"><a href="#试题-基础练习-阶乘计算" class="headerlink" title="试题 基础练习 阶乘计算"></a>试题 基础练习 阶乘计算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line">ans = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">    ans =  ans * i</span><br><span class="line"></span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure><h3 id="试题-基础练习-高精度加法"><a href="#试题-基础练习-高精度加法" class="headerlink" title="试题 基础练习 高精度加法"></a>试题 基础练习 高精度加法</h3><p>这道题挺迷的,python比其他语言的方便用途之一就是大数的处理<br>蓝桥杯满分通过<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python 大数</span></span><br><span class="line">a = int(input())</span><br><span class="line">b = int(input())</span><br><span class="line">print(a+b)</span><br></pre></td></tr></table></figure></p><p>正确做法:</p><pre><code>将每个大数存入列表中,一一相加,进位的进位,最后输出ans_num</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_length</span><span class="params">(str_num, l)</span>:</span></span><br><span class="line">    <span class="comment"># 添加前导0</span></span><br><span class="line">    str_num = <span class="string">'0'</span> * (l -len(str_num)) + str_num</span><br><span class="line">    <span class="keyword">return</span> str_num</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    num1 = input()</span><br><span class="line">    num2 = input()</span><br><span class="line">    <span class="comment"># 修改长度</span></span><br><span class="line">    <span class="keyword">if</span> len(num1) &gt; len(num2):</span><br><span class="line">        num2 = change_length(num2, len(num1))</span><br><span class="line">    <span class="keyword">elif</span> len(num1) &lt; len(num2):</span><br><span class="line">        num1 = change_length(num1, len(num2))</span><br><span class="line">    <span class="comment"># 结果最多比最长的num长1个单位</span></span><br><span class="line">    ans_num = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(len(num1) + <span class="number">1</span>)]</span><br><span class="line">    <span class="comment"># 进位</span></span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(num1)):</span><br><span class="line">        val = k + int(num1[len(num1) - i - <span class="number">1</span>]) + int(num2[len(num2) - i - <span class="number">1</span>])</span><br><span class="line">        ans_num[len(num1) - i] = val % <span class="number">10</span></span><br><span class="line">        k = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span>  val &gt;= <span class="number">10</span>:</span><br><span class="line">            k = int(val // <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> k != <span class="number">0</span>:</span><br><span class="line">        ans_num[<span class="number">0</span>] = k</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ans_num) - <span class="number">1</span>):</span><br><span class="line">            print(ans_num[i], end=<span class="string">''</span>)</span><br><span class="line">        print(ans_num[<span class="number">-1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ans_num) - <span class="number">2</span>):</span><br><span class="line">            print(ans_num[i+<span class="number">1</span>], end=<span class="string">''</span>)</span><br><span class="line">        print(ans_num[<span class="number">-1</span>])</span><br></pre></td></tr></table></figure><h3 id="试题-基础练习-Huffuman树"><a href="#试题-基础练习-Huffuman树" class="headerlink" title="试题 基础练习 Huffuman树"></a>试题 基础练习 Huffuman树</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line">value = <span class="number">0</span></span><br><span class="line">list = list(map(int, input().split()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n - <span class="number">1</span>):</span><br><span class="line">    list = sorted(list)</span><br><span class="line">    value += list[<span class="number">0</span>] + list[<span class="number">1</span>]</span><br><span class="line">    value_list = list[<span class="number">0</span>] + list[<span class="number">1</span>]</span><br><span class="line">    list.pop(<span class="number">0</span>)</span><br><span class="line">    list.pop(<span class="number">0</span>)</span><br><span class="line">    list.append(value_list)</span><br><span class="line">print(value)</span><br></pre></td></tr></table></figure><h3 id="试题-基础练习-2n皇后问题"><a href="#试题-基础练习-2n皇后问题" class="headerlink" title="试题 基础练习 2n皇后问题"></a>试题 基础练习 2n皇后问题</h3><p>此题先留个坑,目前只解决了N皇后的思路<br>方法1:dfs深度优先搜索<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solveNQueens</span><span class="params">(self, n)</span>:</span></span><br><span class="line"></span><br><span class="line">        k = <span class="number">0</span></span><br><span class="line">        ans, q = [], [<span class="literal">None</span>] * n</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(k, n)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> k == n:</span><br><span class="line">                tmp = []</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">                    s = <span class="string">""</span></span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">                        s += <span class="string">"Q"</span> <span class="keyword">if</span> q[i] == j <span class="keyword">else</span> <span class="string">'.'</span></span><br><span class="line">                    tmp.append(s)</span><br><span class="line">                ans.append(tmp)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">                    <span class="keyword">if</span> self.place(k, j, q):</span><br><span class="line">                        q[k] = j</span><br><span class="line">                        dfs(k + <span class="number">1</span>, n)</span><br><span class="line"></span><br><span class="line">        dfs(k, n)</span><br><span class="line">        <span class="keyword">return</span> ans, len(ans)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">place</span><span class="params">(self, k, j, q)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">            <span class="keyword">if</span> q[i] == j <span class="keyword">or</span> abs(q[i] - j) == abs(i - k):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    solu = Solution()</span><br><span class="line">    <span class="comment"># solu.solveNQueens(4)</span></span><br><span class="line">    print(solu.solveNQueens(<span class="number">4</span>)) <span class="comment"># 当为8时就是8皇后问题</span></span><br></pre></td></tr></table></figure></p><p>输出:</p><pre><code>[[&apos;.Q..&apos;, &apos;...Q&apos;, &apos;Q...&apos;, &apos;..Q.&apos;], [&apos;..Q.&apos;, &apos;Q...&apos;, &apos;...Q&apos;, &apos;.Q..&apos;]]4个皇后时的两种情况</code></pre><p>方法2:回溯法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">queen</span><span class="params">(A, cur=<span class="number">0</span>)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 递归回溯思想解决n皇后问题</span></span><br><span class="line">    <span class="keyword">if</span> cur == len(A): <span class="comment"># 所有的皇后都正确放置完毕，输出每个皇后所在的位置</span></span><br><span class="line">        tmp = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            s = <span class="string">''</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">                s+=<span class="string">'Q'</span> <span class="keyword">if</span> A[i] == j <span class="keyword">else</span> <span class="string">'.'</span></span><br><span class="line">            tmp.append(s)</span><br><span class="line">        ans.append(tmp)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> range(len(A)):</span><br><span class="line">        A[cur], flag = col, <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> range(cur): <span class="comment"># 检测本次所放皇后的位置是否在同行同列或同一对角线上</span></span><br><span class="line">            <span class="keyword">if</span> A[row] == col <span class="keyword">or</span> abs(col - A[row]) == cur - row: <span class="comment"># 是的话，该位置不能放，向上回溯</span></span><br><span class="line">                flag = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> flag: <span class="comment"># 否的话，继续放下一个皇后</span></span><br><span class="line">            queen(A, cur+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = int(input())</span><br><span class="line">ans = []</span><br><span class="line">queen([<span class="literal">None</span>] * n)</span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure></p><p>上述算法简述了N皇后的放置方法,这里同理。</p><p>思路：</p><pre><code>先在条件合法的情况下放置白皇后，并且将白皇后暂时存储在tmpWhite数组中。然后在白皇后全部放置的基础上，开始放置黑皇后</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">correctWhite</span><span class="params">(tmpWhite, row)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> arr[row][tmpWhite[row]] == <span class="number">1</span>: <span class="comment"># tmpWhite[row]表示第几列 ,如果此位置是1, 则表示可以放置</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(row):        <span class="comment"># 判断条件为不在同一列,和不在同一对角线上</span></span><br><span class="line">            <span class="keyword">if</span> abs(tmpWhite[i] - tmpWhite[row]) == abs(i - row) <span class="keyword">or</span> tmpWhite[i] == tmpWhite[row]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">correctBlack</span><span class="params">(tmpBlack, row, tmpWhite)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> arr[row][tmpBlack[row]] == <span class="number">1</span> <span class="keyword">and</span> tmpBlack[row] != tmpWhite[row]: <span class="comment"># tmpBlack[row]表示第几列 ,如果此位置是1和此位置不和白皇后冲突, 则表示可以放置</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(row):            <span class="comment"># 判断条件为不在同一列,和不在同一对角线上</span></span><br><span class="line">            <span class="keyword">if</span> abs(tmpBlack[i] - tmpBlack[row]) == abs(i - row) <span class="keyword">or</span> tmpBlack[i] == tmpBlack[row]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs_Black</span><span class="params">(tmpBlack, row)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> row == n: <span class="comment"># 此时黑皇后和白皇后的位置全部确定, 将结果输入到ans列表中</span></span><br><span class="line">        ans.append(tmpBlack[:])</span><br><span class="line">        <span class="keyword">return</span>    <span class="comment"># 退出递归</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> range(n):</span><br><span class="line">            tmpBlack[row] = col</span><br><span class="line">            <span class="keyword">if</span> correctBlack(tmpBlack, row, tmpWhite): <span class="comment"># 如果位置合法</span></span><br><span class="line">                dfs_Black(tmpBlack, row + <span class="number">1</span>)         <span class="comment"># 开始下一个黑皇后的放置</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs_White</span><span class="params">(tmpWhite, row)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> row == n:   <span class="comment"># 如果此时确定了白皇后的全部位置,开始放置黑皇后</span></span><br><span class="line">        dfs_Black(tmpBlack,<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> range(n):    <span class="comment"># 从第一个白皇后开始放置</span></span><br><span class="line">            tmpWhite[row] = col</span><br><span class="line">            <span class="keyword">if</span> correctWhite(tmpWhite, row): <span class="comment"># 如果位置可以放置</span></span><br><span class="line">                dfs_White(tmpWhite, row+<span class="number">1</span>)  <span class="comment"># 开始放置下一个白皇后</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输入n与棋盘, 其中棋盘用二维数组表示</span></span><br><span class="line">    n = int(input())</span><br><span class="line">    arr = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">    <span class="comment"># 设置临时存放黑白皇后的棋盘</span></span><br><span class="line">    tmpWhite = [<span class="literal">None</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">    tmpBlack = [<span class="literal">None</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">    ans = []</span><br><span class="line">    <span class="comment"># 先从白皇后放置开始</span></span><br><span class="line">    dfs_White(tmpWhite, <span class="number">0</span>)</span><br><span class="line">    print(len(ans))</span><br></pre></td></tr></table></figure><h3 id="试题-基础练习-报时助手"><a href="#试题-基础练习-报时助手" class="headerlink" title="试题 基础练习 报时助手"></a>试题 基础练习 报时助手</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">h, m = map(int, input().split())</span><br><span class="line"></span><br><span class="line">time = &#123;<span class="number">0</span>: <span class="string">'zero'</span>, <span class="number">1</span>: <span class="string">'one'</span>, <span class="number">2</span>: <span class="string">'two'</span>, <span class="number">3</span>: <span class="string">'three'</span>, <span class="number">4</span>: <span class="string">'four'</span>, <span class="number">5</span>: <span class="string">'five'</span>, <span class="number">6</span>: <span class="string">'six'</span>, <span class="number">7</span>: <span class="string">'seven'</span>, <span class="number">8</span>: <span class="string">'eight'</span>, <span class="number">9</span>: <span class="string">'nine'</span>,</span><br><span class="line">        <span class="number">10</span>: <span class="string">'ten'</span>, <span class="number">11</span>: <span class="string">'eleven'</span>, <span class="number">12</span>: <span class="string">'twelve'</span>, <span class="number">13</span>: <span class="string">'thirteen'</span>, <span class="number">14</span>: <span class="string">'fourteen'</span>, <span class="number">15</span>: <span class="string">'fifteen'</span>, <span class="number">16</span>: <span class="string">'sixteen'</span>,</span><br><span class="line">        <span class="number">17</span>: <span class="string">'seventeen'</span>, <span class="number">18</span>: <span class="string">'eighteen'</span>, <span class="number">19</span>: <span class="string">'nineteen'</span>, <span class="number">20</span>: <span class="string">'twenty'</span>, <span class="number">21</span>: <span class="string">'twenty one'</span>, <span class="number">22</span>: <span class="string">'twenty two'</span>,</span><br><span class="line">        <span class="number">23</span>: <span class="string">'twenty three'</span>, <span class="number">30</span>: <span class="string">'thirty'</span>, <span class="number">40</span>: <span class="string">'forty'</span>, <span class="number">50</span>: <span class="string">'fifty'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> m == <span class="number">0</span>:</span><br><span class="line">    print(time[h] + <span class="string">' o\'clock'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(time[h], end=<span class="string">' '</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> &lt; m &lt;= <span class="number">20</span> <span class="keyword">or</span> m == <span class="number">30</span> <span class="keyword">or</span> m == <span class="number">40</span> <span class="keyword">or</span> m == <span class="number">50</span>:</span><br><span class="line">        print(time[m])</span><br><span class="line">    <span class="keyword">elif</span> <span class="number">20</span> &lt; m &lt; <span class="number">30</span>:</span><br><span class="line">        print(time[<span class="number">20</span>] + <span class="string">' '</span> + time[m - <span class="number">20</span>])</span><br><span class="line">    <span class="keyword">elif</span> <span class="number">30</span> &lt; m &lt; <span class="number">40</span>:</span><br><span class="line">        print(time[<span class="number">30</span>] + <span class="string">' '</span> + time[m - <span class="number">30</span>])</span><br><span class="line">    <span class="keyword">elif</span> <span class="number">40</span> &lt; m &lt; <span class="number">50</span>:</span><br><span class="line">        print(time[<span class="number">40</span>] + <span class="string">' '</span> + time[m - <span class="number">40</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(time[<span class="number">50</span>] + <span class="string">' '</span> + time[m - <span class="number">50</span>])</span><br></pre></td></tr></table></figure><h3 id="试题-基础练习-回形取数"><a href="#试题-基础练习-回形取数" class="headerlink" title="试题 基础练习 回形取数"></a>试题 基础练习 回形取数</h3><p>思路:</p><pre><code>通过x表示纵坐标,因为x表示行数,行数+1时纵坐标就会加一同理 y表示横坐标</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">n, m = map(int, input().split())</span><br><span class="line">tmp = [] <span class="comment"># 存放答案</span></span><br><span class="line">vis = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(m)] <span class="keyword">for</span> i <span class="keyword">in</span> range(n)] <span class="comment"># 验证位置是否走过 当vis[x][y] = 1时即为走过</span></span><br><span class="line">arr = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line"><span class="comment"># 注意: 向下为x, 向右为y</span></span><br><span class="line">x = <span class="number">0</span> <span class="comment"># 当前纵坐标</span></span><br><span class="line">y = <span class="number">0</span> <span class="comment"># 当前横坐标</span></span><br><span class="line"><span class="keyword">while</span> len(tmp) &lt; n*m :</span><br><span class="line">    <span class="keyword">while</span> x &lt; n <span class="keyword">and</span> vis[x][y] == <span class="number">0</span>:</span><br><span class="line">        tmp.append(arr[x][y])</span><br><span class="line">        vis[x][y] = <span class="number">1</span></span><br><span class="line">        x += <span class="number">1</span>  <span class="comment"># 纵坐标加一</span></span><br><span class="line">    x -= <span class="number">1</span> <span class="comment"># 将上步多余的步数删除,防止溢出</span></span><br><span class="line">    y += <span class="number">1</span> <span class="comment"># 将横坐标右移</span></span><br><span class="line">    <span class="keyword">while</span> y &lt; m <span class="keyword">and</span> vis[x][y] == <span class="number">0</span>:</span><br><span class="line">        tmp.append(arr[x][y])</span><br><span class="line">        vis[x][y] = <span class="number">1</span></span><br><span class="line">        y += <span class="number">1</span></span><br><span class="line">    x -= <span class="number">1</span> <span class="comment"># 将纵坐标减一</span></span><br><span class="line">    y -= <span class="number">1</span> <span class="comment"># 将上步多余步数删除,防止溢出</span></span><br><span class="line">    <span class="keyword">while</span> x &gt;= <span class="number">0</span> <span class="keyword">and</span> vis[x][y] == <span class="number">0</span>:</span><br><span class="line">        tmp.append(arr[x][y])</span><br><span class="line">        vis[x][y] = <span class="number">1</span></span><br><span class="line">        x -= <span class="number">1</span> <span class="comment"># 将纵坐标上移</span></span><br><span class="line">    x += <span class="number">1</span> <span class="comment"># 将上步多余步数删除,防止溢出</span></span><br><span class="line">    y -= <span class="number">1</span> <span class="comment"># 将横坐标左移</span></span><br><span class="line">    <span class="keyword">while</span> y &gt;=<span class="number">0</span> <span class="keyword">and</span> vis[x][y] == <span class="number">0</span>:</span><br><span class="line">        tmp.append(arr[x][y])</span><br><span class="line">        vis[x][y] = <span class="number">1</span></span><br><span class="line">        y -= <span class="number">1</span> <span class="comment"># 将横坐标左移</span></span><br><span class="line">    y += <span class="number">1</span> <span class="comment"># 将上步多余步数删除</span></span><br><span class="line">    x += <span class="number">1</span> <span class="comment"># 将纵坐标下移</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出数据</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(tmp)):</span><br><span class="line">    print(tmp[i], end=<span class="string">' '</span>)</span><br></pre></td></tr></table></figure><h3 id="试题-基础练习-龟兔赛跑预测"><a href="#试题-基础练习-龟兔赛跑预测" class="headerlink" title="试题 基础练习 龟兔赛跑预测"></a>试题 基础练习 龟兔赛跑预测</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">data = list(map(int, input().split()))</span><br><span class="line">rabbit = turtle = <span class="number">0</span></span><br><span class="line">time = <span class="number">0</span> <span class="comment">#目前的时间</span></span><br><span class="line">flag = <span class="literal">False</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span>  rabbit == data[<span class="number">-1</span>] <span class="keyword">or</span> turtle == data[<span class="number">-1</span>]: <span class="comment"># 到达终点</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span>  rabbit - turtle &gt;= data[<span class="number">2</span>]:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(data[<span class="number">3</span>]):</span><br><span class="line">            turtle += data[<span class="number">1</span>]</span><br><span class="line">            time += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> turtle &gt;= data[<span class="number">-1</span>]:</span><br><span class="line">                flag = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> flag:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    time += <span class="number">1</span></span><br><span class="line">    rabbit += data[<span class="number">0</span>]</span><br><span class="line">    turtle += data[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> rabbit &gt; turtle:  <span class="comment"># 谁先到达终点，谁的距离大</span></span><br><span class="line">    print(<span class="string">'R'</span>)</span><br><span class="line">    print(time)</span><br><span class="line"><span class="keyword">elif</span> rabbit &lt; turtle:</span><br><span class="line">    print(<span class="string">'T'</span>)</span><br><span class="line">    print(time)</span><br><span class="line"><span class="keyword">else</span>:  <span class="comment"># 相等则平局</span></span><br><span class="line">    print(<span class="string">'D'</span>)</span><br><span class="line">    print(time)</span><br></pre></td></tr></table></figure><h3 id="试题-基础练习-芯片测试"><a href="#试题-基础练习-芯片测试" class="headerlink" title="试题 基础练习 芯片测试"></a>试题 基础练习 芯片测试</h3><p>思路:</p><pre><code>这道题需仔细审题, 当好芯片测好芯片时为1, 测坏芯片时为0,坏芯片测试的时候情况不一定。所以我们可以知道 当每一列0的个数大于n的一半时，此芯片为坏芯片按列查找</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line">arr = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">tmp = [<span class="literal">True</span>] * n <span class="comment"># tmp[i]为False时为坏芯片</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">if</span> arr[j][i] == <span class="number">0</span>: <span class="comment"># 按列查找</span></span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> count &gt;= n/<span class="number">2</span>:</span><br><span class="line">            tmp[i] = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    <span class="keyword">if</span> tmp[i]:</span><br><span class="line">        print(i+<span class="number">1</span>, end=<span class="string">' '</span>)</span><br></pre></td></tr></table></figure><h3 id="试题-基础练习-FJ的字符串"><a href="#试题-基础练习-FJ的字符串" class="headerlink" title="试题 基础练习 FJ的字符串"></a>试题 基础练习 FJ的字符串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line">str = <span class="string">'ABA'</span></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">    print(<span class="string">'A'</span>)</span><br><span class="line"><span class="keyword">elif</span> n == <span class="number">2</span>:</span><br><span class="line">    print(<span class="string">'ABA'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>, n+<span class="number">1</span>):</span><br><span class="line">        str = str + chr((i + <span class="number">64</span>)) + str</span><br><span class="line">    print(str)</span><br></pre></td></tr></table></figure><h3 id="试题-基础练习-Sine之舞"><a href="#试题-基础练习-Sine之舞" class="headerlink" title="试题 基础练习 Sine之舞"></a>试题 基础练习 Sine之舞</h3><p>思路:</p><pre><code>递归调用</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Sine_An</span><span class="params">(n, k)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n == k: <span class="comment"># 返回值</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    print(<span class="string">'sin(%d'</span> % (n+<span class="number">1</span>), end=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> n + <span class="number">1</span> != k: <span class="comment"># 当n小于输入的值,即后面还有式子</span></span><br><span class="line">        <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">1</span>: <span class="comment"># 如果n是奇数 输出+号</span></span><br><span class="line">            print(<span class="string">'+'</span>, end=<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">else</span>:         <span class="comment"># 如果n是偶数 输出-号</span></span><br><span class="line">            print(<span class="string">'-'</span>, end=<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">else</span>:          <span class="comment"># 如果后面没有式子输出右括号</span></span><br><span class="line">        print(<span class="string">')'</span>, end=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">    Sine_An(n+<span class="number">1</span>, k)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Sine_Sn</span><span class="params">(n)</span>:</span></span><br><span class="line">    k = t = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>): <span class="comment"># 补全左边括号</span></span><br><span class="line">        print(<span class="string">'('</span>, end=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> n != <span class="number">0</span>:</span><br><span class="line">        Sine_An(<span class="number">0</span>,k)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(t<span class="number">-1</span>):</span><br><span class="line">            print(<span class="string">')'</span>, end=<span class="string">''</span>) <span class="comment"># 补全An的右括号</span></span><br><span class="line">        print(<span class="string">'+%d'</span> % n, end=<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">if</span> n !=<span class="number">1</span>:</span><br><span class="line">            print(<span class="string">')'</span>, end=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">        k+=<span class="number">1</span></span><br><span class="line">        t+=<span class="number">1</span></span><br><span class="line">        n-=<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    n = int(input())</span><br><span class="line">    Sine_Sn(n)</span><br></pre></td></tr></table></figure><h3 id="试题-基础练习-数的读法"><a href="#试题-基础练习-数的读法" class="headerlink" title="试题 基础练习 数的读法"></a>试题 基础练习 数的读法</h3><p>思路:</p><pre><code>考虑多种情况如前置1有的位置是不读的,11读作shi yi而不是yi shi yi连续0的处理问题</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">n = input()</span><br><span class="line"></span><br><span class="line">pin_yin = &#123;<span class="string">'0'</span>: <span class="string">'ling'</span>, <span class="string">'1'</span>: <span class="string">'yi'</span>, <span class="string">'2'</span>: <span class="string">'er'</span>, <span class="string">'3'</span>: <span class="string">'san'</span>, <span class="string">'4'</span>: <span class="string">'si'</span>, <span class="string">'5'</span>: <span class="string">'wu'</span>,</span><br><span class="line">           <span class="string">'6'</span>: <span class="string">'liu'</span>, <span class="string">'7'</span>: <span class="string">'qi'</span>, <span class="string">'8'</span>: <span class="string">'ba'</span>, <span class="string">'9'</span>: <span class="string">'jiu'</span>&#125;</span><br><span class="line">pin_yin_2 = &#123;<span class="number">0</span>: <span class="string">''</span>, <span class="number">1</span>: <span class="string">''</span>, <span class="number">2</span>: <span class="string">'shi'</span>, <span class="number">3</span>: <span class="string">'bai'</span>, <span class="number">4</span>: <span class="string">'qian'</span>, <span class="number">5</span>: <span class="string">'wan'</span>, <span class="number">6</span>: <span class="string">'shi'</span>,</span><br><span class="line">             <span class="number">7</span>: <span class="string">'bai'</span>, <span class="number">8</span>: <span class="string">'qian'</span>, <span class="number">9</span>: <span class="string">'yi'</span>, <span class="number">10</span>: <span class="string">'shi'</span>&#125;</span><br><span class="line">n = n + <span class="string">' '</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">l = len(n) - <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(l):</span><br><span class="line">    j = int(n[i])</span><br><span class="line">    <span class="keyword">if</span> j != <span class="number">0</span>:  <span class="comment"># 不为0时的读法</span></span><br><span class="line">        <span class="keyword">if</span> (l - i == <span class="number">2</span> <span class="keyword">or</span> l - i == <span class="number">6</span> <span class="keyword">or</span> l - i == <span class="number">10</span>) <span class="keyword">and</span> j == <span class="number">1</span>:</span><br><span class="line">            <span class="comment"># 在十位，十万位，十亿位置且位于开头的1不读</span></span><br><span class="line">            <span class="comment"># 例子：</span></span><br><span class="line">            <span class="comment"># 1111111111 会读出 yi shi yi yi yi qian yi bai yi shi yi wan yi qian yi bai yi shi yi</span></span><br><span class="line">            <span class="comment"># 111111 会读出 yi shi yi wan yi qian yi bai yi shi yi</span></span><br><span class="line">            <span class="comment"># 11 会读出 yi shi yi</span></span><br><span class="line">            <span class="comment"># 加上此约束后，则不会读出开头的 yi</span></span><br><span class="line">            <span class="keyword">if</span> i != <span class="number">0</span>:  <span class="comment"># 第一个1不输出1， 若不添加此条件，12会读出 yi shi er</span></span><br><span class="line">                print(pin_yin[<span class="string">'1'</span>], end=<span class="string">' '</span>)</span><br><span class="line">            print(pin_yin_2[<span class="number">2</span>], end=<span class="string">' '</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        print(pin_yin[n[i]], end=<span class="string">' '</span>)</span><br><span class="line">        print(pin_yin_2[l - i], end=<span class="string">' '</span>)</span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># 处理0的读法问题</span></span><br><span class="line">        <span class="keyword">if</span> l - i == <span class="number">5</span> <span class="keyword">or</span> l - i == <span class="number">9</span>:  <span class="comment"># 如果此0是在万位或亿位，则读出万或亿</span></span><br><span class="line">            print(pin_yin_2[l - i], end=<span class="string">' '</span>)</span><br><span class="line">        <span class="keyword">if</span> n[i + <span class="number">1</span>] == <span class="string">'0'</span> <span class="keyword">or</span> i == l - <span class="number">1</span>:  <span class="comment"># 如果后一位仍然为0，或者，当前是最后一位，则不读此0</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        print(pin_yin[<span class="string">'0'</span>], end=<span class="string">' '</span>)  <span class="comment"># 否则才读出这个零</span></span><br></pre></td></tr></table></figure><h3 id="试题-基础练习-完美的代价"><a href="#试题-基础练习-完美的代价" class="headerlink" title="试题 基础练习 完美的代价"></a>试题 基础练习 完美的代价</h3><p>思路:</p><pre><code>两种情况：1.impossible的情况：如果有一个字符出现的次数是奇数次数，而且n是偶数，那么不可能构成回文。如果n是奇数，但是已经有一个字符出现的次数是奇数次数了，那么如果又有一个字符是奇数次数，就不可能构成回文。2.如果n是奇数，计算中间那个字符交换的次数的时候，不需要模拟把这个数移动到中间去，因为移动到中间的话假设有一对数都在左边或者都在右边。那么交换成回文的时候就要经过中间，就会每次把cnt多加了1，而这个1是没有必要的，因为可以所有的回文移动完了之后再把这个独立的奇数移动过去，才能保证交换次数最少原文链接：https://blog.csdn.net/qq_31910669/article/details/103641497</code></pre><p>该方法蓝桥杯有一组数据超时</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line"></span><br><span class="line">pal = list(input())</span><br><span class="line"></span><br><span class="line">count = flag = <span class="number">0</span>  <span class="comment"># count计数，flag判断是否已经有一个单独的奇个数的字符了</span></span><br><span class="line"></span><br><span class="line">m = n - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(m):  <span class="comment"># 从头遍历到倒数第二个字符</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(m, i - <span class="number">1</span>, <span class="number">-1</span>):  <span class="comment"># 从后面往前一直到i寻找和pal[i]相同的pal[k]</span></span><br><span class="line">        <span class="keyword">if</span> k == i:  <span class="comment"># 如果找不到相同的</span></span><br><span class="line">            <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">or</span> flag == <span class="number">1</span>:  <span class="comment"># impossible的两种情况</span></span><br><span class="line">                print(<span class="string">'Impossible'</span>)</span><br><span class="line">                exit()</span><br><span class="line">            flag = <span class="number">1</span></span><br><span class="line">            count += int(n / <span class="number">2</span>) - i</span><br><span class="line">        <span class="keyword">elif</span> pal[k] == pal[i]:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(k, m):  <span class="comment"># 找到相同的，进行交换</span></span><br><span class="line">                pal[j], pal[j + <span class="number">1</span>] = pal[j + <span class="number">1</span>], pal[j]</span><br><span class="line">                count += <span class="number">1</span>  <span class="comment"># 计数器加1</span></span><br><span class="line">            m -= <span class="number">1</span>  <span class="comment"># 最后拍好序的不在进行比较</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">print(count)</span><br></pre></td></tr></table></figure><p>方法2:<br>思路来源:<a href="https://blog.csdn.net/bianxia123456/article/details/104388390" target="_blank" rel="noopener">干啥啥不会～</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_pal</span><span class="params">(n, s)</span>:</span></span><br><span class="line">    temp = set()</span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">26</span>):</span><br><span class="line">            <span class="keyword">if</span> s.count(chr(ord(<span class="string">'a'</span>) + i)) % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">                print(<span class="string">'Impossible'</span>) <span class="comment"># 如果字符串字符为偶数,但是存在不成对字符</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">26</span>):</span><br><span class="line">            <span class="keyword">if</span> s.count(chr(ord(<span class="string">'a'</span>) + i)) % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">                temp.add(chr(ord(<span class="string">'a'</span>) + i))</span><br><span class="line">            <span class="keyword">if</span> len(temp) &gt; <span class="number">1</span>:</span><br><span class="line">                print(<span class="string">'Impossible'</span>)  <span class="comment"># 如果字符串字符为奇数,但是存在不成对字符超过一个</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_step</span><span class="params">(n, s, s1)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> ans</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n // <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> s[i:].count(s[i]) != <span class="number">1</span>:</span><br><span class="line">            temp = s1[:n - i].index(s[i])</span><br><span class="line">            s1.pop(temp)</span><br><span class="line">            ans += temp</span><br><span class="line">            s = s1[::<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ans += n // <span class="number">2</span> - i</span><br><span class="line">            s[i] = <span class="literal">None</span> <span class="comment"># 将此奇数移动到中间后清除</span></span><br><span class="line">            s1 = s[::<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    n = int(input()) <span class="comment"># 字符串的长度</span></span><br><span class="line">    s = list(input()) <span class="comment"># 输入字符串</span></span><br><span class="line">    s1 = s[::<span class="number">-1</span>]</span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> is_pal(n, s):    <span class="comment"># 如果是回文数 计算挪动的步数</span></span><br><span class="line">        print(count_step(n, s, s1))</span><br></pre></td></tr></table></figure><h3 id="试题-基础练习-矩形面积交"><a href="#试题-基础练习-矩形面积交" class="headerlink" title="试题 基础练习 矩形面积交"></a>试题 基础练习 矩形面积交</h3><pre><code>问题描述　　平面上有两个矩形，它们的边平行于直角坐标系的X轴或Y轴。对于每个矩形，我们给出它的一对相对顶点的坐标，请你编程算出两个矩形的交的面积。输入格式　　输入仅包含两行，每行描述一个矩形。　　在每行中，给出矩形的一对相对顶点的坐标，每个点的坐标都用两个绝对值不超过10^7的实数表示。输出格式　　输出仅包含一个实数，为交的面积，保留到小数后两位。</code></pre><p>思路:</p><blockquote><p>重点是找到两个矩形产生交集的条件<br>矩阵1的对角点坐标的横坐标取最小， 矩阵2的对角点坐标的横坐标取最小，然后再从这两个值中取最大，得x1<br>矩阵1的对角点坐标的横坐标取最大， 矩阵2的对角点坐标的横坐标取最大，然后再从这两个值中取最小，得x2<br>如果x1&lt;x2，这两个矩形才会有交集<br>纵坐标同理<br>最后交集的面积就为：<br>area = (x2 - x1) * (y2 - y1)<br>原文链接：<a href="https://blog.csdn.net/qq_31910669/article/details/103641497" target="_blank" rel="noopener">https://blog.csdn.net/qq_31910669/article/details/103641497</a><br><a href="https://blog.csdn.net/qq_31910669/article/details/103641497" target="_blank" rel="noopener">题号2.26</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">list1 = list(map(float, input().split()))</span><br><span class="line">list2 = list(map(float, input().split()))</span><br><span class="line"></span><br><span class="line">x1 = max(min(list1[<span class="number">0</span>], list1[<span class="number">2</span>]), min(list2[<span class="number">0</span>], list2[<span class="number">2</span>]))</span><br><span class="line">x2 = min(max(list1[<span class="number">0</span>], list1[<span class="number">2</span>]), max(list2[<span class="number">0</span>], list2[<span class="number">2</span>]))</span><br><span class="line">y1 = max(min(list1[<span class="number">1</span>], list1[<span class="number">3</span>]), min(list2[<span class="number">1</span>], list2[<span class="number">3</span>]))</span><br><span class="line">y2 = min(max(list1[<span class="number">1</span>], list1[<span class="number">3</span>]), max(list2[<span class="number">1</span>], list2[<span class="number">3</span>]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x1 &lt; x2 <span class="keyword">and</span> y1 &lt; y2:</span><br><span class="line">    area = (x2 - x1)*(y2 - y1)</span><br><span class="line">    print(<span class="string">'%.2f'</span> % area)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'%.2f'</span> % <span class="number">0.00</span>)</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="试题-基础练习-矩阵乘法"><a href="#试题-基础练习-矩阵乘法" class="headerlink" title="试题 基础练习 矩阵乘法"></a>试题 基础练习 矩阵乘法</h3><pre><code>问题描述　　给定一个N阶矩阵A，输出A的M次幂（M是非负整数）　　例如：　　A =　　1 2　　3 4　　A的2次幂　　7 10　　15 22输入格式　　第一行是一个正整数N、M（1&lt;=N&lt;=30, 0&lt;=M&lt;=5），表示矩阵A的阶数和要求的幂数　　接下来N行，每行N个绝对值不超过10的非负整数，描述矩阵A的值输出格式　　输出共N行，每行N个整数，表示A的M次幂所对应的矩阵。相邻的数之间用一个空格隔开</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">slove</span><span class="params">(N, rect1, rect_ans)</span>:</span></span><br><span class="line">    rect2 = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N):  <span class="comment"># 行</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(N):  <span class="comment"># 列</span></span><br><span class="line">            <span class="keyword">for</span> n <span class="keyword">in</span> range(N):</span><br><span class="line">                rect2[i][j] += rect1[i][n] * rect_ans[n][j]</span><br><span class="line">    <span class="keyword">return</span> rect2</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    N, M =map(int, input().split())     <span class="comment"># 输入数据</span></span><br><span class="line">    rect1 = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]       <span class="comment"># 定义矩阵</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">        arr = input().split()</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">            rect1[i].append(int(arr[j])) <span class="comment"># 输入数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> M &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># 矩阵的幂</span></span><br><span class="line">        rect_ans = rect1</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(M<span class="number">-1</span>):</span><br><span class="line">            rect_ans = slove(N, rect1, rect_ans)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 幂等于0时,输出单位矩阵</span></span><br><span class="line">        rect_ans = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">            rect_ans[i][i] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 格式化输出</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">            print(rect_ans[i][j], end=<span class="string">' '</span>)</span><br><span class="line">        print()</span><br></pre></td></tr></table></figure><h3 id="试题-基础练习-分解质因数"><a href="#试题-基础练习-分解质因数" class="headerlink" title="试题 基础练习 分解质因数"></a>试题 基础练习 分解质因数</h3><pre><code>问题描述　　求出区间[a,b]中所有整数的质因数分解。输入格式　　输入两个整数a，b。输出格式　　每行输出一个数的分解，形如k=a1*a2*a3...(a1&lt;=a2&lt;=a3...，k也是从小到大的)(具体可看样例)</code></pre><p>目前此题代码优化的不是很好, 有两组数据超时,有更好的可以发在评论区分享,互相学习<br><img src="https://img-blog.csdnimg.cn/20200209115659802.png" alt="在这里插入图片描述"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">slove</span><span class="params">(num)</span>:</span></span><br><span class="line">    list = []</span><br><span class="line">    tmp = <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> num == tmp:</span><br><span class="line">        print(num,<span class="string">'='</span>, num, sep=<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(num,<span class="string">'='</span>, sep=<span class="string">''</span>, end=<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">while</span> num &gt;= tmp:</span><br><span class="line">            <span class="keyword">if</span> num % tmp ==<span class="number">0</span>:</span><br><span class="line">                list.append(tmp)</span><br><span class="line">                num = num / tmp</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tmp += <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(list)<span class="number">-1</span>):</span><br><span class="line">            print(list[i], <span class="string">'*'</span>, sep=<span class="string">''</span>, end=<span class="string">''</span>)</span><br><span class="line">        print(list[<span class="number">-1</span>])</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    a, b = map(int, input().split())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(a, b+<span class="number">1</span>):</span><br><span class="line">        slove(i)</span><br></pre></td></tr></table></figure></p><p>下方代码完美通过,思路来源<a href="https://blog.csdn.net/bianxia123456/article/details/104319686" target="_blank" rel="noopener">干啥啥不会～</a><br><img src="https://img-blog.csdnimg.cn/20200222113706329.png" alt="在这里插入图片描述"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(res, n, result)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> n % i ==<span class="number">0</span>:</span><br><span class="line">            res += str(i)</span><br><span class="line">            n = n // i</span><br><span class="line">            <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> res</span><br><span class="line">            <span class="keyword">elif</span> n <span class="keyword">in</span> result.keys():</span><br><span class="line">                res += <span class="string">'*'</span></span><br><span class="line">                res += result[n]</span><br><span class="line">                <span class="keyword">return</span> res</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res += <span class="string">'*'</span></span><br><span class="line">                <span class="keyword">return</span> solve(res, n, result)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    a, b = map(int, input().split()) <span class="comment"># 输入两个整数</span></span><br><span class="line">    result = &#123;&#125;   <span class="comment"># result存放值与其分解质因数的对应关系</span></span><br><span class="line">    <span class="comment"># &#123;3: '3', 4: '2*2', 5: '5', 6: '2*3', 7: '7', 8: '2*2*2', 9: '3*3', 10: '2*5'&#125;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(a, b+<span class="number">1</span>):</span><br><span class="line">        res = <span class="string">''</span>  <span class="comment"># 存放各个因数</span></span><br><span class="line">        result[i] = solve(res, i, result)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 输出</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> result.items():</span><br><span class="line">        s = str(k)+ <span class="string">'='</span>+ str(v)</span><br><span class="line">        print(s)</span><br></pre></td></tr></table></figure></p><h3 id="试题-基础练习-字符串对比"><a href="#试题-基础练习-字符串对比" class="headerlink" title="试题 基础练习 字符串对比"></a>试题 基础练习 字符串对比</h3><pre><code>问题描述　　给定两个仅由大写字母或小写字母组成的字符串(长度介于1到10之间)，它们之间的关系是以下4中情况之一：　　1：两个字符串长度不等。比如 Beijing 和 Hebei　　2：两个字符串不仅长度相等，而且相应位置上的字符完全一致(区分大小写)，比如 Beijing 和 Beijing　　3：两个字符串长度相等，相应位置上的字符仅在不区分大小写的前提下才能达到完全一致（也就是说，它并不满足情况2）。比如 beijing 和 BEIjing　　4：两个字符串长度相等，但是即使是不区分大小写也不能使这两个字符串一致。比如 Beijing 和 Nanjing　　编程判断输入的两个字符串之间的关系属于这四类中的哪一类，给出所属的类的编号。输入格式　　包括两行，每行都是一个字符串输出格式　　仅有一个数字，表明这两个字符串的关系编号</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">slove</span><span class="params">(str1, str2)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(str1) != len(str2):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> str1 == str2:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">        <span class="keyword">elif</span> str1.lower() != str2.lower():</span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    str1 = input()</span><br><span class="line">    str2 = input()</span><br><span class="line">    print(slove(str1, str2))</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://www.runoob.com/python3/python3-upper-lower.html" target="_blank" rel="noopener">Python 字符串大小写转换</a></p></blockquote><h3 id="试题-基础练习-时间转换"><a href="#试题-基础练习-时间转换" class="headerlink" title="试题 基础练习 时间转换"></a>试题 基础练习 时间转换</h3><pre><code>问题描述　　给定一个以秒为单位的时间t，要求用“&lt;H&gt;:&lt;M&gt;:&lt;S&gt;”的格式来表示这个时间。&lt;H&gt;表示时间，&lt;M&gt;表示分钟，而&lt;S&gt;表示秒，它们都是整数且没有前导的“0”。例如，若t=0，则应输出是“0:0:0”；若t=3661，则输出“1:1:1”。输入格式　　输入只有一行，是一个整数t（0&lt;=t&lt;=86399）。输出格式　　输出只有一行，是以“&lt;H&gt;:&lt;M&gt;:&lt;S&gt;”的格式所表示的时间，不包括引号。</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">time = int(input())</span><br><span class="line">hour = time // <span class="number">3600</span></span><br><span class="line">minute = (time - hour*<span class="number">3600</span>) // <span class="number">60</span></span><br><span class="line">second = (time - hour*<span class="number">3600</span> - minute*<span class="number">60</span>) % <span class="number">60</span></span><br><span class="line"></span><br><span class="line">print(hour,<span class="string">':'</span>,minute,<span class="string">':'</span>,second, sep=<span class="string">''</span>)</span><br></pre></td></tr></table></figure><h2 id="算法训练"><a href="#算法训练" class="headerlink" title="算法训练"></a>算法训练</h2><h3 id="试题-算法训练-预测身高"><a href="#试题-算法训练-预测身高" class="headerlink" title="试题 算法训练 预测身高"></a>试题 算法训练 预测身高</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data = list(map(float, input().split()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> data[<span class="number">0</span>] == <span class="number">0</span>:</span><br><span class="line">    ans = (data[<span class="number">1</span>]*<span class="number">0.923</span> + data[<span class="number">2</span>]) / <span class="number">2</span></span><br><span class="line">    print(<span class="string">"%.3f"</span> % ans)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    ans = (data[<span class="number">1</span>] + data[<span class="number">2</span>]) / <span class="number">2</span> * <span class="number">1.08</span></span><br><span class="line">    print(<span class="string">"%.3f"</span> % ans)</span><br></pre></td></tr></table></figure><h3 id="试题-算法训练-1的个数"><a href="#试题-算法训练-1的个数" class="headerlink" title="试题 算法训练 1的个数"></a>试题 算法训练 1的个数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">问题描述</span></span><br><span class="line"><span class="string">　　输入正整数n，判断从1到n之中，数字1一共要出现几次。例如1123这个数，则出现了两次1。例如15，那么从1到15之中，一共出现了8个1。</span></span><br><span class="line"><span class="string">输入格式</span></span><br><span class="line"><span class="string">　　一个正整数n</span></span><br><span class="line"><span class="string">输出格式</span></span><br><span class="line"><span class="string">　　一个整数，表示1出现的资料</span></span><br><span class="line"><span class="string">样例输入</span></span><br><span class="line"><span class="string">15</span></span><br><span class="line"><span class="string">样例输出</span></span><br><span class="line"><span class="string">8</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">n = int(input())</span><br><span class="line">ans = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">    strn = str(i)</span><br><span class="line">    ans += strn.count(<span class="string">'1'</span>)</span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure><h3 id="试题-算法训练-5-1最小公倍数"><a href="#试题-算法训练-5-1最小公倍数" class="headerlink" title="试题 算法训练 5-1最小公倍数"></a>试题 算法训练 5-1最小公倍数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">问题描述</span></span><br><span class="line"><span class="string">　　编写一函数lcm，求两个正整数的最小公倍数。</span></span><br><span class="line"><span class="string">样例输入</span></span><br><span class="line"><span class="string">一个满足题目要求的输入范例。</span></span><br><span class="line"><span class="string">例：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3 5</span></span><br><span class="line"><span class="string">样例输出</span></span><br><span class="line"><span class="string">15</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 最小公倍数 lcm = a*b/gcd(a,b)</span></span><br><span class="line"><span class="comment"># gcd为最大公约数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    c = a % b</span><br><span class="line">    <span class="keyword">while</span> c!=<span class="number">0</span>:</span><br><span class="line">        a = b</span><br><span class="line">        b = c</span><br><span class="line">        c = a % b</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    a,b = map(int, input().split())</span><br><span class="line">    lcm = a*b/gcd(a,b)</span><br><span class="line">    print(int(lcm))</span><br></pre></td></tr></table></figure><h3 id="试题-算法训练-6-1-递归求二项式系数值"><a href="#试题-算法训练-6-1-递归求二项式系数值" class="headerlink" title="试题 算法训练 6-1 递归求二项式系数值"></a>试题 算法训练 6-1 递归求二项式系数值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string"># 方法一 递归</span></span><br><span class="line"><span class="string">def C(k,n):</span></span><br><span class="line"><span class="string">    if k == n or k == 0:</span></span><br><span class="line"><span class="string">        return 1</span></span><br><span class="line"><span class="string">    else:</span></span><br><span class="line"><span class="string">        return C(k, n-1)+C(k-1,n-1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">k,n = map(int, input().split())</span></span><br><span class="line"><span class="string">print(C(k,n))</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二 动态规划</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">k = 3 n = 10</span></span><br><span class="line"><span class="string">[0, 0, 0, 0],</span></span><br><span class="line"><span class="string">[1, 1, 0, 0], </span></span><br><span class="line"><span class="string">[1, 2, 1, 0], </span></span><br><span class="line"><span class="string">[1, 3, 3, 1], </span></span><br><span class="line"><span class="string">[1, 4, 6, 4], </span></span><br><span class="line"><span class="string">[1, 5, 10, 10], </span></span><br><span class="line"><span class="string">[1, 6, 15, 20], </span></span><br><span class="line"><span class="string">[1, 7, 21, 35], </span></span><br><span class="line"><span class="string">[1, 8, 28, 56], </span></span><br><span class="line"><span class="string">[1, 9, 36, 84], </span></span><br><span class="line"><span class="string">[1, 10, 45, 120]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">k,n = map(int, input().split())</span><br><span class="line">dp = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(k+<span class="number">1</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(n+<span class="number">1</span>)]</span><br><span class="line"><span class="comment"># k=0时候, 1填入dp数组中</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">    dp[i][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># k=n时候, 1填入dp数组中</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, k+<span class="number">1</span>):</span><br><span class="line">    dp[i][i] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, n+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, k+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> i &gt; j:</span><br><span class="line">            dp[i][j] = dp[i<span class="number">-1</span>][j] + dp[i<span class="number">-1</span>][j<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">print(dp[n][k])</span><br></pre></td></tr></table></figure><h3 id="试题-算法训练-k好数"><a href="#试题-算法训练-k好数" class="headerlink" title="试题 算法训练 k好数"></a>试题 算法训练 k好数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">k, l = map(int, input().split())</span><br><span class="line">mod = <span class="number">1000000007</span></span><br><span class="line">ans = <span class="number">0</span></span><br><span class="line">dp = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(l+<span class="number">1</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(k)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">    dp[i][<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, l+<span class="number">1</span>): <span class="comment"># 按列遍历 l表示l位数</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(k):  <span class="comment"># 按行遍历</span></span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> range(k):</span><br><span class="line">            <span class="keyword">if</span> w != j+<span class="number">1</span> <span class="keyword">and</span> w != j<span class="number">-1</span>: <span class="comment"># 相邻的数字不添加</span></span><br><span class="line">                dp[j][i] = (dp[j][i] + dp[w][i<span class="number">-1</span>])%mod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将第l列的数字相加即为ans</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,k):</span><br><span class="line">    ans = (ans + dp[i][l])%mod</span><br><span class="line"></span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure><h3 id="试题-算法训练-区间k大数查询"><a href="#试题-算法训练-区间k大数查询" class="headerlink" title="试题 算法训练 区间k大数查询"></a>试题 算法训练 区间k大数查询</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">问题描述</span></span><br><span class="line"><span class="string">给定一个序列，每次询问序列中第l个数到第r个数中第K大的数是哪个。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">输入格式</span></span><br><span class="line"><span class="string">第一行包含一个数n，表示序列长度。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">第二行包含n个正整数，表示给定的序列。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">第三个包含一个正整数m，表示询问个数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">接下来m行，每行三个数l,r,K，表示询问序列从左往右第l个数到第r个数中，从大往小第K大的数是哪个。序列元素从1开始标号。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">输出格式</span></span><br><span class="line"><span class="string">总共输出m行，每行一个数，表示询问的答案。</span></span><br><span class="line"><span class="string">样例输入</span></span><br><span class="line"><span class="string">5</span></span><br><span class="line"><span class="string">1 2 3 4 5</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">1 5 2</span></span><br><span class="line"><span class="string">2 3 2</span></span><br><span class="line"><span class="string">样例输出</span></span><br><span class="line"><span class="string">4</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 输入数据</span></span><br><span class="line">n = int(input())</span><br><span class="line">list_q = list(map(int, input().split()))</span><br><span class="line">m = int(input())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(m):</span><br><span class="line">    l,r,k = map(int, input().split())</span><br><span class="line">    ans = list_q[l<span class="number">-1</span>:r]</span><br><span class="line">    ans = sorted(ans, reverse=<span class="literal">True</span>)</span><br><span class="line">    print(ans[k<span class="number">-1</span>])</span><br></pre></td></tr></table></figure><h3 id="试题-算法训练-寻找数组中最大值"><a href="#试题-算法训练-寻找数组中最大值" class="headerlink" title="试题 算法训练 寻找数组中最大值"></a>试题 算法训练 寻找数组中最大值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">问题描述</span></span><br><span class="line"><span class="string">　　对于给定整数数组a[],寻找其中最大值，并返回下标。</span></span><br><span class="line"><span class="string">输入格式</span></span><br><span class="line"><span class="string">　　整数数组a[],数组元素个数小于1等于100。输出数据分作两行：第一行只有一个数，表示数组元素个数；第二行为数组的各个元素。</span></span><br><span class="line"><span class="string">输出格式</span></span><br><span class="line"><span class="string">　　输出最大值，及其下标</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">n = int(input())</span><br><span class="line">list1 = list(map(int, input().split()))</span><br><span class="line">max = max(list1)</span><br><span class="line">num = list1.index(max)</span><br><span class="line">print(max,num)</span><br></pre></td></tr></table></figure><h3 id="试题-算法训练-最大的算式"><a href="#试题-算法训练-最大的算式" class="headerlink" title="试题 算法训练 最大的算式"></a>试题 算法训练 最大的算式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">问题描述</span></span><br><span class="line"><span class="string">　　题目很简单，给出N个数字，不改变它们的相对位置，在中间加入K个乘号和N-K-1个加号，（括号随便加）使最终结果尽量大。因为乘号和加号一共就是N-1个了，所以恰好每两个相邻数字之间都有一个符号。例如：</span></span><br><span class="line"><span class="string">　　N=5，K=2，5个数字分别为1、2、3、4、5，可以加成：</span></span><br><span class="line"><span class="string">　　1*2*(3+4+5)=24</span></span><br><span class="line"><span class="string">　　1*(2+3)*(4+5)=45</span></span><br><span class="line"><span class="string">　　(1*2+3)*(4+5)=45</span></span><br><span class="line"><span class="string">　　……</span></span><br><span class="line"><span class="string">输入格式</span></span><br><span class="line"><span class="string">　　输入文件共有二行，第一行为两个有空格隔开的整数，表示N和K，其中（2&lt;=N&lt;=15, 0&lt;=K&lt;=N-1）。第二行为 N个用空格隔开的数字（每个数字在0到9之间）。</span></span><br><span class="line"><span class="string">输出格式</span></span><br><span class="line"><span class="string">　　输出文件仅一行包含一个整数，表示要求的最大的结果</span></span><br><span class="line"><span class="string">样例输入</span></span><br><span class="line"><span class="string">5 2</span></span><br><span class="line"><span class="string">1 2 3 4 5</span></span><br><span class="line"><span class="string">样例输出</span></span><br><span class="line"><span class="string">120</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 输入数据</span></span><br><span class="line">n,k = map(int, input().split())</span><br><span class="line">listq = list(map(int, input().split()))</span><br><span class="line">tmp = listq[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># 建立dp数组</span></span><br><span class="line">dp = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(k+<span class="number">1</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(n+<span class="number">1</span>)]</span><br><span class="line">dp[<span class="number">1</span>][<span class="number">0</span>] = tmp <span class="comment">#  提前将第一个数放入dp数组中,方便下面for循环放置</span></span><br><span class="line"><span class="comment"># 将dp数组第一列数据添加</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n):</span><br><span class="line">    tmp += listq[i]</span><br><span class="line">    dp[i+<span class="number">1</span>][<span class="number">0</span>] = tmp</span><br><span class="line"><span class="comment"># 当没有乘号时</span></span><br><span class="line"><span class="keyword">if</span> k == <span class="number">0</span>:</span><br><span class="line">    print(dp[n][k])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, k+<span class="number">1</span>): <span class="comment"># 按列循环</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, n+<span class="number">1</span>): <span class="comment"># 按行循环</span></span><br><span class="line">            <span class="keyword">if</span> i &gt; j: <span class="comment"># 乘号小于要计算的各个数字</span></span><br><span class="line">                <span class="string">'''</span></span><br><span class="line"><span class="string">                ①dp[5][1] = dp[1][0]x(dp[5][0] - dp[1][0]) = 14</span></span><br><span class="line"><span class="string">                ②dp[5][1] = dp[2][0]x(dp[5][0] - dp[2][0]) = 36</span></span><br><span class="line"><span class="string">                ③dp[5][1] = dp[3][0]x(dp[5][0] - dp[3][0]) = 54</span></span><br><span class="line"><span class="string">                ④dp[5][1] = dp[4][0]x(dp[5][0] - dp[4][0]) = 50</span></span><br><span class="line"><span class="string">                max函数取其中最大的得数</span></span><br><span class="line"><span class="string">                '''</span></span><br><span class="line">                <span class="keyword">for</span> p <span class="keyword">in</span> range(<span class="number">1</span>,i):</span><br><span class="line">                    dp[i][j] = max(dp[i][j], dp[p][j<span class="number">-1</span>]*(dp[i][<span class="number">0</span>] - dp[p][<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">    print(dp[n][k])</span><br></pre></td></tr></table></figure><h2 id="算法提高"><a href="#算法提高" class="headerlink" title="算法提高"></a>算法提高</h2><h3 id="试题-算法提高-最长滑雪道"><a href="#试题-算法提高-最长滑雪道" class="headerlink" title="试题 算法提高 最长滑雪道"></a>试题 算法提高 最长滑雪道</h3><p>思路:</p><pre><code>深度优先搜索(dfs),将搜索到的每个位置的答案存入dp中</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    max_height = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> dp[x][y] &gt; <span class="number">0</span>: <span class="comment"># 如果前面dfs已经将该点的高度存入dp中,则直接返回,不用计算</span></span><br><span class="line">        <span class="keyword">return</span> dp[x][y]</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        tx = x + next_[k][<span class="number">0</span>]</span><br><span class="line">        ty = y + next_[k][<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> tx &lt; <span class="number">0</span> <span class="keyword">or</span> tx &gt;= row <span class="keyword">or</span> ty &lt; <span class="number">0</span> <span class="keyword">or</span> ty &gt;= col:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> arr[tx][ty] &gt;= arr[x][y]:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        max_height = max(max_height, dfs(tx, ty) + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    dp[x][y] = max_height</span><br><span class="line">    <span class="keyword">return</span> dp[x][y]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line">    row, col = map(int, input().split())</span><br><span class="line">    dp = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(col)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(row)]</span><br><span class="line">    arr = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(row)]</span><br><span class="line"></span><br><span class="line">    next_ = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>,<span class="number">0</span>], [<span class="number">0</span>,<span class="number">-1</span>], [<span class="number">-1</span>, <span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(row):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(col):</span><br><span class="line">            ans = max(ans, dfs(i, j))</span><br><span class="line"></span><br><span class="line">    print(ans)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;全部代码我全部托管到我的GitHub上了,喜欢的麻烦点个关注和star吧😀&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/PlutoaCharon/LanQiaoCode_python&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;
      
    
    </summary>
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/categories/Python%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/tags/Python%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Python算法学习: 任意进制转换</title>
    <link href="https://plutoacharon.github.io/2020/02/23/Python%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E4%BB%BB%E6%84%8F%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/"/>
    <id>https://plutoacharon.github.io/2020/02/23/Python算法学习-任意进制转换/</id>
    <published>2020-02-23T12:35:17.000Z</published>
    <updated>2020-02-23T12:40:44.224Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python实现任意进制转换"><a href="#Python实现任意进制转换" class="headerlink" title="Python实现任意进制转换"></a>Python实现任意进制转换</h2><p>给出一个A进制数N，你要把它转成B进制。</p><p>输入<br>第一行是两个整数A,B(2&lt;=A,B&lt;=16)</p><p>第二行是一个A进制的字符串N。题目保证A进制数N转成10进制后的范围在inti型范围内。</p><p>如果A&gt;=10,且某些位的权值大于等于10，那么权值就用小写字母表示，比如，a代表10，bb代表11，c代表12，d代表13，e代表14，f代表15。</p><p>输出<br>输出N转成B进制的结果。</p><pre><code>输入10 2100输出1100100输入2 1610001111输出8f</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(n, x)</span>:</span></span><br><span class="line">    <span class="comment">#n为待转换的十进制数，x为机制，取值为2-16</span></span><br><span class="line">    a=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>]</span><br><span class="line">    b=[]</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        s=n // x  <span class="comment"># 商</span></span><br><span class="line">        y=n % x  <span class="comment"># 余数</span></span><br><span class="line">        b=b+[y]</span><br><span class="line">        <span class="keyword">if</span> s==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        n=s</span><br><span class="line">    b.reverse() <span class="comment"># 辗转相除法</span></span><br><span class="line">    ans = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> b:</span><br><span class="line">        ans += str(a[i]) </span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line">A,B = map(int, input().split())</span><br><span class="line">n = int(input())</span><br><span class="line">n = int(str(n), A) <span class="comment"># int函数可以将A进制的n统一转为十进制</span></span><br><span class="line">ans = f(n, B)</span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Python实现任意进制转换&quot;&gt;&lt;a href=&quot;#Python实现任意进制转换&quot; class=&quot;headerlink&quot; title=&quot;Python实现任意进制转换&quot;&gt;&lt;/a&gt;Python实现任意进制转换&lt;/h2&gt;&lt;p&gt;给出一个A进制数N，你要把它转成B进制。&lt;/
      
    
    </summary>
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/categories/Python%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/tags/Python%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Python算法学习: 竞码编程-蓝桥杯模拟赛2题解</title>
    <link href="https://plutoacharon.github.io/2020/02/23/Python%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E7%AB%9E%E7%A0%81%E7%BC%96%E7%A8%8B-%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%A8%A1%E6%8B%9F%E8%B5%9B2%E9%A2%98%E8%A7%A3/"/>
    <id>https://plutoacharon.github.io/2020/02/23/Python算法学习-竞码编程-蓝桥杯模拟赛2题解/</id>
    <published>2020-02-23T12:34:42.000Z</published>
    <updated>2020-02-23T12:40:42.904Z</updated>
    
    <content type="html"><![CDATA[<p>试题网站:<code>http://oj.hzjingma.com/</code><br>@<a href="文章目录">TOC</a></p><h2 id="A-试题A：完美车牌-5’"><a href="#A-试题A：完美车牌-5’" class="headerlink" title="A. 试题A：完美车牌 5’"></a>A. 试题A：完美车牌 5’</h2><p>有一些数字可以颠倒过来看，例如0、1、8颠倒过来还是本身，6颠倒过来是9，9颠倒过来看还是6，其他数字颠倒过来不构成数字。</p><p>类似的，一些多位数也可以颠倒过来看，比如106颠倒过来是901</p><p>假设某个城市的车牌只由6位数字组成,每一位都可以取0到9。请问这个城市最多有多少个车牌180°180°倒过来恰好还是原来的车牌?</p><p>例如：车牌号：886988,倒过来还是886988</p><p>【答案提交】</p><p>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个数字，填写多余的内容将无法得分。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ans = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">1000000</span>):</span><br><span class="line">    i = str(i).zfill(<span class="number">6</span>) <span class="comment"># 补充前导0</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'2'</span> <span class="keyword">in</span> str(i) <span class="keyword">or</span> <span class="string">'3'</span> <span class="keyword">in</span> str(i) <span class="keyword">or</span> <span class="string">'4'</span> <span class="keyword">in</span> str(i) <span class="keyword">or</span> <span class="string">'5'</span> <span class="keyword">in</span> str(i) <span class="keyword">or</span> <span class="string">'7'</span> <span class="keyword">in</span> str(i):</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        s = str(i)</span><br><span class="line">        s1 = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">            <span class="keyword">if</span> s[<span class="number">5</span>-i] == <span class="string">'6'</span>:</span><br><span class="line">                s1 += <span class="string">'9'</span></span><br><span class="line">            <span class="keyword">elif</span> s[<span class="number">5</span>-i] == <span class="string">'9'</span>:</span><br><span class="line">                s1 += <span class="string">'6'</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                s1 += s[<span class="number">5</span>-i]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> s == s1:</span><br><span class="line">            ans += <span class="number">1</span></span><br><span class="line">            print(s)</span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure></p><h2 id="B-试题B：完美日期-5’"><a href="#B-试题B：完美日期-5’" class="headerlink" title="B. 试题B：完美日期 5’"></a>B. 试题B：完美日期 5’</h2><p>   不知天上宫阙，今夕是何年。</p><p>   对于完美日期yyyy/mm/dd，wlxsq的定义是:</p><p>年月日中均没有出现数字4，<br>年月日的数位之和是8的倍数<br>  例如：2020/02/02 就是一个完美日期，没有出现数字4，且数位之和是8的倍数。</p><p>   wlxsq想知道从2020/02/02开始，第88个完美日期是哪个？</p><p>【答案提交】</p><pre><code>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个格式yyyy/yy/dd，在提交答案时直接填写这个日期，注意需要如果答案有前导零则不能忽略，填写多余的内容将无法得分。</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">y = <span class="number">2020</span></span><br><span class="line">m = <span class="number">2</span></span><br><span class="line">d = <span class="number">2</span></span><br><span class="line">day_ = [<span class="number">0</span>, <span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>]</span><br><span class="line">ans = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> ans &lt;= <span class="number">87</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'4'</span> <span class="keyword">not</span> <span class="keyword">in</span> str(y) <span class="keyword">and</span> <span class="string">'4'</span> <span class="keyword">not</span> <span class="keyword">in</span> str(d) <span class="keyword">and</span> <span class="string">'4'</span> <span class="keyword">not</span> <span class="keyword">in</span> str(m):</span><br><span class="line">        <span class="keyword">if</span> d &gt;= <span class="number">10</span>:</span><br><span class="line">            <span class="keyword">if</span> (y+m+int(str(d)[<span class="number">0</span>])+(int(str(d)[<span class="number">1</span>]))) % <span class="number">8</span> == <span class="number">0</span>:</span><br><span class="line">                ans += <span class="number">1</span></span><br><span class="line">                print(ans)</span><br><span class="line">                print(y, m, d)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> (y+m+d)%<span class="number">8</span> == <span class="number">0</span>:</span><br><span class="line">                ans += <span class="number">1</span></span><br><span class="line">                print(ans)</span><br><span class="line">                print(y, m, d)</span><br><span class="line">    d += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> d &gt; day_[m]:</span><br><span class="line">        d = <span class="number">1</span></span><br><span class="line">        m += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> m &gt; <span class="number">12</span>:</span><br><span class="line">        m = <span class="number">1</span></span><br><span class="line">        y += <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="C-试题C：天机锁10’"><a href="#C-试题C：天机锁10’" class="headerlink" title="C. 试题C：天机锁10’"></a>C. 试题C：天机锁10’</h2><p>描述<br>【问题描述】</p><p>   天机锁，锁天机~</p><p>   wlxsq在机缘巧合的情况下就获得一把天机锁。wlxsq迫不及待的想打开这把锁。该锁的密码是由八个数字构成的,每个数字都是[0,9]中的一个~</p><p>锁上面写道：</p><p>水(数字9)火(数字4)相生相克,同现同隐(要么都出现，要么都不出现),数量一致(且出现则数量得一样多)。<br>土(数字2)乃大地，为伊始(数字2一定出现)。<br>世间万物，不过五二(八个数字之和不超过52)。<br>此乃天机，一日一次之~<br>     由于天机锁一天只能试一次，wlxsq想知道，总共有多少种方案~</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ans = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">100000000</span>):</span><br><span class="line">    s = str(i)</span><br><span class="line">    s = s.zfill(<span class="number">8</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'2'</span> <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'4'</span> <span class="keyword">in</span> s <span class="keyword">and</span> <span class="string">'9'</span> <span class="keyword">in</span> s <span class="keyword">and</span> s.count(<span class="string">'4'</span>) == s.count(<span class="string">'9'</span>):</span><br><span class="line">            <span class="keyword">if</span> int(s[<span class="number">0</span>])+int(s[<span class="number">1</span>])+int(s[<span class="number">2</span>])+int(s[<span class="number">3</span>])+int(s[<span class="number">4</span>])+int(s[<span class="number">5</span>])+int(s[<span class="number">6</span>])+int(s[<span class="number">7</span>]) &lt;= <span class="number">52</span>:</span><br><span class="line">                ans += <span class="number">1</span></span><br><span class="line">                print(i)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="string">'4'</span> <span class="keyword">not</span> <span class="keyword">in</span> s <span class="keyword">and</span> <span class="string">'9'</span> <span class="keyword">not</span> <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> int(s[<span class="number">0</span>])+int(s[<span class="number">1</span>])+int(s[<span class="number">2</span>])+int(s[<span class="number">3</span>])+int(s[<span class="number">4</span>])+int(s[<span class="number">5</span>])+int(s[<span class="number">6</span>])+int(s[<span class="number">7</span>]) &lt;= <span class="number">52</span>:</span><br><span class="line">                ans += <span class="number">1</span></span><br><span class="line">                print(i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure><h2 id="D-试题D：完美运算-10‘"><a href="#D-试题D：完美运算-10‘" class="headerlink" title="D. 试题D：完美运算 10‘"></a>D. 试题D：完美运算 10‘</h2><p><img src="https://img-blog.csdnimg.cn/20200223114237130.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>思路:算出全部情况和A=B的情况,最后<code>(全部情况-A=B情况)/2+A=B情况</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(n)</span>:</span></span><br><span class="line">    x = <span class="number">3</span></span><br><span class="line">    <span class="comment">#n为待转换的十进制数，x为机制，取值为2-16</span></span><br><span class="line">    a=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="string">'A'</span>,<span class="string">'b'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>,<span class="string">'E'</span>,<span class="string">'F'</span>]</span><br><span class="line">    b=[]</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        s=n // x  <span class="comment"># 商</span></span><br><span class="line">        y=n % x  <span class="comment"># 余数</span></span><br><span class="line">        b=b+[y]</span><br><span class="line">        <span class="keyword">if</span> s==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        n=s</span><br><span class="line">    b.reverse()</span><br><span class="line">    ans = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> b:</span><br><span class="line">        ans += str(a[i])</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line">    ans2 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">2021</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">2021</span>):</span><br><span class="line">            a1 = f(i).count(<span class="string">'1'</span>)</span><br><span class="line">            a2 = f(i).count(<span class="string">'2'</span>)</span><br><span class="line">            b1 = f(j).count(<span class="string">'1'</span>)</span><br><span class="line">            b2 = f(j).count(<span class="string">'2'</span>)</span><br><span class="line">            <span class="keyword">if</span> abs(int(a1)-int(a2)) == abs(int(b1)-int(b2)):</span><br><span class="line">                ans += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> i == j:</span><br><span class="line">                ans2 += <span class="number">1</span></span><br><span class="line">    print(ans)</span><br><span class="line">    print(ans2)</span><br></pre></td></tr></table></figure></p><h2 id="F-试题F：JM斗牛-17’"><a href="#F-试题F：JM斗牛-17’" class="headerlink" title="F. 试题F：JM斗牛 17’"></a>F. 试题F：JM斗牛 17’</h2><p>描述<br>JM打完麻将，觉得太简单了，所以决定去斗牛，挑战一下高难度。</p><p>一副牌共54张牌，即采用牌大王(1张),小王(1张),K，Q，J，10，9，8，7，6，5，4，3，2，A。除了大小王，其余牌型均为4张。故4*13+2=54张</p><p>斗牛则是每人5张牌，计算5张牌的构成的点数，然后比较点数大小。</p><p>关于点数计算：</p><p>大王(S)，小王(S)，K，Q，J都当成是10点，A当成是1点，其余牌都当其本身的点数。 大王，小王均用大写字母S表示<br>每位玩家5张牌，玩家用手上任意的3张牌组合（且只能用3张牌组成10的倍数），使其点数之和为10的倍数，这样就称之为“牛”。<br>然后将剩余的2张牌点数之和取个位数，如这2张牌之和也为10的倍数，则组成“牛牛”牌型。如这2张牌之和不为10的整数倍，则去掉十位数之后个位数为几，则成为“牛几”牌型。<br>如任意三张牌组合的点数之和都不能成为10的倍数，则称之为“无牛”牌型。<br>例如：</p><p>牛牛牌型:选取的3张牌之和为10的整数倍,余下2张牌之和也为10的整数倍。例：A,9,10,J,Q.选取(A,9,J)和为10的整数倍,(10,Q构成)牛牛</p><p>牛九牌型:选取的3张牌之和为10的整数倍,余下2张牌之和的个位数为9。例：A,9,10,J,9。   </p><p>牛八牌型:选取的3张牌之和为10的整数倍,余下2张牌之和的个位数为8。例：A,9,10,J,8。</p><p>牛七牌型:选取的3张牌之和为10的整数倍,余下2张牌之和的个位数为7。例:A,9,10,J,7。选取(A,9,J)和为10的整数倍，(10,7构成)牛七</p><p>无牛牌型: 任意选取的3张牌之和均不可能为10的整数倍例:A,9,8,9,7。</p><p>   JM会打麻将，但是不怎么会斗牛，想请你帮忙编写程序帮忙计算一下，JM 拿到的牌是什么牌型。<br>样例</p><pre><code>输入A 2 3 5 S输出1输入S S A 8 8输出so sad!输入S S J Q K输出so cool!</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(list)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(j + <span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">                <span class="keyword">if</span> (list[i] + list[j] + list[k]) % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">                    num1 = list[i]</span><br><span class="line">                    num2 = list[j]</span><br><span class="line">                    num3 = list[k]</span><br><span class="line">                    list.remove(num1)</span><br><span class="line">                    list.remove(num2)</span><br><span class="line">                    list.remove(num3)</span><br><span class="line">                    <span class="keyword">if</span> (list[<span class="number">0</span>] + list[<span class="number">1</span>]) % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">                        str1 = <span class="string">"so cool!"</span></span><br><span class="line">                        <span class="keyword">return</span> str1</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">return</span> (list[<span class="number">0</span>] + list[<span class="number">1</span>]) % <span class="number">10</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        str2 = <span class="string">"so sad!"</span></span><br><span class="line">        <span class="keyword">return</span> str2</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    str = input()</span><br><span class="line">    str = str.replace(<span class="string">'A'</span>,<span class="string">'1'</span>)</span><br><span class="line">    str = str.replace(<span class="string">'S'</span>,<span class="string">'10'</span>)</span><br><span class="line">    str = str.replace(<span class="string">'K'</span>,<span class="string">'10'</span>)</span><br><span class="line">    str = str.replace(<span class="string">'Q'</span>,<span class="string">'10'</span>)</span><br><span class="line">    str = str.replace(<span class="string">'J'</span>,<span class="string">'10'</span>)</span><br><span class="line">    list = list(str.split())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(list)):</span><br><span class="line">        list[i] = int(list[i])</span><br><span class="line"></span><br><span class="line">    ans = solve(list=list)</span><br><span class="line">    print(ans)</span><br></pre></td></tr></table></figure><h2 id="H-试题H：宝剑锋从磨砺出-20’"><a href="#H-试题H：宝剑锋从磨砺出-20’" class="headerlink" title="H. 试题H：宝剑锋从磨砺出 20’"></a>H. 试题H：宝剑锋从磨砺出 20’</h2><p><img src="https://img-blog.csdnimg.cn/20200223114448700.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>思路: k减去所有材料的p2,然后找到最大的p1去处理k</p><p>样例</p><pre><code>输入1 10 3 5输出3输入2 103 52 6输出2</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">n,k = map(int, input().split())</span><br><span class="line">ans = <span class="number">0</span></span><br><span class="line">list1 = []</span><br><span class="line">list2 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    a,b = map(int, input().split())</span><br><span class="line">    list1.append(a)</span><br><span class="line">    list2.append(b)</span><br><span class="line">list1 = sorted(list1)</span><br><span class="line">list2 = sorted(list2)</span><br><span class="line"><span class="keyword">while</span> list2 <span class="keyword">and</span> list2[<span class="number">-1</span>] &gt; list1[<span class="number">-1</span>] <span class="keyword">and</span> k &gt; <span class="number">0</span>:</span><br><span class="line">    k -= list2[<span class="number">-1</span>]</span><br><span class="line">    list2.pop()</span><br><span class="line">    ans += <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> k &gt; <span class="number">0</span>:</span><br><span class="line">    ans += k // list1[<span class="number">-1</span>] + <span class="number">1</span></span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;试题网站:&lt;code&gt;http://oj.hzjingma.com/&lt;/code&gt;&lt;br&gt;@&lt;a href=&quot;文章目录&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;A-试题A：完美车牌-5’&quot;&gt;&lt;a href=&quot;#A-试题A：完美车牌-5’&quot; class=&quot;headerlin
      
    
    </summary>
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/categories/Python%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/tags/Python%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Python算法学习: 计蒜客 2020 蓝桥杯大学 B 组省赛模拟赛 （一）题目及解析</title>
    <link href="https://plutoacharon.github.io/2020/02/23/Python%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E8%AE%A1%E8%92%9C%E5%AE%A2-2020-%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%A4%A7%E5%AD%A6-B-%E7%BB%84%E7%9C%81%E8%B5%9B%E6%A8%A1%E6%8B%9F%E8%B5%9B-%EF%BC%88%E4%B8%80%EF%BC%89%E9%A2%98%E7%9B%AE%E5%8F%8A%E8%A7%A3%E6%9E%90/"/>
    <id>https://plutoacharon.github.io/2020/02/23/Python算法学习-计蒜客-2020-蓝桥杯大学-B-组省赛模拟赛-（一）题目及解析/</id>
    <published>2020-02-23T12:34:04.000Z</published>
    <updated>2020-02-23T12:40:40.878Z</updated>
    
    <content type="html"><![CDATA[<h3 id="A-结果填空-有趣的数字"><a href="#A-结果填空-有趣的数字" class="headerlink" title="A. 结果填空: 有趣的数字"></a>A. 结果填空: 有趣的数字</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(n)</span>:</span></span><br><span class="line">    tmp = <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> tmp == n:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; tmp:</span><br><span class="line">        k = n % tmp</span><br><span class="line">        <span class="keyword">if</span> k==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tmp += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">100000</span>):</span><br><span class="line">        <span class="keyword">if</span> solve(i) <span class="keyword">and</span> <span class="string">'5'</span> <span class="keyword">in</span> str(i):</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">    print(count)</span><br></pre></td></tr></table></figure><h3 id="B-结果填空：爬楼梯"><a href="#B-结果填空：爬楼梯" class="headerlink" title="B. 结果填空：爬楼梯"></a>B. 结果填空：爬楼梯</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">蒜头要爬楼梯。楼梯一共有 10 层台阶。因为腿长的限制，每次最多能上 4 层台阶。但是第 5,7层楼梯坏掉了不能踩。求上楼梯的方案数</span></span><br><span class="line"><span class="string">https://nanti.jisuanke.com/t/43116</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">ans = [<span class="number">0</span>]*<span class="number">11</span> <span class="comment"># 定义存放数据的列表</span></span><br><span class="line">ans[<span class="number">0</span>] = <span class="number">1</span> <span class="comment"># 初始化</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">5</span> <span class="keyword">or</span> i == <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> i - <span class="number">1</span> &gt;= <span class="number">0</span>:</span><br><span class="line">        ans[i] += ans[i<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">if</span> i - <span class="number">2</span> &gt;= <span class="number">0</span>:</span><br><span class="line">        ans[i] += ans[i<span class="number">-2</span>]</span><br><span class="line">    <span class="keyword">if</span> i - <span class="number">3</span> &gt;= <span class="number">0</span>:</span><br><span class="line">        ans[i] += ans[i<span class="number">-3</span>]</span><br><span class="line">    <span class="keyword">if</span> i - <span class="number">4</span> &gt;= <span class="number">0</span>:</span><br><span class="line">        ans[i] += ans[i<span class="number">-4</span>]</span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure><h3 id="C-结果填空：七巧板"><a href="#C-结果填空：七巧板" class="headerlink" title="C. 结果填空：七巧板"></a>C. 结果填空：七巧板</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">思路：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">跟平面划分一个道理，每次都会多划分一个区域，F(n)=F(n-1)+1 。</span></span><br><span class="line"><span class="string">答案是47 = 7+ (6+7+8+9+10）</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">x = <span class="number">7</span></span><br><span class="line">a = <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">    x += a</span><br><span class="line">    a += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><h3 id="D-结果填空：苹果"><a href="#D-结果填空：苹果" class="headerlink" title="D. 结果填空：苹果"></a>D. 结果填空：苹果</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">count = <span class="number">0</span></span><br><span class="line">list = [<span class="number">7</span> ,<span class="number">2</span> ,<span class="number">12</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">10</span> ,<span class="number">5</span> ,<span class="number">4</span> ,<span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">3</span> ,<span class="number">8</span> ,<span class="number">7</span> ,<span class="number">8</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>):</span><br><span class="line">    <span class="keyword">if</span> list[i] &gt;=  <span class="number">3</span>:</span><br><span class="line">        count += list[i] // <span class="number">3</span></span><br><span class="line">        list[i] = list[i] % <span class="number">3</span></span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">while</span> flag:</span><br><span class="line">        <span class="keyword">if</span> list[i] &gt;=<span class="number">1</span> <span class="keyword">and</span> list[i + <span class="number">1</span>] &gt;= <span class="number">1</span> <span class="keyword">and</span> list[i + <span class="number">2</span>] &gt;= <span class="number">1</span>:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            list[i] -= <span class="number">1</span></span><br><span class="line">            list[i + <span class="number">1</span>] -= <span class="number">1</span></span><br><span class="line">            list[i + <span class="number">2</span>] -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">print(list)</span><br><span class="line">print(count)</span><br></pre></td></tr></table></figure><h3 id="F-程序设计：寻找重复项"><a href="#F-程序设计：寻找重复项" class="headerlink" title="F. 程序设计：寻找重复项"></a>F. 程序设计：寻找重复项</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a, b, c = map(int, input().split())</span><br><span class="line">list = []</span><br><span class="line">list.append(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">2000001</span>):</span><br><span class="line">    num = ((a*list[i<span class="number">-1</span>]) + (list[i<span class="number">-1</span>] % b)) % c</span><br><span class="line">    list.append(num)</span><br><span class="line">    <span class="keyword">if</span> len(list) != len(set(list)):</span><br><span class="line">        print(i)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="number">-1</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;A-结果填空-有趣的数字&quot;&gt;&lt;a href=&quot;#A-结果填空-有趣的数字&quot; class=&quot;headerlink&quot; title=&quot;A. 结果填空: 有趣的数字&quot;&gt;&lt;/a&gt;A. 结果填空: 有趣的数字&lt;/h3&gt;&lt;figure class=&quot;highlight pyth
      
    
    </summary>
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/categories/Python%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/tags/Python%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Python算法学习: 计蒜客蓝桥杯训练营题解(持续更新)</title>
    <link href="https://plutoacharon.github.io/2020/02/23/Python%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E8%AE%A1%E8%92%9C%E5%AE%A2%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%AE%AD%E7%BB%83%E8%90%A5%E9%A2%98%E8%A7%A3-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"/>
    <id>https://plutoacharon.github.io/2020/02/23/Python算法学习-计蒜客蓝桥杯训练营题解-持续更新/</id>
    <published>2020-02-23T12:29:16.000Z</published>
    <updated>2020-02-23T12:40:42.331Z</updated>
    
    <content type="html"><![CDATA[<h2 id="day1字符串和日期"><a href="#day1字符串和日期" class="headerlink" title="day1字符串和日期:"></a>day1字符串和日期:</h2><h3 id="特殊的三角形"><a href="#特殊的三角形" class="headerlink" title="特殊的三角形"></a>特殊的三角形</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">特殊的三角形</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">输入:9</span></span><br><span class="line"><span class="string">输出:</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">       121</span></span><br><span class="line"><span class="string">      12321</span></span><br><span class="line"><span class="string">     1234321</span></span><br><span class="line"><span class="string">    123454321</span></span><br><span class="line"><span class="string">   12345654321</span></span><br><span class="line"><span class="string">  1234567654321</span></span><br><span class="line"><span class="string"> 123456787654321</span></span><br><span class="line"><span class="string">12345678987654321</span></span><br><span class="line"><span class="string">输入:C</span></span><br><span class="line"><span class="string">输出:</span></span><br><span class="line"><span class="string">  A</span></span><br><span class="line"><span class="string"> ABA</span></span><br><span class="line"><span class="string">ABCBA</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">n = input()</span><br><span class="line"><span class="keyword">if</span> ord(n) &lt; <span class="number">65</span>:</span><br><span class="line">    n = int(n)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, n + <span class="number">1</span> - i):</span><br><span class="line">            print(<span class="string">' '</span>, end=<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, i+<span class="number">1</span>):</span><br><span class="line">            print(j, end=<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i , <span class="number">1</span>, <span class="number">-1</span>):</span><br><span class="line">            print(j<span class="number">-1</span>, end=<span class="string">''</span>)</span><br><span class="line">        print()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    ch = ord(n)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">65</span>, ch + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, ch - i + <span class="number">1</span>):</span><br><span class="line">            print(<span class="string">' '</span>, end=<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">65</span>, i + <span class="number">1</span>):</span><br><span class="line">            print(chr(j), end=<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i, <span class="number">65</span>, <span class="number">-1</span>):</span><br><span class="line">            print(chr(j - <span class="number">1</span>), end=<span class="string">''</span>)</span><br><span class="line">        print()</span><br></pre></td></tr></table></figure><h3 id="字母三角形"><a href="#字母三角形" class="headerlink" title="字母三角形"></a>字母三角形</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">  A</span></span><br><span class="line"><span class="string"> BBB</span></span><br><span class="line"><span class="string">CCCCC</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">n = int(input())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">    space = (n - i) * <span class="string">' '</span></span><br><span class="line">    ch = chr(i+<span class="number">64</span>) * (<span class="number">2</span>*i - <span class="number">1</span>)</span><br><span class="line">    print(space+ch)</span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">str = list(input())</span><br><span class="line"><span class="comment"># a=97 z=122 A=65 Z=90</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(str)):</span><br><span class="line">    <span class="keyword">if</span> <span class="number">65</span> &lt;= ord(str[i]) &lt;=<span class="number">122</span>:</span><br><span class="line">        <span class="keyword">if</span> str[i] == <span class="string">'z'</span>:</span><br><span class="line">            str[i] = <span class="string">'a'</span></span><br><span class="line">        <span class="keyword">elif</span> str[i] == <span class="string">'Z'</span>:</span><br><span class="line">            str[i] = <span class="string">'A'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            str[i] = chr(ord(str[i])+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str:</span><br><span class="line">    print(i, end=<span class="string">''</span>)</span><br></pre></td></tr></table></figure><h3 id="寻找字符串"><a href="#寻找字符串" class="headerlink" title="寻找字符串"></a>寻找字符串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">输入:</span></span><br><span class="line"><span class="string">ossosso</span></span><br><span class="line"><span class="string">osso</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">输出:</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">str = input()</span><br><span class="line">target = input()</span><br><span class="line">ans = <span class="number">0</span></span><br><span class="line">len_t = len(target)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(str)):</span><br><span class="line">    <span class="keyword">if</span> str[i] == target[<span class="number">0</span>]:</span><br><span class="line">        <span class="keyword">if</span> str[i:i+len_t<span class="number">-1</span>] == target[<span class="number">0</span>:len_t<span class="number">-1</span>]:</span><br><span class="line">            ans += <span class="number">1</span></span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure><h3 id="恋爱纪念日"><a href="#恋爱纪念日" class="headerlink" title="恋爱纪念日"></a>恋爱纪念日</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">year, month, day, k = map(int, input().split())</span><br><span class="line">day_ = [<span class="number">0</span>, <span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, k+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> year % <span class="number">100</span> != <span class="number">0</span> <span class="keyword">and</span> year % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">or</span> year % <span class="number">400</span> == <span class="number">0</span>:   <span class="comment">#判断是否为闰年</span></span><br><span class="line">        day_[<span class="number">2</span>] = <span class="number">29</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        day_[<span class="number">2</span>] = <span class="number">28</span></span><br><span class="line">    day += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> day == day_[month]:</span><br><span class="line">        day = <span class="number">0</span></span><br><span class="line">        month += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> month == <span class="number">13</span>:</span><br><span class="line">        month = <span class="number">1</span></span><br><span class="line">        year += <span class="number">1</span></span><br><span class="line">print(<span class="string">"&#123;:d&#125;-&#123;:0&gt;2d&#125;-&#123;:0&gt;2d&#125;"</span>.format(year, month, day))</span><br></pre></td></tr></table></figure><h2 id="day3代码能力提升"><a href="#day3代码能力提升" class="headerlink" title="day3代码能力提升"></a>day3代码能力提升</h2><h3 id="机器人"><a href="#机器人" class="headerlink" title="机器人"></a>机器人</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">蒜头君收到了一份礼物，是一个最新版的机器人。这个机器人有 4 种指令：</span></span><br><span class="line"><span class="string">forward x，前进x米。</span></span><br><span class="line"><span class="string">back x，先向后转，然后前进x米。</span></span><br><span class="line"><span class="string">left x，先向左转，然后前进x米。</span></span><br><span class="line"><span class="string">right x，先向右转，然后前进x米。</span></span><br><span class="line"><span class="string">现在把机器人放在坐标轴原点，起始朝向为x轴正方向。经过一系列指令以后，你能告诉蒜头君机器人的坐标位置吗。坐标轴上一个单位长度表示1米。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">样例输入:</span></span><br><span class="line"><span class="string">10</span></span><br><span class="line"><span class="string">back -9</span></span><br><span class="line"><span class="string">left 3</span></span><br><span class="line"><span class="string">left 8</span></span><br><span class="line"><span class="string">back 15</span></span><br><span class="line"><span class="string">right 10</span></span><br><span class="line"><span class="string">right -7</span></span><br><span class="line"><span class="string">right -3</span></span><br><span class="line"><span class="string">left 11</span></span><br><span class="line"><span class="string">right 17</span></span><br><span class="line"><span class="string">left 3</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">样例输出:</span></span><br><span class="line"><span class="string">9 -7</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">n = int(input())</span><br><span class="line"></span><br><span class="line">dx = [<span class="number">0</span>,<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>]  <span class="comment">#上左下右</span></span><br><span class="line">dy = [<span class="number">1</span>, <span class="number">0</span>,<span class="number">-1</span>, <span class="number">0</span>]  <span class="comment">#上左下右</span></span><br><span class="line"></span><br><span class="line">now_dir = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">nowx = <span class="number">0</span></span><br><span class="line">nowy = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    dir, x = map(str, input().split())</span><br><span class="line">    x = int(x)</span><br><span class="line">    <span class="keyword">if</span> dir[<span class="number">0</span>] == <span class="string">'b'</span>:</span><br><span class="line">        now_dir = (now_dir+<span class="number">2</span>) % <span class="number">4</span>  <span class="comment"># 向后</span></span><br><span class="line">    <span class="keyword">elif</span> dir[<span class="number">0</span>] == <span class="string">'l'</span>:</span><br><span class="line">        now_dir = (now_dir+<span class="number">1</span>) % <span class="number">4</span>  <span class="comment"># 向左</span></span><br><span class="line">    <span class="keyword">elif</span> dir[<span class="number">0</span>] == <span class="string">'r'</span>:</span><br><span class="line">        now_dir = (now_dir+<span class="number">3</span>) % <span class="number">4</span>  <span class="comment"># 向右</span></span><br><span class="line">    nowx += dx[now_dir] * x</span><br><span class="line">    nowy += dy[now_dir] * x</span><br><span class="line"></span><br><span class="line">print(nowx, nowy)</span><br></pre></td></tr></table></figure><h3 id="矩阵旋转"><a href="#矩阵旋转" class="headerlink" title="矩阵旋转"></a>矩阵旋转</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">输入:</span></span><br><span class="line"><span class="string">3 4</span></span><br><span class="line"><span class="string">-1 3 6 3</span></span><br><span class="line"><span class="string">7 7 9 1</span></span><br><span class="line"><span class="string">10 3 4 6</span></span><br><span class="line"><span class="string">输出:</span></span><br><span class="line"><span class="string">10 7 -1</span></span><br><span class="line"><span class="string">3 7 3</span></span><br><span class="line"><span class="string">4 9 6</span></span><br><span class="line"><span class="string">6 1 3</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">n, m = map(int, input().split())</span><br><span class="line">arr = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">arr_ans = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(n)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(m)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">        arr_ans[i][j] = arr[n-j<span class="number">-1</span>][i]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">        print(arr_ans[i][j], end=<span class="string">' '</span>)</span><br><span class="line">    print()</span><br></pre></td></tr></table></figure><h3 id="矩阵最大子阵"><a href="#矩阵最大子阵" class="headerlink" title="矩阵最大子阵"></a>矩阵最大子阵</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">矩阵本身可看作是一个特殊的子矩阵</span></span><br><span class="line"><span class="string">输入:</span></span><br><span class="line"><span class="string">3 3</span></span><br><span class="line"><span class="string">2 -4 1</span></span><br><span class="line"><span class="string">-1 2 1</span></span><br><span class="line"><span class="string">4 -2 2</span></span><br><span class="line"><span class="string">输出:</span></span><br><span class="line"><span class="string">6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">n, m = map(int, input().split())</span><br><span class="line">arr  = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">ans  = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(i, n):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(m):</span><br><span class="line">            <span class="keyword">for</span> l <span class="keyword">in</span> range(k, m):</span><br><span class="line">                tmp = <span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> p <span class="keyword">in</span> range(i, j+<span class="number">1</span>):</span><br><span class="line">                    <span class="keyword">for</span> q <span class="keyword">in</span> range(k, l+<span class="number">1</span>):</span><br><span class="line">                        tmp += arr[p][q]</span><br><span class="line">                <span class="keyword">if</span> tmp &gt; ans:</span><br><span class="line">                    ans = tmp</span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure><h2 id="day4-常用STL"><a href="#day4-常用STL" class="headerlink" title="day4:常用STL"></a>day4:常用STL</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">锯齿矩阵是指每一行包含的元素个数不相同的矩阵，比如：</span></span><br><span class="line"><span class="string">3 5 2 6 1</span></span><br><span class="line"><span class="string">2 3 4</span></span><br><span class="line"><span class="string">1 6 2 7</span></span><br><span class="line"><span class="string">读入若干对整数 (x,y)，表示在第 x 行的末尾加上一个元素 y。输出最终的锯齿数组。初始时矩阵为空。</span></span><br><span class="line"><span class="string">输入格式</span></span><br><span class="line"><span class="string">第一行输入两个整数n,m(1≤n,m≤10000)，其中 n 表示锯齿数组的行数，m 表示插入的元素总数。</span></span><br><span class="line"><span class="string">接下来一共 m 行，每行两个整数 x,y(1≤x≤n,0≤y≤10000)，表示在第 x 行的末尾插入一个元素 y。</span></span><br><span class="line"><span class="string">输出格式</span></span><br><span class="line"><span class="string">一共输出 n 行，每行若干个用空格分隔的整数。如果某行没有任何元素，则输出一个空行。</span></span><br><span class="line"><span class="string">样例输入</span></span><br><span class="line"><span class="string">3 12</span></span><br><span class="line"><span class="string">1 3</span></span><br><span class="line"><span class="string">2 2</span></span><br><span class="line"><span class="string">2 3</span></span><br><span class="line"><span class="string">2 4</span></span><br><span class="line"><span class="string">3 1</span></span><br><span class="line"><span class="string">3 6</span></span><br><span class="line"><span class="string">1 5</span></span><br><span class="line"><span class="string">1 2</span></span><br><span class="line"><span class="string">1 6</span></span><br><span class="line"><span class="string">3 2</span></span><br><span class="line"><span class="string">3 7</span></span><br><span class="line"><span class="string">1 1</span></span><br><span class="line"><span class="string">样例输出</span></span><br><span class="line"><span class="string">3 5 2 6 1</span></span><br><span class="line"><span class="string">2 3 4</span></span><br><span class="line"><span class="string">1 6 2 7</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">n, m = map(int, input().split())</span><br><span class="line">ans_arr = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入数据</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">    x,y = map(int, input().split())</span><br><span class="line">    ans_arr[x<span class="number">-1</span>].append(y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出数组</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(ans_arr[i])):</span><br><span class="line">        print(ans_arr[i][j], end=<span class="string">' '</span>)</span><br><span class="line">    print()</span><br></pre></td></tr></table></figure><h3 id="蒜头君面试"><a href="#蒜头君面试" class="headerlink" title="蒜头君面试"></a>蒜头君面试</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">蒜头君来蒜厂面试的时候，曾经遇到这样一个面试题：</span></span><br><span class="line"><span class="string">给定 n 个整数，求里面出现次数最多的数，如果有多个重复出现的数，求出值最大的一个。当时可算是给蒜头君难住了。现在蒜头君来考考你。</span></span><br><span class="line"><span class="string">输入格式</span></span><br><span class="line"><span class="string">第一行输入一个整数n(1≤n≤100000)，接下来一行输入n个 int 范围内的整数。</span></span><br><span class="line"><span class="string">输出格式</span></span><br><span class="line"><span class="string">输出出现次数最多的数和出现的次数，中间用一个空格隔开，如果有多个重复出现的数，输出值最大的那个。</span></span><br><span class="line"><span class="string">样例输入</span></span><br><span class="line"><span class="string">10</span></span><br><span class="line"><span class="string">9 10 27 4 9 10 3 1 2 6</span></span><br><span class="line"><span class="string">样例输出</span></span><br><span class="line"><span class="string">10 2</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line">n = int(input())</span><br><span class="line">arr = list(input().split())</span><br><span class="line"></span><br><span class="line">count = Counter(arr).most_common()</span><br><span class="line">top = Counter(arr).most_common(<span class="number">1</span>) <span class="comment"># 取出现最多数的次数为top</span></span><br><span class="line"></span><br><span class="line">ans = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(count)):</span><br><span class="line">    tmp = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> count[i][<span class="number">1</span>] == top[<span class="number">0</span>][<span class="number">1</span>]:</span><br><span class="line">        tmp = count[i][<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> int(tmp) &gt; ans:</span><br><span class="line">        ans = int(tmp)</span><br><span class="line"></span><br><span class="line">print(ans, top[<span class="number">0</span>][<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h2 id="day5-栈和递归练习"><a href="#day5-栈和递归练习" class="headerlink" title="day5:栈和递归练习"></a>day5:栈和递归练习</h2><h3 id="括号匹配"><a href="#括号匹配" class="headerlink" title="括号匹配"></a>括号匹配</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">brace_match</span><span class="params">(str)</span>:</span></span><br><span class="line">    stack = []</span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> str:</span><br><span class="line">        <span class="keyword">if</span> ch <span class="keyword">in</span> &#123;<span class="string">'('</span>, <span class="string">'&#123;'</span>, <span class="string">'['</span>&#125;:</span><br><span class="line">            stack.append(ch)</span><br><span class="line">        <span class="keyword">elif</span> len(stack) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">elif</span> brace_arr[stack[<span class="number">-1</span>]] == ch:</span><br><span class="line">            stack.pop()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> len(stack) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    str = input()</span><br><span class="line">    brace_arr = &#123;<span class="string">'('</span>:<span class="string">')'</span>, <span class="string">'&#123;'</span>:<span class="string">'&#125;'</span>, <span class="string">'['</span>:<span class="string">']'</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> brace_match(str):</span><br><span class="line">        print(<span class="string">'Yes'</span>)</span><br></pre></td></tr></table></figure><h3 id="蒜头君吃桃"><a href="#蒜头君吃桃" class="headerlink" title="蒜头君吃桃"></a>蒜头君吃桃</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">猴子吃桃问题：猴子第一天摘下若干个桃子，当即吃了一半，还不瘾，又多吃了一个。第二天早上又将剩下的桃子吃掉一半，又多吃了一个。以后每天早上都吃了前一天剩的一半零一个。到第10天早上想再吃时，见只剩下一个桃子了，求第一天共摘了多少桃子？</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x == n:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> (solve(x+<span class="number">1</span>)+<span class="number">1</span>) * <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    n = int(input()) <span class="comment"># n=10时就是猴子吃桃问题</span></span><br><span class="line">    print(solve(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><h2 id="day6-深度优先搜索"><a href="#day6-深度优先搜索" class="headerlink" title="day6:深度优先搜索"></a>day6:深度优先搜索</h2><h3 id="踏青"><a href="#踏青" class="headerlink" title="踏青"></a>踏青</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">5 6</span></span><br><span class="line"><span class="string">.#....</span></span><br><span class="line"><span class="string">..#...</span></span><br><span class="line"><span class="string">..#..#</span></span><br><span class="line"><span class="string">...##.</span></span><br><span class="line"><span class="string">.#....</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">5 6</span></span><br><span class="line"><span class="string">. # . . . .</span></span><br><span class="line"><span class="string">. . # . . .</span></span><br><span class="line"><span class="string">. . # . . #</span></span><br><span class="line"><span class="string">. . . # # .</span></span><br><span class="line"><span class="string">. # . . . .</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> y &lt; <span class="number">0</span> <span class="keyword">or</span> x &gt; n - <span class="number">1</span> <span class="keyword">or</span> y &gt; m - <span class="number">1</span> <span class="keyword">or</span> vis[x][y] == <span class="number">1</span> <span class="keyword">or</span> arr[x][y] == <span class="string">'.'</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    vis[x][y] = <span class="number">1</span></span><br><span class="line">    dfs(x - <span class="number">1</span>, y)</span><br><span class="line">    dfs(x + <span class="number">1</span>, y)</span><br><span class="line">    dfs(x, y + <span class="number">1</span>)</span><br><span class="line">    dfs(x, y - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    n, m = map(int, input().split())</span><br><span class="line">    <span class="comment"># 当输入中有空格分隔开时</span></span><br><span class="line">    arr = [list(map(str, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">    <span class="comment"># 当输入没有空格分隔开时</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># arr = []</span></span><br><span class="line">    <span class="comment"># for i in range(n):</span></span><br><span class="line">    <span class="comment">#     str = input()</span></span><br><span class="line">    <span class="comment">#     arr.append(list(str))</span></span><br><span class="line">    vis = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(m)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)] <span class="comment"># 判断是否走过,0为未走过,1为走过</span></span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(m):</span><br><span class="line">            <span class="keyword">if</span> vis[i][j] == <span class="number">0</span> <span class="keyword">and</span> arr[i][j] == <span class="string">'#'</span>:</span><br><span class="line">                dfs(i,j)</span><br><span class="line">                ans += <span class="number">1</span></span><br><span class="line">    print(ans)</span><br></pre></td></tr></table></figure><h3 id="最大的蛋糕数"><a href="#最大的蛋糕数" class="headerlink" title="最大的蛋糕数"></a>最大的蛋糕数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">5 6</span></span><br><span class="line"><span class="string">.#....</span></span><br><span class="line"><span class="string">..#...</span></span><br><span class="line"><span class="string">..#..#</span></span><br><span class="line"><span class="string">...##.</span></span><br><span class="line"><span class="string">.#....</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> y &lt; <span class="number">0</span> <span class="keyword">or</span> x &gt; n - <span class="number">1</span> <span class="keyword">or</span> y &gt; m - <span class="number">1</span> <span class="keyword">or</span> vis[x][y] == <span class="number">1</span> <span class="keyword">or</span> arr[x][y] == <span class="string">'.'</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    vis[x][y] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">global</span> tmp</span><br><span class="line">    tmp += <span class="number">1</span></span><br><span class="line">    dfs(x - <span class="number">1</span>, y)</span><br><span class="line">    dfs(x + <span class="number">1</span>, y)</span><br><span class="line">    dfs(x, y + <span class="number">1</span>)</span><br><span class="line">    dfs(x, y - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    n, m = map(int, input().split())</span><br><span class="line">    <span class="comment"># 当输入中有空格分隔开时</span></span><br><span class="line">    <span class="comment"># arr = [list(map(str, input().split())) for _ in range(n)]</span></span><br><span class="line">    <span class="comment"># 当输入没有空格分隔开时</span></span><br><span class="line"></span><br><span class="line">    arr = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        str = input()</span><br><span class="line">        arr.append(list(str))</span><br><span class="line">    vis = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(m)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)] <span class="comment"># 判断是否走过,0为未走过,1为走过</span></span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(m):</span><br><span class="line">            <span class="keyword">if</span> vis[i][j] == <span class="number">0</span> <span class="keyword">and</span> arr[i][j] == <span class="string">'#'</span>:</span><br><span class="line">                tmp = <span class="number">0</span></span><br><span class="line">                dfs(i,j)</span><br><span class="line">                <span class="keyword">if</span> tmp &gt; ans:</span><br><span class="line">                    ans = tmp</span><br><span class="line">    print(ans)</span><br></pre></td></tr></table></figure><h3 id="迷宫的方案数"><a href="#迷宫的方案数" class="headerlink" title="迷宫的方案数"></a>迷宫的方案数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">输入:</span></span><br><span class="line"><span class="string">5 5</span></span><br><span class="line"><span class="string">s####</span></span><br><span class="line"><span class="string">.####</span></span><br><span class="line"><span class="string">.####</span></span><br><span class="line"><span class="string">.####</span></span><br><span class="line"><span class="string">....e</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">输出:</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &gt; n - <span class="number">1</span> <span class="keyword">or</span> y &gt; m - <span class="number">1</span> <span class="keyword">or</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> y &lt; <span class="number">0</span> <span class="keyword">or</span> vis[x][y] == <span class="number">1</span> <span class="keyword">or</span> maze[x][y] == <span class="string">'#'</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> maze[x][y] == <span class="string">'e'</span>:</span><br><span class="line">        <span class="keyword">global</span> ans</span><br><span class="line">        ans += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    vis[x][y] = <span class="number">1</span></span><br><span class="line">    dfs(x<span class="number">-1</span>,y)</span><br><span class="line">    dfs(x+<span class="number">1</span>,y)</span><br><span class="line">    dfs(x,y<span class="number">-1</span>)</span><br><span class="line">    dfs(x,y+<span class="number">1</span>)</span><br><span class="line">    vis[x][y] = <span class="number">0</span>     <span class="comment"># 将走过的路删除</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    n,m = map(int, input().split())</span><br><span class="line">    <span class="comment"># 输入迷宫</span></span><br><span class="line">    maze = []</span><br><span class="line">    vis = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(m)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(n) ]</span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(n):</span><br><span class="line">        val = input()</span><br><span class="line">        maze.append(list(val))</span><br><span class="line">    <span class="comment"># 起始坐标</span></span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    y = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(m):</span><br><span class="line">            <span class="keyword">if</span> maze[i][j] == <span class="string">'s'</span>:</span><br><span class="line">                x = i</span><br><span class="line">                y = j</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    dfs(x,y)</span><br><span class="line">    print(ans)</span><br></pre></td></tr></table></figure><h3 id="家谱"><a href="#家谱" class="headerlink" title="家谱"></a>家谱</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">题意：输入一个n,接下来有n-1行。</span></span><br><span class="line"><span class="string">输入父亲和儿子</span></span><br><span class="line"><span class="string">求n个人,每个人的直系后代有多少</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">输入:</span></span><br><span class="line"><span class="string">4</span></span><br><span class="line"><span class="string">1 2</span></span><br><span class="line"><span class="string">1 3</span></span><br><span class="line"><span class="string">2 4</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">输出:</span></span><br><span class="line"><span class="string">1 3</span></span><br><span class="line"><span class="string">2 1</span></span><br><span class="line"><span class="string">3 0</span></span><br><span class="line"><span class="string">4 0</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(u)</span>:</span></span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(son[u])):</span><br><span class="line">        cnt += dfs(son[u][i])</span><br><span class="line">    ans[u] = cnt</span><br><span class="line">    <span class="keyword">return</span> cnt + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    n = int(input())</span><br><span class="line">    son = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> range(n+<span class="number">1</span>)] <span class="comment"># 存放各个父辈的孩子</span></span><br><span class="line">    ans = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n+<span class="number">1</span>)]</span><br><span class="line">    f = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n+<span class="number">1</span>)]    <span class="comment"># 非True即为祖宗</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>):</span><br><span class="line">        x,y = map(int, input().split())</span><br><span class="line">        son[x].append(y)</span><br><span class="line">        f[y] = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> f[i] != <span class="literal">True</span>:</span><br><span class="line">            u = i                    <span class="comment"># 找到祖宗</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    dfs(u)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">        print(i, ans[i])</span><br></pre></td></tr></table></figure><h3 id="马的覆盖点"><a href="#马的覆盖点" class="headerlink" title="马的覆盖点"></a>马的覆盖点</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(x, y, step)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> step &gt; <span class="number">3</span> <span class="keyword">or</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> y &lt; <span class="number">0</span> <span class="keyword">or</span> x &gt; n<span class="number">-1</span> <span class="keyword">or</span> y &gt; m<span class="number">-1</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    arr[x][y] = <span class="string">'#'</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">        dfs(x + dir[i][<span class="number">0</span>], y + dir[i][<span class="number">1</span>], step + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    n, m = map(int, input().split())</span><br><span class="line">    x, y = map(int, input().split())</span><br><span class="line">    arr = [[<span class="string">'.'</span> <span class="keyword">for</span> j <span class="keyword">in</span> range(m)] <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line">    dir = [[<span class="number">-2</span>,<span class="number">-1</span>],[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">-1</span>,<span class="number">-2</span>],[<span class="number">2</span>,<span class="number">1</span>],[<span class="number">2</span>, <span class="number">-1</span>],[<span class="number">1</span>,<span class="number">-2</span>],[<span class="number">-1</span>,<span class="number">2</span>],[<span class="number">-2</span>,<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line">    dfs(x<span class="number">-1</span>,y<span class="number">-1</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(m):</span><br><span class="line">            print(arr[i][j], end=<span class="string">''</span>)</span><br><span class="line">        print()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;day1字符串和日期&quot;&gt;&lt;a href=&quot;#day1字符串和日期&quot; class=&quot;headerlink&quot; title=&quot;day1字符串和日期:&quot;&gt;&lt;/a&gt;day1字符串和日期:&lt;/h2&gt;&lt;h3 id=&quot;特殊的三角形&quot;&gt;&lt;a href=&quot;#特殊的三角形&quot; class
      
    
    </summary>
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/categories/Python%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/tags/Python%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Centos7安装Docker-配置使用harbor</title>
    <link href="https://plutoacharon.github.io/2020/02/23/Centos7%E5%AE%89%E8%A3%85Docker-%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8harbor/"/>
    <id>https://plutoacharon.github.io/2020/02/23/Centos7安装Docker-配置使用harbor/</id>
    <published>2020-02-23T12:28:19.000Z</published>
    <updated>2020-02-23T12:28:35.827Z</updated>
    
    <content type="html"><![CDATA[<h2 id="配置使用harbor"><a href="#配置使用harbor" class="headerlink" title="配置使用harbor"></a>配置使用harbor</h2><h2 id="添加EPEL源"><a href="#添加EPEL源" class="headerlink" title="添加EPEL源"></a>添加EPEL源</h2><p><code>yum install -y epel-release</code><br><img src="https://img-blog.csdnimg.cn/20200220191951792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt></p><h3 id="yum方式安装和python3、python-pip-和docker-compose"><a href="#yum方式安装和python3、python-pip-和docker-compose" class="headerlink" title="yum方式安装和python3、python-pip 和docker-compose"></a>yum方式安装和python3、python-pip 和docker-compose</h3><p><img src="https://img-blog.csdnimg.cn/20200220192029856.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="下载解压harbor的离线版本harbor-offline-installer-v1-9-3-tgz"><a href="#下载解压harbor的离线版本harbor-offline-installer-v1-9-3-tgz" class="headerlink" title="下载解压harbor的离线版本harbor-offline-installer-v1.9.3.tgz"></a>下载解压harbor的离线版本harbor-offline-installer-v1.9.3.tgz</h3><p><a href="https://github.com/goharbor/harbor/releases/tag/v1.9.3" target="_blank" rel="noopener">下载网址</a><br><img src="https://img-blog.csdnimg.cn/20200220192136513.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200220192253835.png" alt="在这里插入图片描述"></p><h3 id="编辑harbor-yml配置文件，修改hostname为本机IP，设置harbor-admin-password为123456"><a href="#编辑harbor-yml配置文件，修改hostname为本机IP，设置harbor-admin-password为123456" class="headerlink" title="编辑harbor.yml配置文件，修改hostname为本机IP，设置harbor_admin_password为123456"></a>编辑harbor.yml配置文件，修改hostname为本机IP，设置harbor_admin_password为123456</h3><p><img src="https://img-blog.csdnimg.cn/20200220192328789.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="执行安装-install-sh"><a href="#执行安装-install-sh" class="headerlink" title="执行安装./install.sh"></a>执行安装./install.sh</h3><p><img src="https://img-blog.csdnimg.cn/20200220192344467.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="查看docker-images"><a href="#查看docker-images" class="headerlink" title="查看docker images"></a>查看docker images</h3><p><img src="https://img-blog.csdnimg.cn/20200220192447605.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="查看docker-compose-xml"><a href="#查看docker-compose-xml" class="headerlink" title="查看docker-compose.xml"></a>查看docker-compose.xml</h3><p><img src="https://img-blog.csdnimg.cn/20200220192528481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="在harbor目录下执行-docker-compose-start"><a href="#在harbor目录下执行-docker-compose-start" class="headerlink" title="在harbor目录下执行#docker-compose start"></a>在harbor目录下执行#docker-compose start</h3><p><img src="https://img-blog.csdnimg.cn/20200220192630954.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="在主机浏览器访问虚拟机IP，使用admin：123456登录"><a href="#在主机浏览器访问虚拟机IP，使用admin：123456登录" class="headerlink" title="在主机浏览器访问虚拟机IP，使用admin：123456登录"></a>在主机浏览器访问虚拟机IP，使用admin：123456登录</h3><p><img src="https://img-blog.csdnimg.cn/20200220192826553.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200220192847423.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>简单的Harbor就搭建成功了!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;配置使用harbor&quot;&gt;&lt;a href=&quot;#配置使用harbor&quot; class=&quot;headerlink&quot; title=&quot;配置使用harbor&quot;&gt;&lt;/a&gt;配置使用harbor&lt;/h2&gt;&lt;h2 id=&quot;添加EPEL源&quot;&gt;&lt;a href=&quot;#添加EPEL源&quot; class
      
    
    </summary>
    
      <category term="Docker" scheme="https://plutoacharon.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://plutoacharon.github.io/tags/Docker/"/>
    
  </entry>
  
</feed>
