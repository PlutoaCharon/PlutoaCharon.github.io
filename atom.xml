<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>浩翰Redamancy的博客</title>
  
  <subtitle>文质彬彬 然后君子</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://plutoacharon.github.io/"/>
  <updated>2020-02-25T03:04:01.320Z</updated>
  <id>https://plutoacharon.github.io/</id>
  
  <author>
    <name>浩翰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kubernetes(K8s)入门到实践(一)----Kubernetes入门</title>
    <link href="https://plutoacharon.github.io/2020/02/25/Kubernetes-K8s-%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5-%E4%B8%80-Kubernetes%E5%85%A5%E9%97%A8/"/>
    <id>https://plutoacharon.github.io/2020/02/25/Kubernetes-K8s-入门到实践-一-Kubernetes入门/</id>
    <published>2020-02-25T03:02:12.000Z</published>
    <updated>2020-02-25T03:04:01.320Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>作为一名网络工程的大学生，在前段时间学习了云计算和大数据的相关技术后，我迫切的想要获得更多的自动化持续交互的相关技术。目前非常火热的Kubernetes技术简称（K8s）是由谷歌开源的Docker容器集群管理系统，功能非常强大，也激起了我浓厚的学习兴趣。<br>以后我会将这一系列关于Kubernetes的技术文章和学习心得一并分享出来，供大家一块学习和交流。</p><h2 id="1-Kubernetes是什么"><a href="#1-Kubernetes是什么" class="headerlink" title="1. Kubernetes是什么"></a>1. Kubernetes是什么</h2><p>首先， 我们在学习Kubernetes之前一定要先了解一下什么是Kubernetes。</p><ul><li>第一，它是一个全新的基于容器技术的分布式架构领先方案，并且是由谷歌保密十几年之久的秘密武器-Borg的一个开源版本。</li><li>Borg是谷歌的一个久负盛名的内部使用的大规模集群管理系统，它基于容器技术，目的是实现资源管理的自<br>动化，以及跨多个数据中心的资源利用率的最大化。</li><li>然后，Kubernetes是一个开放的开发平台。与J2EE不同，它不局限于<code>任何一种语言</code>，没有限定任何编程接口，所以不论是用Java、Go、C++还是用Python编写的服务，都可以被映射为Kubernetes的Service（服务），并通过标准的TCP通信协议进行交互。</li><li>此外，Kubernetes平台对现有的编程语言、编程框架、中间件没有任何侵入性，因此现有的系统也很容易改造升级并迁移到Kubernetes平台上。</li><li>最后，Kubernetes是一个完备的分布式系统支撑平台。Kubernetes具有完备的集群管理能力，包括多层次的安全防护和准入机制、多租户应用支撑能力、透明的服务注册和服务发现机制、内建的智能负载均衡器、强大的故障发现和自我修复能力、服务滚动升级和在线扩容能力、可扩展的资源自动调度机制，以及多粒度的资源配额管理能力。</li><li>同时，Kubernetes提供了完善的管理工具，这些工具涵盖了包括开发、部署测试、运维监控在内的各个环节。因此，Kubernetes是一个全新的基于容器技术的分布式架构解决方案，并且是一个一站式的完备的分布式系统开发和支撑平台。</li></ul><h2 id="2-为什么要用Kubernetes"><a href="#2-为什么要用Kubernetes" class="headerlink" title="2. 为什么要用Kubernetes"></a>2. 为什么要用Kubernetes</h2><p>使用Kubernetes的理由很多，最重要的理由是，<code>IT行业从来都是由新技术驱动的</code>。而且，Docker这门容器化技术已经被很多公司采用，从单机走向集群已成为必然，云计算的蓬勃发展正在加速这一进程。Kubernetes作为当前被业界广泛认可和看好的基于Docker的大规模容器化分布式系统解决方案，得到了以谷歌为首的IT巨头们的大力宣传和持续推进。<br>关于Docker相关的知识可以移步<a href="https://blog.csdn.net/qq_43442524/category_9478911.html" target="_blank" rel="noopener">我的Docker学习专栏</a></p><h3 id="2-1-Kubernetes的优点"><a href="#2-1-Kubernetes的优点" class="headerlink" title="2.1 Kubernetes的优点"></a>2.1 Kubernetes的优点</h3><ul><li>可以“轻装上阵”地开发复杂系统。以前需要很多人（其中不乏技术达人）一起分工协作才能设计、实现和运维的分布式系统，在采用Kubernetes解决方案之后，只需一个精悍的小团队就能轻松应对。</li><li>全面拥抱微服务架构。微服务架构的核心是将一个巨大的单体应用分解为很多小的互相连接的微服务，一个微服务可能由多个实例副本支撑，副本的数量可以随着系统的负荷变化进行调整。</li><li>随时随地将系统整体“搬迁”到公有云上。</li><li>Kubernetes内在的服务弹性扩容机制可以让我们轻松应对突发流量。</li><li>Kubernetes系统架构超强的横向扩容能力很强<h2 id="3-Kubernetes的一些基本知识"><a href="#3-Kubernetes的一些基本知识" class="headerlink" title="3. Kubernetes的一些基本知识"></a>3. Kubernetes的一些基本知识</h2></li></ul><p>Kubernetes的架构和Borg的架构很相似。</p><p>Borg架构：</p><p><img src="https://img-blog.csdnimg.cn/20200224195618264.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>Kubernetes架构：</p><p><img src="https://img-blog.csdnimg.cn/20200224195641465.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>Service</strong>:<br>在Kubernetes中，Service是分布式集群架构的核心，一个Service对象拥有如下关键特征。</p><ul><li>拥有唯一指定的名称（比如mysql-server）。</li><li>拥有一个虚拟IP（Cluster IP、Service IP或VIP）和端口号。</li><li>能够提供某种远程服务能力。</li><li>被映射到提供这种服务能力的一组容器应用上。<br>Service的服务进程目前都基于Socket通信方式对外提供服务，比如Redis、Memcache、MySQL、Web  Server，或者是实现了某个具体业务的特定TCP  Server进程。</li></ul><p>虽然一个Service通常由多个相关的服务进程提供服务，每个服务进程都有一个独立的<code>Endpoint（IP+Port）</code>访问点，但Kubernetes能够让我们通过Service<code>（虚拟Cluster  IP  +Service  Port）</code>连接到指定的Service。有了Kubernetes内建的透明负载均衡和故障恢复机制，不管后端有多少服务进程，也不管某个服务进程是否由于发生故障而被重新部署到其他机器，都不会影响对服务的正常调用。更重要的是，这个Service本身一旦创建就不再变化，这意味着我们再也不用为Kubernetes集群中服务的IP地址变来变去的问题而头疼了。</p><p><strong>Pod</strong>:<br>容器给我们提供了强大的隔离功能，所以有必要把为Service提供服务的这组进程放入容器中进行隔离。为此，Kubernetes设计了Pod对象，将每个服务进程都包装到相应的Pod中，使其成为在Pod中运行的一个容器（Container）<br><img src="https://img-blog.csdnimg.cn/20200224200450995.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>Pod运行在一个被称为节点（Node）的环境中，这个节点既可以是物理机，也可以是一个虚拟机，通常在一个节点上运行几百个Pod；其次，在每个Pod中都运行着一个特殊的被称<code>为Pause</code>的容器，其他容器则为业务容器，这些业务容器共享Pause容器的网络栈和Volume挂载卷，因此它们之间的通信和数据交换更为高效，在设计时我们可以充分利用这一特性将一组密切相关的服务进程放入同一个Pod中；<br><code>每当启动一个pod的时候,pause容器也会随之启动</code></p><p>Kubernetes将集群中的机器划分为一个<code>Master</code>和一些<code>Node</code>。在Master上运行着集群管理相关的一组进程kube-apiserver、kube-controller-manager和kubescheduler，这些进程实现了整个集群的资源管理、Pod调度、弹性伸缩、安全控制、系统监控和纠错等管理功能，并且都是自动完成的。</p><p>Node作为集群中的工作节点，运行真正的应用程序，在Node上Kubernetes管理的最小运行单元是Pod。在Node上运行着Kubernetes的kubelet、kube-proxy服务进程，这些服务进程负责Pod的创建、启动、监控、重启、销毁，以及实现软件模式的负载均衡器。</p><p><img src="https://img-blog.csdnimg.cn/2020022420105479.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><code>Etce</code>:</p><p>etcd的官方将它定位成一个可信赖的分布式键值存储服务，它能够为整个分布式集群存储一些关键数据，协助分布式集群的正常运转<br><img src="https://img-blog.csdnimg.cn/20200224201406463.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>Raft:  读写信息的存储</p><p>WAL: 预写日志,并且定时对这些日志进行备份</p><p>Store: 实时把日志和数据持久化传入本地磁盘中</p><h2 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h2><p>知识整理于:<code>Kubernetes权威指南 第4版</code> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;作为一名网络工程的大学生，在前段时间学习了云计算和大数据的相关技术后，我迫切的想要获得更多的自动化持续交互的相关技术。目前非常火热的Kube
      
    
    </summary>
    
      <category term="Kubernetes" scheme="https://plutoacharon.github.io/categories/Kubernetes/"/>
    
    
      <category term="Kubernetes" scheme="https://plutoacharon.github.io/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Python算法学习: 蓝桥杯官方省赛真题(持续更新)</title>
    <link href="https://plutoacharon.github.io/2020/02/23/Python%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%AE%98%E6%96%B9%E7%9C%81%E8%B5%9B%E7%9C%9F%E9%A2%98-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"/>
    <id>https://plutoacharon.github.io/2020/02/23/Python算法学习-蓝桥杯官方省赛真题-持续更新/</id>
    <published>2020-02-23T12:35:41.000Z</published>
    <updated>2020-02-23T12:50:31.072Z</updated>
    
    <content type="html"><![CDATA[<h3 id="试题-入门训练-Fibonacci数列"><a href="#试题-入门训练-Fibonacci数列" class="headerlink" title="试题 入门训练 Fibonacci数列"></a>试题 入门训练 Fibonacci数列</h3><pre><code>资源限制时间限制：1.0s   内存限制：256.0MB问题描述Fibonacci数列的递推公式为：Fn=Fn-1+Fn-2，其中F1=F2=1。当n比较大时，Fn也非常大，现在我们想知道，Fn除以10007的余数是多少。输入格式输入包含一个整数n。输出格式输出一行，包含一个整数，表示Fn除以10007的余数。说明：在本题中，答案是要求Fn除以10007的余数，因此我们只要能算出这个余数即可，而不需要先计算出Fn的准确值，再将计算的结果除以10007取余数，直接计算余数往往比先算出原数再取余简单。样例输入10样例输出55样例输入22样例输出7704数据规模与约定1 &lt;= n &lt;= 1,000,000</code></pre><p>代码示例:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">n=int(input())</span><br><span class="line">f1=f2=f3=<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">1</span> <span class="keyword">or</span> n == <span class="number">2</span>:</span><br><span class="line">    print(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">elif</span> n &gt; <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>,n+<span class="number">1</span>):</span><br><span class="line">        f3 = (f1 + f2) % <span class="number">10007</span></span><br><span class="line">        f1 = f2</span><br><span class="line">        f2 = f3</span><br><span class="line">    print(f3)</span><br></pre></td></tr></table></figure></p><h3 id="试题-入门训练-圆的面积"><a href="#试题-入门训练-圆的面积" class="headerlink" title="试题 入门训练 圆的面积"></a>试题 入门训练 圆的面积</h3><pre><code>资源限制时间限制：1.0s   内存限制：256.0MB问题描述给定圆的半径r，求圆的面积。输入格式输入包含一个整数r，表示圆的半径。输出格式输出一行，包含一个实数，四舍五入保留小数点后7位，表示圆的面积。说明：在本题中，输入是一个整数，但是输出是一个实数。对于实数输出的问题，请一定看清楚实数输出的要求，比如本题中要求保留小数点后7位，则你的程序必须严格的输出7位小数，输出过多或者过少的小数位数都是不行的，都会被认为错误。实数输出的问题如果没有特别说明，舍入都是按四舍五入进行。样例输入4样例输出50.2654825数据规模与约定1 &lt;= r &lt;= 10000。提示本题对精度要求较高，请注意π的值应该取较精确的值。你可以使用常量来表示π，比如PI=3.14159265358979323，也可以使用数学公式来求π，比如PI=atan(1.0)*4。</code></pre><p>代码详细:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r = int(input())</span><br><span class="line">PI=<span class="number">3.1415926535</span></span><br><span class="line">area = r**<span class="number">2</span> * PI</span><br><span class="line">print(<span class="string">'%.7f'</span> % area)</span><br></pre></td></tr></table></figure><h3 id="试题-入门训练-序列求和"><a href="#试题-入门训练-序列求和" class="headerlink" title="试题 入门训练 序列求和"></a>试题 入门训练 序列求和</h3><pre><code>资源限制时间限制：1.0s   内存限制：256.0MB问题描述求1+2+3+...+n的值。输入格式输入包括一个整数n。输出格式输出一行，包括一个整数，表示1+2+3+...+n的值。样例输入4样例输出10样例输入100说明：有一些试题会给出多组样例输入输出以帮助你更好的做题。一般在提交之前所有这些样例都需要测试通过才行，但这不代表这几组样例数据都正确了你的程序就是完全正确的，潜在的错误可能仍然导致你的得分较低。样例输出5050数据规模与约定1 &lt;= n &lt;= 1,000,000,000。说明：请注意这里的数据规模。本题直接的想法是直接使用一个循环来累加，然而，当数据规模很大时，这种“暴力”的方法往往会导致超时。此时你需要想想其他方法。你可以试一试，如果使用1000000000作为你的程序的输入，你的程序是不是能在规定的上面规定的时限内运行出来。本题另一个要值得注意的地方是答案的大小不在你的语言默认的整型(int)范围内，如果使用整型来保存结果，会导致结果错误。如果你使用C++或C语言而且准备使用printf输出结果，则你的格式字符串应该写成%I64d以输出long long类型的整数。</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">()</span>:</span></span><br><span class="line">    n = int(input())</span><br><span class="line">    <span class="keyword">return</span> n*(<span class="number">1</span>+n)/<span class="number">2</span> <span class="comment"># 等差数列时间短 直接使用a+b会超时</span></span><br><span class="line">s = int(sum())</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure><h3 id="试题-入门训练-A-B问题"><a href="#试题-入门训练-A-B问题" class="headerlink" title="试题 入门训练 A+B问题"></a>试题 入门训练 A+B问题</h3><pre><code>资源限制时间限制：1.0s   内存限制：256.0MB问题描述输入A、B，输出A+B。说明：在“问题描述”这部分，会给出试题的意思，以及所要求的目标。输入格式输入的第一行包括两个整数，由空格分隔，分别表示A、B。说明：“输入格式”是描述在测试你的程序时，所给的输入一定满足的格式。做题时你应该假设所给的输入是一定满足输入格式的要求的，所以你不需要对输入的格式进行检查。多余的格式检查可能会适得其反，使用你的程序错误。在测试的时候，系统会自动将输入数据输入到你的程序中，你不能给任何提示。比如，你在输入的时候提示“请输入A、B”之类的话是不需要的，这些多余的输出会使得你的程序被判定为错误。输出格式输出一行，包括一个整数，表示A+B的值。说明：“输出格式”是要求你的程序在输出结果的时候必须满足的格式。在输出时，你的程序必须满足这个格式的要求，不能少任何内容，也不能多任何内容。如果你的内容和输出格式要求的不一样，你的程序会被判断为错误，包括你输出了提示信息、中间调试信息、计时或者统计的信息等。样例输入12 45说明：“样例输入”给出了一组满足“输入格式”要求的输入的例子。这里给出的输入只是可能用来测试你的程序的一个输入，在测试的时候，还会有更多的输入用来测试你的程序。样例输出57说明：“样例输出”给出了一组满足“输出格式”要求的输出的例子。样例输出中的结果是和样例输入中的是对应的，因此，你可以使用样例的输入输出简单的检查你的程序。要特别指出的是，能够通过样例输入输出的程序并不一定是正确的程序，在测试的时候，会用很多组数据进行测试，而不局限于样例数据。有可能一个程序通过了样例数据，但测试的时候仍只能得0分，可能因为这个程序只在一些类似样例的特例中正确，而不具有通用性，再测试更多数据时会出现错误。比如，对于本题，如果你写一个程序不管输入是什么都输入57，则样例数据是对的，但是测试其他数据，哪怕输入是1和2，这个程序也输出57，则对于其他数据这个程序都不正确。数据规模与约定-10000 &lt;= A, B &lt;= 10000。说明：“数据规模与约定”中给出了试题中主要参数的范围。这个范围对于解题非常重要，不同的数据范围会导致试题需要使用不同的解法来解决。比如本题中给的A、B范围不大，可以使用整型(int)来保存，如果范围更大，超过int的范围，则要考虑其他方法来保存大数。有一些范围在方便的时候是在“问题描述”中直接给的，所以在做题时不仅要看这个范围，还要注意问题描述。</code></pre><p>代码详细:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a,b=map(int,input().split())</span><br><span class="line">print(a+b)</span><br></pre></td></tr></table></figure></p><h3 id="试题-基础练习-数列排序"><a href="#试题-基础练习-数列排序" class="headerlink" title="试题 基础练习 数列排序"></a>试题 基础练习 数列排序</h3><pre><code>资源限制时间限制：1.0s   内存限制：512.0MB问题描述　　给定一个长度为n的数列，将这个数列按从小到大的顺序排列。1&lt;=n&lt;=200输入格式　　第一行为一个整数n。　　第二行包含n个整数，为待排序的数，每个整数的绝对值小于10000。输出格式　　输出一行，按从小到大的顺序输出排序后的数列。样例输入58 3 6 4 9样例输出3 4 6 8 9</code></pre><p>代码详细:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line">list = list(map(int, input().split()))</span><br><span class="line">list = sorted(list)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(list)):</span><br><span class="line">    print(list[i], end= <span class="string">' '</span>)</span><br></pre></td></tr></table></figure></p><h3 id="试题-基础练习-十六进制转八进制"><a href="#试题-基础练习-十六进制转八进制" class="headerlink" title="试题 基础练习 十六进制转八进制"></a>试题 基础练习 十六进制转八进制</h3><pre><code>  资源限制时间限制：1.0s   内存限制：512.0MB问题描述　　给定n个十六进制正整数，输出它们对应的八进制数。输入格式　　输入的第一行为一个正整数n （1&lt;=n&lt;=10）。　　接下来n行，每行一个由0~9、大写字母A~F组成的字符串，表示要转换的十六进制正整数，每个十六进制数长度不超过100000。输出格式　　输出n行，每行为输入对应的八进制正整数。　　【注意】　　输入的十六进制数不会有前导0，比如012A。　　输出的八进制数也不能有前导0。样例输入　　2　　39　　123ABC样例输出　　71　　4435274　　【提示】　　先将十六进制数转换成某进制数，再由某进制数转换成八进制。</code></pre><p>代码详细:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> range(n):</span><br><span class="line">    num = input()</span><br><span class="line">    ans = format(int(num, <span class="number">16</span>), <span class="string">'o'</span>)</span><br><span class="line">    print(ans)</span><br></pre></td></tr></table></figure></p><p>详细可以查阅python的<code>int</code>函数和format函数转换进制</p><h3 id="试题-基础练习-十六进制转十进制"><a href="#试题-基础练习-十六进制转十进制" class="headerlink" title="试题 基础练习 十六进制转十进制"></a>试题 基础练习 十六进制转十进制</h3><pre><code>资源限制时间限制：1.0s   内存限制：512.0MB问题描述　　从键盘输入一个不超过8位的正的十六进制数字符串，将它转换为正的十进制数后输出。　　注：十六进制数中的10~15分别用大写的英文字母A、B、C、D、E、F表示。样例输入FFFF样例输出65535</code></pre><p>代码详细:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n = input()</span><br><span class="line">print(int(n, <span class="number">16</span>))</span><br></pre></td></tr></table></figure></p><h3 id="试题-基础练习-十进制转十六进制"><a href="#试题-基础练习-十进制转十六进制" class="headerlink" title="试题 基础练习 十进制转十六进制"></a>试题 基础练习 十进制转十六进制</h3><pre><code>资源限制时间限制：1.0s   内存限制：512.0MB问题描述　　十六进制数是在程序设计时经常要使用到的一种整数的表示方式。它有0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F共16个符号，分别表示十进制数的0至15。十六进制的计数方法是满16进1，所以十进制数16在十六进制中是10，而十进制的17在十六进制中是11，以此类推，十进制的30在十六进制中是1E。　　给出一个非负整数，将它表示成十六进制的形式。输入格式　　输入包含一个非负整数a，表示要转换的数。0&lt;=a&lt;=2147483647输出格式　　输出这个整数的16进制表示样例输入30样例输出1E</code></pre><p>代码详细:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line">print(format(n, <span class="string">'X'</span>)) <span class="comment">#X为大写,x是小写</span></span><br></pre></td></tr></table></figure></p><h3 id="试题-基础练习-特殊回文数"><a href="#试题-基础练习-特殊回文数" class="headerlink" title="试题 基础练习 特殊回文数"></a>试题 基础练习 特殊回文数</h3><pre><code>资源限制时间限制：1.0s   内存限制：512.0MB问题描述　　123321是一个非常特殊的数，它从左边读和从右边读是一样的。　　输入一个正整数n， 编程求所有这样的五位和六位十进制数，满足各位数字之和等于n 。输入格式　　输入一行，包含一个正整数n。输出格式　　按从小到大的顺序输出满足条件的整数，每个整数占一行。样例输入52样例输出899998989989998899数据规模和约定　　1&lt;=n&lt;=54。</code></pre><p>代码详细:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_pal</span><span class="params">(num)</span>:</span></span><br><span class="line">    num = str(num)</span><br><span class="line">    <span class="keyword">if</span> num == num[::<span class="number">-1</span>]:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_num</span><span class="params">(num)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    num = str(num)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(num)):</span><br><span class="line">        sum += int(num[i])</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    n = int(input())</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">10000</span>, <span class="number">1000000</span>):</span><br><span class="line">        <span class="keyword">if</span> is_pal(num) <span class="keyword">and</span> sum_num(num) == n:</span><br><span class="line">            print(num)</span><br></pre></td></tr></table></figure></p><h3 id="试题-基础练习-回文数"><a href="#试题-基础练习-回文数" class="headerlink" title="试题 基础练习 回文数"></a>试题 基础练习 回文数</h3><pre><code>资源限制时间限制：1.0s   内存限制：512.0MB问题描述　　1221是一个非常特殊的数，它从左边读和从右边读是一样的，编程求所有这样的四位十进制数。输出格式　　按从小到大的顺序输出满足条件的四位十进制数。</code></pre><p>代码详细:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_pal</span><span class="params">(num)</span>:</span></span><br><span class="line">    num = str(num)</span><br><span class="line">    <span class="keyword">if</span> num == num[::<span class="number">-1</span>]:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>, <span class="number">10000</span>):</span><br><span class="line">        <span class="keyword">if</span> is_pal(i):</span><br><span class="line">            print(i)</span><br></pre></td></tr></table></figure><h3 id="试题-基础练习-特殊的数字"><a href="#试题-基础练习-特殊的数字" class="headerlink" title="试题 基础练习 特殊的数字"></a>试题 基础练习 特殊的数字</h3><pre><code>问题描述　　153是一个非常特殊的数，它等于它的每位数字的立方和，即153=1*1*1+5*5*5+3*3*3。编程求所有满足这种条件的三位十进制数。输出格式　　按从小到大的顺序输出满足条件的三位十进制数，每个数占一行。</code></pre><p>代码详细:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_ans</span><span class="params">(num)</span>:</span></span><br><span class="line">    num_sum = pow(int(str(num)[<span class="number">0</span>]), <span class="number">3</span>) + pow(int(str(num)[<span class="number">1</span>]), <span class="number">3</span>) + pow(int(str(num)[<span class="number">2</span>]), <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">if</span> num == num_sum:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ans <span class="keyword">in</span> range(<span class="number">100</span>, <span class="number">1000</span>):</span><br><span class="line">    <span class="keyword">if</span> is_ans(ans):</span><br><span class="line">        print(ans)</span><br></pre></td></tr></table></figure></p><blockquote><p>这里使用了str转换字符串取位数,或者可以直接用除法取位数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_ans</span><span class="params">(num)</span>:</span></span><br><span class="line">    a = num % <span class="number">10</span></span><br><span class="line">    b = (num // <span class="number">10</span>) % <span class="number">10</span></span><br><span class="line">    c = (num // <span class="number">100</span>) % <span class="number">10</span></span><br><span class="line">    <span class="keyword">if</span> num == pow(a, <span class="number">3</span>) + pow(b, <span class="number">3</span>) + pow(c, <span class="number">3</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ans <span class="keyword">in</span> range(<span class="number">100</span>, <span class="number">1000</span>):</span><br><span class="line">    <span class="keyword">if</span> is_ans(ans):</span><br><span class="line">        print(ans)</span><br></pre></td></tr></table></figure><h3 id="试题-基础练习-杨辉三角形"><a href="#试题-基础练习-杨辉三角形" class="headerlink" title="试题 基础练习 杨辉三角形"></a>试题 基础练习 杨辉三角形</h3><pre><code>问题描述杨辉三角形又称Pascal三角形，它的第i+1行是(a+b)i的展开式的系数。　　它的一个重要性质是：三角形中的每个数字等于它两肩上的数字相加。　　下面给出了杨辉三角形的前4行：　　   1　　  1 1　　 1 2 1　　1 3 3 1　　给出n，输出它的前n行。输入格式输入包含一个数n。输出格式输出杨辉三角形的前n行。每一行从这一行的第一个数开始依次输出，中间使用一个空格分隔。请不要在前面输出多余的空格。样例输入4样例输出11 11 2 11 3 3 1数据规模与约定1 &lt;= n &lt;= 34。</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">triangles</span><span class="params">(num)</span>:</span></span><br><span class="line">    n = [<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">while</span> num &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(n)):</span><br><span class="line">            print(n[i], end=<span class="string">' '</span>) <span class="comment"># 将列表转为要求的格式</span></span><br><span class="line">        n = [<span class="number">1</span>] + [n[i] + n[i+<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(n) - <span class="number">1</span>)] + [<span class="number">1</span>]</span><br><span class="line">        num -= <span class="number">1</span></span><br><span class="line">        print()                  <span class="comment"># 换行</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    n = int(input())</span><br><span class="line">    triangles(n)</span><br></pre></td></tr></table></figure><h3 id="试题-基础练习-查找整数"><a href="#试题-基础练习-查找整数" class="headerlink" title="试题 基础练习 查找整数"></a>试题 基础练习 查找整数</h3><pre><code>问题描述给出一个包含n个整数的数列，问整数a在数列中的第一次出现是第几个。输入格式第一行包含一个整数n。第二行包含n个非负整数，为给定的数列，数列中的每个数都不大于10000。第三行包含一个整数a，为待查找的数。输出格式如果a在数列中出现了，输出它第一次出现的位置(位置从1开始编号)，否则输出-1。样例输入61 9 4 8 3 99样例输出2数据规模与约定1 &lt;= n &lt;= 1000。</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_ans</span><span class="params">(num, list)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(list)):</span><br><span class="line">        <span class="keyword">if</span> num == list[i]:</span><br><span class="line">            print(i+<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> num <span class="keyword">not</span> <span class="keyword">in</span> list:</span><br><span class="line">        print(<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    n = int(input())</span><br><span class="line">    list = list(map(int, input().split()))</span><br><span class="line">    num = int(input())</span><br><span class="line">    is_ans(num, list)</span><br></pre></td></tr></table></figure><h3 id="试题-基础练习-数列特征"><a href="#试题-基础练习-数列特征" class="headerlink" title="试题 基础练习 数列特征"></a>试题 基础练习 数列特征</h3><pre><code>问题描述给出n个数，找出这n个数的最大值，最小值，和。输入格式第一行为整数n，表示数的个数。第二行有n个数，为给定的n个数，每个数的绝对值都小于10000。输出格式输出三行，每行一个整数。第一行表示这些数中的最大值，第二行表示这些数中的最小值，第三行表示这些数的和。</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_ans</span><span class="params">(n, list)</span>:</span></span><br><span class="line">    list = sorted(list)</span><br><span class="line">    max = list[<span class="number">-1</span>]</span><br><span class="line">    min = list[<span class="number">0</span>]</span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> list:</span><br><span class="line">        sum += i</span><br><span class="line">    print(max)</span><br><span class="line">    print(min)</span><br><span class="line">    print(sum)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    n = int(input())</span><br><span class="line">    list = list(map(int, input().split()))</span><br><span class="line">    is_ans(n, list)</span><br></pre></td></tr></table></figure><h3 id="试题-基础练习-字母图形"><a href="#试题-基础练习-字母图形" class="headerlink" title="试题 基础练习 字母图形"></a>试题 基础练习 字母图形</h3><pre><code>问题描述利用字母可以组成一些美丽的图形，下面给出了一个例子：ABCDEFGBABCDEFCBABCDEDCBABCDEDCBABC这是一个5行7列的图形，请找出这个图形的规律，并输出一个n行m列的图形。输入格式输入一行，包含两个整数n和m，分别表示你要输出的图形的行数的列数。输出格式输出n行，每个m个字符，为你的图形。样例输入5 7样例输出ABCDEFGBABCDEFCBABCDEDCBABCDEDCBABC</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_ans</span><span class="params">(n, m)</span>:</span></span><br><span class="line">    graph = [[<span class="number">0</span> <span class="keyword">for</span> j <span class="keyword">in</span> range(m)] <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(m):</span><br><span class="line">            <span class="keyword">if</span> j &gt;= i:</span><br><span class="line">                graph[i][j] = chr(ord(<span class="string">'A'</span>)+ j - i)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                graph[i][j] = chr(ord(<span class="string">'A'</span>) + i - j)</span><br><span class="line">    <span class="keyword">return</span> graph</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    n, m = map(int, input().split())</span><br><span class="line">    gragh = is_ans(n ,m)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(m):</span><br><span class="line">            print(gragh[i][j], end=<span class="string">''</span>)</span><br><span class="line">        print()</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_31910669/article/details/103641497" target="_blank" rel="noopener">参考链接</a></p><h3 id="试题-基础练习-01字串"><a href="#试题-基础练习-01字串" class="headerlink" title="试题 基础练习 01字串"></a>试题 基础练习 01字串</h3><pre><code>问题描述对于长度为5位的一个01串，每一位都可能是0或1，一共有32种可能。它们的前几个是：0000000001000100001100100请按从小到大的顺序输出这32种01串。输入格式本试题没有输入。输出格式输出32行，按从小到大的顺序每行一个长度为5的01串。样例输出00000000010001000011&lt;以下部分省略&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">    print(<span class="string">"&#123;0:0&gt;5&#125;"</span>.format(format(i, <span class="string">'b'</span>)))</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_31910669/article/details/103641497" target="_blank" rel="noopener">参考链接</a></p><h3 id="试题-基础练习-闰年判断"><a href="#试题-基础练习-闰年判断" class="headerlink" title="试题 基础练习 闰年判断"></a>试题 基础练习 闰年判断</h3><pre><code>问题描述给定一个年份，判断这一年是不是闰年。当以下情况之一满足时，这一年是闰年：1. 年份是4的倍数而不是100的倍数；2. 年份是400的倍数。其他的年份都不是闰年。输入格式输入包含一个整数y，表示当前的年份。输出格式输出一行，如果给定的年份是闰年，则输出yes，否则输出no。</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_leapyear</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> num % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> num % <span class="number">100</span> != <span class="number">0</span> <span class="keyword">or</span> num % <span class="number">400</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    num = int(input())</span><br><span class="line">    <span class="keyword">if</span> is_leapyear(num):</span><br><span class="line">        print(<span class="string">'yes'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'no'</span>)</span><br></pre></td></tr></table></figure><h3 id="试题-基础练习-阶乘计算"><a href="#试题-基础练习-阶乘计算" class="headerlink" title="试题 基础练习 阶乘计算"></a>试题 基础练习 阶乘计算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line">ans = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">    ans =  ans * i</span><br><span class="line"></span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure><h3 id="试题-基础练习-高精度加法"><a href="#试题-基础练习-高精度加法" class="headerlink" title="试题 基础练习 高精度加法"></a>试题 基础练习 高精度加法</h3><p>这道题挺迷的,python比其他语言的方便用途之一就是大数的处理<br>蓝桥杯满分通过<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python 大数</span></span><br><span class="line">a = int(input())</span><br><span class="line">b = int(input())</span><br><span class="line">print(a+b)</span><br></pre></td></tr></table></figure></p><p>正确做法:</p><pre><code>将每个大数存入列表中,一一相加,进位的进位,最后输出ans_num</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_length</span><span class="params">(str_num, l)</span>:</span></span><br><span class="line">    <span class="comment"># 添加前导0</span></span><br><span class="line">    str_num = <span class="string">'0'</span> * (l -len(str_num)) + str_num</span><br><span class="line">    <span class="keyword">return</span> str_num</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    num1 = input()</span><br><span class="line">    num2 = input()</span><br><span class="line">    <span class="comment"># 修改长度</span></span><br><span class="line">    <span class="keyword">if</span> len(num1) &gt; len(num2):</span><br><span class="line">        num2 = change_length(num2, len(num1))</span><br><span class="line">    <span class="keyword">elif</span> len(num1) &lt; len(num2):</span><br><span class="line">        num1 = change_length(num1, len(num2))</span><br><span class="line">    <span class="comment"># 结果最多比最长的num长1个单位</span></span><br><span class="line">    ans_num = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(len(num1) + <span class="number">1</span>)]</span><br><span class="line">    <span class="comment"># 进位</span></span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(num1)):</span><br><span class="line">        val = k + int(num1[len(num1) - i - <span class="number">1</span>]) + int(num2[len(num2) - i - <span class="number">1</span>])</span><br><span class="line">        ans_num[len(num1) - i] = val % <span class="number">10</span></span><br><span class="line">        k = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span>  val &gt;= <span class="number">10</span>:</span><br><span class="line">            k = int(val // <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> k != <span class="number">0</span>:</span><br><span class="line">        ans_num[<span class="number">0</span>] = k</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ans_num) - <span class="number">1</span>):</span><br><span class="line">            print(ans_num[i], end=<span class="string">''</span>)</span><br><span class="line">        print(ans_num[<span class="number">-1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ans_num) - <span class="number">2</span>):</span><br><span class="line">            print(ans_num[i+<span class="number">1</span>], end=<span class="string">''</span>)</span><br><span class="line">        print(ans_num[<span class="number">-1</span>])</span><br></pre></td></tr></table></figure><h3 id="试题-基础练习-Huffuman树"><a href="#试题-基础练习-Huffuman树" class="headerlink" title="试题 基础练习 Huffuman树"></a>试题 基础练习 Huffuman树</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line">value = <span class="number">0</span></span><br><span class="line">list = list(map(int, input().split()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n - <span class="number">1</span>):</span><br><span class="line">    list = sorted(list)</span><br><span class="line">    value += list[<span class="number">0</span>] + list[<span class="number">1</span>]</span><br><span class="line">    value_list = list[<span class="number">0</span>] + list[<span class="number">1</span>]</span><br><span class="line">    list.pop(<span class="number">0</span>)</span><br><span class="line">    list.pop(<span class="number">0</span>)</span><br><span class="line">    list.append(value_list)</span><br><span class="line">print(value)</span><br></pre></td></tr></table></figure><h3 id="试题-基础练习-2n皇后问题"><a href="#试题-基础练习-2n皇后问题" class="headerlink" title="试题 基础练习 2n皇后问题"></a>试题 基础练习 2n皇后问题</h3><p>此题先留个坑,目前只解决了N皇后的思路<br>方法1:dfs深度优先搜索<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solveNQueens</span><span class="params">(self, n)</span>:</span></span><br><span class="line"></span><br><span class="line">        k = <span class="number">0</span></span><br><span class="line">        ans, q = [], [<span class="literal">None</span>] * n</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(k, n)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> k == n:</span><br><span class="line">                tmp = []</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">                    s = <span class="string">""</span></span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">                        s += <span class="string">"Q"</span> <span class="keyword">if</span> q[i] == j <span class="keyword">else</span> <span class="string">'.'</span></span><br><span class="line">                    tmp.append(s)</span><br><span class="line">                ans.append(tmp)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">                    <span class="keyword">if</span> self.place(k, j, q):</span><br><span class="line">                        q[k] = j</span><br><span class="line">                        dfs(k + <span class="number">1</span>, n)</span><br><span class="line"></span><br><span class="line">        dfs(k, n)</span><br><span class="line">        <span class="keyword">return</span> ans, len(ans)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">place</span><span class="params">(self, k, j, q)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">            <span class="keyword">if</span> q[i] == j <span class="keyword">or</span> abs(q[i] - j) == abs(i - k):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    solu = Solution()</span><br><span class="line">    <span class="comment"># solu.solveNQueens(4)</span></span><br><span class="line">    print(solu.solveNQueens(<span class="number">4</span>)) <span class="comment"># 当为8时就是8皇后问题</span></span><br></pre></td></tr></table></figure></p><p>输出:</p><pre><code>[[&apos;.Q..&apos;, &apos;...Q&apos;, &apos;Q...&apos;, &apos;..Q.&apos;], [&apos;..Q.&apos;, &apos;Q...&apos;, &apos;...Q&apos;, &apos;.Q..&apos;]]4个皇后时的两种情况</code></pre><p>方法2:回溯法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">queen</span><span class="params">(A, cur=<span class="number">0</span>)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 递归回溯思想解决n皇后问题</span></span><br><span class="line">    <span class="keyword">if</span> cur == len(A): <span class="comment"># 所有的皇后都正确放置完毕，输出每个皇后所在的位置</span></span><br><span class="line">        tmp = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            s = <span class="string">''</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">                s+=<span class="string">'Q'</span> <span class="keyword">if</span> A[i] == j <span class="keyword">else</span> <span class="string">'.'</span></span><br><span class="line">            tmp.append(s)</span><br><span class="line">        ans.append(tmp)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> range(len(A)):</span><br><span class="line">        A[cur], flag = col, <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> range(cur): <span class="comment"># 检测本次所放皇后的位置是否在同行同列或同一对角线上</span></span><br><span class="line">            <span class="keyword">if</span> A[row] == col <span class="keyword">or</span> abs(col - A[row]) == cur - row: <span class="comment"># 是的话，该位置不能放，向上回溯</span></span><br><span class="line">                flag = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> flag: <span class="comment"># 否的话，继续放下一个皇后</span></span><br><span class="line">            queen(A, cur+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = int(input())</span><br><span class="line">ans = []</span><br><span class="line">queen([<span class="literal">None</span>] * n)</span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure></p><h3 id="试题-基础练习-报时助手"><a href="#试题-基础练习-报时助手" class="headerlink" title="试题 基础练习 报时助手"></a>试题 基础练习 报时助手</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">h, m = map(int, input().split())</span><br><span class="line"></span><br><span class="line">time = &#123;<span class="number">0</span>: <span class="string">'zero'</span>, <span class="number">1</span>: <span class="string">'one'</span>, <span class="number">2</span>: <span class="string">'two'</span>, <span class="number">3</span>: <span class="string">'three'</span>, <span class="number">4</span>: <span class="string">'four'</span>, <span class="number">5</span>: <span class="string">'five'</span>, <span class="number">6</span>: <span class="string">'six'</span>, <span class="number">7</span>: <span class="string">'seven'</span>, <span class="number">8</span>: <span class="string">'eight'</span>, <span class="number">9</span>: <span class="string">'nine'</span>,</span><br><span class="line">        <span class="number">10</span>: <span class="string">'ten'</span>, <span class="number">11</span>: <span class="string">'eleven'</span>, <span class="number">12</span>: <span class="string">'twelve'</span>, <span class="number">13</span>: <span class="string">'thirteen'</span>, <span class="number">14</span>: <span class="string">'fourteen'</span>, <span class="number">15</span>: <span class="string">'fifteen'</span>, <span class="number">16</span>: <span class="string">'sixteen'</span>,</span><br><span class="line">        <span class="number">17</span>: <span class="string">'seventeen'</span>, <span class="number">18</span>: <span class="string">'eighteen'</span>, <span class="number">19</span>: <span class="string">'nineteen'</span>, <span class="number">20</span>: <span class="string">'twenty'</span>, <span class="number">21</span>: <span class="string">'twenty one'</span>, <span class="number">22</span>: <span class="string">'twenty two'</span>,</span><br><span class="line">        <span class="number">23</span>: <span class="string">'twenty three'</span>, <span class="number">30</span>: <span class="string">'thirty'</span>, <span class="number">40</span>: <span class="string">'forty'</span>, <span class="number">50</span>: <span class="string">'fifty'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> m == <span class="number">0</span>:</span><br><span class="line">    print(time[h] + <span class="string">' o\'clock'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(time[h], end=<span class="string">' '</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> &lt; m &lt;= <span class="number">20</span> <span class="keyword">or</span> m == <span class="number">30</span> <span class="keyword">or</span> m == <span class="number">40</span> <span class="keyword">or</span> m == <span class="number">50</span>:</span><br><span class="line">        print(time[m])</span><br><span class="line">    <span class="keyword">elif</span> <span class="number">20</span> &lt; m &lt; <span class="number">30</span>:</span><br><span class="line">        print(time[<span class="number">20</span>] + <span class="string">' '</span> + time[m - <span class="number">20</span>])</span><br><span class="line">    <span class="keyword">elif</span> <span class="number">30</span> &lt; m &lt; <span class="number">40</span>:</span><br><span class="line">        print(time[<span class="number">30</span>] + <span class="string">' '</span> + time[m - <span class="number">30</span>])</span><br><span class="line">    <span class="keyword">elif</span> <span class="number">40</span> &lt; m &lt; <span class="number">50</span>:</span><br><span class="line">        print(time[<span class="number">40</span>] + <span class="string">' '</span> + time[m - <span class="number">40</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(time[<span class="number">50</span>] + <span class="string">' '</span> + time[m - <span class="number">50</span>])</span><br></pre></td></tr></table></figure><h3 id="试题-基础练习-龟兔赛跑预测"><a href="#试题-基础练习-龟兔赛跑预测" class="headerlink" title="试题 基础练习 龟兔赛跑预测"></a>试题 基础练习 龟兔赛跑预测</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">data = list(map(int, input().split()))</span><br><span class="line">rabbit = turtle = <span class="number">0</span></span><br><span class="line">time = <span class="number">0</span> <span class="comment">#目前的时间</span></span><br><span class="line">flag = <span class="literal">False</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span>  rabbit == data[<span class="number">-1</span>] <span class="keyword">or</span> turtle == data[<span class="number">-1</span>]: <span class="comment"># 到达终点</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span>  rabbit - turtle &gt;= data[<span class="number">2</span>]:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(data[<span class="number">3</span>]):</span><br><span class="line">            turtle += data[<span class="number">1</span>]</span><br><span class="line">            time += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> turtle &gt;= data[<span class="number">-1</span>]:</span><br><span class="line">                flag = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> flag:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    time += <span class="number">1</span></span><br><span class="line">    rabbit += data[<span class="number">0</span>]</span><br><span class="line">    turtle += data[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> rabbit &gt; turtle:  <span class="comment"># 谁先到达终点，谁的距离大</span></span><br><span class="line">    print(<span class="string">'R'</span>)</span><br><span class="line">    print(time)</span><br><span class="line"><span class="keyword">elif</span> rabbit &lt; turtle:</span><br><span class="line">    print(<span class="string">'T'</span>)</span><br><span class="line">    print(time)</span><br><span class="line"><span class="keyword">else</span>:  <span class="comment"># 相等则平局</span></span><br><span class="line">    print(<span class="string">'D'</span>)</span><br><span class="line">    print(time)</span><br></pre></td></tr></table></figure><h3 id="试题-基础练习-FJ的字符串"><a href="#试题-基础练习-FJ的字符串" class="headerlink" title="试题 基础练习 FJ的字符串"></a>试题 基础练习 FJ的字符串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line">str = <span class="string">'ABA'</span></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">    print(<span class="string">'A'</span>)</span><br><span class="line"><span class="keyword">elif</span> n == <span class="number">2</span>:</span><br><span class="line">    print(<span class="string">'ABA'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>, n+<span class="number">1</span>):</span><br><span class="line">        str = str + chr((i + <span class="number">64</span>)) + str</span><br><span class="line">    print(str)</span><br></pre></td></tr></table></figure><h3 id="试题-基础练习-数的读法"><a href="#试题-基础练习-数的读法" class="headerlink" title="试题 基础练习 数的读法"></a>试题 基础练习 数的读法</h3><p>思路:</p><pre><code>考虑多种情况如前置1有的位置是不读的,11读作shi yi而不是yi shi yi连续0的处理问题</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">n = input()</span><br><span class="line"></span><br><span class="line">pin_yin = &#123;<span class="string">'0'</span>: <span class="string">'ling'</span>, <span class="string">'1'</span>: <span class="string">'yi'</span>, <span class="string">'2'</span>: <span class="string">'er'</span>, <span class="string">'3'</span>: <span class="string">'san'</span>, <span class="string">'4'</span>: <span class="string">'si'</span>, <span class="string">'5'</span>: <span class="string">'wu'</span>,</span><br><span class="line">           <span class="string">'6'</span>: <span class="string">'liu'</span>, <span class="string">'7'</span>: <span class="string">'qi'</span>, <span class="string">'8'</span>: <span class="string">'ba'</span>, <span class="string">'9'</span>: <span class="string">'jiu'</span>&#125;</span><br><span class="line">pin_yin_2 = &#123;<span class="number">0</span>: <span class="string">''</span>, <span class="number">1</span>: <span class="string">''</span>, <span class="number">2</span>: <span class="string">'shi'</span>, <span class="number">3</span>: <span class="string">'bai'</span>, <span class="number">4</span>: <span class="string">'qian'</span>, <span class="number">5</span>: <span class="string">'wan'</span>, <span class="number">6</span>: <span class="string">'shi'</span>,</span><br><span class="line">             <span class="number">7</span>: <span class="string">'bai'</span>, <span class="number">8</span>: <span class="string">'qian'</span>, <span class="number">9</span>: <span class="string">'yi'</span>, <span class="number">10</span>: <span class="string">'shi'</span>&#125;</span><br><span class="line">n = n + <span class="string">' '</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">l = len(n) - <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(l):</span><br><span class="line">    j = int(n[i])</span><br><span class="line">    <span class="keyword">if</span> j != <span class="number">0</span>:  <span class="comment"># 不为0时的读法</span></span><br><span class="line">        <span class="keyword">if</span> (l - i == <span class="number">2</span> <span class="keyword">or</span> l - i == <span class="number">6</span> <span class="keyword">or</span> l - i == <span class="number">10</span>) <span class="keyword">and</span> j == <span class="number">1</span>:</span><br><span class="line">            <span class="comment"># 在十位，十万位，十亿位置且位于开头的1不读</span></span><br><span class="line">            <span class="comment"># 例子：</span></span><br><span class="line">            <span class="comment"># 1111111111 会读出 yi shi yi yi yi qian yi bai yi shi yi wan yi qian yi bai yi shi yi</span></span><br><span class="line">            <span class="comment"># 111111 会读出 yi shi yi wan yi qian yi bai yi shi yi</span></span><br><span class="line">            <span class="comment"># 11 会读出 yi shi yi</span></span><br><span class="line">            <span class="comment"># 加上此约束后，则不会读出开头的 yi</span></span><br><span class="line">            <span class="keyword">if</span> i != <span class="number">0</span>:  <span class="comment"># 第一个1不输出1， 若不添加此条件，12会读出 yi shi er</span></span><br><span class="line">                print(pin_yin[<span class="string">'1'</span>], end=<span class="string">' '</span>)</span><br><span class="line">            print(pin_yin_2[<span class="number">2</span>], end=<span class="string">' '</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        print(pin_yin[n[i]], end=<span class="string">' '</span>)</span><br><span class="line">        print(pin_yin_2[l - i], end=<span class="string">' '</span>)</span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># 处理0的读法问题</span></span><br><span class="line">        <span class="keyword">if</span> l - i == <span class="number">5</span> <span class="keyword">or</span> l - i == <span class="number">9</span>:  <span class="comment"># 如果此0是在万位或亿位，则读出万或亿</span></span><br><span class="line">            print(pin_yin_2[l - i], end=<span class="string">' '</span>)</span><br><span class="line">        <span class="keyword">if</span> n[i + <span class="number">1</span>] == <span class="string">'0'</span> <span class="keyword">or</span> i == l - <span class="number">1</span>:  <span class="comment"># 如果后一位仍然为0，或者，当前是最后一位，则不读此0</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        print(pin_yin[<span class="string">'0'</span>], end=<span class="string">' '</span>)  <span class="comment"># 否则才读出这个零</span></span><br></pre></td></tr></table></figure><h3 id="试题-基础练习-完美的代价"><a href="#试题-基础练习-完美的代价" class="headerlink" title="试题 基础练习 完美的代价"></a>试题 基础练习 完美的代价</h3><p>思路:</p><pre><code>两种情况：1.impossible的情况：如果有一个字符出现的次数是奇数次数，而且n是偶数，那么不可能构成回文。如果n是奇数，但是已经有一个字符出现的次数是奇数次数了，那么如果又有一个字符是奇数次数，就不可能构成回文。2.如果n是奇数，计算中间那个字符交换的次数的时候，不需要模拟把这个数移动到中间去，因为移动到中间的话假设有一对数都在左边或者都在右边。那么交换成回文的时候就要经过中间，就会每次把cnt多加了1，而这个1是没有必要的，因为可以所有的回文移动完了之后再把这个独立的奇数移动过去，才能保证交换次数最少原文链接：https://blog.csdn.net/qq_31910669/article/details/103641497</code></pre><p>该方法蓝桥杯有一组数据超时</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line"></span><br><span class="line">pal = list(input())</span><br><span class="line"></span><br><span class="line">count = flag = <span class="number">0</span>  <span class="comment"># count计数，flag判断是否已经有一个单独的奇个数的字符了</span></span><br><span class="line"></span><br><span class="line">m = n - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(m):  <span class="comment"># 从头遍历到倒数第二个字符</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(m, i - <span class="number">1</span>, <span class="number">-1</span>):  <span class="comment"># 从后面往前一直到i寻找和pal[i]相同的pal[k]</span></span><br><span class="line">        <span class="keyword">if</span> k == i:  <span class="comment"># 如果找不到相同的</span></span><br><span class="line">            <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">or</span> flag == <span class="number">1</span>:  <span class="comment"># impossible的两种情况</span></span><br><span class="line">                print(<span class="string">'Impossible'</span>)</span><br><span class="line">                exit()</span><br><span class="line">            flag = <span class="number">1</span></span><br><span class="line">            count += int(n / <span class="number">2</span>) - i</span><br><span class="line">        <span class="keyword">elif</span> pal[k] == pal[i]:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(k, m):  <span class="comment"># 找到相同的，进行交换</span></span><br><span class="line">                pal[j], pal[j + <span class="number">1</span>] = pal[j + <span class="number">1</span>], pal[j]</span><br><span class="line">                count += <span class="number">1</span>  <span class="comment"># 计数器加1</span></span><br><span class="line">            m -= <span class="number">1</span>  <span class="comment"># 最后拍好序的不在进行比较</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">print(count)</span><br></pre></td></tr></table></figure><p>方法2:<br>思路来源:<a href="https://blog.csdn.net/bianxia123456/article/details/104388390" target="_blank" rel="noopener">干啥啥不会～</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_pal</span><span class="params">(n, s)</span>:</span></span><br><span class="line">    temp = set()</span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">26</span>):</span><br><span class="line">            <span class="keyword">if</span> s.count(chr(ord(<span class="string">'a'</span>) + i)) % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">                print(<span class="string">'Impossible'</span>) <span class="comment"># 如果字符串字符为偶数,但是存在不成对字符</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">26</span>):</span><br><span class="line">            <span class="keyword">if</span> s.count(chr(ord(<span class="string">'a'</span>) + i)) % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">                temp.add(chr(ord(<span class="string">'a'</span>) + i))</span><br><span class="line">            <span class="keyword">if</span> len(temp) &gt; <span class="number">1</span>:</span><br><span class="line">                print(<span class="string">'Impossible'</span>)  <span class="comment"># 如果字符串字符为奇数,但是存在不成对字符超过一个</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_step</span><span class="params">(n, s, s1)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> ans</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n // <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> s[i:].count(s[i]) != <span class="number">1</span>:</span><br><span class="line">            temp = s1[:n - i].index(s[i])</span><br><span class="line">            s1.pop(temp)</span><br><span class="line">            ans += temp</span><br><span class="line">            s = s1[::<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ans += n // <span class="number">2</span> - i</span><br><span class="line">            s[i] = <span class="literal">None</span> <span class="comment"># 将此奇数移动到中间后清除</span></span><br><span class="line">            s1 = s[::<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    n = int(input()) <span class="comment"># 字符串的长度</span></span><br><span class="line">    s = list(input()) <span class="comment"># 输入字符串</span></span><br><span class="line">    s1 = s[::<span class="number">-1</span>]</span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> is_pal(n, s):    <span class="comment"># 如果是回文数 计算挪动的步数</span></span><br><span class="line">        print(count_step(n, s, s1))</span><br></pre></td></tr></table></figure><h3 id="试题-基础练习-矩形面积交"><a href="#试题-基础练习-矩形面积交" class="headerlink" title="试题 基础练习 矩形面积交"></a>试题 基础练习 矩形面积交</h3><pre><code>问题描述　　平面上有两个矩形，它们的边平行于直角坐标系的X轴或Y轴。对于每个矩形，我们给出它的一对相对顶点的坐标，请你编程算出两个矩形的交的面积。输入格式　　输入仅包含两行，每行描述一个矩形。　　在每行中，给出矩形的一对相对顶点的坐标，每个点的坐标都用两个绝对值不超过10^7的实数表示。输出格式　　输出仅包含一个实数，为交的面积，保留到小数后两位。</code></pre><p>思路:</p><blockquote><p>重点是找到两个矩形产生交集的条件<br>矩阵1的对角点坐标的横坐标取最小， 矩阵2的对角点坐标的横坐标取最小，然后再从这两个值中取最大，得x1<br>矩阵1的对角点坐标的横坐标取最大， 矩阵2的对角点坐标的横坐标取最大，然后再从这两个值中取最小，得x2<br>如果x1&lt;x2，这两个矩形才会有交集<br>纵坐标同理<br>最后交集的面积就为：<br>area = (x2 - x1) * (y2 - y1)<br>原文链接：<a href="https://blog.csdn.net/qq_31910669/article/details/103641497" target="_blank" rel="noopener">https://blog.csdn.net/qq_31910669/article/details/103641497</a><br><a href="https://blog.csdn.net/qq_31910669/article/details/103641497" target="_blank" rel="noopener">题号2.26</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">list1 = list(map(float, input().split()))</span><br><span class="line">list2 = list(map(float, input().split()))</span><br><span class="line"></span><br><span class="line">x1 = max(min(list1[<span class="number">0</span>], list1[<span class="number">2</span>]), min(list2[<span class="number">0</span>], list2[<span class="number">2</span>]))</span><br><span class="line">x2 = min(max(list1[<span class="number">0</span>], list1[<span class="number">2</span>]), max(list2[<span class="number">0</span>], list2[<span class="number">2</span>]))</span><br><span class="line">y1 = max(min(list1[<span class="number">1</span>], list1[<span class="number">3</span>]), min(list2[<span class="number">1</span>], list2[<span class="number">3</span>]))</span><br><span class="line">y2 = min(max(list1[<span class="number">1</span>], list1[<span class="number">3</span>]), max(list2[<span class="number">1</span>], list2[<span class="number">3</span>]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x1 &lt; x2 <span class="keyword">and</span> y1 &lt; y2:</span><br><span class="line">    area = (x2 - x1)*(y2 - y1)</span><br><span class="line">    print(<span class="string">'%.2f'</span> % area)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'%.2f'</span> % <span class="number">0.00</span>)</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="试题-基础练习-矩阵乘法"><a href="#试题-基础练习-矩阵乘法" class="headerlink" title="试题 基础练习 矩阵乘法"></a>试题 基础练习 矩阵乘法</h3><pre><code>问题描述　　给定一个N阶矩阵A，输出A的M次幂（M是非负整数）　　例如：　　A =　　1 2　　3 4　　A的2次幂　　7 10　　15 22输入格式　　第一行是一个正整数N、M（1&lt;=N&lt;=30, 0&lt;=M&lt;=5），表示矩阵A的阶数和要求的幂数　　接下来N行，每行N个绝对值不超过10的非负整数，描述矩阵A的值输出格式　　输出共N行，每行N个整数，表示A的M次幂所对应的矩阵。相邻的数之间用一个空格隔开</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">slove</span><span class="params">(N, rect1, rect_ans)</span>:</span></span><br><span class="line">    rect2 = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N):  <span class="comment"># 行</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(N):  <span class="comment"># 列</span></span><br><span class="line">            <span class="keyword">for</span> n <span class="keyword">in</span> range(N):</span><br><span class="line">                rect2[i][j] += rect1[i][n] * rect_ans[n][j]</span><br><span class="line">    <span class="keyword">return</span> rect2</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    N, M =map(int, input().split())     <span class="comment"># 输入数据</span></span><br><span class="line">    rect1 = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]       <span class="comment"># 定义矩阵</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">        arr = input().split()</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">            rect1[i].append(int(arr[j])) <span class="comment"># 输入数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> M &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># 矩阵的幂</span></span><br><span class="line">        rect_ans = rect1</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(M<span class="number">-1</span>):</span><br><span class="line">            rect_ans = slove(N, rect1, rect_ans)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 幂等于0时,输出单位矩阵</span></span><br><span class="line">        rect_ans = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">            rect_ans[i][i] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 格式化输出</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">            print(rect_ans[i][j], end=<span class="string">' '</span>)</span><br><span class="line">        print()</span><br></pre></td></tr></table></figure><h3 id="试题-基础练习-分解质因数"><a href="#试题-基础练习-分解质因数" class="headerlink" title="试题 基础练习 分解质因数"></a>试题 基础练习 分解质因数</h3><pre><code>问题描述　　求出区间[a,b]中所有整数的质因数分解。输入格式　　输入两个整数a，b。输出格式　　每行输出一个数的分解，形如k=a1*a2*a3...(a1&lt;=a2&lt;=a3...，k也是从小到大的)(具体可看样例)</code></pre><p>目前此题代码优化的不是很好, 有两组数据超时,有更好的可以发在评论区分享,互相学习<br><img src="https://img-blog.csdnimg.cn/20200209115659802.png" alt="在这里插入图片描述"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">slove</span><span class="params">(num)</span>:</span></span><br><span class="line">    list = []</span><br><span class="line">    tmp = <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> num == tmp:</span><br><span class="line">        print(num,<span class="string">'='</span>, num, sep=<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(num,<span class="string">'='</span>, sep=<span class="string">''</span>, end=<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">while</span> num &gt;= tmp:</span><br><span class="line">            <span class="keyword">if</span> num % tmp ==<span class="number">0</span>:</span><br><span class="line">                list.append(tmp)</span><br><span class="line">                num = num / tmp</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tmp += <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(list)<span class="number">-1</span>):</span><br><span class="line">            print(list[i], <span class="string">'*'</span>, sep=<span class="string">''</span>, end=<span class="string">''</span>)</span><br><span class="line">        print(list[<span class="number">-1</span>])</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    a, b = map(int, input().split())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(a, b+<span class="number">1</span>):</span><br><span class="line">        slove(i)</span><br></pre></td></tr></table></figure></p><p>下方代码完美通过,思路来源<a href="https://blog.csdn.net/bianxia123456/article/details/104319686" target="_blank" rel="noopener">干啥啥不会～</a><br><img src="https://img-blog.csdnimg.cn/20200222113706329.png" alt="在这里插入图片描述"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(res, n, result)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> n % i ==<span class="number">0</span>:</span><br><span class="line">            res += str(i)</span><br><span class="line">            n = n // i</span><br><span class="line">            <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> res</span><br><span class="line">            <span class="keyword">elif</span> n <span class="keyword">in</span> result.keys():</span><br><span class="line">                res += <span class="string">'*'</span></span><br><span class="line">                res += result[n]</span><br><span class="line">                <span class="keyword">return</span> res</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res += <span class="string">'*'</span></span><br><span class="line">                <span class="keyword">return</span> solve(res, n, result)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    a, b = map(int, input().split()) <span class="comment"># 输入两个整数</span></span><br><span class="line">    result = &#123;&#125;   <span class="comment"># result存放值与其分解质因数的对应关系</span></span><br><span class="line">    <span class="comment"># &#123;3: '3', 4: '2*2', 5: '5', 6: '2*3', 7: '7', 8: '2*2*2', 9: '3*3', 10: '2*5'&#125;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(a, b+<span class="number">1</span>):</span><br><span class="line">        res = <span class="string">''</span>  <span class="comment"># 存放各个因数</span></span><br><span class="line">        result[i] = solve(res, i, result)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 输出</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> result.items():</span><br><span class="line">        s = str(k)+ <span class="string">'='</span>+ str(v)</span><br><span class="line">        print(s)</span><br></pre></td></tr></table></figure></p><h3 id="试题-基础练习-字符串对比"><a href="#试题-基础练习-字符串对比" class="headerlink" title="试题 基础练习 字符串对比"></a>试题 基础练习 字符串对比</h3><pre><code>问题描述　　给定两个仅由大写字母或小写字母组成的字符串(长度介于1到10之间)，它们之间的关系是以下4中情况之一：　　1：两个字符串长度不等。比如 Beijing 和 Hebei　　2：两个字符串不仅长度相等，而且相应位置上的字符完全一致(区分大小写)，比如 Beijing 和 Beijing　　3：两个字符串长度相等，相应位置上的字符仅在不区分大小写的前提下才能达到完全一致（也就是说，它并不满足情况2）。比如 beijing 和 BEIjing　　4：两个字符串长度相等，但是即使是不区分大小写也不能使这两个字符串一致。比如 Beijing 和 Nanjing　　编程判断输入的两个字符串之间的关系属于这四类中的哪一类，给出所属的类的编号。输入格式　　包括两行，每行都是一个字符串输出格式　　仅有一个数字，表明这两个字符串的关系编号</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">slove</span><span class="params">(str1, str2)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(str1) != len(str2):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> str1 == str2:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">        <span class="keyword">elif</span> str1.lower() != str2.lower():</span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    str1 = input()</span><br><span class="line">    str2 = input()</span><br><span class="line">    print(slove(str1, str2))</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://www.runoob.com/python3/python3-upper-lower.html" target="_blank" rel="noopener">Python 字符串大小写转换</a></p></blockquote><h3 id="试题-基础练习-时间转换"><a href="#试题-基础练习-时间转换" class="headerlink" title="试题 基础练习 时间转换"></a>试题 基础练习 时间转换</h3><pre><code>问题描述　　给定一个以秒为单位的时间t，要求用“&lt;H&gt;:&lt;M&gt;:&lt;S&gt;”的格式来表示这个时间。&lt;H&gt;表示时间，&lt;M&gt;表示分钟，而&lt;S&gt;表示秒，它们都是整数且没有前导的“0”。例如，若t=0，则应输出是“0:0:0”；若t=3661，则输出“1:1:1”。输入格式　　输入只有一行，是一个整数t（0&lt;=t&lt;=86399）。输出格式　　输出只有一行，是以“&lt;H&gt;:&lt;M&gt;:&lt;S&gt;”的格式所表示的时间，不包括引号。</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">time = int(input())</span><br><span class="line">hour = time // <span class="number">3600</span></span><br><span class="line">minute = (time - hour*<span class="number">3600</span>) // <span class="number">60</span></span><br><span class="line">second = (time - hour*<span class="number">3600</span> - minute*<span class="number">60</span>) % <span class="number">60</span></span><br><span class="line"></span><br><span class="line">print(hour,<span class="string">':'</span>,minute,<span class="string">':'</span>,second, sep=<span class="string">''</span>)</span><br></pre></td></tr></table></figure><h2 id="算法训练"><a href="#算法训练" class="headerlink" title="算法训练"></a>算法训练</h2><h3 id="试题-算法训练-预测身高"><a href="#试题-算法训练-预测身高" class="headerlink" title="试题 算法训练 预测身高"></a>试题 算法训练 预测身高</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data = list(map(float, input().split()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> data[<span class="number">0</span>] == <span class="number">0</span>:</span><br><span class="line">    ans = (data[<span class="number">1</span>]*<span class="number">0.923</span> + data[<span class="number">2</span>]) / <span class="number">2</span></span><br><span class="line">    print(<span class="string">"%.3f"</span> % ans)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    ans = (data[<span class="number">1</span>] + data[<span class="number">2</span>]) / <span class="number">2</span> * <span class="number">1.08</span></span><br><span class="line">    print(<span class="string">"%.3f"</span> % ans)</span><br></pre></td></tr></table></figure><h2 id="算法提高"><a href="#算法提高" class="headerlink" title="算法提高"></a>算法提高</h2><h3 id="试题-算法提高-最长滑雪道"><a href="#试题-算法提高-最长滑雪道" class="headerlink" title="试题 算法提高 最长滑雪道"></a>试题 算法提高 最长滑雪道</h3><p>思路:</p><pre><code>深度优先搜索(dfs),将搜索到的每个位置的答案存入dp中</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    max_height = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> dp[x][y] &gt; <span class="number">0</span>: <span class="comment"># 如果前面dfs已经将该点的高度存入dp中,则直接返回,不用计算</span></span><br><span class="line">        <span class="keyword">return</span> dp[x][y]</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        tx = x + next_[k][<span class="number">0</span>]</span><br><span class="line">        ty = y + next_[k][<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> tx &lt; <span class="number">0</span> <span class="keyword">or</span> tx &gt;= row <span class="keyword">or</span> ty &lt; <span class="number">0</span> <span class="keyword">or</span> ty &gt;= col:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> arr[tx][ty] &gt;= arr[x][y]:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        max_height = max(max_height, dfs(tx, ty) + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    dp[x][y] = max_height</span><br><span class="line">    <span class="keyword">return</span> dp[x][y]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line">    row, col = map(int, input().split())</span><br><span class="line">    dp = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(col)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(row)]</span><br><span class="line">    arr = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(row)]</span><br><span class="line"></span><br><span class="line">    next_ = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>,<span class="number">0</span>], [<span class="number">0</span>,<span class="number">-1</span>], [<span class="number">-1</span>, <span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(row):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(col):</span><br><span class="line">            ans = max(ans, dfs(i, j))</span><br><span class="line"></span><br><span class="line">    print(ans)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;试题-入门训练-Fibonacci数列&quot;&gt;&lt;a href=&quot;#试题-入门训练-Fibonacci数列&quot; class=&quot;headerlink&quot; title=&quot;试题 入门训练 Fibonacci数列&quot;&gt;&lt;/a&gt;试题 入门训练 Fibonacci数列&lt;/h3&gt;&lt;pre&gt;
      
    
    </summary>
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/categories/Python%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/tags/Python%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Python算法学习: 任意进制转换</title>
    <link href="https://plutoacharon.github.io/2020/02/23/Python%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E4%BB%BB%E6%84%8F%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/"/>
    <id>https://plutoacharon.github.io/2020/02/23/Python算法学习-任意进制转换/</id>
    <published>2020-02-23T12:35:17.000Z</published>
    <updated>2020-02-23T12:40:44.224Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python实现任意进制转换"><a href="#Python实现任意进制转换" class="headerlink" title="Python实现任意进制转换"></a>Python实现任意进制转换</h2><p>给出一个A进制数N，你要把它转成B进制。</p><p>输入<br>第一行是两个整数A,B(2&lt;=A,B&lt;=16)</p><p>第二行是一个A进制的字符串N。题目保证A进制数N转成10进制后的范围在inti型范围内。</p><p>如果A&gt;=10,且某些位的权值大于等于10，那么权值就用小写字母表示，比如，a代表10，bb代表11，c代表12，d代表13，e代表14，f代表15。</p><p>输出<br>输出N转成B进制的结果。</p><pre><code>输入10 2100输出1100100输入2 1610001111输出8f</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(n, x)</span>:</span></span><br><span class="line">    <span class="comment">#n为待转换的十进制数，x为机制，取值为2-16</span></span><br><span class="line">    a=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>]</span><br><span class="line">    b=[]</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        s=n // x  <span class="comment"># 商</span></span><br><span class="line">        y=n % x  <span class="comment"># 余数</span></span><br><span class="line">        b=b+[y]</span><br><span class="line">        <span class="keyword">if</span> s==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        n=s</span><br><span class="line">    b.reverse() <span class="comment"># 辗转相除法</span></span><br><span class="line">    ans = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> b:</span><br><span class="line">        ans += str(a[i]) </span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line">A,B = map(int, input().split())</span><br><span class="line">n = int(input())</span><br><span class="line">n = int(str(n), A) <span class="comment"># int函数可以将A进制的n统一转为十进制</span></span><br><span class="line">ans = f(n, B)</span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Python实现任意进制转换&quot;&gt;&lt;a href=&quot;#Python实现任意进制转换&quot; class=&quot;headerlink&quot; title=&quot;Python实现任意进制转换&quot;&gt;&lt;/a&gt;Python实现任意进制转换&lt;/h2&gt;&lt;p&gt;给出一个A进制数N，你要把它转成B进制。&lt;/
      
    
    </summary>
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/categories/Python%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/tags/Python%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Python算法学习: 竞码编程-蓝桥杯模拟赛2题解</title>
    <link href="https://plutoacharon.github.io/2020/02/23/Python%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E7%AB%9E%E7%A0%81%E7%BC%96%E7%A8%8B-%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%A8%A1%E6%8B%9F%E8%B5%9B2%E9%A2%98%E8%A7%A3/"/>
    <id>https://plutoacharon.github.io/2020/02/23/Python算法学习-竞码编程-蓝桥杯模拟赛2题解/</id>
    <published>2020-02-23T12:34:42.000Z</published>
    <updated>2020-02-23T12:40:42.904Z</updated>
    
    <content type="html"><![CDATA[<p>试题网站:<code>http://oj.hzjingma.com/</code><br>@<a href="文章目录">TOC</a></p><h2 id="A-试题A：完美车牌-5’"><a href="#A-试题A：完美车牌-5’" class="headerlink" title="A. 试题A：完美车牌 5’"></a>A. 试题A：完美车牌 5’</h2><p>有一些数字可以颠倒过来看，例如0、1、8颠倒过来还是本身，6颠倒过来是9，9颠倒过来看还是6，其他数字颠倒过来不构成数字。</p><p>类似的，一些多位数也可以颠倒过来看，比如106颠倒过来是901</p><p>假设某个城市的车牌只由6位数字组成,每一位都可以取0到9。请问这个城市最多有多少个车牌180°180°倒过来恰好还是原来的车牌?</p><p>例如：车牌号：886988,倒过来还是886988</p><p>【答案提交】</p><p>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个数字，填写多余的内容将无法得分。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ans = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">1000000</span>):</span><br><span class="line">    i = str(i).zfill(<span class="number">6</span>) <span class="comment"># 补充前导0</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'2'</span> <span class="keyword">in</span> str(i) <span class="keyword">or</span> <span class="string">'3'</span> <span class="keyword">in</span> str(i) <span class="keyword">or</span> <span class="string">'4'</span> <span class="keyword">in</span> str(i) <span class="keyword">or</span> <span class="string">'5'</span> <span class="keyword">in</span> str(i) <span class="keyword">or</span> <span class="string">'7'</span> <span class="keyword">in</span> str(i):</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        s = str(i)</span><br><span class="line">        s1 = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">            <span class="keyword">if</span> s[<span class="number">5</span>-i] == <span class="string">'6'</span>:</span><br><span class="line">                s1 += <span class="string">'9'</span></span><br><span class="line">            <span class="keyword">elif</span> s[<span class="number">5</span>-i] == <span class="string">'9'</span>:</span><br><span class="line">                s1 += <span class="string">'6'</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                s1 += s[<span class="number">5</span>-i]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> s == s1:</span><br><span class="line">            ans += <span class="number">1</span></span><br><span class="line">            print(s)</span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure></p><h2 id="B-试题B：完美日期-5’"><a href="#B-试题B：完美日期-5’" class="headerlink" title="B. 试题B：完美日期 5’"></a>B. 试题B：完美日期 5’</h2><p>   不知天上宫阙，今夕是何年。</p><p>   对于完美日期yyyy/mm/dd，wlxsq的定义是:</p><p>年月日中均没有出现数字4，<br>年月日的数位之和是8的倍数<br>  例如：2020/02/02 就是一个完美日期，没有出现数字4，且数位之和是8的倍数。</p><p>   wlxsq想知道从2020/02/02开始，第88个完美日期是哪个？</p><p>【答案提交】</p><pre><code>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个格式yyyy/yy/dd，在提交答案时直接填写这个日期，注意需要如果答案有前导零则不能忽略，填写多余的内容将无法得分。</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">y = <span class="number">2020</span></span><br><span class="line">m = <span class="number">2</span></span><br><span class="line">d = <span class="number">2</span></span><br><span class="line">day_ = [<span class="number">0</span>, <span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>]</span><br><span class="line">ans = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> ans &lt;= <span class="number">87</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'4'</span> <span class="keyword">not</span> <span class="keyword">in</span> str(y) <span class="keyword">and</span> <span class="string">'4'</span> <span class="keyword">not</span> <span class="keyword">in</span> str(d) <span class="keyword">and</span> <span class="string">'4'</span> <span class="keyword">not</span> <span class="keyword">in</span> str(m):</span><br><span class="line">        <span class="keyword">if</span> d &gt;= <span class="number">10</span>:</span><br><span class="line">            <span class="keyword">if</span> (y+m+int(str(d)[<span class="number">0</span>])+(int(str(d)[<span class="number">1</span>]))) % <span class="number">8</span> == <span class="number">0</span>:</span><br><span class="line">                ans += <span class="number">1</span></span><br><span class="line">                print(ans)</span><br><span class="line">                print(y, m, d)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> (y+m+d)%<span class="number">8</span> == <span class="number">0</span>:</span><br><span class="line">                ans += <span class="number">1</span></span><br><span class="line">                print(ans)</span><br><span class="line">                print(y, m, d)</span><br><span class="line">    d += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> d &gt; day_[m]:</span><br><span class="line">        d = <span class="number">1</span></span><br><span class="line">        m += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> m &gt; <span class="number">12</span>:</span><br><span class="line">        m = <span class="number">1</span></span><br><span class="line">        y += <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="C-试题C：天机锁10’"><a href="#C-试题C：天机锁10’" class="headerlink" title="C. 试题C：天机锁10’"></a>C. 试题C：天机锁10’</h2><p>描述<br>【问题描述】</p><p>   天机锁，锁天机~</p><p>   wlxsq在机缘巧合的情况下就获得一把天机锁。wlxsq迫不及待的想打开这把锁。该锁的密码是由八个数字构成的,每个数字都是[0,9]中的一个~</p><p>锁上面写道：</p><p>水(数字9)火(数字4)相生相克,同现同隐(要么都出现，要么都不出现),数量一致(且出现则数量得一样多)。<br>土(数字2)乃大地，为伊始(数字2一定出现)。<br>世间万物，不过五二(八个数字之和不超过52)。<br>此乃天机，一日一次之~<br>     由于天机锁一天只能试一次，wlxsq想知道，总共有多少种方案~</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ans = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">100000000</span>):</span><br><span class="line">    s = str(i)</span><br><span class="line">    s = s.zfill(<span class="number">8</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'2'</span> <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'4'</span> <span class="keyword">in</span> s <span class="keyword">and</span> <span class="string">'9'</span> <span class="keyword">in</span> s <span class="keyword">and</span> s.count(<span class="string">'4'</span>) == s.count(<span class="string">'9'</span>):</span><br><span class="line">            <span class="keyword">if</span> int(s[<span class="number">0</span>])+int(s[<span class="number">1</span>])+int(s[<span class="number">2</span>])+int(s[<span class="number">3</span>])+int(s[<span class="number">4</span>])+int(s[<span class="number">5</span>])+int(s[<span class="number">6</span>])+int(s[<span class="number">7</span>]) &lt;= <span class="number">52</span>:</span><br><span class="line">                ans += <span class="number">1</span></span><br><span class="line">                print(i)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="string">'4'</span> <span class="keyword">not</span> <span class="keyword">in</span> s <span class="keyword">and</span> <span class="string">'9'</span> <span class="keyword">not</span> <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> int(s[<span class="number">0</span>])+int(s[<span class="number">1</span>])+int(s[<span class="number">2</span>])+int(s[<span class="number">3</span>])+int(s[<span class="number">4</span>])+int(s[<span class="number">5</span>])+int(s[<span class="number">6</span>])+int(s[<span class="number">7</span>]) &lt;= <span class="number">52</span>:</span><br><span class="line">                ans += <span class="number">1</span></span><br><span class="line">                print(i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure><h2 id="D-试题D：完美运算-10‘"><a href="#D-试题D：完美运算-10‘" class="headerlink" title="D. 试题D：完美运算 10‘"></a>D. 试题D：完美运算 10‘</h2><p><img src="https://img-blog.csdnimg.cn/20200223114237130.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>思路:算出全部情况和A=B的情况,最后<code>(全部情况-A=B情况)/2+A=B情况</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(n)</span>:</span></span><br><span class="line">    x = <span class="number">3</span></span><br><span class="line">    <span class="comment">#n为待转换的十进制数，x为机制，取值为2-16</span></span><br><span class="line">    a=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="string">'A'</span>,<span class="string">'b'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>,<span class="string">'E'</span>,<span class="string">'F'</span>]</span><br><span class="line">    b=[]</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        s=n // x  <span class="comment"># 商</span></span><br><span class="line">        y=n % x  <span class="comment"># 余数</span></span><br><span class="line">        b=b+[y]</span><br><span class="line">        <span class="keyword">if</span> s==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        n=s</span><br><span class="line">    b.reverse()</span><br><span class="line">    ans = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> b:</span><br><span class="line">        ans += str(a[i])</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line">    ans2 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">2021</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">2021</span>):</span><br><span class="line">            a1 = f(i).count(<span class="string">'1'</span>)</span><br><span class="line">            a2 = f(i).count(<span class="string">'2'</span>)</span><br><span class="line">            b1 = f(j).count(<span class="string">'1'</span>)</span><br><span class="line">            b2 = f(j).count(<span class="string">'2'</span>)</span><br><span class="line">            <span class="keyword">if</span> abs(int(a1)-int(a2)) == abs(int(b1)-int(b2)):</span><br><span class="line">                ans += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> i == j:</span><br><span class="line">                ans2 += <span class="number">1</span></span><br><span class="line">    print(ans)</span><br><span class="line">    print(ans2)</span><br></pre></td></tr></table></figure></p><h2 id="F-试题F：JM斗牛-17’"><a href="#F-试题F：JM斗牛-17’" class="headerlink" title="F. 试题F：JM斗牛 17’"></a>F. 试题F：JM斗牛 17’</h2><p>描述<br>JM打完麻将，觉得太简单了，所以决定去斗牛，挑战一下高难度。</p><p>一副牌共54张牌，即采用牌大王(1张),小王(1张),K，Q，J，10，9，8，7，6，5，4，3，2，A。除了大小王，其余牌型均为4张。故4*13+2=54张</p><p>斗牛则是每人5张牌，计算5张牌的构成的点数，然后比较点数大小。</p><p>关于点数计算：</p><p>大王(S)，小王(S)，K，Q，J都当成是10点，A当成是1点，其余牌都当其本身的点数。 大王，小王均用大写字母S表示<br>每位玩家5张牌，玩家用手上任意的3张牌组合（且只能用3张牌组成10的倍数），使其点数之和为10的倍数，这样就称之为“牛”。<br>然后将剩余的2张牌点数之和取个位数，如这2张牌之和也为10的倍数，则组成“牛牛”牌型。如这2张牌之和不为10的整数倍，则去掉十位数之后个位数为几，则成为“牛几”牌型。<br>如任意三张牌组合的点数之和都不能成为10的倍数，则称之为“无牛”牌型。<br>例如：</p><p>牛牛牌型:选取的3张牌之和为10的整数倍,余下2张牌之和也为10的整数倍。例：A,9,10,J,Q.选取(A,9,J)和为10的整数倍,(10,Q构成)牛牛</p><p>牛九牌型:选取的3张牌之和为10的整数倍,余下2张牌之和的个位数为9。例：A,9,10,J,9。   </p><p>牛八牌型:选取的3张牌之和为10的整数倍,余下2张牌之和的个位数为8。例：A,9,10,J,8。</p><p>牛七牌型:选取的3张牌之和为10的整数倍,余下2张牌之和的个位数为7。例:A,9,10,J,7。选取(A,9,J)和为10的整数倍，(10,7构成)牛七</p><p>无牛牌型: 任意选取的3张牌之和均不可能为10的整数倍例:A,9,8,9,7。</p><p>   JM会打麻将，但是不怎么会斗牛，想请你帮忙编写程序帮忙计算一下，JM 拿到的牌是什么牌型。<br>样例</p><pre><code>输入A 2 3 5 S输出1输入S S A 8 8输出so sad!输入S S J Q K输出so cool!</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(list)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(j + <span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">                <span class="keyword">if</span> (list[i] + list[j] + list[k]) % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">                    num1 = list[i]</span><br><span class="line">                    num2 = list[j]</span><br><span class="line">                    num3 = list[k]</span><br><span class="line">                    list.remove(num1)</span><br><span class="line">                    list.remove(num2)</span><br><span class="line">                    list.remove(num3)</span><br><span class="line">                    <span class="keyword">if</span> (list[<span class="number">0</span>] + list[<span class="number">1</span>]) % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">                        str1 = <span class="string">"so cool!"</span></span><br><span class="line">                        <span class="keyword">return</span> str1</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">return</span> (list[<span class="number">0</span>] + list[<span class="number">1</span>]) % <span class="number">10</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        str2 = <span class="string">"so sad!"</span></span><br><span class="line">        <span class="keyword">return</span> str2</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    str = input()</span><br><span class="line">    str = str.replace(<span class="string">'A'</span>,<span class="string">'1'</span>)</span><br><span class="line">    str = str.replace(<span class="string">'S'</span>,<span class="string">'10'</span>)</span><br><span class="line">    str = str.replace(<span class="string">'K'</span>,<span class="string">'10'</span>)</span><br><span class="line">    str = str.replace(<span class="string">'Q'</span>,<span class="string">'10'</span>)</span><br><span class="line">    str = str.replace(<span class="string">'J'</span>,<span class="string">'10'</span>)</span><br><span class="line">    list = list(str.split())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(list)):</span><br><span class="line">        list[i] = int(list[i])</span><br><span class="line"></span><br><span class="line">    ans = solve(list=list)</span><br><span class="line">    print(ans)</span><br></pre></td></tr></table></figure><h2 id="H-试题H：宝剑锋从磨砺出-20’"><a href="#H-试题H：宝剑锋从磨砺出-20’" class="headerlink" title="H. 试题H：宝剑锋从磨砺出 20’"></a>H. 试题H：宝剑锋从磨砺出 20’</h2><p><img src="https://img-blog.csdnimg.cn/20200223114448700.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>思路: k减去所有材料的p2,然后找到最大的p1去处理k</p><p>样例</p><pre><code>输入1 10 3 5输出3输入2 103 52 6输出2</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">n,k = map(int, input().split())</span><br><span class="line">ans = <span class="number">0</span></span><br><span class="line">list1 = []</span><br><span class="line">list2 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    a,b = map(int, input().split())</span><br><span class="line">    list1.append(a)</span><br><span class="line">    list2.append(b)</span><br><span class="line">list1 = sorted(list1)</span><br><span class="line">list2 = sorted(list2)</span><br><span class="line"><span class="keyword">while</span> list2 <span class="keyword">and</span> list2[<span class="number">-1</span>] &gt; list1[<span class="number">-1</span>] <span class="keyword">and</span> k &gt; <span class="number">0</span>:</span><br><span class="line">    k -= list2[<span class="number">-1</span>]</span><br><span class="line">    list2.pop()</span><br><span class="line">    ans += <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> k &gt; <span class="number">0</span>:</span><br><span class="line">    ans += k // list1[<span class="number">-1</span>] + <span class="number">1</span></span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;试题网站:&lt;code&gt;http://oj.hzjingma.com/&lt;/code&gt;&lt;br&gt;@&lt;a href=&quot;文章目录&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;A-试题A：完美车牌-5’&quot;&gt;&lt;a href=&quot;#A-试题A：完美车牌-5’&quot; class=&quot;headerlin
      
    
    </summary>
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/categories/Python%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/tags/Python%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Python算法学习: 计蒜客 2020 蓝桥杯大学 B 组省赛模拟赛 （一）题目及解析</title>
    <link href="https://plutoacharon.github.io/2020/02/23/Python%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E8%AE%A1%E8%92%9C%E5%AE%A2-2020-%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%A4%A7%E5%AD%A6-B-%E7%BB%84%E7%9C%81%E8%B5%9B%E6%A8%A1%E6%8B%9F%E8%B5%9B-%EF%BC%88%E4%B8%80%EF%BC%89%E9%A2%98%E7%9B%AE%E5%8F%8A%E8%A7%A3%E6%9E%90/"/>
    <id>https://plutoacharon.github.io/2020/02/23/Python算法学习-计蒜客-2020-蓝桥杯大学-B-组省赛模拟赛-（一）题目及解析/</id>
    <published>2020-02-23T12:34:04.000Z</published>
    <updated>2020-02-23T12:40:40.878Z</updated>
    
    <content type="html"><![CDATA[<h3 id="A-结果填空-有趣的数字"><a href="#A-结果填空-有趣的数字" class="headerlink" title="A. 结果填空: 有趣的数字"></a>A. 结果填空: 有趣的数字</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(n)</span>:</span></span><br><span class="line">    tmp = <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> tmp == n:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; tmp:</span><br><span class="line">        k = n % tmp</span><br><span class="line">        <span class="keyword">if</span> k==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tmp += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">100000</span>):</span><br><span class="line">        <span class="keyword">if</span> solve(i) <span class="keyword">and</span> <span class="string">'5'</span> <span class="keyword">in</span> str(i):</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">    print(count)</span><br></pre></td></tr></table></figure><h3 id="B-结果填空：爬楼梯"><a href="#B-结果填空：爬楼梯" class="headerlink" title="B. 结果填空：爬楼梯"></a>B. 结果填空：爬楼梯</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">蒜头要爬楼梯。楼梯一共有 10 层台阶。因为腿长的限制，每次最多能上 4 层台阶。但是第 5,7层楼梯坏掉了不能踩。求上楼梯的方案数</span></span><br><span class="line"><span class="string">https://nanti.jisuanke.com/t/43116</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">ans = [<span class="number">0</span>]*<span class="number">11</span> <span class="comment"># 定义存放数据的列表</span></span><br><span class="line">ans[<span class="number">0</span>] = <span class="number">1</span> <span class="comment"># 初始化</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">5</span> <span class="keyword">or</span> i == <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> i - <span class="number">1</span> &gt;= <span class="number">0</span>:</span><br><span class="line">        ans[i] += ans[i<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">if</span> i - <span class="number">2</span> &gt;= <span class="number">0</span>:</span><br><span class="line">        ans[i] += ans[i<span class="number">-2</span>]</span><br><span class="line">    <span class="keyword">if</span> i - <span class="number">3</span> &gt;= <span class="number">0</span>:</span><br><span class="line">        ans[i] += ans[i<span class="number">-3</span>]</span><br><span class="line">    <span class="keyword">if</span> i - <span class="number">4</span> &gt;= <span class="number">0</span>:</span><br><span class="line">        ans[i] += ans[i<span class="number">-4</span>]</span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure><h3 id="C-结果填空：七巧板"><a href="#C-结果填空：七巧板" class="headerlink" title="C. 结果填空：七巧板"></a>C. 结果填空：七巧板</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">思路：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">跟平面划分一个道理，每次都会多划分一个区域，F(n)=F(n-1)+1 。</span></span><br><span class="line"><span class="string">答案是47 = 7+ (6+7+8+9+10）</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">x = <span class="number">7</span></span><br><span class="line">a = <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">    x += a</span><br><span class="line">    a += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><h3 id="D-结果填空：苹果"><a href="#D-结果填空：苹果" class="headerlink" title="D. 结果填空：苹果"></a>D. 结果填空：苹果</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">count = <span class="number">0</span></span><br><span class="line">list = [<span class="number">7</span> ,<span class="number">2</span> ,<span class="number">12</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">10</span> ,<span class="number">5</span> ,<span class="number">4</span> ,<span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">3</span> ,<span class="number">8</span> ,<span class="number">7</span> ,<span class="number">8</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>):</span><br><span class="line">    <span class="keyword">if</span> list[i] &gt;=  <span class="number">3</span>:</span><br><span class="line">        count += list[i] // <span class="number">3</span></span><br><span class="line">        list[i] = list[i] % <span class="number">3</span></span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">while</span> flag:</span><br><span class="line">        <span class="keyword">if</span> list[i] &gt;=<span class="number">1</span> <span class="keyword">and</span> list[i + <span class="number">1</span>] &gt;= <span class="number">1</span> <span class="keyword">and</span> list[i + <span class="number">2</span>] &gt;= <span class="number">1</span>:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            list[i] -= <span class="number">1</span></span><br><span class="line">            list[i + <span class="number">1</span>] -= <span class="number">1</span></span><br><span class="line">            list[i + <span class="number">2</span>] -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">print(list)</span><br><span class="line">print(count)</span><br></pre></td></tr></table></figure><h3 id="F-程序设计：寻找重复项"><a href="#F-程序设计：寻找重复项" class="headerlink" title="F. 程序设计：寻找重复项"></a>F. 程序设计：寻找重复项</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a, b, c = map(int, input().split())</span><br><span class="line">list = []</span><br><span class="line">list.append(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">2000001</span>):</span><br><span class="line">    num = ((a*list[i<span class="number">-1</span>]) + (list[i<span class="number">-1</span>] % b)) % c</span><br><span class="line">    list.append(num)</span><br><span class="line">    <span class="keyword">if</span> len(list) != len(set(list)):</span><br><span class="line">        print(i)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="number">-1</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;A-结果填空-有趣的数字&quot;&gt;&lt;a href=&quot;#A-结果填空-有趣的数字&quot; class=&quot;headerlink&quot; title=&quot;A. 结果填空: 有趣的数字&quot;&gt;&lt;/a&gt;A. 结果填空: 有趣的数字&lt;/h3&gt;&lt;figure class=&quot;highlight pyth
      
    
    </summary>
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/categories/Python%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/tags/Python%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Python算法学习: 计蒜客蓝桥杯训练营题解(持续更新)</title>
    <link href="https://plutoacharon.github.io/2020/02/23/Python%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E8%AE%A1%E8%92%9C%E5%AE%A2%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%AE%AD%E7%BB%83%E8%90%A5%E9%A2%98%E8%A7%A3-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"/>
    <id>https://plutoacharon.github.io/2020/02/23/Python算法学习-计蒜客蓝桥杯训练营题解-持续更新/</id>
    <published>2020-02-23T12:29:16.000Z</published>
    <updated>2020-02-23T12:40:42.331Z</updated>
    
    <content type="html"><![CDATA[<h2 id="day1字符串和日期"><a href="#day1字符串和日期" class="headerlink" title="day1字符串和日期:"></a>day1字符串和日期:</h2><h3 id="特殊的三角形"><a href="#特殊的三角形" class="headerlink" title="特殊的三角形"></a>特殊的三角形</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">特殊的三角形</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">输入:9</span></span><br><span class="line"><span class="string">输出:</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">       121</span></span><br><span class="line"><span class="string">      12321</span></span><br><span class="line"><span class="string">     1234321</span></span><br><span class="line"><span class="string">    123454321</span></span><br><span class="line"><span class="string">   12345654321</span></span><br><span class="line"><span class="string">  1234567654321</span></span><br><span class="line"><span class="string"> 123456787654321</span></span><br><span class="line"><span class="string">12345678987654321</span></span><br><span class="line"><span class="string">输入:C</span></span><br><span class="line"><span class="string">输出:</span></span><br><span class="line"><span class="string">  A</span></span><br><span class="line"><span class="string"> ABA</span></span><br><span class="line"><span class="string">ABCBA</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">n = input()</span><br><span class="line"><span class="keyword">if</span> ord(n) &lt; <span class="number">65</span>:</span><br><span class="line">    n = int(n)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, n + <span class="number">1</span> - i):</span><br><span class="line">            print(<span class="string">' '</span>, end=<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, i+<span class="number">1</span>):</span><br><span class="line">            print(j, end=<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i , <span class="number">1</span>, <span class="number">-1</span>):</span><br><span class="line">            print(j<span class="number">-1</span>, end=<span class="string">''</span>)</span><br><span class="line">        print()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    ch = ord(n)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">65</span>, ch + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, ch - i + <span class="number">1</span>):</span><br><span class="line">            print(<span class="string">' '</span>, end=<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">65</span>, i + <span class="number">1</span>):</span><br><span class="line">            print(chr(j), end=<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i, <span class="number">65</span>, <span class="number">-1</span>):</span><br><span class="line">            print(chr(j - <span class="number">1</span>), end=<span class="string">''</span>)</span><br><span class="line">        print()</span><br></pre></td></tr></table></figure><h3 id="字母三角形"><a href="#字母三角形" class="headerlink" title="字母三角形"></a>字母三角形</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">  A</span></span><br><span class="line"><span class="string"> BBB</span></span><br><span class="line"><span class="string">CCCCC</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">n = int(input())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">    space = (n - i) * <span class="string">' '</span></span><br><span class="line">    ch = chr(i+<span class="number">64</span>) * (<span class="number">2</span>*i - <span class="number">1</span>)</span><br><span class="line">    print(space+ch)</span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">str = list(input())</span><br><span class="line"><span class="comment"># a=97 z=122 A=65 Z=90</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(str)):</span><br><span class="line">    <span class="keyword">if</span> <span class="number">65</span> &lt;= ord(str[i]) &lt;=<span class="number">122</span>:</span><br><span class="line">        <span class="keyword">if</span> str[i] == <span class="string">'z'</span>:</span><br><span class="line">            str[i] = <span class="string">'a'</span></span><br><span class="line">        <span class="keyword">elif</span> str[i] == <span class="string">'Z'</span>:</span><br><span class="line">            str[i] = <span class="string">'A'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            str[i] = chr(ord(str[i])+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str:</span><br><span class="line">    print(i, end=<span class="string">''</span>)</span><br></pre></td></tr></table></figure><h3 id="寻找字符串"><a href="#寻找字符串" class="headerlink" title="寻找字符串"></a>寻找字符串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">输入:</span></span><br><span class="line"><span class="string">ossosso</span></span><br><span class="line"><span class="string">osso</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">输出:</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">str = input()</span><br><span class="line">target = input()</span><br><span class="line">ans = <span class="number">0</span></span><br><span class="line">len_t = len(target)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(str)):</span><br><span class="line">    <span class="keyword">if</span> str[i] == target[<span class="number">0</span>]:</span><br><span class="line">        <span class="keyword">if</span> str[i:i+len_t<span class="number">-1</span>] == target[<span class="number">0</span>:len_t<span class="number">-1</span>]:</span><br><span class="line">            ans += <span class="number">1</span></span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure><h3 id="恋爱纪念日"><a href="#恋爱纪念日" class="headerlink" title="恋爱纪念日"></a>恋爱纪念日</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">year, month, day, k = map(int, input().split())</span><br><span class="line">day_ = [<span class="number">0</span>, <span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, k+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> year % <span class="number">100</span> != <span class="number">0</span> <span class="keyword">and</span> year % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">or</span> year % <span class="number">400</span> == <span class="number">0</span>:   <span class="comment">#判断是否为闰年</span></span><br><span class="line">        day_[<span class="number">2</span>] = <span class="number">29</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        day_[<span class="number">2</span>] = <span class="number">28</span></span><br><span class="line">    day += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> day == day_[month]:</span><br><span class="line">        day = <span class="number">0</span></span><br><span class="line">        month += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> month == <span class="number">13</span>:</span><br><span class="line">        month = <span class="number">1</span></span><br><span class="line">        year += <span class="number">1</span></span><br><span class="line">print(<span class="string">"&#123;:d&#125;-&#123;:0&gt;2d&#125;-&#123;:0&gt;2d&#125;"</span>.format(year, month, day))</span><br></pre></td></tr></table></figure><h2 id="day3代码能力提升"><a href="#day3代码能力提升" class="headerlink" title="day3代码能力提升"></a>day3代码能力提升</h2><h3 id="机器人"><a href="#机器人" class="headerlink" title="机器人"></a>机器人</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">蒜头君收到了一份礼物，是一个最新版的机器人。这个机器人有 4 种指令：</span></span><br><span class="line"><span class="string">forward x，前进x米。</span></span><br><span class="line"><span class="string">back x，先向后转，然后前进x米。</span></span><br><span class="line"><span class="string">left x，先向左转，然后前进x米。</span></span><br><span class="line"><span class="string">right x，先向右转，然后前进x米。</span></span><br><span class="line"><span class="string">现在把机器人放在坐标轴原点，起始朝向为x轴正方向。经过一系列指令以后，你能告诉蒜头君机器人的坐标位置吗。坐标轴上一个单位长度表示1米。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">样例输入:</span></span><br><span class="line"><span class="string">10</span></span><br><span class="line"><span class="string">back -9</span></span><br><span class="line"><span class="string">left 3</span></span><br><span class="line"><span class="string">left 8</span></span><br><span class="line"><span class="string">back 15</span></span><br><span class="line"><span class="string">right 10</span></span><br><span class="line"><span class="string">right -7</span></span><br><span class="line"><span class="string">right -3</span></span><br><span class="line"><span class="string">left 11</span></span><br><span class="line"><span class="string">right 17</span></span><br><span class="line"><span class="string">left 3</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">样例输出:</span></span><br><span class="line"><span class="string">9 -7</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">n = int(input())</span><br><span class="line"></span><br><span class="line">dx = [<span class="number">0</span>,<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>]  <span class="comment">#上左下右</span></span><br><span class="line">dy = [<span class="number">1</span>, <span class="number">0</span>,<span class="number">-1</span>, <span class="number">0</span>]  <span class="comment">#上左下右</span></span><br><span class="line"></span><br><span class="line">now_dir = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">nowx = <span class="number">0</span></span><br><span class="line">nowy = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    dir, x = map(str, input().split())</span><br><span class="line">    x = int(x)</span><br><span class="line">    <span class="keyword">if</span> dir[<span class="number">0</span>] == <span class="string">'b'</span>:</span><br><span class="line">        now_dir = (now_dir+<span class="number">2</span>) % <span class="number">4</span>  <span class="comment"># 向后</span></span><br><span class="line">    <span class="keyword">elif</span> dir[<span class="number">0</span>] == <span class="string">'l'</span>:</span><br><span class="line">        now_dir = (now_dir+<span class="number">1</span>) % <span class="number">4</span>  <span class="comment"># 向左</span></span><br><span class="line">    <span class="keyword">elif</span> dir[<span class="number">0</span>] == <span class="string">'r'</span>:</span><br><span class="line">        now_dir = (now_dir+<span class="number">3</span>) % <span class="number">4</span>  <span class="comment"># 向右</span></span><br><span class="line">    nowx += dx[now_dir] * x</span><br><span class="line">    nowy += dy[now_dir] * x</span><br><span class="line"></span><br><span class="line">print(nowx, nowy)</span><br></pre></td></tr></table></figure><h3 id="矩阵旋转"><a href="#矩阵旋转" class="headerlink" title="矩阵旋转"></a>矩阵旋转</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">输入:</span></span><br><span class="line"><span class="string">3 4</span></span><br><span class="line"><span class="string">-1 3 6 3</span></span><br><span class="line"><span class="string">7 7 9 1</span></span><br><span class="line"><span class="string">10 3 4 6</span></span><br><span class="line"><span class="string">输出:</span></span><br><span class="line"><span class="string">10 7 -1</span></span><br><span class="line"><span class="string">3 7 3</span></span><br><span class="line"><span class="string">4 9 6</span></span><br><span class="line"><span class="string">6 1 3</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">n, m = map(int, input().split())</span><br><span class="line">arr = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">arr_ans = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(n)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(m)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">        arr_ans[i][j] = arr[n-j<span class="number">-1</span>][i]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">        print(arr_ans[i][j], end=<span class="string">' '</span>)</span><br><span class="line">    print()</span><br></pre></td></tr></table></figure><h3 id="矩阵最大子阵"><a href="#矩阵最大子阵" class="headerlink" title="矩阵最大子阵"></a>矩阵最大子阵</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">矩阵本身可看作是一个特殊的子矩阵</span></span><br><span class="line"><span class="string">输入:</span></span><br><span class="line"><span class="string">3 3</span></span><br><span class="line"><span class="string">2 -4 1</span></span><br><span class="line"><span class="string">-1 2 1</span></span><br><span class="line"><span class="string">4 -2 2</span></span><br><span class="line"><span class="string">输出:</span></span><br><span class="line"><span class="string">6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">n, m = map(int, input().split())</span><br><span class="line">arr  = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">ans  = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(i, n):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(m):</span><br><span class="line">            <span class="keyword">for</span> l <span class="keyword">in</span> range(k, m):</span><br><span class="line">                tmp = <span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> p <span class="keyword">in</span> range(i, j+<span class="number">1</span>):</span><br><span class="line">                    <span class="keyword">for</span> q <span class="keyword">in</span> range(k, l+<span class="number">1</span>):</span><br><span class="line">                        tmp += arr[p][q]</span><br><span class="line">                <span class="keyword">if</span> tmp &gt; ans:</span><br><span class="line">                    ans = tmp</span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure><h2 id="day4-常用STL"><a href="#day4-常用STL" class="headerlink" title="day4:常用STL"></a>day4:常用STL</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">锯齿矩阵是指每一行包含的元素个数不相同的矩阵，比如：</span></span><br><span class="line"><span class="string">3 5 2 6 1</span></span><br><span class="line"><span class="string">2 3 4</span></span><br><span class="line"><span class="string">1 6 2 7</span></span><br><span class="line"><span class="string">读入若干对整数 (x,y)，表示在第 x 行的末尾加上一个元素 y。输出最终的锯齿数组。初始时矩阵为空。</span></span><br><span class="line"><span class="string">输入格式</span></span><br><span class="line"><span class="string">第一行输入两个整数n,m(1≤n,m≤10000)，其中 n 表示锯齿数组的行数，m 表示插入的元素总数。</span></span><br><span class="line"><span class="string">接下来一共 m 行，每行两个整数 x,y(1≤x≤n,0≤y≤10000)，表示在第 x 行的末尾插入一个元素 y。</span></span><br><span class="line"><span class="string">输出格式</span></span><br><span class="line"><span class="string">一共输出 n 行，每行若干个用空格分隔的整数。如果某行没有任何元素，则输出一个空行。</span></span><br><span class="line"><span class="string">样例输入</span></span><br><span class="line"><span class="string">3 12</span></span><br><span class="line"><span class="string">1 3</span></span><br><span class="line"><span class="string">2 2</span></span><br><span class="line"><span class="string">2 3</span></span><br><span class="line"><span class="string">2 4</span></span><br><span class="line"><span class="string">3 1</span></span><br><span class="line"><span class="string">3 6</span></span><br><span class="line"><span class="string">1 5</span></span><br><span class="line"><span class="string">1 2</span></span><br><span class="line"><span class="string">1 6</span></span><br><span class="line"><span class="string">3 2</span></span><br><span class="line"><span class="string">3 7</span></span><br><span class="line"><span class="string">1 1</span></span><br><span class="line"><span class="string">样例输出</span></span><br><span class="line"><span class="string">3 5 2 6 1</span></span><br><span class="line"><span class="string">2 3 4</span></span><br><span class="line"><span class="string">1 6 2 7</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">n, m = map(int, input().split())</span><br><span class="line">ans_arr = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入数据</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">    x,y = map(int, input().split())</span><br><span class="line">    ans_arr[x<span class="number">-1</span>].append(y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出数组</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(ans_arr[i])):</span><br><span class="line">        print(ans_arr[i][j], end=<span class="string">' '</span>)</span><br><span class="line">    print()</span><br></pre></td></tr></table></figure><h3 id="蒜头君面试"><a href="#蒜头君面试" class="headerlink" title="蒜头君面试"></a>蒜头君面试</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">蒜头君来蒜厂面试的时候，曾经遇到这样一个面试题：</span></span><br><span class="line"><span class="string">给定 n 个整数，求里面出现次数最多的数，如果有多个重复出现的数，求出值最大的一个。当时可算是给蒜头君难住了。现在蒜头君来考考你。</span></span><br><span class="line"><span class="string">输入格式</span></span><br><span class="line"><span class="string">第一行输入一个整数n(1≤n≤100000)，接下来一行输入n个 int 范围内的整数。</span></span><br><span class="line"><span class="string">输出格式</span></span><br><span class="line"><span class="string">输出出现次数最多的数和出现的次数，中间用一个空格隔开，如果有多个重复出现的数，输出值最大的那个。</span></span><br><span class="line"><span class="string">样例输入</span></span><br><span class="line"><span class="string">10</span></span><br><span class="line"><span class="string">9 10 27 4 9 10 3 1 2 6</span></span><br><span class="line"><span class="string">样例输出</span></span><br><span class="line"><span class="string">10 2</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line">n = int(input())</span><br><span class="line">arr = list(input().split())</span><br><span class="line"></span><br><span class="line">count = Counter(arr).most_common()</span><br><span class="line">top = Counter(arr).most_common(<span class="number">1</span>) <span class="comment"># 取出现最多数的次数为top</span></span><br><span class="line"></span><br><span class="line">ans = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(count)):</span><br><span class="line">    tmp = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> count[i][<span class="number">1</span>] == top[<span class="number">0</span>][<span class="number">1</span>]:</span><br><span class="line">        tmp = count[i][<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> int(tmp) &gt; ans:</span><br><span class="line">        ans = int(tmp)</span><br><span class="line"></span><br><span class="line">print(ans, top[<span class="number">0</span>][<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h2 id="day5-栈和递归练习"><a href="#day5-栈和递归练习" class="headerlink" title="day5:栈和递归练习"></a>day5:栈和递归练习</h2><h3 id="括号匹配"><a href="#括号匹配" class="headerlink" title="括号匹配"></a>括号匹配</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">brace_match</span><span class="params">(str)</span>:</span></span><br><span class="line">    stack = []</span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> str:</span><br><span class="line">        <span class="keyword">if</span> ch <span class="keyword">in</span> &#123;<span class="string">'('</span>, <span class="string">'&#123;'</span>, <span class="string">'['</span>&#125;:</span><br><span class="line">            stack.append(ch)</span><br><span class="line">        <span class="keyword">elif</span> len(stack) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">elif</span> brace_arr[stack[<span class="number">-1</span>]] == ch:</span><br><span class="line">            stack.pop()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> len(stack) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    str = input()</span><br><span class="line">    brace_arr = &#123;<span class="string">'('</span>:<span class="string">')'</span>, <span class="string">'&#123;'</span>:<span class="string">'&#125;'</span>, <span class="string">'['</span>:<span class="string">']'</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> brace_match(str):</span><br><span class="line">        print(<span class="string">'Yes'</span>)</span><br></pre></td></tr></table></figure><h3 id="蒜头君吃桃"><a href="#蒜头君吃桃" class="headerlink" title="蒜头君吃桃"></a>蒜头君吃桃</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">猴子吃桃问题：猴子第一天摘下若干个桃子，当即吃了一半，还不瘾，又多吃了一个。第二天早上又将剩下的桃子吃掉一半，又多吃了一个。以后每天早上都吃了前一天剩的一半零一个。到第10天早上想再吃时，见只剩下一个桃子了，求第一天共摘了多少桃子？</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x == n:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> (solve(x+<span class="number">1</span>)+<span class="number">1</span>) * <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    n = int(input()) <span class="comment"># n=10时就是猴子吃桃问题</span></span><br><span class="line">    print(solve(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><h2 id="day6-深度优先搜索"><a href="#day6-深度优先搜索" class="headerlink" title="day6:深度优先搜索"></a>day6:深度优先搜索</h2><h3 id="踏青"><a href="#踏青" class="headerlink" title="踏青"></a>踏青</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">5 6</span></span><br><span class="line"><span class="string">.#....</span></span><br><span class="line"><span class="string">..#...</span></span><br><span class="line"><span class="string">..#..#</span></span><br><span class="line"><span class="string">...##.</span></span><br><span class="line"><span class="string">.#....</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">5 6</span></span><br><span class="line"><span class="string">. # . . . .</span></span><br><span class="line"><span class="string">. . # . . .</span></span><br><span class="line"><span class="string">. . # . . #</span></span><br><span class="line"><span class="string">. . . # # .</span></span><br><span class="line"><span class="string">. # . . . .</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> y &lt; <span class="number">0</span> <span class="keyword">or</span> x &gt; n - <span class="number">1</span> <span class="keyword">or</span> y &gt; m - <span class="number">1</span> <span class="keyword">or</span> vis[x][y] == <span class="number">1</span> <span class="keyword">or</span> arr[x][y] == <span class="string">'.'</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    vis[x][y] = <span class="number">1</span></span><br><span class="line">    dfs(x - <span class="number">1</span>, y)</span><br><span class="line">    dfs(x + <span class="number">1</span>, y)</span><br><span class="line">    dfs(x, y + <span class="number">1</span>)</span><br><span class="line">    dfs(x, y - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    n, m = map(int, input().split())</span><br><span class="line">    <span class="comment"># 当输入中有空格分隔开时</span></span><br><span class="line">    arr = [list(map(str, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">    <span class="comment"># 当输入没有空格分隔开时</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># arr = []</span></span><br><span class="line">    <span class="comment"># for i in range(n):</span></span><br><span class="line">    <span class="comment">#     str = input()</span></span><br><span class="line">    <span class="comment">#     arr.append(list(str))</span></span><br><span class="line">    vis = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(m)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)] <span class="comment"># 判断是否走过,0为未走过,1为走过</span></span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(m):</span><br><span class="line">            <span class="keyword">if</span> vis[i][j] == <span class="number">0</span> <span class="keyword">and</span> arr[i][j] == <span class="string">'#'</span>:</span><br><span class="line">                dfs(i,j)</span><br><span class="line">                ans += <span class="number">1</span></span><br><span class="line">    print(ans)</span><br></pre></td></tr></table></figure><h3 id="最大的蛋糕数"><a href="#最大的蛋糕数" class="headerlink" title="最大的蛋糕数"></a>最大的蛋糕数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">5 6</span></span><br><span class="line"><span class="string">.#....</span></span><br><span class="line"><span class="string">..#...</span></span><br><span class="line"><span class="string">..#..#</span></span><br><span class="line"><span class="string">...##.</span></span><br><span class="line"><span class="string">.#....</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> y &lt; <span class="number">0</span> <span class="keyword">or</span> x &gt; n - <span class="number">1</span> <span class="keyword">or</span> y &gt; m - <span class="number">1</span> <span class="keyword">or</span> vis[x][y] == <span class="number">1</span> <span class="keyword">or</span> arr[x][y] == <span class="string">'.'</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    vis[x][y] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">global</span> tmp</span><br><span class="line">    tmp += <span class="number">1</span></span><br><span class="line">    dfs(x - <span class="number">1</span>, y)</span><br><span class="line">    dfs(x + <span class="number">1</span>, y)</span><br><span class="line">    dfs(x, y + <span class="number">1</span>)</span><br><span class="line">    dfs(x, y - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    n, m = map(int, input().split())</span><br><span class="line">    <span class="comment"># 当输入中有空格分隔开时</span></span><br><span class="line">    <span class="comment"># arr = [list(map(str, input().split())) for _ in range(n)]</span></span><br><span class="line">    <span class="comment"># 当输入没有空格分隔开时</span></span><br><span class="line"></span><br><span class="line">    arr = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        str = input()</span><br><span class="line">        arr.append(list(str))</span><br><span class="line">    vis = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(m)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)] <span class="comment"># 判断是否走过,0为未走过,1为走过</span></span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(m):</span><br><span class="line">            <span class="keyword">if</span> vis[i][j] == <span class="number">0</span> <span class="keyword">and</span> arr[i][j] == <span class="string">'#'</span>:</span><br><span class="line">                tmp = <span class="number">0</span></span><br><span class="line">                dfs(i,j)</span><br><span class="line">                <span class="keyword">if</span> tmp &gt; ans:</span><br><span class="line">                    ans = tmp</span><br><span class="line">    print(ans)</span><br></pre></td></tr></table></figure><h3 id="迷宫的方案数"><a href="#迷宫的方案数" class="headerlink" title="迷宫的方案数"></a>迷宫的方案数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">输入:</span></span><br><span class="line"><span class="string">5 5</span></span><br><span class="line"><span class="string">s####</span></span><br><span class="line"><span class="string">.####</span></span><br><span class="line"><span class="string">.####</span></span><br><span class="line"><span class="string">.####</span></span><br><span class="line"><span class="string">....e</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">输出:</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &gt; n - <span class="number">1</span> <span class="keyword">or</span> y &gt; m - <span class="number">1</span> <span class="keyword">or</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> y &lt; <span class="number">0</span> <span class="keyword">or</span> vis[x][y] == <span class="number">1</span> <span class="keyword">or</span> maze[x][y] == <span class="string">'#'</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> maze[x][y] == <span class="string">'e'</span>:</span><br><span class="line">        <span class="keyword">global</span> ans</span><br><span class="line">        ans += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    vis[x][y] = <span class="number">1</span></span><br><span class="line">    dfs(x<span class="number">-1</span>,y)</span><br><span class="line">    dfs(x+<span class="number">1</span>,y)</span><br><span class="line">    dfs(x,y<span class="number">-1</span>)</span><br><span class="line">    dfs(x,y+<span class="number">1</span>)</span><br><span class="line">    vis[x][y] = <span class="number">0</span>     <span class="comment"># 将走过的路删除</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    n,m = map(int, input().split())</span><br><span class="line">    <span class="comment"># 输入迷宫</span></span><br><span class="line">    maze = []</span><br><span class="line">    vis = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(m)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(n) ]</span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(n):</span><br><span class="line">        val = input()</span><br><span class="line">        maze.append(list(val))</span><br><span class="line">    <span class="comment"># 起始坐标</span></span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    y = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(m):</span><br><span class="line">            <span class="keyword">if</span> maze[i][j] == <span class="string">'s'</span>:</span><br><span class="line">                x = i</span><br><span class="line">                y = j</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    dfs(x,y)</span><br><span class="line">    print(ans)</span><br></pre></td></tr></table></figure><h3 id="家谱"><a href="#家谱" class="headerlink" title="家谱"></a>家谱</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">题意：输入一个n,接下来有n-1行。</span></span><br><span class="line"><span class="string">输入父亲和儿子</span></span><br><span class="line"><span class="string">求n个人,每个人的直系后代有多少</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">输入:</span></span><br><span class="line"><span class="string">4</span></span><br><span class="line"><span class="string">1 2</span></span><br><span class="line"><span class="string">1 3</span></span><br><span class="line"><span class="string">2 4</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">输出:</span></span><br><span class="line"><span class="string">1 3</span></span><br><span class="line"><span class="string">2 1</span></span><br><span class="line"><span class="string">3 0</span></span><br><span class="line"><span class="string">4 0</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(u)</span>:</span></span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(son[u])):</span><br><span class="line">        cnt += dfs(son[u][i])</span><br><span class="line">    ans[u] = cnt</span><br><span class="line">    <span class="keyword">return</span> cnt + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    n = int(input())</span><br><span class="line">    son = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> range(n+<span class="number">1</span>)] <span class="comment"># 存放各个父辈的孩子</span></span><br><span class="line">    ans = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n+<span class="number">1</span>)]</span><br><span class="line">    f = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n+<span class="number">1</span>)]    <span class="comment"># 非True即为祖宗</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>):</span><br><span class="line">        x,y = map(int, input().split())</span><br><span class="line">        son[x].append(y)</span><br><span class="line">        f[y] = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> f[i] != <span class="literal">True</span>:</span><br><span class="line">            u = i                    <span class="comment"># 找到祖宗</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    dfs(u)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">        print(i, ans[i])</span><br></pre></td></tr></table></figure><h3 id="马的覆盖点"><a href="#马的覆盖点" class="headerlink" title="马的覆盖点"></a>马的覆盖点</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(x, y, step)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> step &gt; <span class="number">3</span> <span class="keyword">or</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> y &lt; <span class="number">0</span> <span class="keyword">or</span> x &gt; n<span class="number">-1</span> <span class="keyword">or</span> y &gt; m<span class="number">-1</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    arr[x][y] = <span class="string">'#'</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">        dfs(x + dir[i][<span class="number">0</span>], y + dir[i][<span class="number">1</span>], step + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    n, m = map(int, input().split())</span><br><span class="line">    x, y = map(int, input().split())</span><br><span class="line">    arr = [[<span class="string">'.'</span> <span class="keyword">for</span> j <span class="keyword">in</span> range(m)] <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line">    dir = [[<span class="number">-2</span>,<span class="number">-1</span>],[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">-1</span>,<span class="number">-2</span>],[<span class="number">2</span>,<span class="number">1</span>],[<span class="number">2</span>, <span class="number">-1</span>],[<span class="number">1</span>,<span class="number">-2</span>],[<span class="number">-1</span>,<span class="number">2</span>],[<span class="number">-2</span>,<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line">    dfs(x<span class="number">-1</span>,y<span class="number">-1</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(m):</span><br><span class="line">            print(arr[i][j], end=<span class="string">''</span>)</span><br><span class="line">        print()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;day1字符串和日期&quot;&gt;&lt;a href=&quot;#day1字符串和日期&quot; class=&quot;headerlink&quot; title=&quot;day1字符串和日期:&quot;&gt;&lt;/a&gt;day1字符串和日期:&lt;/h2&gt;&lt;h3 id=&quot;特殊的三角形&quot;&gt;&lt;a href=&quot;#特殊的三角形&quot; class
      
    
    </summary>
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/categories/Python%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/tags/Python%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Centos7安装Docker-配置使用harbor</title>
    <link href="https://plutoacharon.github.io/2020/02/23/Centos7%E5%AE%89%E8%A3%85Docker-%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8harbor/"/>
    <id>https://plutoacharon.github.io/2020/02/23/Centos7安装Docker-配置使用harbor/</id>
    <published>2020-02-23T12:28:19.000Z</published>
    <updated>2020-02-23T12:28:35.827Z</updated>
    
    <content type="html"><![CDATA[<h2 id="配置使用harbor"><a href="#配置使用harbor" class="headerlink" title="配置使用harbor"></a>配置使用harbor</h2><h2 id="添加EPEL源"><a href="#添加EPEL源" class="headerlink" title="添加EPEL源"></a>添加EPEL源</h2><p><code>yum install -y epel-release</code><br><img src="https://img-blog.csdnimg.cn/20200220191951792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt></p><h3 id="yum方式安装和python3、python-pip-和docker-compose"><a href="#yum方式安装和python3、python-pip-和docker-compose" class="headerlink" title="yum方式安装和python3、python-pip 和docker-compose"></a>yum方式安装和python3、python-pip 和docker-compose</h3><p><img src="https://img-blog.csdnimg.cn/20200220192029856.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="下载解压harbor的离线版本harbor-offline-installer-v1-9-3-tgz"><a href="#下载解压harbor的离线版本harbor-offline-installer-v1-9-3-tgz" class="headerlink" title="下载解压harbor的离线版本harbor-offline-installer-v1.9.3.tgz"></a>下载解压harbor的离线版本harbor-offline-installer-v1.9.3.tgz</h3><p><a href="https://github.com/goharbor/harbor/releases/tag/v1.9.3" target="_blank" rel="noopener">下载网址</a><br><img src="https://img-blog.csdnimg.cn/20200220192136513.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200220192253835.png" alt="在这里插入图片描述"></p><h3 id="编辑harbor-yml配置文件，修改hostname为本机IP，设置harbor-admin-password为123456"><a href="#编辑harbor-yml配置文件，修改hostname为本机IP，设置harbor-admin-password为123456" class="headerlink" title="编辑harbor.yml配置文件，修改hostname为本机IP，设置harbor_admin_password为123456"></a>编辑harbor.yml配置文件，修改hostname为本机IP，设置harbor_admin_password为123456</h3><p><img src="https://img-blog.csdnimg.cn/20200220192328789.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="执行安装-install-sh"><a href="#执行安装-install-sh" class="headerlink" title="执行安装./install.sh"></a>执行安装./install.sh</h3><p><img src="https://img-blog.csdnimg.cn/20200220192344467.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="查看docker-images"><a href="#查看docker-images" class="headerlink" title="查看docker images"></a>查看docker images</h3><p><img src="https://img-blog.csdnimg.cn/20200220192447605.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="查看docker-compose-xml"><a href="#查看docker-compose-xml" class="headerlink" title="查看docker-compose.xml"></a>查看docker-compose.xml</h3><p><img src="https://img-blog.csdnimg.cn/20200220192528481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="在harbor目录下执行-docker-compose-start"><a href="#在harbor目录下执行-docker-compose-start" class="headerlink" title="在harbor目录下执行#docker-compose start"></a>在harbor目录下执行#docker-compose start</h3><p><img src="https://img-blog.csdnimg.cn/20200220192630954.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="在主机浏览器访问虚拟机IP，使用admin：123456登录"><a href="#在主机浏览器访问虚拟机IP，使用admin：123456登录" class="headerlink" title="在主机浏览器访问虚拟机IP，使用admin：123456登录"></a>在主机浏览器访问虚拟机IP，使用admin：123456登录</h3><p><img src="https://img-blog.csdnimg.cn/20200220192826553.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200220192847423.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>简单的Harbor就搭建成功了!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;配置使用harbor&quot;&gt;&lt;a href=&quot;#配置使用harbor&quot; class=&quot;headerlink&quot; title=&quot;配置使用harbor&quot;&gt;&lt;/a&gt;配置使用harbor&lt;/h2&gt;&lt;h2 id=&quot;添加EPEL源&quot;&gt;&lt;a href=&quot;#添加EPEL源&quot; class
      
    
    </summary>
    
      <category term="Docker" scheme="https://plutoacharon.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://plutoacharon.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker容器出现使用systemctl问题：Failed to get D-Bus connection: Operation not permitted</title>
    <link href="https://plutoacharon.github.io/2020/02/23/Docker%E5%AE%B9%E5%99%A8%E5%87%BA%E7%8E%B0%E4%BD%BF%E7%94%A8systemctl%E9%97%AE%E9%A2%98%EF%BC%9AFailed-to-get-D-Bus-connection-Operation-not-permitted/"/>
    <id>https://plutoacharon.github.io/2020/02/23/Docker容器出现使用systemctl问题：Failed-to-get-D-Bus-connection-Operation-not-permitted/</id>
    <published>2020-02-23T12:27:35.000Z</published>
    <updated>2020-02-23T12:27:57.702Z</updated>
    
    <content type="html"><![CDATA[<p>在学习docker过程中,我从官网安装了<code>centos</code>最新版和<code>centos:7</code>镜像</p><p>在centos7镜像中我安装了ssh服务, 当使用systemctl start sshd 命令启动时竟然报错</p><pre><code>[root@4decd9c3c3aa /]# systemctl start sshdFailed to get D-Bus connection: Operation not permitted</code></pre><p>通过查阅资料:</p><p>Docker的设计理念是在容器里面不运行后台服务，容器本身就是宿主机上的一个独立的主进程，也可以间接的理解为就是容器里运行服务的应用进程。一个容器的生命周期是围绕这个主进程存在的，所以正确的使用容器方法是将里面的服务运行在前台。</p><p>再说到<code>systemd</code>，这个套件已经成为主流Linux发行版（<code>比如CentOS7、Ubuntu14+</code>）默认的服务管理，取代了传统的SystemV风格服务管理。<code>systemd</code>维护系统服务程序，它需要特权去会访问Linux内核。而容器并不是一个完整的操作系统，只有一个文件系统，而且默认启动只是普通用户这样的权限访问Linux内核，也就是没有特权，所以自然就用不了！</p><p><code>因此，请遵守容器设计原则，一个容器里运行一个前台服务！</code></p><p>我就想这样运行，难道解决不了吗？</p><p>答：可以，以特权模式运行容器。</p><p>创建容器：</p><pre><code># docker run -tid --name centos_1 --privileged=true centos:latest /sbin/init</code></pre><p>进入容器：</p><pre><code># docker exec -it centos7 /bin/bash</code></pre><p>这样可以使用<code>systemctl</code>启动服务了。</p><p>或者:</p><p>直接拉取最新版的centos镜像, 可以支持该命令<br><img src="https://img-blog.csdnimg.cn/20200220170715455.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020022017231235.png" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在学习docker过程中,我从官网安装了&lt;code&gt;centos&lt;/code&gt;最新版和&lt;code&gt;centos:7&lt;/code&gt;镜像&lt;/p&gt;
&lt;p&gt;在centos7镜像中我安装了ssh服务, 当使用systemctl start sshd 命令启动时竟然报错&lt;/p&gt;
&lt;pr
      
    
    </summary>
    
      <category term="Docker" scheme="https://plutoacharon.github.io/categories/Docker/"/>
    
    
      <category term="Dokcer" scheme="https://plutoacharon.github.io/tags/Dokcer/"/>
    
  </entry>
  
  <entry>
    <title>Centos7配置Docker镜像加速器-阿里云官方(报错解决repository does not exist or may require &#39;docker login&#39;)</title>
    <link href="https://plutoacharon.github.io/2020/02/23/Centos7%E9%85%8D%E7%BD%AEDocker%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8-%E9%98%BF%E9%87%8C%E4%BA%91%E5%AE%98%E6%96%B9-%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3repository-does-not-exist-or-may-require-docker-login/"/>
    <id>https://plutoacharon.github.io/2020/02/23/Centos7配置Docker镜像加速器-阿里云官方-报错解决repository-does-not-exist-or-may-require-docker-login/</id>
    <published>2020-02-23T12:26:41.000Z</published>
    <updated>2020-02-23T12:27:07.493Z</updated>
    
    <content type="html"><![CDATA[<p>我们在日常学习或者使用docker的时候可能会遇到下载安装镜像速度慢的问题,这里我们就得添加以下中国的阿里云镜像就会速度加快</p><h2 id="添加阿里云镜像"><a href="#添加阿里云镜像" class="headerlink" title="添加阿里云镜像"></a>添加阿里云镜像</h2><p><a href="https://cr.console.aliyun.com/cn-hangzhou/instances/credentials" target="_blank" rel="noopener">阿里云网站</a><br><img src="https://img-blog.csdnimg.cn/2020022114132625.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>按照命令即可,也可以手动创建<code>/ect/docker/daemon.json</code>来用vim添加</p><pre><code>{  &quot;registry-mirrors&quot;: [&quot;https://XXXXX.mirror.aliyuncs.com&quot;]}</code></pre><p>添加成功后输入命令:</p><pre><code>systemctl daemon-reloadsystemctl restart docker</code></pre><h2 id="拉取镜像出现的问题"><a href="#拉取镜像出现的问题" class="headerlink" title="拉取镜像出现的问题"></a>拉取镜像出现的问题</h2><pre><code>[root@localhost ~]# docker pull centos7Using default tag: latestError response from daemon: pull access denied for centos7, repository does not exist or may require &apos;docker login&apos;: denied: requested access to the resource is denied</code></pre><p>出现此问题的原因为未进行<code>身份识别</code></p><p>在阿里云容器镜像服务中点击</p><p><img src="https://img-blog.csdnimg.cn/20200220164004971.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后输入密码即可认证成功!<br><img src="https://img-blog.csdnimg.cn/20200220163924901.png" alt="在这里插入图片描述"><br>这样拉取centos7或者其他镜像就快多了<br><img src="https://img-blog.csdnimg.cn/20200220165102799.png" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们在日常学习或者使用docker的时候可能会遇到下载安装镜像速度慢的问题,这里我们就得添加以下中国的阿里云镜像就会速度加快&lt;/p&gt;
&lt;h2 id=&quot;添加阿里云镜像&quot;&gt;&lt;a href=&quot;#添加阿里云镜像&quot; class=&quot;headerlink&quot; title=&quot;添加阿里云镜像&quot;
      
    
    </summary>
    
      <category term="Docker" scheme="https://plutoacharon.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://plutoacharon.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Python算法学习: 竞码编程-蓝桥杯模拟赛题解</title>
    <link href="https://plutoacharon.github.io/2020/02/23/Python%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E7%AB%9E%E7%A0%81%E7%BC%96%E7%A8%8B-%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%A8%A1%E6%8B%9F%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    <id>https://plutoacharon.github.io/2020/02/23/Python算法学习-竞码编程-蓝桥杯模拟赛题解/</id>
    <published>2020-02-23T12:26:14.000Z</published>
    <updated>2020-02-23T12:40:43.497Z</updated>
    
    <content type="html"><![CDATA[<p>昨天闲来无事在一个oj网站上做了几道模拟赛的题,写此博客记录一下</p><h3 id="A：战疫情-5’"><a href="#A：战疫情-5’" class="headerlink" title="A：战疫情 5’"></a>A：战疫情 5’</h3><p>【问题描述】</p><p>   为抗击新型冠状病毒感染的肺炎疫情，爱心人士小李花费50000元人民币购买x只口罩，y套防护服。已知x+y的和在区间[20000,21000].</p><p>   请问有多少种购买方案，是刚好花费50000元人民币的!</p><p>   已知口罩价格2元/只，防护服价格100元/套。</p><p>【答案提交】</p><p>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个数字，填写多余的内容将无法得分。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">21001</span>):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">21001</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="number">20000</span> &lt;= x+y &lt;= <span class="number">21000</span> <span class="keyword">and</span> ((<span class="number">2</span>*x) + (<span class="number">100</span>*y)) == <span class="number">50000</span>:</span><br><span class="line">            sum += <span class="number">1</span></span><br><span class="line">            print(x, y, sum)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><h3 id="B：行动-5’"><a href="#B：行动-5’" class="headerlink" title="B：行动 5’"></a>B：行动 5’</h3><p><img src="https://img-blog.csdnimg.cn/20200208115216689.png" alt="在这里插入图片描述"></p><p>【问题描述】</p><p>   小明站在坐标（0, 0）处，面朝 x轴正方向。第一轮，他向前走 1单位距离，然后右转；第二轮，他向前走 2单位距离，然后右转；第三轮，他向前走 3单位距离，然后右转……他一直这么走下去。请问第 2020轮后，他的坐标是：（<strong><strong>_</strong></strong>，<strong><strong>_</strong></strong>）。</p><p> <strong>题解:</strong></p><p>这个题目手算很简单！总共2020步，每44步一圈，每一圈横坐标-2，纵坐标+2。刚好505圈.</p><p>当然这个题目也可以用循环，循环2020次。</p><p>在第ii次循环，</p><p>如果i\%4=1，则x+i</p><p>如果i\%4=2，则y-i</p><p>如果i\%4=3，则x-i</p><p>如果i\%4=4，则y+i</p><pre><code>答案：-1010 1010</code></pre><h3 id="C：莱布尼茨公式-10’"><a href="#C：莱布尼茨公式-10’" class="headerlink" title="C：莱布尼茨公式 10’"></a>C：莱布尼茨公式 10’</h3><p><img src="https://img-blog.csdnimg.cn/202002081152067.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">numerate : float = <span class="number">4.0</span></span><br><span class="line">denominator : float = <span class="number">1.0</span></span><br><span class="line">operation : float = <span class="number">1.0</span></span><br><span class="line">PI = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">2021</span>):</span><br><span class="line">    PI += operation * (numerate / denominator)</span><br><span class="line">    denominator += <span class="number">2</span></span><br><span class="line">    operation *= <span class="number">-1</span></span><br><span class="line">print(<span class="string">'%.6f'</span> % PI)</span><br></pre></td></tr></table></figure><h3 id="D：价值之和-10’"><a href="#D：价值之和-10’" class="headerlink" title="D：价值之和 10’"></a>D：价值之和 10’</h3><p>【问题描述】</p><p>定义数字x的价值为其不同质因子的个数。</p><p>例如:数字2020可以写成2020=2<em>2</em>5*101其价值为3</p><p>JM boy请你帮忙计算整数1到2020中，所有都不包含数字5的正整数的价值之和。</p><p>【答案提交】</p><p>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数（提示：答案最后一位数是奇数）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_num_factors</span><span class="params">(num)</span>:</span></span><br><span class="line">    list = []</span><br><span class="line">    tmp = <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> num == tmp:</span><br><span class="line">        list.append(tmp)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">while</span> num &gt;= tmp:</span><br><span class="line">            k = num % tmp</span><br><span class="line">            <span class="keyword">if</span> k == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> tmp <span class="keyword">not</span> <span class="keyword">in</span> list: <span class="comment"># 去重</span></span><br><span class="line">                    list.append(tmp)</span><br><span class="line">                    num = num / tmp</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    num = num / tmp</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tmp += <span class="number">1</span></span><br><span class="line">    len_list = int(len(list))</span><br><span class="line">    <span class="keyword">return</span> len_list</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">2021</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'5'</span> <span class="keyword">not</span> <span class="keyword">in</span> str(i):</span><br><span class="line">            sum += get_num_factors(i)</span><br><span class="line">            <span class="comment"># print(i)</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    print(sum)</span><br></pre></td></tr></table></figure></p><h3 id="E：数方-15’"><a href="#E：数方-15’" class="headerlink" title="E：数方 15’"></a>E：数方 15’</h3><p><img src="https://img-blog.csdnimg.cn/20200208115419907.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_pingfang</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">32</span>):</span><br><span class="line">        <span class="keyword">if</span> pow(i, <span class="number">2</span>) == n:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_lifang</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">10</span>):</span><br><span class="line">        <span class="keyword">if</span> pow(i, <span class="number">3</span>) == n:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_sifang</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">6</span>):</span><br><span class="line">        <span class="keyword">if</span> pow(i, <span class="number">4</span>) == n:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_huiwen</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> str(n) == str(n)[::<span class="number">-1</span>]:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_sanjiao</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">46</span>):</span><br><span class="line">        n -= i</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_zhishu</span><span class="params">(n)</span>:</span></span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, n):</span><br><span class="line">        <span class="keyword">if</span> n % i != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">                <span class="keyword">for</span> d <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">                    <span class="keyword">for</span> e <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">                        <span class="keyword">for</span> f <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">                            <span class="keyword">for</span> g <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">                                <span class="keyword">for</span> h <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">                                    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">                                        <span class="keyword">if</span> is_lifang(int(str(a)+str(b)+str(c))) <span class="keyword">and</span> is_zhishu(int(str(d) + str(e) + str(f))) <span class="keyword">and</span> is_pingfang(int(str(g) + str(h) + str(i))) <span class="keyword">and</span> is_sanjiao(int(str(a) + str(d) + str(g))) <span class="keyword">and</span> is_sifang(int(str(b) + str(e) + str(h))) <span class="keyword">and</span> is_huiwen(int(str(c) + str(f) + str(i))):</span><br><span class="line">                                            print(<span class="string">"正确答案:"</span>)</span><br><span class="line">                                            print(a, b, c, d, e, f, g, h, i)</span><br><span class="line">                                            <span class="keyword">break</span></span><br><span class="line">                                        <span class="keyword">else</span>:</span><br><span class="line">                                            <span class="keyword">continue</span></span><br></pre></td></tr></table></figure></p><h3 id="G：最优值-18’"><a href="#G：最优值-18’" class="headerlink" title="G：最优值 18’"></a>G：最优值 18’</h3><p><img src="https://img-blog.csdnimg.cn/20200208115556491.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    n = int(input())</span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line">    anslist = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        word = input()</span><br><span class="line">        len_word = len(word)</span><br><span class="line">        anslist.append(((ord(word[<span class="number">0</span>])<span class="number">-96</span>))*len_word)</span><br><span class="line">    anslist = sorted(anslist)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        ans += anslist[i]*(i+<span class="number">1</span>)</span><br><span class="line">    print(ans)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="H：计算器-22’"><a href="#H：计算器-22’" class="headerlink" title="H：计算器 22’"></a>H：计算器 22’</h3><p><img src="https://img-blog.csdnimg.cn/20200208115716650.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(eq,var=<span class="string">'x'</span>)</span>:</span></span><br><span class="line">    eq1 = eq.replace(<span class="string">"="</span>,<span class="string">"-("</span>)+<span class="string">")"</span></span><br><span class="line">    eq1 = eq1.replace(<span class="string">"x"</span>,<span class="string">"*x"</span>)</span><br><span class="line">    eq1 = eq1.replace(<span class="string">"+*x"</span>,<span class="string">"+x"</span>)</span><br><span class="line">    eq1 = eq1.replace(<span class="string">"-*x"</span>,<span class="string">"-x"</span>)</span><br><span class="line">    eq1 = eq1.replace(<span class="string">"(*x"</span>,<span class="string">"(x"</span>)</span><br><span class="line">    <span class="keyword">if</span> eq1[<span class="number">0</span>] == <span class="string">'*'</span>:</span><br><span class="line">        eq1 = eq1[<span class="number">1</span>:]</span><br><span class="line">    c = eval(eq1,&#123;var:<span class="number">1j</span>&#125;)</span><br><span class="line">    <span class="keyword">if</span> c.real!=<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> -c.real/c.imag</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">test = input()</span><br><span class="line">ch = <span class="string">'x'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(test)):</span><br><span class="line">    <span class="keyword">if</span> <span class="number">97</span> &lt;= ord(test[i]) &lt;= <span class="number">122</span>:</span><br><span class="line">        ch = test[i]</span><br><span class="line">        test = test.replace(test[i],<span class="string">'x'</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">print(<span class="string">"%s=%.3lf"</span>%(ch,solve(test)))</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;昨天闲来无事在一个oj网站上做了几道模拟赛的题,写此博客记录一下&lt;/p&gt;
&lt;h3 id=&quot;A：战疫情-5’&quot;&gt;&lt;a href=&quot;#A：战疫情-5’&quot; class=&quot;headerlink&quot; title=&quot;A：战疫情 5’&quot;&gt;&lt;/a&gt;A：战疫情 5’&lt;/h3&gt;&lt;p&gt;【问题描述】
      
    
    </summary>
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/categories/Python%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/tags/Python%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Python算法学习day10: 栈应用(括号匹配问题)</title>
    <link href="https://plutoacharon.github.io/2020/02/23/Python%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0day10-%E6%A0%88%E5%BA%94%E7%94%A8-%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98/"/>
    <id>https://plutoacharon.github.io/2020/02/23/Python算法学习day10-栈应用-括号匹配问题/</id>
    <published>2020-02-23T12:25:37.000Z</published>
    <updated>2020-02-23T12:27:17.779Z</updated>
    
    <content type="html"><![CDATA[<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h3 id="栈的应用–括号匹配问题"><a href="#栈的应用–括号匹配问题" class="headerlink" title="栈的应用–括号匹配问题"></a>栈的应用–括号匹配问题</h3><pre><code>括号匹配问题: 给一个字符串, 其中包括小括号, 中括号, 大括号, 求该字符串中的括号是否匹配例如:    - (){}[] 匹配    - ([{}]) 匹配    - ([)]   不匹配    - ())    不匹配</code></pre><p>代码:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">brace_match</span><span class="params">(s)</span>:</span></span><br><span class="line">stack = []</span><br><span class="line">dic = &#123;<span class="string">'('</span>:<span class="string">')'</span>, <span class="string">'&#123;'</span>:<span class="string">'&#125;'</span>, <span class="string">'['</span>:<span class="string">']'</span>&#125;</span><br><span class="line"><span class="keyword">for</span> ch <span class="keyword">in</span> s:</span><br><span class="line"><span class="keyword">if</span> ch <span class="keyword">in</span> &#123;<span class="string">'('</span>, <span class="string">'&#123;'</span>, <span class="string">'['</span>&#125;:</span><br><span class="line">stack.append(ch)</span><br><span class="line"><span class="keyword">elif</span> len(stack) == <span class="number">0</span>:</span><br><span class="line">print(<span class="string">'多了右括号%s'</span> % ch)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="keyword">elif</span> dic[stack[<span class="number">-1</span>]] == ch:</span><br><span class="line">stack.pop()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">'括号%s处不匹配'</span> % ch)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="keyword">if</span> len(stack) == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">'剩余左括号未匹配'</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;栈&quot;&gt;&lt;a href=&quot;#栈&quot; class=&quot;headerlink&quot; title=&quot;栈&quot;&gt;&lt;/a&gt;栈&lt;/h2&gt;&lt;h3 id=&quot;栈的应用–括号匹配问题&quot;&gt;&lt;a href=&quot;#栈的应用–括号匹配问题&quot; class=&quot;headerlink&quot; title=&quot;栈的应用–括号
      
    
    </summary>
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/categories/Python%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/tags/Python%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Python算法学习day9:基数排序(翻转数字的基本应用)</title>
    <link href="https://plutoacharon.github.io/2020/02/23/Python%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0day9-%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F-%E7%BF%BB%E8%BD%AC%E6%95%B0%E5%AD%97%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%BA%94%E7%94%A8/"/>
    <id>https://plutoacharon.github.io/2020/02/23/Python算法学习day9-基数排序-翻转数字的基本应用/</id>
    <published>2020-02-23T12:24:06.000Z</published>
    <updated>2020-02-23T12:24:20.588Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><h3 id="1-基数排序思路"><a href="#1-基数排序思路" class="headerlink" title="(1) 基数排序思路"></a>(1) 基数排序思路</h3><p>基数排序 (Radix Sort) 是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。</p><p>基数排序法会使用到桶 (Bucket)，顾名思义，通过将要比较的位（个位、十位、百位…），将要排序的元素分配至 0~9 个桶中，借以达到排序的作用，在某些时候，基数排序法的效率高于其它的比较性排序法</p><ul><li><p>将所有待比较数值（正整数）统一为同样的数位长度，数位较短的数前面补零</p></li><li><p>从最低位开始，依次进行一次排序</p></li><li><p>从最低位排序一直到最高位排序完成以后, 数列就变成一个有序序列</p></li></ul><h3 id="2-举几个小例子"><a href="#2-举几个小例子" class="headerlink" title="(2) 举几个小例子"></a>(2) 举几个小例子</h3><p>例1: 将一个数字例如345, 随意取出任何一个位数的数字<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_digit</span><span class="params">(nums, i)</span>:</span></span><br><span class="line"><span class="comment"># i=0 取个位数 i=1 取十位数 ...</span></span><br><span class="line"><span class="keyword">return</span> num // (<span class="number">10</span>**i) % <span class="number">10</span></span><br></pre></td></tr></table></figure></p><p>例2: 将一个数字一一存入列表中,例如num=12345 -&gt; [1,2,3,4,5]<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">int_to_list</span><span class="params">(num)</span>:</span></span><br><span class="line">li = []</span><br><span class="line"><span class="keyword">while</span> num &gt; <span class="number">0</span>:</span><br><span class="line">li.append(num % <span class="number">10</span>)</span><br><span class="line">num = num //<span class="number">10</span></span><br><span class="line">li.reverse()</span><br><span class="line"><span class="keyword">return</span> li</span><br></pre></td></tr></table></figure></p><p>或者可以自己写<code>reverse</code>方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse_list</span><span class="params">(li)</span>:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(li) // <span class="number">2</span>):</span><br><span class="line">li[i], li[n-i<span class="number">-1</span>] = li[n-i<span class="number">-1</span>], li[i]</span><br><span class="line"><span class="keyword">return</span> li</span><br></pre></td></tr></table></figure></p><p>扩展:实现将数字123-&gt;321 12300-&gt;321  -12300-&gt;-321<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse_int</span><span class="params">(num)</span>:</span></span><br><span class="line">is_neg = <span class="literal">False</span></span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> num &lt; <span class="number">0</span>:</span><br><span class="line">is_neg = <span class="literal">True</span></span><br><span class="line">num = num * <span class="number">-1</span> </span><br><span class="line"><span class="keyword">while</span> num &gt; <span class="number">0</span>:</span><br><span class="line">res = res * <span class="number">10</span></span><br><span class="line">res += num % <span class="number">10</span></span><br><span class="line">num = num // <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> is_neg:</span><br><span class="line">res = res * <span class="number">-1</span></span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure></p><h3 id="3-基数排序代码实现"><a href="#3-基数排序代码实现" class="headerlink" title="(3) 基数排序代码实现:"></a>(3) 基数排序代码实现:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">radix_sort</span><span class="params">(li)</span>:</span></span><br><span class="line">max_num = max(li)</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">10</span> ** i &lt;= max_num):</span><br><span class="line">buckets = [[] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]   <span class="comment"># 建10个桶,用于存放0-9数字</span></span><br><span class="line"><span class="keyword">for</span> val <span class="keyword">in</span> li:</span><br><span class="line">digit = val // (<span class="number">10</span> ** i) % <span class="number">10</span></span><br><span class="line">buckets[digit].append(val)      <span class="comment"># 将对应数字放到对应的桶里</span></span><br><span class="line">li.clear()                          <span class="comment"># 列表清空</span></span><br><span class="line"><span class="keyword">for</span> bucket <span class="keyword">in</span> buckets:</span><br><span class="line"><span class="keyword">for</span> val <span class="keyword">in</span> bucket:</span><br><span class="line">li.append(val)              <span class="comment"># 将桶里的数字一次添加到列表中</span></span><br><span class="line">i +=<span class="number">1</span>                               <span class="comment"># 按位数排序, i加1时,比较一个位数</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基数排序&quot;&gt;&lt;a href=&quot;#基数排序&quot; class=&quot;headerlink&quot; title=&quot;基数排序&quot;&gt;&lt;/a&gt;基数排序&lt;/h2&gt;&lt;h3 id=&quot;1-基数排序思路&quot;&gt;&lt;a href=&quot;#1-基数排序思路&quot; class=&quot;headerlink&quot; title=&quot;(
      
    
    </summary>
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/categories/Python%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/tags/Python%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Python算法学习day8:线性时间排序(希尔排序, 计数排序)</title>
    <link href="https://plutoacharon.github.io/2020/02/23/Python%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0day8-%E7%BA%BF%E6%80%A7%E6%97%B6%E9%97%B4%E6%8E%92%E5%BA%8F-%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F-%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F/"/>
    <id>https://plutoacharon.github.io/2020/02/23/Python算法学习day8-线性时间排序-希尔排序-计数排序/</id>
    <published>2020-02-23T12:23:38.000Z</published>
    <updated>2020-02-23T12:23:51.849Z</updated>
    
    <content type="html"><![CDATA[<h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><h3 id="1-希尔排序思路"><a href="#1-希尔排序思路" class="headerlink" title="(1) 希尔排序思路"></a>(1) 希尔排序思路</h3><ul><li>希尔排序是一种分组<code>插入排序</code>算法。</li><li>首先取一个整数d1=n/2, 将元素分为d1个组. 每组相邻量元素之间距离为d1, 在各组内进行直接插入排序;</li><li>取第二个整数d2=d1/2, 重复上述分组排序过程, 直到di=1. 即所有元素在同一组内进行直接插入排序</li></ul><h3 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="(2) 代码实现"></a>(2) 代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort_part</span><span class="params">(li, d)</span>:</span> <span class="comment"># 分组插入排序实现</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(d,len(li)):</span><br><span class="line">tmp = li[i]</span><br><span class="line">j = i - d</span><br><span class="line"><span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> li[j] &gt; tmp:</span><br><span class="line">li[j+d] = li[j]</span><br><span class="line">j- = d</span><br><span class="line">li[j+d] = tmp</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell_sort</span><span class="params">(li, d)</span>:</span></span><br><span class="line">d = len(li) // <span class="number">2</span></span><br><span class="line"><span class="keyword">while</span> d &gt; <span class="number">0</span>:</span><br><span class="line">insert_sort_part(li. d)</span><br><span class="line">d = d // <span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><h3 id="1-计数排序思路"><a href="#1-计数排序思路" class="headerlink" title="(1) 计数排序思路"></a>(1) 计数排序思路</h3><ul><li><p>花O(n)的时间扫描一下整个序列 A，获取最小值 min 和最大值 max</p></li><li><p>开辟一块新的空间创建新的数组 B，长度为 ( max - min + 1)</p></li><li><p>数组 B 中 index 的元素记录的值是 A 中某元素出现的次数</p></li><li><p>最后输出目标整数序列，具体的逻辑是遍历数组 B，输出相应元素以及对应的个数</p></li></ul><p><img src="https://img-blog.csdnimg.cn/20200203204410269.png" alt="在这里插入图片描述"></p><h3 id="2-代码实现-1"><a href="#2-代码实现-1" class="headerlink" title="(2) 代码实现"></a>(2) 代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_sort</span><span class="params">(li, max)</span>:</span></span><br><span class="line"><span class="comment"># max表示列表里的最大值</span></span><br><span class="line">count = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(max + <span class="number">1</span>)]</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> li:</span><br><span class="line">count[value] += <span class="number">1</span></span><br><span class="line">li.clear()</span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> range enumerate(count):</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(v):</span><br><span class="line">li.append(i)</span><br></pre></td></tr></table></figure><p>缺点: 元素的范围不能太大</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;希尔排序&quot;&gt;&lt;a href=&quot;#希尔排序&quot; class=&quot;headerlink&quot; title=&quot;希尔排序&quot;&gt;&lt;/a&gt;希尔排序&lt;/h2&gt;&lt;h3 id=&quot;1-希尔排序思路&quot;&gt;&lt;a href=&quot;#1-希尔排序思路&quot; class=&quot;headerlink&quot; title=&quot;(
      
    
    </summary>
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/categories/Python%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/tags/Python%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Python算法学习day7:归并排序</title>
    <link href="https://plutoacharon.github.io/2020/02/23/Python%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0day7-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    <id>https://plutoacharon.github.io/2020/02/23/Python算法学习day7-归并排序/</id>
    <published>2020-02-23T12:22:40.000Z</published>
    <updated>2020-02-23T12:23:22.234Z</updated>
    
    <content type="html"><![CDATA[<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><h3 id="1-一次归并"><a href="#1-一次归并" class="headerlink" title="1. 一次归并"></a>1. 一次归并</h3><p><img src="https://img-blog.csdnimg.cn/2020011919330213.png" alt="在这里插入图片描述"><br>假设现在的列表分两段有序, 如何将其合成为一个有序列表<br><img src="https://img-blog.csdnimg.cn/20200119193354259.png" alt="在这里插入图片描述"><br>选取两段列表,分成两段,然后一一比较<br><img src="https://img-blog.csdnimg.cn/2020011919343973.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200119193951311.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>比较完成,这便是一次归并</p><h3 id="2-一次归并算法实现"><a href="#2-一次归并算法实现" class="headerlink" title="2. 一次归并算法实现"></a>2. 一次归并算法实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(li, low, mid, high)</span>:</span></span><br><span class="line">i = low</span><br><span class="line">j = mid + <span class="number">1</span></span><br><span class="line">li_tmp = []</span><br><span class="line"><span class="keyword">while</span> i &lt;= mid <span class="keyword">and</span> j &lt;= high:</span><br><span class="line"><span class="keyword">if</span> li[i] &lt;= li[j]:</span><br><span class="line">li_tmp.append(li[i])</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> li[i] &gt;= li[j]:</span><br><span class="line">li_tmp.append(li[j])</span><br><span class="line">j += <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= mid:</span><br><span class="line">li_tmp.append(li[i])</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> j &lt;= high:</span><br><span class="line">li_tmp.append(li[j])</span><br><span class="line">j += <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(low, high+<span class="number">1</span>):</span><br><span class="line">li[i] = li_tmp[i-low]</span><br></pre></td></tr></table></figure><h3 id="例题-已知两个有序列表，实现将这两个列表合并排序"><a href="#例题-已知两个有序列表，实现将这两个列表合并排序" class="headerlink" title="例题:已知两个有序列表，实现将这两个列表合并排序"></a>例题:已知两个有序列表，实现将这两个列表合并排序</h3><p>代码实现<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span><span class="params">(li1, li2)</span>:</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line">li = []</span><br><span class="line"><span class="keyword">while</span> i &lt; len(li1) <span class="keyword">and</span> j &lt; len(li2):</span><br><span class="line"><span class="keyword">if</span> li[i] &gt;= li[j]:</span><br><span class="line">li.append(li[j])</span><br><span class="line">j += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">li.append(li[i])</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt; len(li1):</span><br><span class="line">li.append(li[i])</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> j &lt; len(li2):</span><br><span class="line">li.append(li[j])</span><br><span class="line">j += <span class="number">1</span></span><br></pre></td></tr></table></figure></p><h3 id="归并排序算法实现"><a href="#归并排序算法实现" class="headerlink" title="归并排序算法实现"></a>归并排序算法实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span><span class="params">(li, low, high)</span>:</span></span><br><span class="line"><span class="keyword">if</span> low &lt; high:</span><br><span class="line">mid = (low + high) // <span class="number">2</span> </span><br><span class="line">merge_sort(li, low , mid)</span><br><span class="line">merge_sort(li, mid + <span class="number">1</span>, high)</span><br><span class="line">merge(li, low, mid, high)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(li, low, mid, high)</span>:</span></span><br><span class="line">i = low</span><br><span class="line">j = mid + <span class="number">1</span></span><br><span class="line">li_tmp = []</span><br><span class="line"><span class="keyword">while</span> i &lt;= mid <span class="keyword">and</span> j &lt;= high:</span><br><span class="line"><span class="keyword">if</span> li[i] &lt;= li[j]:</span><br><span class="line">li_tmp.append(li[i])</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> li[i] &gt;= li[j]:</span><br><span class="line">li_tmp.append(li[j])</span><br><span class="line">j += <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= mid:</span><br><span class="line">li_tmp.append(li[i])</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> j &lt;= high:</span><br><span class="line">li_tmp.append(li[j])</span><br><span class="line">j += <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(low, high+<span class="number">1</span>):</span><br><span class="line">li[i] = li_tmp[i-low]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;归并排序&quot;&gt;&lt;a href=&quot;#归并排序&quot; class=&quot;headerlink&quot; title=&quot;归并排序&quot;&gt;&lt;/a&gt;归并排序&lt;/h2&gt;&lt;h3 id=&quot;1-一次归并&quot;&gt;&lt;a href=&quot;#1-一次归并&quot; class=&quot;headerlink&quot; title=&quot;1. 一次
      
    
    </summary>
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/categories/Python%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/tags/Python%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Python算法学习day6:堆排序(二叉树)</title>
    <link href="https://plutoacharon.github.io/2020/01/19/Python%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0day6-%E5%A0%86%E6%8E%92%E5%BA%8F-%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://plutoacharon.github.io/2020/01/19/Python算法学习day6-堆排序-二叉树/</id>
    <published>2020-01-19T09:37:35.000Z</published>
    <updated>2020-01-19T09:37:54.629Z</updated>
    
    <content type="html"><![CDATA[<h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><blockquote><p>在学习堆排序之前,先必须了解一下什么是<code>堆</code></p></blockquote><p>堆是具有以下性质的<code>完全二叉树</code>：</p><p>每个结点的值都大于或等于其左右孩子结点的值，称为大顶堆；或者每个结点的值都小于或等于其左右孩子结点的值，称为小顶堆。<br><img src="https://img-blog.csdnimg.cn/2020011720040346.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>而二叉树中,父节点与左右孩子节点的编号下标都有一定的关系:<br>其中<code>父节点与左孩子节点的关系是 i -&gt; 2i+1</code>, <code>父节点与右孩子节点的关系是 i -&gt; 2i+2</code></p><blockquote><p>注: 这里指节点的下标关系</p></blockquote><h3 id="堆的向下调整性质"><a href="#堆的向下调整性质" class="headerlink" title="堆的向下调整性质"></a>堆的向下调整性质</h3><p>假设: 节点的左右字数都是堆,但自身不是堆</p><p><img src="https://img-blog.csdnimg.cn/20200117201257125.png" alt="在这里插入图片描述"><br>当根节点的左右字数都是堆时,可以通过一次向下的调整来将其变换成一个堆<br><img src="https://img-blog.csdnimg.cn/20200117201324500.png" alt="在这里插入图片描述"></p><h3 id="挨个出数"><a href="#挨个出数" class="headerlink" title="挨个出数"></a>挨个出数</h3><p><img src="https://img-blog.csdnimg.cn/20200117201557962.png" alt="在这里插入图片描述"><br><code>9</code>是堆中数字最大,将<code>9</code>取出,为保证完全二叉树,将树中最后的数字<code>3</code>添加到头部.<br><img src="https://img-blog.csdnimg.cn/20200117201817988.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>接下来向下调整<br><img src="https://img-blog.csdnimg.cn/2020011720192267.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>依次取数便取出一个升序列表</p><p><strong>堆排序的平均时间复杂度为 Ο(nlogn)</strong></p><h2 id="堆的算法步骤"><a href="#堆的算法步骤" class="headerlink" title="堆的算法步骤"></a>堆的算法步骤</h2><ol><li><p>创建一个堆 H[0……n-1]；</p></li><li><p>把堆首（最大值）和堆尾互换；</p></li><li><p>把堆的尺寸缩小 1，并调用 shift_down(0)，目的是把新的数组顶端数据调整到相应位置；</p></li><li><p>重复步骤 2，直到堆的尺寸为 1。</p></li></ol><p>来源：<code>https://github.com/hustcc/JS-Sorting-Algorithm</code></p><h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sift</span><span class="params">(li, low, high)</span>:</span></span><br><span class="line"><span class="comment"># li表示数, low表示树根, high表示树最后一个节点的位置</span></span><br><span class="line">tmp = li[low]</span><br><span class="line">i = low</span><br><span class="line">j = <span class="number">2</span> * i + <span class="number">1</span> <span class="comment"># 指向左孩子</span></span><br><span class="line"><span class="comment"># i指向空位, j表示两个孩子</span></span><br><span class="line"><span class="keyword">while</span> j &lt;= high: <span class="comment"># 循环退出的第二种情况: j &gt; high, 说明空位i是叶子节点</span></span><br><span class="line"><span class="keyword">if</span> j+<span class="number">1</span> &lt;= high <span class="keyword">and</span> li[j] &lt; li[j+<span class="number">1</span>]: <span class="comment"># 如果右孩子存在并且比左孩子大, 指向右孩子</span></span><br><span class="line">j += <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> li[j] &gt; tmp:</span><br><span class="line">li[i] = li[j]</span><br><span class="line">i = j</span><br><span class="line">j = <span class="number">2</span> * i + <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>: <span class="comment"># 循环退出的第一种情况, j位置的值比tmp小, 说明两个孩子都比tmp小</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">li[i] = tmp</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heap_sort</span><span class="params">(li)</span>:</span></span><br><span class="line">n = len(li)</span><br><span class="line"><span class="comment"># 1. 构造堆</span></span><br><span class="line"><span class="keyword">for</span> low <span class="keyword">in</span> range(n//<span class="number">2</span><span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">sift(li, low ,n<span class="number">-1</span>)</span><br><span class="line"><span class="comment"># 2. 挨个出数</span></span><br><span class="line"><span class="keyword">for</span> high <span class="keyword">in</span> range(n<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">li[<span class="number">0</span>], li[high] = li[high], li[<span class="number">0</span>]</span><br><span class="line">sift(li, <span class="number">0</span>, high - <span class="number">1</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;堆&quot;&gt;&lt;a href=&quot;#堆&quot; class=&quot;headerlink&quot; title=&quot;堆&quot;&gt;&lt;/a&gt;堆&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在学习堆排序之前,先必须了解一下什么是&lt;code&gt;堆&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;堆是具有以下
      
    
    </summary>
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/categories/Python%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/tags/Python%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Python算法学习day5:剑指offer：二进制中1的个数</title>
    <link href="https://plutoacharon.github.io/2020/01/16/Python%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0day5-%E5%89%91%E6%8C%87offer%EF%BC%9A%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/"/>
    <id>https://plutoacharon.github.io/2020/01/16/Python算法学习day5-剑指offer：二进制中1的个数/</id>
    <published>2020-01-16T12:49:17.000Z</published>
    <updated>2020-01-16T12:49:29.622Z</updated>
    
    <content type="html"><![CDATA[<h2 id="剑指offer：二进制中1的个数"><a href="#剑指offer：二进制中1的个数" class="headerlink" title="剑指offer：二进制中1的个数"></a>剑指offer：二进制中1的个数</h2><h3 id="1-运用Python函数"><a href="#1-运用Python函数" class="headerlink" title="(1) 运用Python函数"></a>(1) 运用Python函数</h3><p>代码详细:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">numberOf1</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> bin(n).count(<span class="string">'1'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> bin(n &amp; <span class="number">0xffffffff</span>).count(<span class="string">'1'</span>)</span><br></pre></td></tr></table></figure><p>或者:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">numberOf1</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> bin(n &amp; <span class="number">0xffffffff</span>).count(<span class="string">'1'</span>)</span><br></pre></td></tr></table></figure></p><p>这里<code>bin</code>函数将数字转换为二进制,<code>count</code>为Python内置函数,计算1的个数</p><h3 id="2-基础数据类型"><a href="#2-基础数据类型" class="headerlink" title="(2) 基础数据类型"></a>(2) 基础数据类型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countOnes</span><span class="params">(x)</span>:</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> x &gt; <span class="number">0</span>:</span><br><span class="line">count += <span class="number">1</span></span><br><span class="line">x &amp;= (x<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> count</span><br></pre></td></tr></table></figure><p>or<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 负数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countOnes</span><span class="params">(x)</span>:</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> x&amp;<span class="number">0xffffffff</span> != <span class="number">0</span>:</span><br><span class="line">count += <span class="number">1</span></span><br><span class="line">x &amp;= (x<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> count</span><br></pre></td></tr></table></figure></p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>Python中为什么可以通过bin(n &amp; 0xffffffff)来获得负数的补码？</p><p><a href="https://www.zhihu.com/question/314455297/answer/728905384" target="_blank" rel="noopener">链接知乎</a></p><p>python通过bin(n &amp; 0xffffffff)获得的并不是这个负数的补码，只是形式与负数的32位二进制补码相同罢了。</p><p>举个例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">-3</span></span><br><span class="line">n = n &amp; <span class="number">0xffffffff</span> <span class="comment">#n=4294967293</span></span><br></pre></td></tr></table></figure></p><p><code>bin(n)</code>查看二进制形式：<code>&#39;0b11111111111111111111111111111101&#39;</code>由于python中没有位数这一概念<br>所以python认为<code>&#39;0b11111111111111111111111111111101&#39;</code>是正数。<br>不要看它首位是1。<br>你看1和-1的二进制表示：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bin(<span class="number">1</span>)<span class="comment">#'0b1'</span></span><br><span class="line">bin(<span class="number">-1</span>)<span class="comment">#'-0b1'</span></span><br></pre></td></tr></table></figure></p><p>所以二进制中1的个数的题目利用了这个技巧，将负数转化为正数，而它们的二进制形式是相同的，而对正数的二进制进行操作非常简单清晰，统计到这个正数二进制形式中1的个数就是原来负数的二进制形式中1的个数，这样就可以消除负数的影响。</p><p>python中，对于负数，无论是右移操作，还是<code>n&amp;（n-1）</code>操作，都会陷入死循环。右移操作是由于负数的最高位总要设为1，最终会变为<code>0xffffffff</code>而陷入死循环。n&amp;(n-1)操作，由于python没有位数概念，负数最左边的1不知道在第几位（觉得这是个坑，具体原理不太清楚），<code>n&amp;(n-1)</code>会不断将最右边的1变为0，也将陷入死循环。</p><p>Python3，当长度超过32位或64位之后，Python3会自动将其转为长整型，长整型理论上没有长度限制。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;剑指offer：二进制中1的个数&quot;&gt;&lt;a href=&quot;#剑指offer：二进制中1的个数&quot; class=&quot;headerlink&quot; title=&quot;剑指offer：二进制中1的个数&quot;&gt;&lt;/a&gt;剑指offer：二进制中1的个数&lt;/h2&gt;&lt;h3 id=&quot;1-运用Pytho
      
    
    </summary>
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/categories/Python%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/tags/Python%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Python算法学习day4:关于一道亚马逊面试题的情景分析</title>
    <link href="https://plutoacharon.github.io/2020/01/16/Python%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0day4-%E5%85%B3%E4%BA%8E%E4%B8%80%E9%81%93%E4%BA%9A%E9%A9%AC%E9%80%8A%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9A%84%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90/"/>
    <id>https://plutoacharon.github.io/2020/01/16/Python算法学习day4-关于一道亚马逊面试题的情景分析/</id>
    <published>2020-01-16T12:48:35.000Z</published>
    <updated>2020-01-17T06:39:23.836Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">亚马逊是一家纳斯达克上市公司，通过其财报我们可以解读它在给定时期内的股票走势信息。</span><br><span class="line">这些信息包括每天交易的最高价、最低价以及开盘价。假定你作为交易员，必须在股票开盘时做出买入或卖出的决定。</span><br><span class="line">你负责设计一个算法，根据给定的股价走势信息，决定买入和卖出策略，该策略必须保证你的交易获得的利润最大化。</span><br><span class="line">假设S数组有以下9个数值[10,4,8,7,9,6,2,5,3]</span><br></pre></td></tr></table></figure><h3 id="1-暴力枚举法"><a href="#1-暴力枚举法" class="headerlink" title="1. 暴力枚举法"></a>1. 暴力枚举法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># S定义股票开盘价</span></span><br><span class="line">S = [<span class="number">10</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">maxProfit = <span class="number">0</span></span><br><span class="line">buyDay = <span class="number">0</span></span><br><span class="line">sellDay = <span class="number">0</span></span><br><span class="line"><span class="comment"># 暴力枚举</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(S) - <span class="number">1</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, len(S)):</span><br><span class="line"><span class="keyword">if</span> S[j] - S[i] &gt; maxProfit:</span><br><span class="line">maxProfit = S[j] - S[i]</span><br><span class="line">buyDay = i</span><br><span class="line">sellDay = j</span><br><span class="line">print(<span class="string">"应该在第&#123;0&#125;天买入, 第&#123;1&#125;天卖出, 最大交易利润为: &#123;2&#125;"</span>).format(buyDay+<span class="number">1</span>, sellDay+<span class="number">1</span>, maxProfit))</span><br></pre></td></tr></table></figure><p>算法时间复杂度为O(n*n)</p><h3 id="2-分而治之法"><a href="#2-分而治之法" class="headerlink" title="2. 分而治之法"></a>2. 分而治之法</h3><p>分别计算前半部分和后半部分的最大交易利润,然后在两者中选择出较大的那个,最后还要考虑一种临界情况,那就是最大利润在前半部分的某一天买入,后半部分的某一天卖出<br>代码实现:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findMaxProfit</span><span class="params">(S)</span>:</span></span><br><span class="line"><span class="keyword">if</span> len(S) &lt; <span class="number">2</span>:</span><br><span class="line"><span class="keyword">return</span> [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line"><span class="keyword">if</span> len(S) == <span class="number">2</span>:</span><br><span class="line"><span class="keyword">if</span> (S[<span class="number">1</span>] &gt; S[<span class="number">0</span>]):</span><br><span class="line"><span class="keyword">return</span> [<span class="number">0</span>,<span class="number">1</span>,S[<span class="number">1</span>] - S[<span class="number">0</span>]]</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line"><span class="keyword">return</span> [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line"><span class="comment"># 把交易数据分成两部分</span></span><br><span class="line">firstHalf = findMaxProfit(S[<span class="number">0</span>:int(len(S) / <span class="number">2</span>)])</span><br><span class="line">secondHalf = findMaxProfit(S[int(len(S) / <span class="number">2</span>):len(S)])</span><br><span class="line">finalResult = firstHalf</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (SecondHalf[<span class="number">2</span>] &gt; firstHalf[<span class="number">2</span>]):</span><br><span class="line"><span class="comment"># 后半部分的交易日期还要加上前半部分的天数</span></span><br><span class="line">secondHalf[<span class="number">0</span>] += int(len(S) / <span class="number">2</span>)</span><br><span class="line">secondHalf[<span class="number">1</span>] += int(len(S) / <span class="number">2</span>)</span><br><span class="line">finalResult = secondHalf</span><br><span class="line"><span class="comment"># 看最大利润方案是否是在前半部分买入, 后半部分卖出 </span></span><br><span class="line"></span><br><span class="line">lowestPrice = S[<span class="number">0</span>]</span><br><span class="line">highestPrice = S[int(len(S) / <span class="number">2</span>)]</span><br><span class="line">buyDay = <span class="number">0</span></span><br><span class="line">selDay = int(len(S) / <span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, int(len(S) / <span class="number">2</span>)):</span><br><span class="line"><span class="keyword">if</span> (S[i] &lt; lowestPrice):</span><br><span class="line">buyDay = i</span><br><span class="line">lowestPrice = S[i]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(int(len(S) / <span class="number">2</span>), len(S)):</span><br><span class="line"><span class="keyword">if</span> (S[i] &gt; highestPrice):</span><br><span class="line">selDay = i</span><br><span class="line">highestPrice = S[i]</span><br><span class="line"><span class="keyword">if</span> (highestPrice - lowestPrice &gt; finalResult[<span class="number">2</span>]):</span><br><span class="line">finalResult[<span class="number">0</span>] = buyDay</span><br><span class="line">finalResult[<span class="number">1</span>] = selDay</span><br><span class="line">finalResult[<span class="number">2</span>] = highestPrice - lowestPrice</span><br><span class="line"><span class="keyword">return</span> finalResult</span><br><span class="line"></span><br><span class="line">S = [<span class="number">10</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>]</span><br><span class="line">maxProfit = findMaxProfit(S)</span><br><span class="line">print(<span class="string">"应该在第&#123;0&#125;天买入, 第&#123;1&#125;天卖出, 最大交易利润为: &#123;2&#125;"</span>).format(buyDay+<span class="number">1</span>, sellDay+<span class="number">1</span>, maxProfit))</span><br></pre></td></tr></table></figure></p><h3 id="3-最优解法"><a href="#3-最优解法" class="headerlink" title="3. 最优解法"></a>3. 最优解法</h3><p>假设最佳交易方案是第N天卖出, 那么最佳的买入时机就是前N-1天价格最低的时候<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">S = [<span class="number">10</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>]</span><br><span class="line">minPrice = S[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">N = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">maxProfit = <span class="number">0</span></span><br><span class="line">buyDay = <span class="number">0</span></span><br><span class="line">sellDay = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> N <span class="keyword">in</span> range(len(S)):</span><br><span class="line"><span class="keyword">if</span> (S[N] &lt; minPrice):</span><br><span class="line">minprice =S[N]</span><br><span class="line">buyDay = N</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (S[N] - minPrice &gt; maxProfit):</span><br><span class="line">maxProfit = S[N] - minPrice</span><br><span class="line">selDay = N</span><br><span class="line">print(<span class="string">"应该在第&#123;0&#125;天买入, 第&#123;1&#125;天卖出, 最大交易利润为: &#123;2&#125;"</span>).format(buyDay+<span class="number">1</span>, sellDay+<span class="number">1</span>, maxProfit))</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/categories/Python%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/tags/Python%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Python算法学习day3:快速排序(二)</title>
    <link href="https://plutoacharon.github.io/2020/01/16/Python%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0day3-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F-%E4%BA%8C/"/>
    <id>https://plutoacharon.github.io/2020/01/16/Python算法学习day3-快速排序-二/</id>
    <published>2020-01-16T12:48:05.000Z</published>
    <updated>2020-01-17T08:09:06.375Z</updated>
    
    <content type="html"><![CDATA[<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="1-取出一个数列中唯一一个奇数出现的数字"><a href="#1-取出一个数列中唯一一个奇数出现的数字" class="headerlink" title="(1) 取出一个数列中唯一一个奇数出现的数字"></a>(1) 取出一个数列中唯一一个奇数出现的数字</h3><pre><code>例如:li = [1,2,1,3,2,1,1,2,2,3,3]唯一一个奇数出现的数字为3</code></pre><p>代码详细:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>]</span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">num = num ^ i <span class="comment">#这里运用了一个异或符号的小技巧 当然只能在数列中只存在唯一一个数字才可使用</span></span><br><span class="line">print(num)</span><br></pre></td></tr></table></figure></p><h3 id="2-快速排序"><a href="#2-快速排序" class="headerlink" title="(2) 快速排序"></a>(2) 快速排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(li, left, right)</span>:</span></span><br><span class="line"><span class="keyword">if</span> left &lt; right:</span><br><span class="line">mid = partition(li, left, right)</span><br><span class="line">quick_sort(li, left, mid - <span class="number">1</span>)</span><br><span class="line">quick_sort(li, mid + <span class="number">1</span>, right)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(li, left, right)</span>:</span></span><br><span class="line">tmp = li[left]</span><br><span class="line"><span class="keyword">while</span> left &lt; right:</span><br><span class="line"><span class="keyword">while</span> left &lt; right <span class="keyword">and</span> li[right] &gt;= tmp:</span><br><span class="line">right -= <span class="number">1</span></span><br><span class="line">li[left] = li[right]</span><br><span class="line"><span class="keyword">while</span> left &lt; right <span class="keyword">and</span> li[left] &lt;= tmp:</span><br><span class="line">left += <span class="number">1</span></span><br><span class="line">li[right] = li[left]</span><br><span class="line">li[left] = tmp</span><br><span class="line"><span class="keyword">return</span> left</span><br></pre></td></tr></table></figure><p>时间复杂度为O(nlogn)</p><p>如果出现最坏情况如[7,6,5,4,3,2,1]<br>优化代码:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(li, left, right)</span>:</span></span><br><span class="line"><span class="keyword">if</span> left &lt; right:</span><br><span class="line">mid = random_partition(li, left, right)</span><br><span class="line">quick_sort(li, left, mid - <span class="number">1</span>)</span><br><span class="line">quick_sort(li, mid + <span class="number">1</span>, right)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(li, left, right)</span>:</span></span><br><span class="line">tmp = li[left]</span><br><span class="line"><span class="keyword">while</span> left &lt; right:</span><br><span class="line"><span class="keyword">while</span> left &lt; right <span class="keyword">and</span> li[right] &gt;= tmp:</span><br><span class="line">right -= <span class="number">1</span></span><br><span class="line">li[left] = li[right]</span><br><span class="line"><span class="keyword">while</span> left &lt; right <span class="keyword">and</span> li[left] &lt;= tmp:</span><br><span class="line">left += <span class="number">1</span></span><br><span class="line">li[right] = li[left]</span><br><span class="line">li[left] = tmp</span><br><span class="line"><span class="keyword">return</span> left</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_partition</span><span class="params">(li, left, right)</span>:</span></span><br><span class="line">i = random.randint(left, right)</span><br><span class="line">li[i], li[left] = li[left], li[i]</span><br><span class="line">partition(li, left, right)</span><br></pre></td></tr></table></figure></p><h3 id="3-快速排序-切片实现"><a href="#3-快速排序-切片实现" class="headerlink" title="(3) 快速排序 切片实现"></a>(3) 快速排序 切片实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(li)</span>:</span></span><br><span class="line"><span class="keyword">if</span> len(li) &lt; <span class="number">2</span>:</span><br><span class="line"><span class="keyword">return</span> li</span><br><span class="line">tmp = li[<span class="number">0</span>]</span><br><span class="line">left = [i <span class="keyword">for</span> i <span class="keyword">in</span> li[<span class="number">1</span>:] <span class="keyword">if</span> i &lt;= tmp]</span><br><span class="line">right = [i <span class="keyword">for</span> i <span class="keyword">in</span> li[<span class="number">1</span>:] <span class="keyword">if</span> i &gt; tmp]</span><br><span class="line">left = quick_sort(left)</span><br><span class="line">right = quick_sort(right)</span><br><span class="line"><span class="keyword">return</span> left + [tmp] + right</span><br></pre></td></tr></table></figure><h3 id="4-Leetcode912-排序数组"><a href="#4-Leetcode912-排序数组" class="headerlink" title="(4) Leetcode912. 排序数组"></a>(4) Leetcode912. 排序数组</h3><pre><code>给定一个整数数组 nums，将该数组升序排列。示例 1：输入：[5,2,3,1]输出：[1,2,3,5]示例 2：输入：[5,1,1,2,0,0]输出：[0,0,1,1,2,5]提示：1 &lt;= A.length &lt;= 10000-50000 &lt;= A[i] &lt;= 50000</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortArray</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment">#return self.quick_sort(nums, 0, len(nums) - 1)</span></span><br><span class="line">        <span class="keyword">return</span> self.quick_sort(nums)</span><br><span class="line">    <span class="string">'''    </span></span><br><span class="line"><span class="string">    def quick_sort(self, nums, left, right):</span></span><br><span class="line"><span class="string">        if left &gt; right:</span></span><br><span class="line"><span class="string">            return </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">        if left &lt; right:</span></span><br><span class="line"><span class="string">            mid = self.partition(nums, left, right)</span></span><br><span class="line"><span class="string">            self.quick_sort(nums, left, mid-1)</span></span><br><span class="line"><span class="string">            self.quick_sort(nums, mid+1, right)</span></span><br><span class="line"><span class="string">        return nums</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def partition(self, nums, left, right):</span></span><br><span class="line"><span class="string">        tmp = nums[left]</span></span><br><span class="line"><span class="string">        while left &lt; right:</span></span><br><span class="line"><span class="string">            while left &lt; right and nums[right] &gt;= tmp:</span></span><br><span class="line"><span class="string">                right -= 1</span></span><br><span class="line"><span class="string">            nums[left] = nums[right]</span></span><br><span class="line"><span class="string">            while left &lt; right and nums[left] &lt;= tmp:</span></span><br><span class="line"><span class="string">                left += 1</span></span><br><span class="line"><span class="string">            nums[right] = nums[left]</span></span><br><span class="line"><span class="string">        nums[left] = tmp</span></span><br><span class="line"><span class="string">        return left</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(nums) &lt; <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> nums</span><br><span class="line">        tmp = nums[<span class="number">0</span>]</span><br><span class="line">        left = [i <span class="keyword">for</span> i <span class="keyword">in</span> nums[<span class="number">1</span>:] <span class="keyword">if</span> i &lt;= tmp]</span><br><span class="line">        right = [i <span class="keyword">for</span> i <span class="keyword">in</span> nums[<span class="number">1</span>:] <span class="keyword">if</span> i &gt; tmp]</span><br><span class="line">        left = self.quick_sort(left)</span><br><span class="line">        right = self.quick_sort(right)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span>  left + [tmp] + right</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;排序&quot;&gt;&lt;a href=&quot;#排序&quot; class=&quot;headerlink&quot; title=&quot;排序&quot;&gt;&lt;/a&gt;排序&lt;/h2&gt;&lt;h3 id=&quot;1-取出一个数列中唯一一个奇数出现的数字&quot;&gt;&lt;a href=&quot;#1-取出一个数列中唯一一个奇数出现的数字&quot; class=&quot;head
      
    
    </summary>
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/categories/Python%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/tags/Python%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Python算法学习day2:查找和排序(一)</title>
    <link href="https://plutoacharon.github.io/2020/01/16/Python%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0day2-%E6%9F%A5%E6%89%BE%E5%92%8C%E6%8E%92%E5%BA%8F-%E4%B8%80/"/>
    <id>https://plutoacharon.github.io/2020/01/16/Python算法学习day2-查找和排序-一/</id>
    <published>2020-01-16T12:47:31.000Z</published>
    <updated>2020-02-03T10:11:51.443Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>排序算法是《数据结构与算法》中最基本的算法之一。</p><p>排序算法可以分为<code>内部排序和外部排序</code></p><p>内部排序是数据记录在内存中进行排序。</p><p>而外部排序是因排序的数据很大，一次不能容纳全部的排序记录，在排序过程中需要访问外存。<br>常见的内部排序算法有：插入排序、希尔排序、选择排序、冒泡排序、归并排序、快速排序、堆排序、基数排序等。</p><p>用一张图概括：<br><img src="https://img-blog.csdnimg.cn/20200112135923263.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="关于时间复杂度："><a href="#关于时间复杂度：" class="headerlink" title="关于时间复杂度："></a>关于时间复杂度：</h3><p>平方阶 (O(n2)) 排序 各类简单排序：直接插入、直接选择和冒泡排序。<br>线性对数阶 (O(nlog2n)) 排序 快速排序、堆排序和归并排序；<br>O(n1+§)) 排序，§ 是介于 0 和 1 之间的常数。 希尔排序<br>线性阶 (O(n)) 排序 基数排序，此外还有桶、箱排序。<br>关于稳定性：<br>稳定的排序算法：冒泡排序、插入排序、归并排序和基数排序。<br>不是稳定的排序算法：选择排序、快速排序、希尔排序、堆排序。</p><h2 id="1-查找"><a href="#1-查找" class="headerlink" title="1. 查找"></a>1. 查找</h2><h3 id="1-列表查找"><a href="#1-列表查找" class="headerlink" title="(1) 列表查找"></a>(1) 列表查找</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear_search</span><span class="params">(data, value)</span>:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</span><br><span class="line"><span class="keyword">if</span> data[i] == value:</span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>此算法时间复杂度为O(n)</p><h3 id="2-二分查找"><a href="#2-二分查找" class="headerlink" title="(2) 二分查找"></a>(2) 二分查找</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bin_search</span><span class="params">(data, value)</span>:</span></span><br><span class="line">low = <span class="number">0</span></span><br><span class="line">high= len(data) - <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> low &lt;= high:</span><br><span class="line">mid = (low + high) // <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> data[mid] == value:</span><br><span class="line"><span class="keyword">return</span> mid</span><br><span class="line"><span class="keyword">elif</span> data[mid] &gt; value:</span><br><span class="line">high = mid - <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span> data[mid] &lt; value:</span><br><span class="line">low = mid + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>时间复杂度为O(logn)</p><h3 id="3-LeetCode704-二分查找"><a href="#3-LeetCode704-二分查找" class="headerlink" title="(3) LeetCode704. 二分查找"></a>(3) LeetCode704. 二分查找</h3><pre><code>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。示例 1:输入: nums = [-1,0,3,5,9,12], target = 9输出: 4解释: 9 出现在 nums 中并且下标为 4示例 2:输入: nums = [-1,0,3,5,9,12], target = 2输出: -1解释: 2 不存在 nums 中因此返回 -1提示：你可以假设 nums 中的所有元素是不重复的。n 将在 [1, 10000]之间。nums 的每个元素都将在 [-9999, 9999]之间。</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, nums, target)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        low = <span class="number">0</span></span><br><span class="line">        high = len(nums)<span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">            mid = (low + high) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] == target:</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            <span class="keyword">elif</span> nums[mid] &lt; target:</span><br><span class="line">                low = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                high = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><h2 id="2-排序"><a href="#2-排序" class="headerlink" title="2. 排序"></a>2. 排序</h2><h3 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="(1) 冒泡排序"></a>(1) 冒泡排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_soft</span><span class="params">(li)</span>:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(li) - <span class="number">1</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(len(li) - i - <span class="number">1</span>):</span><br><span class="line"><span class="keyword">if</span> li[j] &gt; li[j+<span class="number">1</span>]:</span><br><span class="line">li[j], li[j+<span class="number">1</span>] = li[j+<span class="number">1</span>], li[j]</span><br></pre></td></tr></table></figure><ul><li><p>时间复杂度：O(n²)</p></li><li><p>空间复杂度：O(1)</p></li><li><p>健壮性：健壮</p></li><li><p>难易程度：简单</p></li></ul><p>优化:<code>如果列表已经排序完成,则可提前中断排序</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_soft</span><span class="params">(li)</span>:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(li) - <span class="number">1</span>):</span><br><span class="line">exchange = <span class="literal">False</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(len(li) - i - <span class="number">1</span>):</span><br><span class="line"><span class="keyword">if</span> li[j] &gt; li[j+<span class="number">1</span>]:</span><br><span class="line">li[j], li[j+<span class="number">1</span>] = li[j+<span class="number">1</span>], li[j] </span><br><span class="line">exchange = <span class="literal">True</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> exchange:</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure></p><h3 id="2-选择排序"><a href="#2-选择排序" class="headerlink" title="(2) 选择排序"></a>(2) 选择排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_soft</span><span class="params">(li)</span>:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(li)<span class="number">-1</span>):</span><br><span class="line">min_pos = i</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, len(li)):</span><br><span class="line"><span class="keyword">if</span> li[min_pos] &gt; li[j]:</span><br><span class="line">min_pos = j</span><br><span class="line">li[i], li[min_pos] = li[min_pos], li[i]</span><br></pre></td></tr></table></figure><h3 id="3-插入排序"><a href="#3-插入排序" class="headerlink" title="(3) 插入排序"></a>(3) 插入排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span><span class="params">(li)</span>:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(li)):</span><br><span class="line">tmp = li[i]</span><br><span class="line">j = i - <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> li[j] &gt; tmp:</span><br><span class="line">li[j+<span class="number">1</span>] = li[j]</span><br><span class="line">j-=<span class="number">1</span></span><br><span class="line">li[j+<span class="number">1</span>] = tmp</span><br></pre></td></tr></table></figure><p>以上就是一些简单的查找和排序经典算法,再接再厉,每日学习一点算法,然后温故而知新</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h2&gt;&lt;p&gt;排序算法是《数据结构与算法》中最基本的算法之一。&lt;/p&gt;
&lt;p&gt;排序算法可以分为&lt;code&gt;内部排序和外部排序&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/categories/Python%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/tags/Python%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Python算法学习day1:汉诺塔,斐波那契数列(递归)</title>
    <link href="https://plutoacharon.github.io/2020/01/16/Python%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0day1-%E6%B1%89%E8%AF%BA%E5%A1%94-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97-%E9%80%92%E5%BD%92/"/>
    <id>https://plutoacharon.github.io/2020/01/16/Python算法学习day1-汉诺塔-斐波那契数列-递归/</id>
    <published>2020-01-16T12:46:43.000Z</published>
    <updated>2020-01-16T12:47:17.037Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-斐波那契数列"><a href="#1-斐波那契数列" class="headerlink" title="1. 斐波那契数列"></a>1. 斐波那契数列</h2><p>简单的递归数列问题</p><h3 id="1-蓝桥杯入门训练-Fibonacci数列"><a href="#1-蓝桥杯入门训练-Fibonacci数列" class="headerlink" title="(1) 蓝桥杯入门训练:Fibonacci数列"></a>(1) 蓝桥杯入门训练:<code>Fibonacci数列</code></h3><pre><code>问题描述Fibonacci数列的递推公式为：Fn=Fn-1+Fn-2，其中F1=F2=1。当n比较大时，Fn也非常大，现在我们想知道，Fn除以10007的余数是多少。输入格式输入包含一个整数n。输出格式输出一行，包含一个整数，表示Fn除以10007的余数。说明：在本题中，答案是要求Fn除以10007的余数，因此我们只要能算出这个余数即可，而不需要先计算出Fn的准确值，再将计算的结果除以10007取余数，直接计算余数往往比先算出原数再取余简单。样例输入10样例输出55样例输入22样例输出7704数据规模与约定1 &lt;= n &lt;= 1,000,000。</code></pre><p>代码详细:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line">a=b = <span class="number">1</span></span><br><span class="line">c = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> n==<span class="number">1</span> <span class="keyword">or</span> n == <span class="number">2</span>:</span><br><span class="line">print(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">elif</span> n &gt; <span class="number">2</span>:</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>, n+<span class="number">1</span>):</span><br><span class="line">c = (a + b) % <span class="number">10007</span></span><br><span class="line">a = b </span><br><span class="line">b = c</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure></p><h3 id="2-Leetcode509-斐波那契数"><a href="#2-Leetcode509-斐波那契数" class="headerlink" title="(2) Leetcode509. 斐波那契数"></a>(2) <code>Leetcode509. 斐波那契数</code></h3><pre><code>斐波那契数，通常用 F(n) 表示，形成的序列称为斐波那契数列。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是：F(0) = 0,   F(1) = 1F(N) = F(N - 1) + F(N - 2), 其中 N &gt; 1.给定 N，计算 F(N)。示例 1：输入：2输出：1解释：F(2) = F(1) + F(0) = 1 + 0 = 1.示例 2：输入：3输出：2解释：F(3) = F(2) + F(1) = 1 + 1 = 2.示例 3：输入：4输出：3解释：F(4) = F(3) + F(2) = 2 + 1 = 3.提示：0 ≤ N ≤ 30</code></pre><p>代码详细:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(self, N)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type N: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 第一次提交的代码,优化的不是很好</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        a=1</span></span><br><span class="line"><span class="string">        b=1</span></span><br><span class="line"><span class="string">        c=0</span></span><br><span class="line"><span class="string">        if N == 0 :</span></span><br><span class="line"><span class="string">            return 0</span></span><br><span class="line"><span class="string">        elif N==1 or N==2:</span></span><br><span class="line"><span class="string">            return 1</span></span><br><span class="line"><span class="string">        else:</span></span><br><span class="line"><span class="string">            for i in range(3,N+1):</span></span><br><span class="line"><span class="string">                c=a+b</span></span><br><span class="line"><span class="string">                a=b</span></span><br><span class="line"><span class="string">                b=c</span></span><br><span class="line"><span class="string">            return c</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 最优解</span></span><br><span class="line">        <span class="keyword">if</span> N <span class="keyword">in</span> (<span class="number">0</span>, <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> N</span><br><span class="line">        </span><br><span class="line">        a=<span class="number">0</span></span><br><span class="line">        b=<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,N+<span class="number">1</span>):</span><br><span class="line">            temp=a</span><br><span class="line">            a=b</span><br><span class="line">            b=temp+a</span><br><span class="line">        <span class="keyword">return</span> b</span><br></pre></td></tr></table></figure></p><h3 id="3-LeetCode70-爬楼梯"><a href="#3-LeetCode70-爬楼梯" class="headerlink" title="(3) LeetCode70. 爬楼梯"></a>(3) <code>LeetCode70. 爬楼梯</code></h3><pre><code>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？注意：给定 n 是一个正整数。示例 1：输入： 2输出： 2解释： 有两种方法可以爬到楼顶。1.  1 阶 + 1 阶2.  2 阶示例 2：输入： 3输出： 3解释： 有三种方法可以爬到楼顶。3.  1 阶 + 1 阶 + 1 阶4.  1 阶 + 2 阶5.  2 阶 + 1 阶</code></pre><p>代码详细:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">climbStairs</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 第一次提交的代码,优化的不是很好</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        a=1</span></span><br><span class="line"><span class="string">        b=1</span></span><br><span class="line"><span class="string">        c=0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        if n==1:</span></span><br><span class="line"><span class="string">            return a</span></span><br><span class="line"><span class="string">        elif n==2:</span></span><br><span class="line"><span class="string">            return a+b</span></span><br><span class="line"><span class="string">        else:</span></span><br><span class="line"><span class="string">            for i in range(2, n+1):</span></span><br><span class="line"><span class="string">                c=a+b</span></span><br><span class="line"><span class="string">                a=b</span></span><br><span class="line"><span class="string">                b=c</span></span><br><span class="line"><span class="string">            return c</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment">#最优解 使用了append列表函数添加数字</span></span><br><span class="line">        lis = []</span><br><span class="line">        lis.append(<span class="number">1</span>)</span><br><span class="line">        lis.append(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> n==<span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, n):</span><br><span class="line">            lis.append(lis[i<span class="number">-1</span>]+lis[i<span class="number">-2</span>])</span><br><span class="line">        <span class="keyword">return</span> lis[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure></p><h3 id="4-LeetCode1137-第-N-个泰波那契数"><a href="#4-LeetCode1137-第-N-个泰波那契数" class="headerlink" title="(4) LeetCode1137. 第 N 个泰波那契数"></a>(4) LeetCode1137. 第 N 个泰波那契数</h3><pre><code>泰波那契序列 Tn 定义如下： T0 = 0, T1 = 1, T2 = 1, 且在 n &gt;= 0 的条件下 Tn+3 = Tn + Tn+1 + Tn+2给你整数 n，请返回第 n 个泰波那契数 Tn 的值。示例 1：输入：n = 4输出：4解释：T_3 = 0 + 1 + 1 = 2T_4 = 1 + 1 + 2 = 4示例 2：输入：n = 25输出：1389537提示：0 &lt;= n &lt;= 37答案保证是一个 32 位整数，即 answer &lt;= 2^31 - 1。</code></pre><p>代码详细:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tribonacci</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> n <span class="keyword">in</span> (<span class="number">0</span>, <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> n</span><br><span class="line">        </span><br><span class="line">        lis=[]</span><br><span class="line">        lis.append(<span class="number">0</span>)</span><br><span class="line">        lis.append(<span class="number">1</span>)</span><br><span class="line">        lis.append(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>,n+<span class="number">1</span>):</span><br><span class="line">            lis.append(lis[i<span class="number">-1</span>]+lis[i<span class="number">-2</span>]+lis[i<span class="number">-3</span>])</span><br><span class="line">        <span class="keyword">return</span> lis[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure></p><h2 id="2-汉诺塔"><a href="#2-汉诺塔" class="headerlink" title="2. 汉诺塔"></a>2. 汉诺塔</h2><pre><code>如下图所示，从左到右有A、B、C三根柱子，其中A柱子上面有从小叠到大的n个圆盘，现要求将A柱子上的圆盘移到C柱子上去期间只有一个原则：一次只能移到一个盘子且大盘子不能在小盘子上面，求移动的步骤和移动的次数</code></pre><p>代码详细:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Move</span><span class="params">(n, A, B, C)</span>:</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span>  n == <span class="number">1</span>:</span><br><span class="line">print(A, <span class="string">"==&gt;"</span>, C)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">count += Move(n<span class="number">-1</span>, A, C, B) <span class="comment"># 将A上的n-1个盘子经过C移动到B</span></span><br><span class="line">count += Move(<span class="number">1</span>, A, B, C)   <span class="comment"># 将A上的最底部的盘子经过B移动到C</span></span><br><span class="line">count += Move(n<span class="number">-1</span>, B, A, C) <span class="comment"># 将B上的n-1个盘子经过A移动到C</span></span><br><span class="line"><span class="keyword">return</span> count</span><br></pre></td></tr></table></figure><p>以上就是一些递归的经典算法,再接再厉,每日学习一点算法,然后温故而知新。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-斐波那契数列&quot;&gt;&lt;a href=&quot;#1-斐波那契数列&quot; class=&quot;headerlink&quot; title=&quot;1. 斐波那契数列&quot;&gt;&lt;/a&gt;1. 斐波那契数列&lt;/h2&gt;&lt;p&gt;简单的递归数列问题&lt;/p&gt;
&lt;h3 id=&quot;1-蓝桥杯入门训练-Fibonacci数列&quot;
      
    
    </summary>
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/categories/Python%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/tags/Python%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
