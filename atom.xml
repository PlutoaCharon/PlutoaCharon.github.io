<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>浩翰Redamancy的博客</title>
  
  <subtitle>文质彬彬 然后君子</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://plutoacharon.github.io/"/>
  <updated>2020-01-16T12:49:29.622Z</updated>
  <id>https://plutoacharon.github.io/</id>
  
  <author>
    <name>浩翰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python算法学习day5:剑指offer：二进制中1的个数</title>
    <link href="https://plutoacharon.github.io/2020/01/16/Python%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0day5-%E5%89%91%E6%8C%87offer%EF%BC%9A%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/"/>
    <id>https://plutoacharon.github.io/2020/01/16/Python算法学习day5-剑指offer：二进制中1的个数/</id>
    <published>2020-01-16T12:49:17.000Z</published>
    <updated>2020-01-16T12:49:29.622Z</updated>
    
    <content type="html"><![CDATA[<h2 id="剑指offer：二进制中1的个数"><a href="#剑指offer：二进制中1的个数" class="headerlink" title="剑指offer：二进制中1的个数"></a>剑指offer：二进制中1的个数</h2><h3 id="1-运用Python函数"><a href="#1-运用Python函数" class="headerlink" title="(1) 运用Python函数"></a>(1) 运用Python函数</h3><p>代码详细:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">numberOf1</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> bin(n).count(<span class="string">'1'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> bin(n &amp; <span class="number">0xffffffff</span>).count(<span class="string">'1'</span>)</span><br></pre></td></tr></table></figure><p>或者:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">numberOf1</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> bin(n &amp; <span class="number">0xffffffff</span>).count(<span class="string">'1'</span>)</span><br></pre></td></tr></table></figure></p><p>这里<code>bin</code>函数将数字转换为二进制,<code>count</code>为Python内置函数,计算1的个数</p><h3 id="2-基础数据类型"><a href="#2-基础数据类型" class="headerlink" title="(2) 基础数据类型"></a>(2) 基础数据类型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countOnes</span><span class="params">(x)</span>:</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> x &gt; <span class="number">0</span>:</span><br><span class="line">count += <span class="number">1</span></span><br><span class="line">x &amp;= (x<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> count</span><br></pre></td></tr></table></figure><p>or<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 负数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countOnes</span><span class="params">(x)</span>:</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> x&amp;<span class="number">0xffffffff</span> != <span class="number">0</span>:</span><br><span class="line">count += <span class="number">1</span></span><br><span class="line">x &amp;= (x<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> count</span><br></pre></td></tr></table></figure></p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>Python中为什么可以通过bin(n &amp; 0xffffffff)来获得负数的补码？</p><p><a href="https://www.zhihu.com/question/314455297/answer/728905384" target="_blank" rel="noopener">链接知乎</a></p><p>python通过bin(n &amp; 0xffffffff)获得的并不是这个负数的补码，只是形式与负数的32位二进制补码相同罢了。</p><p>举个例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">-3</span></span><br><span class="line">n = n &amp; <span class="number">0xffffffff</span> <span class="comment">#n=4294967293</span></span><br></pre></td></tr></table></figure></p><p><code>bin(n)</code>查看二进制形式：<code>&#39;0b11111111111111111111111111111101&#39;</code>由于python中没有位数这一概念<br>所以python认为<code>&#39;0b11111111111111111111111111111101&#39;</code>是正数。<br>不要看它首位是1。<br>你看1和-1的二进制表示：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bin(<span class="number">1</span>)<span class="comment">#'0b1'</span></span><br><span class="line">bin(<span class="number">-1</span>)<span class="comment">#'-0b1'</span></span><br></pre></td></tr></table></figure></p><p>所以二进制中1的个数的题目利用了这个技巧，将负数转化为正数，而它们的二进制形式是相同的，而对正数的二进制进行操作非常简单清晰，统计到这个正数二进制形式中1的个数就是原来负数的二进制形式中1的个数，这样就可以消除负数的影响。</p><p>python中，对于负数，无论是右移操作，还是<code>n&amp;（n-1）</code>操作，都会陷入死循环。右移操作是由于负数的最高位总要设为1，最终会变为<code>0xffffffff</code>而陷入死循环。n&amp;(n-1)操作，由于python没有位数概念，负数最左边的1不知道在第几位（觉得这是个坑，具体原理不太清楚），<code>n&amp;(n-1)</code>会不断将最右边的1变为0，也将陷入死循环。</p><p>Python3，当长度超过32位或64位之后，Python3会自动将其转为长整型，长整型理论上没有长度限制。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;剑指offer：二进制中1的个数&quot;&gt;&lt;a href=&quot;#剑指offer：二进制中1的个数&quot; class=&quot;headerlink&quot; title=&quot;剑指offer：二进制中1的个数&quot;&gt;&lt;/a&gt;剑指offer：二进制中1的个数&lt;/h2&gt;&lt;h3 id=&quot;1-运用Pytho
      
    
    </summary>
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/categories/Python%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/tags/Python%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Python算法学习day4:关于一道亚马逊面试题的情景分析</title>
    <link href="https://plutoacharon.github.io/2020/01/16/Python%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0day4-%E5%85%B3%E4%BA%8E%E4%B8%80%E9%81%93%E4%BA%9A%E9%A9%AC%E9%80%8A%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9A%84%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90/"/>
    <id>https://plutoacharon.github.io/2020/01/16/Python算法学习day4-关于一道亚马逊面试题的情景分析/</id>
    <published>2020-01-16T12:48:35.000Z</published>
    <updated>2020-01-16T12:48:51.727Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">亚马逊是一家纳斯达克上市公司，通过其财报我们可以解读它在给定时期内的股票走势信息。</span><br><span class="line">这些信息包括每天交易的最高价、最低价以及开盘价。假定你作为交易员，必须在股票开盘时做出买入或卖出的决定。</span><br><span class="line">你负责设计一个算法，根据给定的股价走势信息，决定买入和卖出策略，该策略必须保证你的交易获得的利润最大化。</span><br><span class="line">假设S数组有以下9个数值[10,4,8,7,9,6,2,5,3]</span><br></pre></td></tr></table></figure><h3 id="1-暴力枚举法"><a href="#1-暴力枚举法" class="headerlink" title="1. 暴力枚举法"></a>1. 暴力枚举法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># S定义股票开盘价</span></span><br><span class="line">S = [<span class="number">10</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">maxProfit = <span class="number">0</span></span><br><span class="line">buyDay = <span class="number">0</span></span><br><span class="line">sellDay = <span class="number">0</span></span><br><span class="line"><span class="comment"># 暴力枚举</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(S) - <span class="number">1</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, len(S)):</span><br><span class="line"><span class="keyword">if</span> S[j] - S[i] &gt; maxProfit:</span><br><span class="line">maxProfit = S[j] - S[i]</span><br><span class="line">buyDay = i</span><br><span class="line">sellDay = j</span><br><span class="line">print(<span class="string">"应该在第&#123;0&#125;天买入, 第&#123;1&#125;天卖出, 最大交易利润为: &#123;2&#125;"</span>).format(buyDay+<span class="number">1</span>, sellDay+<span class="number">1</span>, maxProfit))</span><br></pre></td></tr></table></figure><p>算法时间复杂度为O(n*n)</p><h3 id="2-分而治之法"><a href="#2-分而治之法" class="headerlink" title="2. 分而治之法"></a>2. 分而治之法</h3><p>分别计算前半部分和后半部分的最大交易利润,然后在两者中选择出较大的那个,最后还要考虑一种临界情况,那就是最大利润在前半部分的某一天买入,后半部分的某一天卖出<br>代码实现:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findMaxProfit</span><span class="params">(S)</span>:</span></span><br><span class="line"><span class="keyword">if</span> len(S) &lt; <span class="number">2</span>:</span><br><span class="line"><span class="keyword">return</span> [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line"><span class="keyword">if</span> len(S) == <span class="number">2</span>:</span><br><span class="line"><span class="keyword">if</span> (S[<span class="number">1</span>] &gt; S[<span class="number">0</span>]):</span><br><span class="line"><span class="keyword">return</span> [<span class="number">0</span>,<span class="number">1</span>,S[<span class="number">1</span>] - S[<span class="number">0</span>]]</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line"><span class="keyword">return</span> [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line"><span class="comment"># 把交易数据分成两部分</span></span><br><span class="line">firstHalf = findMaxProfit(S[<span class="number">0</span>:int(len(S) / <span class="number">2</span>)])</span><br><span class="line">secondHalf = findMaxProfit(S[int(len(S) / <span class="number">2</span>):len(S)])</span><br><span class="line">finalResult = firstHalf</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (SecondHalf[<span class="number">2</span>] &gt; firstHalf[<span class="number">2</span>]):</span><br><span class="line"><span class="comment"># 后半部分的交易日期还要加上前半部分的天数</span></span><br><span class="line">secondHalf[<span class="number">0</span>] += int(len(S) / <span class="number">2</span>)</span><br><span class="line">secondHalf[<span class="number">1</span>] += int(len(S) / <span class="number">2</span>)</span><br><span class="line">finalResult = secondHalf</span><br><span class="line"><span class="comment"># 看最大利润方案是否是在前半部分买入, 后半部分卖出 </span></span><br><span class="line"></span><br><span class="line">lowestPrice = S[<span class="number">0</span>]</span><br><span class="line">highestPrice = S[int(len(S) / <span class="number">2</span>)]</span><br><span class="line">buyDay = <span class="number">0</span></span><br><span class="line">selDay = int(len(S) / <span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, int(len(S) / <span class="number">2</span>)):</span><br><span class="line"><span class="keyword">if</span> (S[i] &lt; lowestPrice):</span><br><span class="line">buyDay = i</span><br><span class="line">lowestPrice = S[i]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(int(len(S) / <span class="number">2</span>), len(S)):</span><br><span class="line"><span class="keyword">if</span> (S[i] &gt; highestPrice):</span><br><span class="line">selDay = i</span><br><span class="line">highestPrice = S[i]</span><br><span class="line"><span class="keyword">if</span> (highestPrice - lowestPrice &gt; finalResult[<span class="number">2</span>]):</span><br><span class="line">finalResult[<span class="number">0</span>] = buyDay</span><br><span class="line">finalResult[<span class="number">1</span>] = selDay</span><br><span class="line">finalResult[<span class="number">2</span>] = highestPrice - lowestPrice</span><br><span class="line"><span class="keyword">return</span> finalResult</span><br><span class="line"></span><br><span class="line">S = [<span class="number">10</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>]</span><br><span class="line">maxProfit = findMaxProfit(S)</span><br><span class="line">print(<span class="string">"应该在第&#123;0&#125;天买入, 第&#123;1&#125;天卖出, 最大交易利润为: &#123;2&#125;"</span>).format(buyDay+<span class="number">1</span>, sellDay+<span class="number">1</span>, maxProfit))</span><br></pre></td></tr></table></figure></p><h3 id="3-最优解法"><a href="#3-最优解法" class="headerlink" title="3. 最优解法"></a>3. 最优解法</h3><p>假设最佳交易方案是第N天卖出, 那么最佳的买入时机就是前N-1天价格最低的时候<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">S = [<span class="number">10</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>]</span><br><span class="line">minPrice = S[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">N = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">maxProfit = <span class="number">0</span></span><br><span class="line">buyDay = <span class="number">0</span></span><br><span class="line">sellDay = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> N <span class="keyword">in</span> range(len(S)):</span><br><span class="line"><span class="keyword">if</span> (S[N] &lt; minPrice):</span><br><span class="line">minprice =S[N]</span><br><span class="line">buyDay = N</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (S[N] - minPrice &gt; profit):</span><br><span class="line">profit = S[N] - minPrice</span><br><span class="line">selDay = N</span><br><span class="line">print(<span class="string">"应该在第&#123;0&#125;天买入, 第&#123;1&#125;天卖出, 最大交易利润为: &#123;2&#125;"</span>).format(buyDay+<span class="number">1</span>, sellDay+<span class="number">1</span>, maxProfit))</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/categories/Python%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/tags/Python%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Python算法学习day3:快速排序(二)</title>
    <link href="https://plutoacharon.github.io/2020/01/16/Python%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0day3-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F-%E4%BA%8C/"/>
    <id>https://plutoacharon.github.io/2020/01/16/Python算法学习day3-快速排序-二/</id>
    <published>2020-01-16T12:48:05.000Z</published>
    <updated>2020-01-16T12:48:16.773Z</updated>
    
    <content type="html"><![CDATA[<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="1-取出一个数列中唯一一个奇数出现的数字"><a href="#1-取出一个数列中唯一一个奇数出现的数字" class="headerlink" title="(1) 取出一个数列中唯一一个奇数出现的数字"></a>(1) 取出一个数列中唯一一个奇数出现的数字</h3><pre><code>例如:li = [1,2,1,3,2,1,1,2,2,3,3]唯一一个奇数出现的数字为3</code></pre><p>代码详细:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>]</span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">num - num ^ i <span class="comment">#这里运用了一个异或符号的小技巧 当然只能在数列中只存在唯一一个数字才可使用</span></span><br><span class="line">print(num)</span><br></pre></td></tr></table></figure></p><h3 id="2-快速排序"><a href="#2-快速排序" class="headerlink" title="(2) 快速排序"></a>(2) 快速排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(li, left, right)</span>:</span></span><br><span class="line"><span class="keyword">if</span> left &lt; right:</span><br><span class="line">mid = partition(li, left, right)</span><br><span class="line">quick_sort(li, left, mid - <span class="number">1</span>)</span><br><span class="line">quick_sort(li, mid + <span class="number">1</span>, right)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(li, left, right)</span>:</span></span><br><span class="line">tmp = li[left]</span><br><span class="line"><span class="keyword">while</span> left &lt; right:</span><br><span class="line"><span class="keyword">while</span> left &lt; right <span class="keyword">and</span> li[right] &gt;= tmp:</span><br><span class="line">right -= <span class="number">1</span></span><br><span class="line">li[left] = li[right]</span><br><span class="line"><span class="keyword">while</span> left &lt; right <span class="keyword">and</span> li[left] &lt;= tmp:</span><br><span class="line">left += <span class="number">1</span></span><br><span class="line">li[right] = li[left]</span><br><span class="line">li[left] = tmp</span><br><span class="line"><span class="keyword">return</span> left</span><br></pre></td></tr></table></figure><p>时间复杂度为O(nlogn)</p><p>如果出现最坏情况如[7,6,5,4,3,2,1]<br>优化代码:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(li, left, right)</span>:</span></span><br><span class="line"><span class="keyword">if</span> left &lt; right:</span><br><span class="line">mid = random_partition(li, left, right)</span><br><span class="line">quick_sort(li, left, mid - <span class="number">1</span>)</span><br><span class="line">quick_sort(li, mid + <span class="number">1</span>, right)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(li, left, right)</span>:</span></span><br><span class="line">tmp = li[left]</span><br><span class="line"><span class="keyword">while</span> left &lt; right:</span><br><span class="line"><span class="keyword">while</span> left &lt; right <span class="keyword">and</span> li[right] &gt;= tmp:</span><br><span class="line">right -= <span class="number">1</span></span><br><span class="line">li[left] = li[right]</span><br><span class="line"><span class="keyword">while</span> left &lt; right <span class="keyword">and</span> li[left] &lt;= tmp:</span><br><span class="line">left += <span class="number">1</span></span><br><span class="line">li[right] = li[left]</span><br><span class="line">li[left] = tmp</span><br><span class="line"><span class="keyword">return</span> left</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_partition</span><span class="params">(li, left, right)</span>:</span></span><br><span class="line">i = random.randint(left, right)</span><br><span class="line">li[i], li[left] = li[left], li[i]</span><br><span class="line">partition(li, left, right)</span><br></pre></td></tr></table></figure></p><h3 id="3-快速排序-切片实现"><a href="#3-快速排序-切片实现" class="headerlink" title="(3) 快速排序 切片实现"></a>(3) 快速排序 切片实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(li)</span>:</span></span><br><span class="line"><span class="keyword">if</span> len(li) &lt; <span class="number">2</span>:</span><br><span class="line"><span class="keyword">return</span> li</span><br><span class="line">tmp = li[<span class="number">0</span>]</span><br><span class="line">left = [i <span class="keyword">for</span> i <span class="keyword">in</span> li[<span class="number">1</span>:] <span class="keyword">if</span> i &lt;= tmp]</span><br><span class="line">right = [i <span class="keyword">for</span> i <span class="keyword">in</span> li[<span class="number">1</span>:] <span class="keyword">if</span> i &gt; tmp]</span><br><span class="line">left = quick_sort(left)</span><br><span class="line">right = quick_sort(right)</span><br><span class="line"><span class="keyword">return</span> left + [tmp] + right</span><br></pre></td></tr></table></figure><h3 id="4-Leetcode912-排序数组"><a href="#4-Leetcode912-排序数组" class="headerlink" title="(4) Leetcode912. 排序数组"></a>(4) Leetcode912. 排序数组</h3><pre><code>给定一个整数数组 nums，将该数组升序排列。示例 1：输入：[5,2,3,1]输出：[1,2,3,5]示例 2：输入：[5,1,1,2,0,0]输出：[0,0,1,1,2,5]提示：1 &lt;= A.length &lt;= 10000-50000 &lt;= A[i] &lt;= 50000</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortArray</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment">#return self.quick_sort(nums, 0, len(nums) - 1)</span></span><br><span class="line">        <span class="keyword">return</span> self.quick_sort(nums)</span><br><span class="line">    <span class="string">'''    </span></span><br><span class="line"><span class="string">    def quick_sort(self, nums, left, right):</span></span><br><span class="line"><span class="string">        if left &gt; right:</span></span><br><span class="line"><span class="string">            return </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">        if left &lt; right:</span></span><br><span class="line"><span class="string">            mid = self.partition(nums, left, right)</span></span><br><span class="line"><span class="string">            self.quick_sort(nums, left, mid-1)</span></span><br><span class="line"><span class="string">            self.quick_sort(nums, mid+1, right)</span></span><br><span class="line"><span class="string">        return nums</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def partition(self, nums, left, right):</span></span><br><span class="line"><span class="string">        tmp = nums[left]</span></span><br><span class="line"><span class="string">        while left &lt; right:</span></span><br><span class="line"><span class="string">            while left &lt; right and nums[right] &gt;= tmp:</span></span><br><span class="line"><span class="string">                right -= 1</span></span><br><span class="line"><span class="string">            nums[left] = nums[right]</span></span><br><span class="line"><span class="string">            while left &lt; right and nums[left] &lt;= tmp:</span></span><br><span class="line"><span class="string">                left += 1</span></span><br><span class="line"><span class="string">            nums[right] = nums[left]</span></span><br><span class="line"><span class="string">        nums[left] = tmp</span></span><br><span class="line"><span class="string">        return left</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(nums) &lt; <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> nums</span><br><span class="line">        tmp = nums[<span class="number">0</span>]</span><br><span class="line">        left = [i <span class="keyword">for</span> i <span class="keyword">in</span> nums[<span class="number">1</span>:] <span class="keyword">if</span> i &lt;= tmp]</span><br><span class="line">        right = [i <span class="keyword">for</span> i <span class="keyword">in</span> nums[<span class="number">1</span>:] <span class="keyword">if</span> i &gt; tmp]</span><br><span class="line">        left = self.quick_sort(left)</span><br><span class="line">        right = self.quick_sort(right)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span>  left + [tmp] + right</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;排序&quot;&gt;&lt;a href=&quot;#排序&quot; class=&quot;headerlink&quot; title=&quot;排序&quot;&gt;&lt;/a&gt;排序&lt;/h2&gt;&lt;h3 id=&quot;1-取出一个数列中唯一一个奇数出现的数字&quot;&gt;&lt;a href=&quot;#1-取出一个数列中唯一一个奇数出现的数字&quot; class=&quot;head
      
    
    </summary>
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/categories/Python%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/tags/Python%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Python算法学习day2:查找和排序(一)</title>
    <link href="https://plutoacharon.github.io/2020/01/16/Python%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0day2-%E6%9F%A5%E6%89%BE%E5%92%8C%E6%8E%92%E5%BA%8F-%E4%B8%80/"/>
    <id>https://plutoacharon.github.io/2020/01/16/Python算法学习day2-查找和排序-一/</id>
    <published>2020-01-16T12:47:31.000Z</published>
    <updated>2020-01-16T12:47:51.252Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>排序算法是《数据结构与算法》中最基本的算法之一。</p><p>排序算法可以分为<code>内部排序和外部排序</code></p><p>内部排序是数据记录在内存中进行排序。</p><p>而外部排序是因排序的数据很大，一次不能容纳全部的排序记录，在排序过程中需要访问外存。<br>常见的内部排序算法有：插入排序、希尔排序、选择排序、冒泡排序、归并排序、快速排序、堆排序、基数排序等。</p><p>用一张图概括：<br><img src="https://img-blog.csdnimg.cn/20200112135923263.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="关于时间复杂度："><a href="#关于时间复杂度：" class="headerlink" title="关于时间复杂度："></a>关于时间复杂度：</h3><p>平方阶 (O(n2)) 排序 各类简单排序：直接插入、直接选择和冒泡排序。<br>线性对数阶 (O(nlog2n)) 排序 快速排序、堆排序和归并排序；<br>O(n1+§)) 排序，§ 是介于 0 和 1 之间的常数。 希尔排序<br>线性阶 (O(n)) 排序 基数排序，此外还有桶、箱排序。<br>关于稳定性：<br>稳定的排序算法：冒泡排序、插入排序、归并排序和基数排序。<br>不是稳定的排序算法：选择排序、快速排序、希尔排序、堆排序。</p><h2 id="1-查找"><a href="#1-查找" class="headerlink" title="1. 查找"></a>1. 查找</h2><h3 id="1-列表查找"><a href="#1-列表查找" class="headerlink" title="(1) 列表查找"></a>(1) 列表查找</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear_search</span><span class="params">(data, value)</span>:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</span><br><span class="line"><span class="keyword">if</span> data[i] == value:</span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>此算法时间复杂度为O(n)</p><h3 id="2-二分查找"><a href="#2-二分查找" class="headerlink" title="(2) 二分查找"></a>(2) 二分查找</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bin_search</span><span class="params">(data, value)</span>:</span></span><br><span class="line">low = <span class="number">0</span></span><br><span class="line">high= len(data) - <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> low &lt;= high:</span><br><span class="line">mid = (low + high) // <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> data[mid] == value:</span><br><span class="line"><span class="keyword">return</span> mid</span><br><span class="line"><span class="keyword">elif</span> data[mid] &gt; value:</span><br><span class="line">high = mid - <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span> data[mid] &lt; value:</span><br><span class="line">low = mid + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>时间复杂度为O(logn)</p><h3 id="3-LeetCode704-二分查找"><a href="#3-LeetCode704-二分查找" class="headerlink" title="(3) LeetCode704. 二分查找"></a>(3) LeetCode704. 二分查找</h3><pre><code>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。示例 1:输入: nums = [-1,0,3,5,9,12], target = 9输出: 4解释: 9 出现在 nums 中并且下标为 4示例 2:输入: nums = [-1,0,3,5,9,12], target = 2输出: -1解释: 2 不存在 nums 中因此返回 -1提示：你可以假设 nums 中的所有元素是不重复的。n 将在 [1, 10000]之间。nums 的每个元素都将在 [-9999, 9999]之间。</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, nums, target)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        low = <span class="number">0</span></span><br><span class="line">        high = len(nums)<span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">            mid = (low + high) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] == target:</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            <span class="keyword">elif</span> nums[mid] &lt; target:</span><br><span class="line">                low = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                high = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><h2 id="2-排序"><a href="#2-排序" class="headerlink" title="2. 排序"></a>2. 排序</h2><h3 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="(1) 冒泡排序"></a>(1) 冒泡排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_soft</span><span class="params">(li)</span>:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(li) - <span class="number">1</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(len(li) - i - <span class="number">1</span>):</span><br><span class="line"><span class="keyword">if</span> li[j] &gt; li[j+<span class="number">1</span>]:</span><br><span class="line">li[j], li[j+<span class="number">1</span>] = li[j+<span class="number">1</span>], li[j]</span><br></pre></td></tr></table></figure><ul><li><p>时间复杂度：O(n²)</p></li><li><p>空间复杂度：O(1)</p></li><li><p>健壮性：健壮</p></li><li><p>难易程度：简单</p></li></ul><p>优化:<code>如果列表已经排序完成,则可提前中断排序</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_soft</span><span class="params">(li)</span>:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(li) - <span class="number">1</span>):</span><br><span class="line">exchange = <span class="literal">False</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(len(li) - i - <span class="number">1</span>):</span><br><span class="line"><span class="keyword">if</span> li[j] &gt; li[j+<span class="number">1</span>]:</span><br><span class="line">li[j], li[j+<span class="number">1</span>] = li[j+<span class="number">1</span>], li[j] </span><br><span class="line">exchange = <span class="literal">True</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> exchange:</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure></p><h3 id="2-选择排序"><a href="#2-选择排序" class="headerlink" title="(2) 选择排序"></a>(2) 选择排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_soft</span><span class="params">(li)</span>:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(li)<span class="number">-1</span>):</span><br><span class="line">min_pos = i</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, len(li)):</span><br><span class="line"><span class="keyword">if</span> li[min_pos] &gt; li[j]:</span><br><span class="line">min_pos = j</span><br><span class="line">li[j], li[min_pos] = li[min_pos], li[j]</span><br></pre></td></tr></table></figure><h3 id="3-插入排序"><a href="#3-插入排序" class="headerlink" title="(3) 插入排序"></a>(3) 插入排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span><span class="params">(li)</span>:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(li)):</span><br><span class="line">tmp = li[i]</span><br><span class="line">j = i - <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> li[j] &gt; tmp:</span><br><span class="line">li[j+<span class="number">1</span>] = li[j]</span><br><span class="line">j-=<span class="number">1</span></span><br><span class="line">li[j+<span class="number">1</span>] = tmp</span><br></pre></td></tr></table></figure><p>以上就是一些简单的查找和排序经典算法,再接再厉,每日学习一点算法,然后温故而知新</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h2&gt;&lt;p&gt;排序算法是《数据结构与算法》中最基本的算法之一。&lt;/p&gt;
&lt;p&gt;排序算法可以分为&lt;code&gt;内部排序和外部排序&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/categories/Python%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/tags/Python%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Python算法学习day1:汉诺塔,斐波那契数列(递归)</title>
    <link href="https://plutoacharon.github.io/2020/01/16/Python%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0day1-%E6%B1%89%E8%AF%BA%E5%A1%94-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97-%E9%80%92%E5%BD%92/"/>
    <id>https://plutoacharon.github.io/2020/01/16/Python算法学习day1-汉诺塔-斐波那契数列-递归/</id>
    <published>2020-01-16T12:46:43.000Z</published>
    <updated>2020-01-16T12:47:17.037Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-斐波那契数列"><a href="#1-斐波那契数列" class="headerlink" title="1. 斐波那契数列"></a>1. 斐波那契数列</h2><p>简单的递归数列问题</p><h3 id="1-蓝桥杯入门训练-Fibonacci数列"><a href="#1-蓝桥杯入门训练-Fibonacci数列" class="headerlink" title="(1) 蓝桥杯入门训练:Fibonacci数列"></a>(1) 蓝桥杯入门训练:<code>Fibonacci数列</code></h3><pre><code>问题描述Fibonacci数列的递推公式为：Fn=Fn-1+Fn-2，其中F1=F2=1。当n比较大时，Fn也非常大，现在我们想知道，Fn除以10007的余数是多少。输入格式输入包含一个整数n。输出格式输出一行，包含一个整数，表示Fn除以10007的余数。说明：在本题中，答案是要求Fn除以10007的余数，因此我们只要能算出这个余数即可，而不需要先计算出Fn的准确值，再将计算的结果除以10007取余数，直接计算余数往往比先算出原数再取余简单。样例输入10样例输出55样例输入22样例输出7704数据规模与约定1 &lt;= n &lt;= 1,000,000。</code></pre><p>代码详细:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line">a=b = <span class="number">1</span></span><br><span class="line">c = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> n==<span class="number">1</span> <span class="keyword">or</span> n == <span class="number">2</span>:</span><br><span class="line">print(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">elif</span> n &gt; <span class="number">2</span>:</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>, n+<span class="number">1</span>):</span><br><span class="line">c = (a + b) % <span class="number">10007</span></span><br><span class="line">a = b </span><br><span class="line">b = c</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure></p><h3 id="2-Leetcode509-斐波那契数"><a href="#2-Leetcode509-斐波那契数" class="headerlink" title="(2) Leetcode509. 斐波那契数"></a>(2) <code>Leetcode509. 斐波那契数</code></h3><pre><code>斐波那契数，通常用 F(n) 表示，形成的序列称为斐波那契数列。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是：F(0) = 0,   F(1) = 1F(N) = F(N - 1) + F(N - 2), 其中 N &gt; 1.给定 N，计算 F(N)。示例 1：输入：2输出：1解释：F(2) = F(1) + F(0) = 1 + 0 = 1.示例 2：输入：3输出：2解释：F(3) = F(2) + F(1) = 1 + 1 = 2.示例 3：输入：4输出：3解释：F(4) = F(3) + F(2) = 2 + 1 = 3.提示：0 ≤ N ≤ 30</code></pre><p>代码详细:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(self, N)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type N: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 第一次提交的代码,优化的不是很好</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        a=1</span></span><br><span class="line"><span class="string">        b=1</span></span><br><span class="line"><span class="string">        c=0</span></span><br><span class="line"><span class="string">        if N == 0 :</span></span><br><span class="line"><span class="string">            return 0</span></span><br><span class="line"><span class="string">        elif N==1 or N==2:</span></span><br><span class="line"><span class="string">            return 1</span></span><br><span class="line"><span class="string">        else:</span></span><br><span class="line"><span class="string">            for i in range(3,N+1):</span></span><br><span class="line"><span class="string">                c=a+b</span></span><br><span class="line"><span class="string">                a=b</span></span><br><span class="line"><span class="string">                b=c</span></span><br><span class="line"><span class="string">            return c</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 最优解</span></span><br><span class="line">        <span class="keyword">if</span> N <span class="keyword">in</span> (<span class="number">0</span>, <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> N</span><br><span class="line">        </span><br><span class="line">        a=<span class="number">0</span></span><br><span class="line">        b=<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,N+<span class="number">1</span>):</span><br><span class="line">            temp=a</span><br><span class="line">            a=b</span><br><span class="line">            b=temp+a</span><br><span class="line">        <span class="keyword">return</span> b</span><br></pre></td></tr></table></figure></p><h3 id="3-LeetCode70-爬楼梯"><a href="#3-LeetCode70-爬楼梯" class="headerlink" title="(3) LeetCode70. 爬楼梯"></a>(3) <code>LeetCode70. 爬楼梯</code></h3><pre><code>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？注意：给定 n 是一个正整数。示例 1：输入： 2输出： 2解释： 有两种方法可以爬到楼顶。1.  1 阶 + 1 阶2.  2 阶示例 2：输入： 3输出： 3解释： 有三种方法可以爬到楼顶。3.  1 阶 + 1 阶 + 1 阶4.  1 阶 + 2 阶5.  2 阶 + 1 阶</code></pre><p>代码详细:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">climbStairs</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 第一次提交的代码,优化的不是很好</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        a=1</span></span><br><span class="line"><span class="string">        b=1</span></span><br><span class="line"><span class="string">        c=0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        if n==1:</span></span><br><span class="line"><span class="string">            return a</span></span><br><span class="line"><span class="string">        elif n==2:</span></span><br><span class="line"><span class="string">            return a+b</span></span><br><span class="line"><span class="string">        else:</span></span><br><span class="line"><span class="string">            for i in range(2, n+1):</span></span><br><span class="line"><span class="string">                c=a+b</span></span><br><span class="line"><span class="string">                a=b</span></span><br><span class="line"><span class="string">                b=c</span></span><br><span class="line"><span class="string">            return c</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment">#最优解 使用了append列表函数添加数字</span></span><br><span class="line">        lis = []</span><br><span class="line">        lis.append(<span class="number">1</span>)</span><br><span class="line">        lis.append(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> n==<span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, n):</span><br><span class="line">            lis.append(lis[i<span class="number">-1</span>]+lis[i<span class="number">-2</span>])</span><br><span class="line">        <span class="keyword">return</span> lis[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure></p><h3 id="4-LeetCode1137-第-N-个泰波那契数"><a href="#4-LeetCode1137-第-N-个泰波那契数" class="headerlink" title="(4) LeetCode1137. 第 N 个泰波那契数"></a>(4) LeetCode1137. 第 N 个泰波那契数</h3><pre><code>泰波那契序列 Tn 定义如下： T0 = 0, T1 = 1, T2 = 1, 且在 n &gt;= 0 的条件下 Tn+3 = Tn + Tn+1 + Tn+2给你整数 n，请返回第 n 个泰波那契数 Tn 的值。示例 1：输入：n = 4输出：4解释：T_3 = 0 + 1 + 1 = 2T_4 = 1 + 1 + 2 = 4示例 2：输入：n = 25输出：1389537提示：0 &lt;= n &lt;= 37答案保证是一个 32 位整数，即 answer &lt;= 2^31 - 1。</code></pre><p>代码详细:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tribonacci</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> n <span class="keyword">in</span> (<span class="number">0</span>, <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> n</span><br><span class="line">        </span><br><span class="line">        lis=[]</span><br><span class="line">        lis.append(<span class="number">0</span>)</span><br><span class="line">        lis.append(<span class="number">1</span>)</span><br><span class="line">        lis.append(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>,n+<span class="number">1</span>):</span><br><span class="line">            lis.append(lis[i<span class="number">-1</span>]+lis[i<span class="number">-2</span>]+lis[i<span class="number">-3</span>])</span><br><span class="line">        <span class="keyword">return</span> lis[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure></p><h2 id="2-汉诺塔"><a href="#2-汉诺塔" class="headerlink" title="2. 汉诺塔"></a>2. 汉诺塔</h2><pre><code>如下图所示，从左到右有A、B、C三根柱子，其中A柱子上面有从小叠到大的n个圆盘，现要求将A柱子上的圆盘移到C柱子上去期间只有一个原则：一次只能移到一个盘子且大盘子不能在小盘子上面，求移动的步骤和移动的次数</code></pre><p>代码详细:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Move</span><span class="params">(n, A, B, C)</span>:</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span>  n == <span class="number">1</span>:</span><br><span class="line">print(A, <span class="string">"==&gt;"</span>, C)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">count += Move(n<span class="number">-1</span>, A, C, B) <span class="comment"># 将A上的n-1个盘子经过C移动到B</span></span><br><span class="line">count += Move(<span class="number">1</span>, A, B, C)   <span class="comment"># 将A上的最底部的盘子经过B移动到C</span></span><br><span class="line">count += Move(n<span class="number">-1</span>, B, A, C) <span class="comment"># 将B上的n-1个盘子经过A移动到C</span></span><br><span class="line"><span class="keyword">return</span> count</span><br></pre></td></tr></table></figure><p>以上就是一些递归的经典算法,再接再厉,每日学习一点算法,然后温故而知新。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-斐波那契数列&quot;&gt;&lt;a href=&quot;#1-斐波那契数列&quot; class=&quot;headerlink&quot; title=&quot;1. 斐波那契数列&quot;&gt;&lt;/a&gt;1. 斐波那契数列&lt;/h2&gt;&lt;p&gt;简单的递归数列问题&lt;/p&gt;
&lt;h3 id=&quot;1-蓝桥杯入门训练-Fibonacci数列&quot;
      
    
    </summary>
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/categories/Python%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python算法" scheme="https://plutoacharon.github.io/tags/Python%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Win10开启与搭建FTP服务器(详细图文版)</title>
    <link href="https://plutoacharon.github.io/2020/01/16/Win10%E5%BC%80%E5%90%AF%E4%B8%8E%E6%90%AD%E5%BB%BAFTP%E6%9C%8D%E5%8A%A1%E5%99%A8-%E8%AF%A6%E7%BB%86%E5%9B%BE%E6%96%87%E7%89%88/"/>
    <id>https://plutoacharon.github.io/2020/01/16/Win10开启与搭建FTP服务器-详细图文版/</id>
    <published>2020-01-16T12:46:19.000Z</published>
    <updated>2020-01-16T12:46:27.641Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Win10搭建FTP服务器"><a href="#Win10搭建FTP服务器" class="headerlink" title="Win10搭建FTP服务器"></a>Win10搭建FTP服务器</h2><p>记一次在win10上搭建FTP服务器的过程</p><h3 id="1-开启FTP服务"><a href="#1-开启FTP服务" class="headerlink" title="1. 开启FTP服务"></a>1. 开启FTP服务</h3><p>打开控制面板选中<code>程序</code>,打开<code>启用或关闭Windows功能</code><br><img src="https://img-blog.csdnimg.cn/20200103110220647.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="2-IIS配置"><a href="#2-IIS配置" class="headerlink" title="2. IIS配置"></a>2. IIS配置</h3><p><code>windows+q</code>键搜索IIS<br><img src="https://img-blog.csdnimg.cn/20200103110540445.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>右键网站,添加FTP站点<br><img src="https://img-blog.csdnimg.cn/20200103110714691.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>输入站点信息<br><img src="https://img-blog.csdnimg.cn/20200103110812383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>输入本机IP地址,注意SSL选中<code>无SSL的选项</code><br><img src="https://img-blog.csdnimg.cn/20200103110842377.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200103110854784.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="3-防火墙设置"><a href="#3-防火墙设置" class="headerlink" title="3. 防火墙设置"></a>3. 防火墙设置</h3><p>在控制面板中打开防火墙,选中箭头选项<br><img src="https://img-blog.csdnimg.cn/20200103111025820.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>允许应用通过Windows Defender 防火墙进行通信<br><img src="https://img-blog.csdnimg.cn/20200103111258214.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>允许其他应用<br><img src="https://img-blog.csdnimg.cn/20200103111228410.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200103111205262.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="4-查看是否成功"><a href="#4-查看是否成功" class="headerlink" title="4. 查看是否成功"></a>4. 查看是否成功</h3><p><img src="https://img-blog.csdnimg.cn/20200103112208444.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Win10搭建FTP服务器&quot;&gt;&lt;a href=&quot;#Win10搭建FTP服务器&quot; class=&quot;headerlink&quot; title=&quot;Win10搭建FTP服务器&quot;&gt;&lt;/a&gt;Win10搭建FTP服务器&lt;/h2&gt;&lt;p&gt;记一次在win10上搭建FTP服务器的过程&lt;/p&gt;

      
    
    </summary>
    
      <category term="其他" scheme="https://plutoacharon.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>Windows 10上用AutoHotkey实现快速隐藏/显示桌面图标与切换虚拟桌面</title>
    <link href="https://plutoacharon.github.io/2020/01/16/Windows-10%E4%B8%8A%E7%94%A8AutoHotkey%E5%AE%9E%E7%8E%B0%E5%BF%AB%E9%80%9F%E9%9A%90%E8%97%8F-%E6%98%BE%E7%A4%BA%E6%A1%8C%E9%9D%A2%E5%9B%BE%E6%A0%87%E4%B8%8E%E5%88%87%E6%8D%A2%E8%99%9A%E6%8B%9F%E6%A1%8C%E9%9D%A2/"/>
    <id>https://plutoacharon.github.io/2020/01/16/Windows-10上用AutoHotkey实现快速隐藏-显示桌面图标与切换虚拟桌面/</id>
    <published>2020-01-16T12:45:27.000Z</published>
    <updated>2020-01-16T12:45:59.059Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20191228145237378.png" alt="在这里插入图片描述"><br>当你想用多个桌面的时候需要按<code>ctrl+Windows+左右键</code> 觉得很麻烦怎么办?</p><h2 id="下载-AutoHotkey"><a href="#下载-AutoHotkey" class="headerlink" title="下载 AutoHotkey"></a>下载 AutoHotkey</h2><p>编辑脚本 添加以下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">~LControl &amp; WheelUp::</span><br><span class="line">Send &#123;LWin Down&#125;&#123;Ctrl Down&#125;&#123;Left&#125;&#123;Ctrl Up&#125;&#123;LWin Up&#125;</span><br><span class="line">return</span><br><span class="line">~LControl &amp; WheelDown::</span><br><span class="line">Send &#123;LWin Down&#125;&#123;Ctrl Down&#125;&#123;Right&#125;&#123;Ctrl Up&#125;&#123;LWin Up&#125;</span><br><span class="line">return</span><br></pre></td></tr></table></figure></p><p>这样<code>左Ctrl+鼠标滚轮</code>即可实现<code>切换桌面</code></p><h2 id="快速隐藏桌面图标"><a href="#快速隐藏桌面图标" class="headerlink" title="快速隐藏桌面图标"></a>快速隐藏桌面图标</h2><p>添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">!q::</span><br><span class="line">HideOrShowDesktopIcons()</span><br><span class="line">return</span><br><span class="line"> </span><br><span class="line">HideOrShowDesktopIcons()</span><br><span class="line">&#123;</span><br><span class="line">ControlGet, class, Hwnd,, SysListView321, ahk_class Progman</span><br><span class="line">If class =</span><br><span class="line">ControlGet, class, Hwnd,, SysListView321, ahk_class WorkerW</span><br><span class="line"> </span><br><span class="line">If DllCall(&quot;IsWindowVisible&quot;, UInt,class)</span><br><span class="line">WinHide, ahk_id %class%</span><br><span class="line">Else</span><br><span class="line">WinShow, ahk_id %class%</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>alt+q</code> 实现快速隐藏图标</p><h2 id="如何创建脚本"><a href="#如何创建脚本" class="headerlink" title="如何创建脚本"></a>如何创建脚本</h2><p><img src="https://img-blog.csdnimg.cn/20191228145756148.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#NoEnv  ; Recommended for performance and compatibility with future AutoHotkey releases.</span><br><span class="line">; #Warn  ; Enable warnings to assist with detecting common errors.</span><br><span class="line">SendMode Input  ; Recommended for new scripts due to its superior speed and reliability.</span><br><span class="line">SetWorkingDir %A_ScriptDir%  ; Ensures a consistent starting directory.</span><br><span class="line"></span><br><span class="line">~LControl &amp; WheelUp::</span><br><span class="line">Send &#123;LWin Down&#125;&#123;Ctrl Down&#125;&#123;Left&#125;&#123;Ctrl Up&#125;&#123;LWin Up&#125;</span><br><span class="line">return</span><br><span class="line">~LControl &amp; WheelDown::</span><br><span class="line">Send &#123;LWin Down&#125;&#123;Ctrl Down&#125;&#123;Right&#125;&#123;Ctrl Up&#125;&#123;LWin Up&#125;</span><br><span class="line">return</span><br><span class="line"></span><br><span class="line">!q::</span><br><span class="line">HideOrShowDesktopIcons()</span><br><span class="line">return</span><br><span class="line"> </span><br><span class="line">HideOrShowDesktopIcons()</span><br><span class="line">&#123;</span><br><span class="line">ControlGet, class, Hwnd,, SysListView321, ahk_class Progman</span><br><span class="line">If class =</span><br><span class="line">ControlGet, class, Hwnd,, SysListView321, ahk_class WorkerW</span><br><span class="line"> </span><br><span class="line">If DllCall(&quot;IsWindowVisible&quot;, UInt,class)</span><br><span class="line">WinHide, ahk_id %class%</span><br><span class="line">Else</span><br><span class="line">WinShow, ahk_id %class%</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加以上内容 功能可全部实现</p><p>将脚本添加到启动中可以开机自启.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191228145237378.png&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;br&gt;当你想用多个桌面的时候需要按&lt;code&gt;ctrl+Windows+左右键&lt;/code&gt; 觉得很麻烦怎么办?&lt;/p
      
    
    </summary>
    
      <category term="其他" scheme="https://plutoacharon.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>Centos7搭建Hadoop3.1.3完全分布模式</title>
    <link href="https://plutoacharon.github.io/2020/01/16/Centos7%E6%90%AD%E5%BB%BAHadoop3-1-3%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E6%A8%A1%E5%BC%8F/"/>
    <id>https://plutoacharon.github.io/2020/01/16/Centos7搭建Hadoop3-1-3完全分布模式/</id>
    <published>2020-01-16T12:44:43.000Z</published>
    <updated>2020-01-16T12:45:07.881Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>详细搭建可以参考我的<a href="https://blog.csdn.net/qq_43442524/article/details/100077126" target="_blank" rel="noopener">Hadoop2.8.0安装</a></p></blockquote><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><blockquote><p>本文下载的是3.1.3版本的Hadoop</p></blockquote><p>关闭防火墙<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">setenforce 0</span><br></pre></td></tr></table></figure></p><h3 id="虚拟机的准备"><a href="#虚拟机的准备" class="headerlink" title="虚拟机的准备"></a>虚拟机的准备</h3><h4 id="安装3个虚拟机并实现ssh免密码的登录"><a href="#安装3个虚拟机并实现ssh免密码的登录" class="headerlink" title="安装3个虚拟机并实现ssh免密码的登录"></a>安装3个虚拟机并实现ssh免密码的登录</h4><p>安装3个centos7虚拟机</p><p>安装3个机器，机器分别叫<code>master slave1 slave2</code></p><p>在<code>/etc/hostname</code>下修改主机名</p><p><img src="https://img-blog.csdnimg.cn/20191216171411886.png" alt="在这里插入图片描述"><br>其他两台也是一样</p><h4 id="修改主机映射"><a href="#修改主机映射" class="headerlink" title="修改主机映射"></a>修改主机映射</h4><p>修改/etc/hosts文件</p><p>修改这3台机器的/etc/hosts文件，在文件中添加以下内容,如图：</p><p><img src="https://img-blog.csdnimg.cn/20191216171746447.png" alt="在这里插入图片描述"><br>说明：ip地址没必要和我的一样，这里只是做一个映射，只要映射是对的就可以，至于修改方法，vi vim 命令都可以。</p><p>配置成功后使用 ping 命令检查者3台机器是否相互ping的通，以master为例</p><p><img src="https://img-blog.csdnimg.cn/20191216171842487.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>使用该命令 在各个机器都尝试是否可以ping通,ping得通，说明机器是互联的，而且hosts配置也正确。</p></blockquote><h3 id="配置免密"><a href="#配置免密" class="headerlink" title="配置免密"></a>配置免密</h3><p>给3个机器生成秘钥文件</p><p>以master为例，执行命令，生成空字符串的秘钥（后面要使用公钥），命令是：</p><p><code>ssh-keygen -t rsa</code></p><p>使用相同的方法为slave1与slave2生成秘钥（命令相同，不用做任何修改）。</p><p>在master上创建authorized_keys文件</p><p>接下来要做的事情就是在3台机器的/root/.shh/目录下都存入一个内容相同的文件，文件名称叫authorized_keys，文件内容是我们刚才为3台机器生成的公钥。</p><p>为了方便，我下面的步骤是现在master上生成authorized_keys文件，然后把3台机器刚才生成的公钥加入到这个master的authorized_keys文件里，然后在将这个authorize_keys文件复制到slave1与slave2里。<br><img src="https://img-blog.csdnimg.cn/20191216173726954.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191216172534845.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h2><p>详细的<a href="https://plutoacharon.github.io/2019/07/31/Centos7%E4%B8%8B%E7%9A%84JDK%E5%AE%89%E8%A3%85/#more">JDK安装</a></p><p>创建java目录</p><p><code>mkdir /usr/local/jdk</code></p><p>下载jdk1.8版本，并将其解压到/usr/local/java目录下</p><p><code>tar -zxvf jdk-8u201-linux-x64.tar.gz -C /usr/local/jdk</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#JAVA</span><br><span class="line">JAVA_HOME=/usr/local/jdk/jdk1.8.0_201/   #自己解压后的jdk目录名称</span><br><span class="line">JRE_JOME=/usr/local/jdk/jdk1.8.0_201/jre</span><br><span class="line">CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib</span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</span><br><span class="line">export JAVA_HOME JRE_JOME CLASS_PATH PATH</span><br></pre></td></tr></table></figure><p>传输到其他节点<br><code>scp -r /usr/local/jdk/ root@slave1:/usr/local/</code><br><code>scp -r /usr/local/jdk/ root@slave2:/usr/local/</code></p><h2 id="安装Hadoop"><a href="#安装Hadoop" class="headerlink" title="安装Hadoop"></a>安装Hadoop</h2><p>解压缩Hadoop3.1.3到<code>cd /usr/local/hadoop/</code></p><h3 id="配置Hadoop3-1-1"><a href="#配置Hadoop3-1-1" class="headerlink" title="配置Hadoop3.1.1"></a>配置Hadoop3.1.1</h3><p>修改环境变量<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#hadoop environment</span><br><span class="line">export HADOOP_HOME=/usr/local/hadoop/hadoop-3.1.3</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/bin</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/sbin</span><br></pre></td></tr></table></figure></p><p><code>scp /etc/profile root@slave1:/etc/</code><br><code>scp /etc/profile root@slave2:/etc/</code></p><h4 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h4><pre><code>#在/usr/local/hadoop目录下创建目录cd /usr/local/hadoop/mkdir tmp     mkdir var  mkdir dfs  mkdir dfs/name  mkdir dfs/data  </code></pre><p><img src="https://img-blog.csdnimg.cn/2019121617435227.png" alt="在这里插入图片描述"></p><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>进入hadoop的配置文件目录下<br><code>cd /usr/local/hadoop/hadoop-3.1.3/etc/hadoop</code></p><p><strong>vi workers</strong></p><p>删除localhost<br>添加从节点主机名，例如我这里是：</p><pre><code>slave1slave2</code></pre><p><strong>hadoop-env.sh</strong></p><pre><code>在#  JAVA_HOME=/usr/java/testing hdfs dfs -ls后添加export JAVA_HOME=/usr/local/jdk/jdk1.8.0_201export HADOOP_HOME=/usr/local/hadoop/hadoop-3.1.3export HDFS_NAMENODE_USER=rootexport HDFS_DATANODE_USER=rootexport HDFS_SECONDARYNAMENODE_USER=rootexport YARN_RESOURCEMANAGER_USER=rootexport YARN_NODEMANAGER_USER=root</code></pre><p><strong>core-site.xml</strong></p><pre><code>&lt;configuration&gt;&lt;property&gt;&lt;name&gt;fs.defaultFS&lt;/name&gt;&lt;value&gt;hdfs://master:9000&lt;/value&gt;&lt;/property&gt;&lt;property&gt;&lt;name&gt;hadoop.tmp.dir&lt;/name&gt;&lt;value&gt;/usr/local/hadoop/tmp&lt;/value&gt;&lt;/property&gt;&lt;/configuration&gt;</code></pre><p><strong>hdfs-site.xml</strong></p><pre><code>&lt;configuration&gt;&lt;property&gt;   &lt;name&gt;dfs.name.dir&lt;/name&gt;   &lt;value&gt;/usr/local/hadoop/dfs/name&lt;/value&gt;   &lt;description&gt;Path on the local filesystem where theNameNode stores the namespace and transactions logs persistently.&lt;/description&gt;&lt;/property&gt;&lt;property&gt;   &lt;name&gt;dfs.data.dir&lt;/name&gt;   &lt;value&gt;/usr/local/hadoop/dfs/data&lt;/value&gt;   &lt;description&gt;Comma separated list of paths on the localfilesystem of a DataNode where it should store its blocks.&lt;/description&gt;&lt;/property&gt;&lt;property&gt;&lt;name&gt;dfs.namenode.http-address&lt;/name&gt;&lt;value&gt;master:50070&lt;/value&gt;&lt;/property&gt;&lt;property&gt;&lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;&lt;value&gt;master:50090&lt;/value&gt;&lt;/property&gt;&lt;property&gt;   &lt;name&gt;dfs.replication&lt;/name&gt;   &lt;value&gt;2&lt;/value&gt;&lt;/property&gt;&lt;property&gt;      &lt;name&gt;dfs.permissions&lt;/name&gt;      &lt;value&gt;false&lt;/value&gt;      &lt;description&gt;need not permissions&lt;/description&gt;&lt;/property&gt;&lt;/configuration&gt;</code></pre><p><strong>yarn-site.xml</strong></p><p>在命令行下输入如下命令，并将返回的地址复制，在配置下面的yarn-site.xml时会用到。</p><p><code>hadoop classpath</code></p><pre><code>&lt;property&gt;&lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;&lt;value&gt;master&lt;/value&gt;&lt;/property&gt;&lt;property&gt;&lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;&lt;value&gt;mapreduce_shuffle&lt;/value&gt;&lt;/property&gt;&lt;property&gt;&lt;name&gt;yarn.application.classpath&lt;/name&gt;&lt;value&gt;输入刚才返回的Hadoop classpath路径&lt;/value&gt;&lt;/property&gt;</code></pre><p><strong>mapred-site.xml</strong></p><pre><code>&lt;configuration&gt;&lt;property&gt;    &lt;name&gt;mapred.job.tracker&lt;/name&gt;    &lt;value&gt;master:49001&lt;/value&gt;&lt;/property&gt;&lt;property&gt;      &lt;name&gt;mapred.local.dir&lt;/name&gt;       &lt;value&gt;/usr/local/hadoop/var&lt;/value&gt;&lt;/property&gt;&lt;property&gt;       &lt;name&gt;mapreduce.framework.name&lt;/name&gt;       &lt;value&gt;yarn&lt;/value&gt;&lt;/property&gt;&lt;/configuration&gt;</code></pre><h3 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h3><p>使用scp命令将master下的目录复制到各个从节点的相应位置上<br><code>scp -r /usr/local/hadoop/ root@slave1:/usr/local/</code><br><code>scp -r /usr/local/hadoop/ root@slave2:/usr/local/</code></p><h2 id="Hadoop启动"><a href="#Hadoop启动" class="headerlink" title="Hadoop启动"></a>Hadoop启动</h2><h3 id="格式化节点"><a href="#格式化节点" class="headerlink" title="格式化节点"></a>格式化节点</h3><p>在master中运行下述命令，格式化节点</p><p><code>hadoop namenode -format</code></p><p>运行之后不报错，并在倒数第五六行有successfully即为格式化节点成功</p><p>运行以下命令，启动hadoop集群的服务</p><p>在sbin目录下运行<code>start-all.sh</code></p><p>在master上输入jps可以看到master下的节点</p><p><img src="https://img-blog.csdnimg.cn/20191216181318601.png" alt="在这里插入图片描述"><br>在浏览器输入<code>http://172.18.74.131:50070/</code>进入web模式</p><p><img src="https://img-blog.csdnimg.cn/20191216181354506.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="运行wordcount程序"><a href="#运行wordcount程序" class="headerlink" title="运行wordcount程序"></a>运行wordcount程序</h2><h3 id="hdfs上创建文件夹"><a href="#hdfs上创建文件夹" class="headerlink" title="hdfs上创建文件夹"></a>hdfs上创建文件夹</h3><p><code>hadoop fs -mkdir -p /data/input</code></p><h3 id="在本地创建一个wordcount-txt-并编辑"><a href="#在本地创建一个wordcount-txt-并编辑" class="headerlink" title="在本地创建一个wordcount.txt,并编辑"></a>在本地创建一个wordcount.txt,并编辑</h3><p>随便输入一些字符</p><h3 id="把本地的wordcount-txt文件上传到hdfs-并且查看是否存在"><a href="#把本地的wordcount-txt文件上传到hdfs-并且查看是否存在" class="headerlink" title="把本地的wordcount.txt文件上传到hdfs,并且查看是否存在"></a>把本地的wordcount.txt文件上传到hdfs,并且查看是否存在</h3><pre><code>hadoop fs -put wordcount.txt /data/inputhadoop fs -ls /data/input</code></pre><h3 id="运行share-hadoop-mapreduce-hadoop-mapreduce-examples-2-7-7-jar"><a href="#运行share-hadoop-mapreduce-hadoop-mapreduce-examples-2-7-7-jar" class="headerlink" title="运行share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.7.jar"></a>运行share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.7.jar</h3><p>在hadoop_home的目录下执命令：</p><p><code>hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.1.3.jar wordcount /data/input/wordcount.txt /data/out/my_wordcount</code></p><h3 id="查看hdfs的-data-output-my-wordcount-part-r-00000文件。"><a href="#查看hdfs的-data-output-my-wordcount-part-r-00000文件。" class="headerlink" title="查看hdfs的/data/output/my_wordcount/part-r-00000文件。"></a>查看hdfs的/data/output/my_wordcount/part-r-00000文件。</h3><p><code>hadoop fs -cat /data/out/my_wordcount/part-r-00000</code><br><img src="https://img-blog.csdnimg.cn/20191216182732665.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>统计字数成功!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;详细搭建可以参考我的&lt;a href=&quot;https://blog.csdn.net/qq_43442524/article/details/100077126&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hadoop2.8.0安装
      
    
    </summary>
    
      <category term="Hadoop" scheme="https://plutoacharon.github.io/categories/Hadoop/"/>
    
    
      <category term="Hadoop" scheme="https://plutoacharon.github.io/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>访问php 该网页无法正常运作 目前无法处理此请求</title>
    <link href="https://plutoacharon.github.io/2020/01/16/%E8%AE%BF%E9%97%AEphp-%E8%AF%A5%E7%BD%91%E9%A1%B5%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E8%BF%90%E4%BD%9C-%E7%9B%AE%E5%89%8D%E6%97%A0%E6%B3%95%E5%A4%84%E7%90%86%E6%AD%A4%E8%AF%B7%E6%B1%82/"/>
    <id>https://plutoacharon.github.io/2020/01/16/访问php-该网页无法正常运作-目前无法处理此请求/</id>
    <published>2020-01-16T12:40:13.000Z</published>
    <updated>2020-01-16T12:41:02.330Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20191208131710312.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>修改php.ini文件<br>文件在<code>/etc/php.ini</code></p><p>由于<code>php.ini</code>配置文件中错误显示关闭导致.<br>将下值由Off 变更为 On</p><pre><code>display_errors = Ondisplay_startup_errors = On</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191208131710312.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM
      
    
    </summary>
    
      <category term="Liunx" scheme="https://plutoacharon.github.io/categories/Liunx/"/>
    
    
      <category term="PHP" scheme="https://plutoacharon.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7 Failed to start LSB: Bring up/down解决方法</title>
    <link href="https://plutoacharon.github.io/2020/01/16/CentOS7-Failed-to-start-LSB-Bring-up-down%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://plutoacharon.github.io/2020/01/16/CentOS7-Failed-to-start-LSB-Bring-up-down解决方法/</id>
    <published>2020-01-16T12:39:27.000Z</published>
    <updated>2020-01-16T12:39:43.085Z</updated>
    
    <content type="html"><![CDATA[<h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><p><code>Failed to start LSB: Bring up/down networking.</code><br><img src="https://img-blog.csdnimg.cn/20191203164502888.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>分析原因可能是因为我虚拟机地址设为静态地址,然后通过此虚拟机克隆了两台虚拟机,猜测此时mac地址发生了冲突</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p><code>systemctl stop NetworkManager</code></p><p><code>systemctl disable NetworkManager</code></p><p><code>systemctl start network.service</code></p><p><img src="https://img-blog.csdnimg.cn/20191203164957586.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;报错&quot;&gt;&lt;a href=&quot;#报错&quot; class=&quot;headerlink&quot; title=&quot;报错&quot;&gt;&lt;/a&gt;报错&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Failed to start LSB: Bring up/down networking.&lt;/code&gt;&lt;br&gt;&lt;img sr
      
    
    </summary>
    
      <category term="Liunx" scheme="https://plutoacharon.github.io/categories/Liunx/"/>
    
    
      <category term="Liunx" scheme="https://plutoacharon.github.io/tags/Liunx/"/>
    
  </entry>
  
  <entry>
    <title>SparkSQL，加载文件，处理文件，存储文件</title>
    <link href="https://plutoacharon.github.io/2020/01/16/SparkSQL%EF%BC%8C%E5%8A%A0%E8%BD%BD%E6%96%87%E4%BB%B6%EF%BC%8C%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6%EF%BC%8C%E5%AD%98%E5%82%A8%E6%96%87%E4%BB%B6/"/>
    <id>https://plutoacharon.github.io/2020/01/16/SparkSQL，加载文件，处理文件，存储文件/</id>
    <published>2020-01-16T12:38:48.000Z</published>
    <updated>2020-01-16T12:39:12.620Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Spark SQL重要的是操作DataFrame，DataFrame本身提供了Save和Load的操作，</p><p>Load：可以创建DataFrame。</p><p>Save：把DataFrame中的数据保存到文件或者说用具体的格式来指明我们要读取的文件类型，以及用具体的格式来指出我们要输出的文件是什么类型。</p><p>Spark SQL执行基本操作时，内部结构流程图如下：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cuaXBpZXV2cmUuY29tL2RvYy9leHBlci8yMDgyMzBlNy05MWFkLTExZTktYmVlYi0wMDIxNWVjODkyZjQvaW1nLzAxLnBuZw?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>DataFrame本质是数据 + 数据的描述信息（结构元信息）。</p><p>所有的上述SQL及DataFrame操作最终都通过Catalyst翻译成Spark程序RDD操作代码。</p><p>Spark SQL前身是Shark，大量依赖Hive项目的jar包与功能，但在上面的扩展越来越难，因此出现了Spark SQL，它重写了分析器，执行器脱离了对Hive项目的大部分依赖，基本可以独立去运行，只用到Hive项目的两个地方：</p><p>（1）借用了Hive词汇分析的jar即HiveQL解析器</p><p>（2）借用了Hive的metastore和数据访问API即Hive Catalog</p><p>也就是说上图的左半部分的操作，全部用的是SparkSQL本身自带的内置SQL解析器解析SQL进行翻译，用到内置元数据信息(比如结构化文件中自带的结构元信息，RDD的schema中的结构元信息)右半部分则是走的Hive的HQL解析器，还有Hive元数据信息。因此左右两边的API调用的底层类会有不同。</p><p>SQLContext使用：</p><p>1.简单的解析器（Scala语言写的SQL解析器）比如：</p><p>（1）在半结构化的文件里面使用SQL查询时，是用这个解析器解析的。</p><p>（2）访问（半）结构化文件的时候，通过sqlContext使用schema，类生成DataFrame，然后DataFrame注册为表时，registerTempTable（注册临时表）然后从这个表里面进行查询时，即使用的简单的解析器。</p><p>simpleCatalog此对象中存放关系（表），比如我们指定的schema信息，类的信息，都是关系信息。</p><p>2.HiveContext使用：</p><p>（1）HiveQL解析器支持Hive的HQL语法，如只有通过HiveContext生成的DataFrame才能调用saveAsTable操作。</p><p>（2）hiveCatalog（存放数据库和表的元数据信息）</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>读取HDFS中/myspark6的goods_visit.json文件。</p><p><code>val df=sqlContext.read.json(&quot;hdfs://localhost:9000/myspark6/goods_visit.json&quot;)</code></p><p>6.查看goods_visit.json中的所有数据。</p><p><code>df.show()</code><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cuaXBpZXV2cmUuY29tL2RvYy9leHBlci8yMDgyMzBlNy05MWFkLTExZTktYmVlYi0wMDIxNWVjODkyZjQvaW1nLzAzLnBuZw?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>7.查看goods_visit.json的表结构。</p><p><code>df.printSchema()</code><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cuaXBpZXV2cmUuY29tL2RvYy9leHBlci8yMDgyMzBlNy05MWFkLTExZTktYmVlYi0wMDIxNWVjODkyZjQvaW1nLzA0LnBuZw?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>8.只查看商品ID(goods_id)。</p><p><code>df.select(&quot;goods_id&quot;).show()</code><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cuaXBpZXV2cmUuY29tL2RvYy9leHBlci8yMDgyMzBlNy05MWFkLTExZTktYmVlYi0wMDIxNWVjODkyZjQvaW1nLzA1LnBuZw?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>9.统计文件行数。</p><p><code>df.count</code><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cuaXBpZXV2cmUuY29tL2RvYy9leHBlci8yMDgyMzBlNy05MWFkLTExZTktYmVlYi0wMDIxNWVjODkyZjQvaW1nLzA2LnBuZw?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>10.条件查询，查询点击次数超过500商品。(show是返回字段和表数据，collect是返回集合)</p><p><code>df.filter(df(&quot;click_num&quot;)&gt;500).show</code><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cuaXBpZXV2cmUuY29tL2RvYy9leHBlci8yMDgyMzBlNy05MWFkLTExZTktYmVlYi0wMDIxNWVjODkyZjQvaW1nLzA3LnBuZw?x-oss-process=image/format,png" alt="在这里插入图片描述"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cuaXBpZXV2cmUuY29tL2RvYy9leHBlci8yMDgyMzBlNy05MWFkLTExZTktYmVlYi0wMDIxNWVjODkyZjQvaW1nLzA4LnBuZw?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><p>11.统计点击次数的最值、总和及平均数。</p><p><code>df.agg(max(&quot;click_num&quot;),sum(&quot;click_num&quot;),min(&quot;click_num&quot;),avg(&quot;click_num&quot;)).show</code><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cuaXBpZXV2cmUuY29tL2RvYy9leHBlci8yMDgyMzBlNy05MWFkLTExZTktYmVlYi0wMDIxNWVjODkyZjQvaW1nLzA5LnBuZw?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>12.过滤点击次数小于200的商品。</p><p><code>df.filter(df(&quot;click_num&quot;) &lt; 200).show()</code><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cuaXBpZXV2cmUuY29tL2RvYy9leHBlci8yMDgyMzBlNy05MWFkLTExZTktYmVlYi0wMDIxNWVjODkyZjQvaW1nLzEwLnBuZw?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>13.按点击次数进行分组统计。</p><p><code>df.groupBy(&quot;click_num&quot;).count().show()</code><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cuaXBpZXV2cmUuY29tL2RvYy9leHBlci8yMDgyMzBlNy05MWFkLTExZTktYmVlYi0wMDIxNWVjODkyZjQvaW1nLzExLnBuZw?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>14.读取goods_visit.json文件，保存为parquet格式。</p><pre><code>val df = sqlContext.read.format(&quot;json&quot;).load(&quot;hdfs://localhost:9000/myspark6/goods_visit.json&quot;)  df.select(&quot;goods_id&quot;, &quot;click_num&quot;).write.format(&quot;parquet&quot;).save(&quot;goods_visit.parquet&quot;)  </code></pre><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cuaXBpZXV2cmUuY29tL2RvYy9leHBlci8yMDgyMzBlNy05MWFkLTExZTktYmVlYi0wMDIxNWVjODkyZjQvaW1nLzEyLnBuZw?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>15.查看保存的goods_visit.parquet文件。</p><p><code>hadoop fs -ls /user/zhangyu</code><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cuaXBpZXV2cmUuY29tL2RvYy9leHBlci8yMDgyMzBlNy05MWFkLTExZTktYmVlYi0wMDIxNWVjODkyZjQvaW1nLzEzLnBuZw?x-oss-process=image/format,png" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Spark SQL重要的是操作DataFrame，DataFrame本身提供了Save和Load的操作，&lt;/p&gt;
&lt;p&gt;Load：可以创建D
      
    
    </summary>
    
      <category term="Spark" scheme="https://plutoacharon.github.io/categories/Spark/"/>
    
    
      <category term="Spark" scheme="https://plutoacharon.github.io/tags/Spark/"/>
    
  </entry>
  
  <entry>
    <title>SparkSQL，创建表，查询数据</title>
    <link href="https://plutoacharon.github.io/2020/01/16/SparkSQL%EF%BC%8C%E5%88%9B%E5%BB%BA%E8%A1%A8%EF%BC%8C%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE/"/>
    <id>https://plutoacharon.github.io/2020/01/16/SparkSQL，创建表，查询数据/</id>
    <published>2020-01-16T12:35:52.000Z</published>
    <updated>2020-01-16T12:36:13.479Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Spark SQL的前身是Shark，Shark是伯克利实验室Spark生态环境的组件之一，它能运行在Spark引擎上，从而使得SQL查询的速度得到10-100倍的提升，但是，随着Spark的发展，由于Shark对于Hive的太多依赖（如采用Hive的语法解析器、查询优化器等等），制约了Spark的One Stack Rule Them All的既定方针，制约了Spark各个组件的相互集成，所以提出了SparkSQL项目。</p><p>SparkSQL抛弃了原有Shark的代码，汲取了Shark的一些优点，如内存列存储（In-MemoryColumnarStorage）、Hive兼容性等，重新开发了SparkSQL代码；由于摆脱了对Hive的依赖性，SparkSQL无论在数据兼容、性能优化、组件扩展方面都得到了极大的方便。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cuaXBpZXV2cmUuY29tL2RvYy9leHBlci8yMDc2OWZhMy05MWFkLTExZTktYmVlYi0wMDIxNWVjODkyZjQvaW1nLzAxLnBuZw?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><p>SQLContext具体的执行过程如下：</p><pre><code>（1）SQL | HQL语句经过SqlParse解析成UnresolvedLogicalPlan。（2）使用analyzer结合数据字典（catalog）进行绑定，生成resolvedLogicalPlan，在这个过程中，Catalog提取出SchemRDD，并注册类似case class的对象，然后把表注册进内存中。（3）Analyzed Logical Plan经过Catalyst Optimizer优化器优化处理后，生成Optimized Logical Plan，该过程完成以后，以下的部分在Spark core中完成。（4）Optimized Logical Plan的结果交给SparkPlanner，然后SparkPlanner处理后交给PhysicalPlan，经过该过程后生成Spark Plan。（5）使用SparkPlan将LogicalPlan转换成PhysicalPlan。（6）使用prepareForExecution()将PhysicalPlan转换成可执行物理计划。（7）使用execute()执行可执行物理计划。（8）生成DataFrame。</code></pre><p>在整个运行过程中涉及到多个SparkSQL的组件，如SqlParse、analyzer、optimizer、SparkPlan等等</p><p>某电商平台，需要对订单数据进行分析，已知订单数据包括两个文件，分别为订单数据orders和订单明细数据order_items，orders记录了用户购买商品的订单ID，订单号，用户ID及下单日期。order_items记录了商品ID，订单ID以及明细ID。它们的结构与关系如下图所示：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cuaXBpZXV2cmUuY29tL2RvYy9leHBlci8yMDc2OWZhMy05MWFkLTExZTktYmVlYi0wMDIxNWVjODkyZjQvaW1nLzAyLnBuZw?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><pre><code>orders表：（order_id,order_number,buyer_id,create_dt）订单ID   订单号          用户ID    下单日期  52304    111215052630    176474    2011-12-15 04:58:21  52303    111215052629    178350    2011-12-15 04:45:31  52302    111215052628    172296    2011-12-15 03:12:23  52301    111215052627    178348    2011-12-15 02:37:32  52300    111215052626    174893    2011-12-15 02:18:56  52299    111215052625    169471    2011-12-15 01:33:46  52298    111215052624    178345    2011-12-15 01:04:41  52297    111215052623    176369    2011-12-15 01:02:20  52296    111215052622    178343    2011-12-15 00:38:02  52295    111215052621    178342    2011-12-15 00:18:43  order_items表：（item_id,order_id,goods_id ）明细ID  订单ID   商品ID  252578    52293    1016840  252579    52293    1014040  252580    52294    1014200  252581    52294    1001012  252582    52294    1022245  252583    52294    1014724  252584    52294    1010731  252586    52295    1023399  252587    52295    1016840  252592    52296    1021134  252593    52296    1021133  252585    52295    1021840  252588    52295    1014040  252589    52296    1014040  252590    52296    1019043  </code></pre><p>创建orders表和order_items表，并统计该电商网站都有哪些用户购买了什么商品。</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>在spark-shell下，使用case class方式定义RDD，创建orders表</p><pre><code>val sqlContext = new org.apache.spark.sql.SQLContext(sc)  import sqlContext.implicits._  case class Orders(order_id:String,order_number:String,buyer_id:String,create_dt:String)  val dforders = sc.textFile(&quot;/myspark5/orders&quot;).map(_.split(&apos;\t&apos;)).map(line=&gt;Orders(line(0),line(1),line(2),line(3))).toDF()  dforders.registerTempTable(&quot;orders&quot;)  </code></pre><p>验证创建的表是否成功。</p><pre><code>sqlContext.sql(&quot;show tables&quot;).map(t=&gt;&quot;tableName is:&quot;+t(0)).collect().foreach(println)  sqlContext.sql(&quot;select order_id,buyer_id from orders&quot;).collect  </code></pre><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cuaXBpZXV2cmUuY29tL2RvYy9leHBlci8yMDc2OWZhMy05MWFkLTExZTktYmVlYi0wMDIxNWVjODkyZjQvaW1nLzA0LnBuZw?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><p>在Spark Shell下，使用applyScheme方式定义RDD，创建order_items表。</p><pre><code>import org.apache.spark.sql._  import org.apache.spark.sql.types._  val rddorder_items = sc.textFile(&quot;/myspark5/order_items&quot;)  val roworder_items = rddorder_items.map(_.split(&quot;\t&quot;)).map( p=&gt;Row(p(0),p(1),p(2) ) )  val schemaorder_items = &quot;item_id order_id goods_id&quot;  val schema = StructType(schemaorder_items.split(&quot; &quot;).map(fieldName=&gt;StructField(fieldName,StringType,true)) )  val dforder_items = sqlContext.applySchema(roworder_items, schema)  dforder_items.registerTempTable(&quot;order_items&quot;)  </code></pre><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cuaXBpZXV2cmUuY29tL2RvYy9leHBlci8yMDc2OWZhMy05MWFkLTExZTktYmVlYi0wMDIxNWVjODkyZjQvaW1nLzA1LnBuZw?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>验证创建表是否成功</p><pre><code>sqlContext.sql(&quot;show tables&quot;).map(t=&gt;&quot;tableName is:&quot;+t(0)).collect().foreach(println)  sqlContext.sql(&quot;select order_id,goods_id from order_items &quot;).collect  </code></pre><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cuaXBpZXV2cmUuY29tL2RvYy9leHBlci8yMDc2OWZhMy05MWFkLTExZTktYmVlYi0wMDIxNWVjODkyZjQvaW1nLzA2LnBuZw?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><p>将order表及order_items表进行join操作，统计该电商网站，都有哪些用户购买了什么商品</p><pre><code>sqlContext.sql(&quot;select orders.buyer_id, order_items.goods_id from order_items  join orders on order_items.order_id=orders.order_id &quot;).collect</code></pre><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cuaXBpZXV2cmUuY29tL2RvYy9leHBlci8yMDc2OWZhMy05MWFkLTExZTktYmVlYi0wMDIxNWVjODkyZjQvaW1nLzA3LnBuZw?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><h2 id="Spark-SQL"><a href="#Spark-SQL" class="headerlink" title="Spark SQL"></a>Spark SQL</h2><p><code>spark-sql</code></p><p>创建表orders及表order_items。</p><pre><code>create table orders (order_id string,order_number string,buyer_id string,create_dt string)  row format delimited fields terminated by &apos;\t&apos;  stored as textfile;  create table order_items(item_id string,order_id string,goods_id string)  row format delimited fields terminated by &apos;\t&apos;  stored as textfile;  </code></pre><p>查看已创建的表。</p><pre><code>show tables;  </code></pre><p>表名后的false意思是该表不是临时表。</p><p>将HDFS中/myspark5下的orders表和order_items表中数据加载进刚创建的两个表中。</p><pre><code>load data inpath &apos;/myspark5/orders&apos; into table orders;  load data inpath &apos;/myspark5/order_items&apos; into table order_items;  </code></pre><p>14.验证数据是否加载成功。</p><pre><code>select * from orders;  select * from order_items;  </code></pre><p>15.处理文件，将order表及order_items表进行join操作，统计该电商网站，都有哪些用户购买了什么商品。</p><pre><code>select orders.buyer_id, order_items.goods_id from order_items join orders</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Spark SQL的前身是Shark，Shark是伯克利实验室Spark生态环境的组件之一，它能运行在Spark引擎上，从而使得SQL查询的
      
    
    </summary>
    
      <category term="Spark" scheme="https://plutoacharon.github.io/categories/Spark/"/>
    
    
      <category term="Spark" scheme="https://plutoacharon.github.io/tags/Spark/"/>
    
  </entry>
  
  <entry>
    <title>Spark Shell操作</title>
    <link href="https://plutoacharon.github.io/2019/11/28/Spark-Shell%E6%93%8D%E4%BD%9C/"/>
    <id>https://plutoacharon.github.io/2019/11/28/Spark-Shell操作/</id>
    <published>2019-11-28T09:39:32.000Z</published>
    <updated>2019-11-28T09:39:58.020Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spark-简介"><a href="#Spark-简介" class="headerlink" title="Spark 简介"></a>Spark 简介</h2><p>Spark shell是一个特别适合快速开发Spark程序的工具。即使你对Scala不熟悉，仍然可以使用这个工具快速应用Scala操作Spark。</p><p>Spark shell使得用户可以和Spark集群交互，提交查询，这便于调试，也便于初学者使用Spark。</p><p>Spark shell是非常方便的，因为它很大程度上基于Scala REPL(Scala交互式shell，即Scala解释器)，并继承了Scala REPL(读取-求值-打印-循环)(Read-Evaluate-Print-Loop)的所有功能。运行spark-shell，则会运行spark-submit，spark-shell其实是对spark-submit的一层封装。</p><p>下面是Spark shell的运行原理图<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cuaXBpZXV2cmUuY29tL2RvYy9leHBlci8yMDVkMTIxYS05MWFkLTExZTktYmVlYi0wMDIxNWVjODkyZjQvaW1nLzAxLnBuZw?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><h3 id="RDD"><a href="#RDD" class="headerlink" title="RDD"></a>RDD</h3><p>RDD有两种类型的操作 ，分别是Transformation（返回一个新的RDD）和Action（返回values）。</p><p>1.Transformation：根据已有RDD创建新的RDD数据集build</p><p>（1）map(func)：对调用map的RDD数据集中的每个element都使用func，然后返回一个新的RDD，这个返回的数据集是分布式的数据集。</p><p>（2）filter(func) ：对调用filter的RDD数据集中的每个元素都使用func，然后返回一个包含使func为true的元素构成的RDD。</p><p>（3）flatMap(func)：和map很像，但是flatMap生成的是多个结果。</p><p>（4）mapPartitions(func)：和map很像，但是map是每个element，而mapPartitions是每个partition。</p><p>（5）mapPartitionsWithSplit(func)：和mapPartitions很像，但是func作用的是其中一个split上，所以func中应该有index。</p><p>（6）sample(withReplacement,faction,seed)：抽样。</p><p>（7）union(otherDataset)：返回一个新的dataset，包含源dataset和给定dataset的元素的集合。</p><p>（8）distinct([numTasks])：返回一个新的dataset，这个dataset含有的是源dataset中的distinct的element。</p><p>（9）groupByKey(numTasks)：返回(K,Seq[V])，也就是Hadoop中reduce函数接受的key-valuelist。</p><p>（10）reduceByKey(func,[numTasks])：就是用一个给定的reduce func再作用在groupByKey产生的(K,Seq[V])，比如求和，求平均数。</p><p>（11）sortByKey([ascending],[numTasks])：按照key来进行排序，是升序还是降序，ascending是boolean类型。</p><h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><p>Action：在RDD数据集运行计算后，返回一个值或者将结果写入外部存储</p><p>（1）reduce(func)：就是聚集，但是传入的函数是两个参数输入返回一个值，这个函数必须是满足交换律和结合律的。</p><p>（2）collect()：一般在filter或者足够小的结果的时候，再用collect封装返回一个数组。</p><p>（3）count()：返回的是dataset中的element的个数。</p><p>（4）first()：返回的是dataset中的第一个元素。</p><p>（5）take(n)：返回前n个elements。</p><p>（6）takeSample(withReplacement，num，seed)：抽样返回一个dataset中的num个元素，随机种子seed。</p><p>（7）saveAsTextFile（path）：把dataset写到一个textfile中，或者HDFS，或者HDFS支持的文件系统中，Spark把每条记录都转换为一行记录，然后写到file中。</p><p>（8）saveAsSequenceFile(path)：只能用在key-value对上，然后生成SequenceFile写到本地或者Hadoop文件系统。</p><p>（9）countByKey()：返回的是key对应的个数的一个map，作用于一个RDD。</p><p>（10）foreach(func)：对dataset中的每个元素都使用func。</p><h3 id="数据说明"><a href="#数据说明" class="headerlink" title="数据说明"></a>数据说明</h3><p>某电商网站记录了大量的用户对商品的收藏数据，并将数据存储在名为buyer_favorite的文本文件中。文本数据格式如下：</p><pre><code>用户id（buyer_id），商品id（goods_id），收藏日期（dt）用户id   商品id    收藏日期  10181   1000481   2010-04-04 16:54:31  20001   1001597   2010-04-07 15:07:52  20001   1001560   2010-04-07 15:08:27  20042   1001368   2010-04-08 08:20:30  20067   1002061   2010-04-08 16:45:33  20056   1003289   2010-04-12 10:50:55  20056   1003290   2010-04-12 11:57:35  20056   1003292   2010-04-12 12:05:29  20054   1002420   2010-04-14 15:24:12  20055   1001679   2010-04-14 19:46:04  20054   1010675   2010-04-14 15:23:53  20054   1002429   2010-04-14 17:52:45  20076   1002427   2010-04-14 19:35:39  20054   1003326   2010-04-20 12:54:44  20056   1002420   2010-04-15 11:24:49  20064   1002422   2010-04-15 11:35:54  20056   1003066   2010-04-15 11:43:01  20056   1003055   2010-04-15 11:43:06  20056   1010183   2010-04-15 11:45:24  20056   1002422   2010-04-15 11:45:49  20056   1003100   2010-04-15 11:45:54  20056   1003094   2010-04-15 11:45:57  20056   1003064   2010-04-15 11:46:04  20056   1010178   2010-04-15 16:15:20  20076   1003101   2010-04-15 16:37:27  20076   1003103   2010-04-15 16:37:05  20076   1003100   2010-04-15 16:37:18  20076   1003066   2010-04-15 16:37:31  20054   1003103   2010-04-15 16:40:14  20054   1003100   2010-04-15 16:40:16  </code></pre><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>打开hadoop与spark集群,在命令行输入<code>spark-shell</code>打开sparkshell模式<br>将数据上传到hdfs中<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -mkdir -p /myspark3/wordcount  </span><br><span class="line">hadoop fs -put /data/spark3/wordcount/buyer_favorite /myspark3/wordcount</span><br></pre></td></tr></table></figure></p><h2 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h2><blockquote><p>要求统计用户收藏数据中，每个用户收藏商品数量<br>编写Scala语句，统计用户收藏数据中，每个用户收藏商品数量。</p></blockquote><p>先在spark-shell中，加载数据。<br><code>val rdd = sc.textFile(&quot;hdfs://localhost:9000/myspark3/wordcount/buyer_favorite&quot;);</code><br>执行统计并输出。<br><code>rdd.map(line=&gt; (line.split(&#39;\t&#39;)(0),1)).reduceByKey(_+_).collect</code><br><img src="https://img-blog.csdnimg.cn/2019112711495749.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>sc是在进入spark shell 时候创建一个spark content  就是spark上下文的意思，val 是scala语法中声明常量的方式，通过println我们可以看到读入的文件被处理成一个MappedRDD的对象 mapred相信学过hadoop的人都不会陌生，RDD是Resilient Distributed Datasets，是一种弹性分布式数据集。</p><h3 id="关于reduceByKey"><a href="#关于reduceByKey" class="headerlink" title="关于reduceByKey"></a>关于reduceByKey</h3><pre><code>reduceByKey(_ ++ _) is equivalent to reduceByKey((x,y)=&gt; x ++ y) reduceByKey takes two parameters, apply a function and returnsAt the first it crates a set and ++ just adds collections together, combining elements of both sets.For each key It keeps appending in the list. In your case of 1 as a key x will be List(2,3) and y will List (3,4) and ++ will add both as List (2,3,3,4)If you had another value like (1,4,5) then the x would be List(4,5) in this case and y should be List (2,3,3,4) and result would be List(2,3,3,4,4,5)</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Spark-简介&quot;&gt;&lt;a href=&quot;#Spark-简介&quot; class=&quot;headerlink&quot; title=&quot;Spark 简介&quot;&gt;&lt;/a&gt;Spark 简介&lt;/h2&gt;&lt;p&gt;Spark shell是一个特别适合快速开发Spark程序的工具。即使你对Scala不熟悉，
      
    
    </summary>
    
      <category term="Spark" scheme="https://plutoacharon.github.io/categories/Spark/"/>
    
    
      <category term="Spark" scheme="https://plutoacharon.github.io/tags/Spark/"/>
    
  </entry>
  
  <entry>
    <title>使用etree与xpath爬取Discuz论坛</title>
    <link href="https://plutoacharon.github.io/2019/11/28/%E4%BD%BF%E7%94%A8etree%E4%B8%8Expath%E7%88%AC%E5%8F%96Discuz%E8%AE%BA%E5%9D%9B/"/>
    <id>https://plutoacharon.github.io/2019/11/28/使用etree与xpath爬取Discuz论坛/</id>
    <published>2019-11-28T09:38:36.000Z</published>
    <updated>2019-11-28T09:39:13.930Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引入模块"><a href="#引入模块" class="headerlink" title="引入模块"></a>引入模块</h2><p>在pycharm中下载lxml库<br>通过<code>from lxml import etree</code>引入模块</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">url = <span class="string">"https://www.discuz.net/forum-developer-1.html"</span></span><br><span class="line">text = requests.get(url).text</span><br><span class="line">html = etree.HTML(text)</span><br><span class="line">context = etree.tostring(html).decode()</span><br><span class="line">print(html.xpath(<span class="string">'//div[@id="threadlist"]/div[2]/form/table/*'</span>))</span><br><span class="line">print(html.xpath(<span class="string">'//*[@id="threadlisttableid"]/*'</span>))</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191121113442809.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191121113510851.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里是通过xpath语法将论坛的所有<code>tbody</code>便签<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(html.xpath(<span class="string">'//tbody/tr/th/a[@class="s xst"]/text()'</span>))</span><br></pre></td></tr></table></figure></p><p><img src="https://img-blog.csdnimg.cn/20191121132004384.png" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;引入模块&quot;&gt;&lt;a href=&quot;#引入模块&quot; class=&quot;headerlink&quot; title=&quot;引入模块&quot;&gt;&lt;/a&gt;引入模块&lt;/h2&gt;&lt;p&gt;在pycharm中下载lxml库&lt;br&gt;通过&lt;code&gt;from lxml import etree&lt;/code&gt;引入模块&lt;
      
    
    </summary>
    
      <category term="Python" scheme="https://plutoacharon.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://plutoacharon.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>WindowsServer2016 Anaconda下TensorFlow-GPU环境搭建详细教程（包含CUDA+cuDNN安装过程）</title>
    <link href="https://plutoacharon.github.io/2019/11/28/WindowsServer2016-Anaconda%E4%B8%8BTensorFlow-GPU%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B%EF%BC%88%E5%8C%85%E5%90%ABCUDA-cuDNN%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%EF%BC%89/"/>
    <id>https://plutoacharon.github.io/2019/11/28/WindowsServer2016-Anaconda下TensorFlow-GPU环境搭建详细教程（包含CUDA-cuDNN安装过程）/</id>
    <published>2019-11-28T09:37:25.000Z</published>
    <updated>2019-11-28T09:37:43.189Z</updated>
    
    <content type="html"><![CDATA[<p>记一次为GPU服务器搭建机器学习平台的操作</p><h2 id="安装Anaconda"><a href="#安装Anaconda" class="headerlink" title="安装Anaconda"></a>安装Anaconda</h2><p>去官网安装Anaconda</p><p>添加环境变量以后,创建TensorFlow环境<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvMTE5MjY5OS8yMDE4MDcvMTE5MjY5OS0yMDE4MDcwNTExNTAwMTgyMy0xNzkwNTQxMzc0LnBuZw?x-oss-process=image/format,png" alt><br>将以下三个路径加入，注意这里要换成你自己的安装路径。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\xxx\anaconda3</span><br><span class="line">C:\Users\xxx\anaconda3\Scripts</span><br><span class="line">C:\Users\xxx\anaconda3\Library\bin</span><br></pre></td></tr></table></figure></p><p><img src="https://img-blog.csdnimg.cn/20191112204305572.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="安装gpu版本的TensorFlow"><a href="#安装gpu版本的TensorFlow" class="headerlink" title="安装gpu版本的TensorFlow"></a>安装gpu版本的TensorFlow</h2><p>激活TensorFlow环境<br><code>activate tensorflow</code></p><blockquote><p>注意: 如果出现报错先运行<code>conda init</code>初始化,关闭cmd重新打开即可运行</p></blockquote><p><code>pip install tensorflow-gpu==1.10.0 -i https://pypi.tuna.tsinghua.edu.cn/simple</code><br>这样就安装成功了。<br><img src="https://img-blog.csdnimg.cn/20191116152559217.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>注意：务必注意一点，在安装完tensroflow后，由于我们是新创建的conda环境，该环境中基本上是空的，有很多包和IDE并没有安装进来，例如“Ipython”，“spyder”此时如果我们在该环境下打开spyder/Ipyton/jupyter notebook等，会发现其实IDE使用的kernel并不是新建立的这个环境的kernel，而是“base”这个环境的，而“base”环境中我们并没有安装tensorflow，所以一定无法import。这也就是为什么有很多人在安装好tensorflow后仍然在IDE里无法正常使用的原因了。</p><h3 id="安装anaconda基础环境"><a href="#安装anaconda基础环境" class="headerlink" title="安装anaconda基础环境:"></a>安装anaconda基础环境:</h3><p><code>conda install anaconda</code></p><h2 id="安装CUDA-Toolkit-cuDNN"><a href="#安装CUDA-Toolkit-cuDNN" class="headerlink" title="安装CUDA Toolkit + cuDNN"></a>安装CUDA Toolkit + cuDNN</h2><p>查看需要安装的CUDA+cuDNN版本<br>注意，tensorflow是在持续更新的，具体安装的CUDA和cuDNN版本需要去官网查看，要与最新版本的tensorflow匹配。</p><p>点击查看最新tensorflow支持的CUDA版本：<a href="https://www.tensorflow.org/install/install_windows#requirements_to_run_tensorflow_with_gpu_support" target="_blank" rel="noopener">https://www.tensorflow.org/install/install_windows#requirements_to_run_tensorflow_with_gpu_support</a></p><p>我这里安装的是<br><img src="https://img-blog.csdnimg.cn/20191116152410895.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191116152208322.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>下载之后，双击CUDA9.0，一路戳戳戳。</p><h3 id="CuDNN"><a href="#CuDNN" class="headerlink" title="CuDNN"></a>CuDNN</h3><p>进入 <a href="https://developer.nvidia.com/rdp/cudnn-archive" target="_blank" rel="noopener">https://developer.nvidia.com/rdp/cudnn-archive</a> ，选择对应的7.0版本下载即可。</p><p>将cuDNN解压。将解压出来的三个文件夹下面的文件放到对应的CUDA相同文件夹下<br><img src="https://img-blog.csdnimg.cn/20191116153101913.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>CUDA默认安装路径：C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.0</p><p>以上完成之后把以下四个路径加入到环境变量中：</p><pre><code>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.0\binC:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.0\libnvvpC:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.0\libC:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.0\include</code></pre><p><img src="https://img-blog.csdnimg.cn/20191116153320743.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>设置完环境变量后,输入<code>nvcc -V</code><br><img src="https://img-blog.csdnimg.cn/20191116154644569.png" alt="在这里插入图片描述"><br>成功!</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>如下图所示:<br><code>/device:GPU:0</code>即调用了GPU<br>如果返回为空,就是<code>only CPU</code><br><img src="https://img-blog.csdnimg.cn/20191116160245926.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>参考网站:</p><p><code>https://www.cnblogs.com/guoyaohua/p/9265268.html#%E7%AC%AC%E4%BA%8C%E6%AD%A5%E5%AE%89%E8%A3%85tensorflow-gpu</code></p><p><code>https://zhuanlan.zhihu.com/p/37157215</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;记一次为GPU服务器搭建机器学习平台的操作&lt;/p&gt;
&lt;h2 id=&quot;安装Anaconda&quot;&gt;&lt;a href=&quot;#安装Anaconda&quot; class=&quot;headerlink&quot; title=&quot;安装Anaconda&quot;&gt;&lt;/a&gt;安装Anaconda&lt;/h2&gt;&lt;p&gt;去官网安装Anac
      
    
    </summary>
    
      <category term="机器学习" scheme="https://plutoacharon.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="https://plutoacharon.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>WindowsServer 2016 最新激活方法</title>
    <link href="https://plutoacharon.github.io/2019/11/28/WindowsServer-2016-%E6%9C%80%E6%96%B0%E6%BF%80%E6%B4%BB%E6%96%B9%E6%B3%95/"/>
    <id>https://plutoacharon.github.io/2019/11/28/WindowsServer-2016-最新激活方法/</id>
    <published>2019-11-28T09:36:32.000Z</published>
    <updated>2019-11-28T09:36:48.988Z</updated>
    
    <content type="html"><![CDATA[<h2 id="命令行操作"><a href="#命令行操作" class="headerlink" title="命令行操作"></a>命令行操作</h2><p>用管理员身份打开<code>Powershall</code>,输入:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">slmgr.vbs -ipk W269N-WFGWX-YVC9B-4J6C9-T83GX</span><br><span class="line">slmgr.vbs -skms kms.srv.crsoo.com</span><br><span class="line">slmgr.vbs -ato</span><br></pre></td></tr></table></figure></p><h2 id="输入要激活的系统秘钥"><a href="#输入要激活的系统秘钥" class="headerlink" title="输入要激活的系统秘钥"></a>输入要激活的系统秘钥</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Windows Server 2016</span><br><span class="line">| Operating system edition | KMS Client Setup Key | | —————————————– | —————————– | | Windows Server 2016 Datacenter | CB7KF-BWN84-R7R2Y-793K2-8XDDG | | Windows Server 2016 Standard | WC2BQ-8NRM3-FDDYY-2BFGV-KHKQY | | Windows Server 2016 Essentials | JCKRF-N37P4-C2D82-9YXRT-4M63B |</span><br></pre></td></tr></table></figure><p>笔者这里是标准版:<br><code>Windows Server 2016 Standard | WC2BQ-8NRM3-FDDYY-2BFGV-KHKQY</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;命令行操作&quot;&gt;&lt;a href=&quot;#命令行操作&quot; class=&quot;headerlink&quot; title=&quot;命令行操作&quot;&gt;&lt;/a&gt;命令行操作&lt;/h2&gt;&lt;p&gt;用管理员身份打开&lt;code&gt;Powershall&lt;/code&gt;,输入:&lt;br&gt;&lt;figure class=&quot;high
      
    
    </summary>
    
      <category term="其他" scheme="https://plutoacharon.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu 18.04.2 LTS网络设置</title>
    <link href="https://plutoacharon.github.io/2019/11/28/Ubuntu-18-04-2-LTS%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE/"/>
    <id>https://plutoacharon.github.io/2019/11/28/Ubuntu-18-04-2-LTS网络设置/</id>
    <published>2019-11-28T09:35:37.000Z</published>
    <updated>2019-11-28T09:36:09.369Z</updated>
    
    <content type="html"><![CDATA[<h2 id="与Ubuntu16的对比"><a href="#与Ubuntu16的对比" class="headerlink" title="与Ubuntu16的对比"></a>与Ubuntu16的对比</h2><p>ubuntu16.04TLS的网络配置文件为/etc/network/interfaces，我们通过在该文件中写入配置对网卡进行IP设置。并且然后通过网卡的重启来加载该配置</p><p>ubuntu18.04TLS中，其引入了一个新的工具netplan来进行网络设备的管理，对其进行设置。</p><p>netplan的配置文件位于/etc/netplan文件夹下面</p><h2 id="对Ubuntu-18-04的网络配置"><a href="#对Ubuntu-18-04的网络配置" class="headerlink" title="对Ubuntu 18.04的网络配置"></a>对Ubuntu 18.04的网络配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cuda@cuda1:~$ <span class="built_in">cd</span> /etc/netplan/</span><br><span class="line">cuda@cuda1:/etc/netplan$ ls</span><br><span class="line">50-cloud-init.yaml</span><br><span class="line">cuda@cuda1:/etc/netplan$</span><br></pre></td></tr></table></figure><p>可以看到在<code>/etc/netplan</code>下有个yaml文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">cuda@cuda1:~$ cat /etc/netplan/50-cloud-init.yaml </span><br><span class="line"><span class="comment"># This file is generated from information provided by</span></span><br><span class="line"><span class="comment"># the datasource.  Changes to it will not persist across an instance.</span></span><br><span class="line"><span class="comment"># To disable cloud-init's network configuration capabilities, write a file</span></span><br><span class="line"><span class="comment"># /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg with the following:</span></span><br><span class="line"><span class="comment"># network: &#123;config: disabled&#125;</span></span><br><span class="line">network:</span><br><span class="line">    ethernets: <span class="comment">#配置的网卡名称,使用ifconfig -a查看得到,且必须是空格缩进，netplan只认空格</span></span><br><span class="line">        eno1:</span><br><span class="line">            addresses: []</span><br><span class="line">            </span><br><span class="line">            dhcp4: <span class="literal">true</span> dhcp4开启</span><br><span class="line">            optional: <span class="literal">true</span></span><br><span class="line">        eno2:</span><br><span class="line">            addresses: []</span><br><span class="line">              </span><br><span class="line">            dhcp4: <span class="literal">true</span></span><br><span class="line">            optional: <span class="literal">true</span></span><br><span class="line">    version: 2</span><br></pre></td></tr></table></figure><p>如果没有*.yaml后缀的文件，就运行如下命令创建一个（netplan会读取该目录下所有该后缀的文件）：</p><p><code>sudo netplan generate</code></p><h3 id="netplan"><a href="#netplan" class="headerlink" title="netplan"></a>netplan</h3><p>这里我开启了两张网卡</p><p>通过netplan更新配置</p><p><code>sudo netplan apply</code></p><p>通过ifconfig查看配置是否生效</p><p><code>ifconfig</code></p><p><img src="https://img-blog.csdnimg.cn/20191110104837846.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>分配成功</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;与Ubuntu16的对比&quot;&gt;&lt;a href=&quot;#与Ubuntu16的对比&quot; class=&quot;headerlink&quot; title=&quot;与Ubuntu16的对比&quot;&gt;&lt;/a&gt;与Ubuntu16的对比&lt;/h2&gt;&lt;p&gt;ubuntu16.04TLS的网络配置文件为/etc/net
      
    
    </summary>
    
      <category term="Liunx" scheme="https://plutoacharon.github.io/categories/Liunx/"/>
    
    
      <category term="Liunx" scheme="https://plutoacharon.github.io/tags/Liunx/"/>
    
  </entry>
  
  <entry>
    <title>华为服务器H22H-03的Windows Server2012安装</title>
    <link href="https://plutoacharon.github.io/2019/11/28/%E5%8D%8E%E4%B8%BA%E6%9C%8D%E5%8A%A1%E5%99%A8H22H-03%E7%9A%84Windows-Server2012%E5%AE%89%E8%A3%85/"/>
    <id>https://plutoacharon.github.io/2019/11/28/华为服务器H22H-03的Windows-Server2012安装/</id>
    <published>2019-11-28T09:34:13.000Z</published>
    <updated>2019-11-28T09:34:55.944Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>镜像可以从<code>MSDN</code>中下载</p><p>使用软碟通制作一个Windows Server2012的U盘启动器</p><h3 id="设置BIOS把USB设置第一启动"><a href="#设置BIOS把USB设置第一启动" class="headerlink" title="设置BIOS把USB设置第一启动"></a>设置BIOS把USB设置第一启动</h3><p>重启服务器,在启动页面的时候多按几次del键</p><p>华为服务器默认密码<code>Huawei12@#</code></p><p>设置第一启动项为USB设备</p><p>在“UEFI”或“Boot Device Priority”界面中选择“Others”并按“Enter”。</p><p>通过“F5”、“F6”将USB设备调整到列表的第一行</p><p>或者按’+’ -‘号将other选项调整到第一行</p><p>保存重新启动</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9wLnBzdGF0cC5jb20vb3JpZ2luL2ZlNzQwMDAwOGQ4ZWQxY2I4ZjMx?x-oss-process=image/format,png" alt></p><p><img src="https://img-blog.csdnimg.cn/20191110103844318.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="安装WindowsServer"><a href="#安装WindowsServer" class="headerlink" title="安装WindowsServer"></a>安装WindowsServer</h2><p>如果安装windows server 2008r2/2012r2时提示：无法在此驱动器上安装windows:</p><pre><code>因为服务器出厂一般默认都是bios引导，当你合并vd(虚拟磁盘)后，改用UEFI引导安装windows时会出现此错误，此时你可以使用“shift+F10”快捷键打开命令行窗口，执行以下命令清除之前BIOS引导时磁盘分区残留信息，命令如下：1:diskpart(启动diskpart程序)2:list disk(列出现有的磁盘，一般合并后为一个disk0)3:select disk 0(这里根据实际情况选择你要清除残留信息的磁盘)4:clean(清除所选磁盘的残留信息，注意所有的数据也将丢失)*特别注意：在做此操作前，有重要数据的一定要备份，此操作会将全盘格式化</code></pre><p>秘钥: <code>NB4WH-BBBYV-3MPPC-9RCMV-46XCB</code></p><blockquote><p>我这里安装的是标准版</p></blockquote><p><img src="https://img-blog.csdnimg.cn/2019111010390951.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191110103919785.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191110103928563.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前期准备&quot;&gt;&lt;a href=&quot;#前期准备&quot; class=&quot;headerlink&quot; title=&quot;前期准备&quot;&gt;&lt;/a&gt;前期准备&lt;/h2&gt;&lt;p&gt;镜像可以从&lt;code&gt;MSDN&lt;/code&gt;中下载&lt;/p&gt;
&lt;p&gt;使用软碟通制作一个Windows Server2012的U
      
    
    </summary>
    
      <category term="其他" scheme="https://plutoacharon.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>Hbase Java API接口</title>
    <link href="https://plutoacharon.github.io/2019/11/28/Hbase-Java-API%E6%8E%A5%E5%8F%A3/"/>
    <id>https://plutoacharon.github.io/2019/11/28/Hbase-Java-API接口/</id>
    <published>2019-11-28T09:32:15.000Z</published>
    <updated>2019-11-28T09:33:55.196Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><pre><code>Hadoop2.8.0Hbase-1.4.9Centos7.2</code></pre><h2 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.haohan.bigdata.hbase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.util.Bytes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHbaseAPI_1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过java代码访问java数据库</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建配置对象,获取hbase连接</span></span><br><span class="line">        Configuration conf = HBaseConfiguration.create();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 获取hbase连接对象</span></span><br><span class="line">        <span class="comment">// classLoader : Thread.currentThread.getContextClassLoader  获取资源配置文件</span></span><br><span class="line">        <span class="comment">// classpath   : hbase-default.xml, hbase-site.xml</span></span><br><span class="line"></span><br><span class="line">        Connection connection = ConnectionFactory.createConnection(conf);</span><br><span class="line">        System.out.println(connection);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 获取操作对象 : Admin</span></span><br><span class="line">        <span class="comment">// Admin admin = new HBaseAdmin(connection);</span></span><br><span class="line">        Admin admin = connection.getAdmin();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 操作数据库: 判断数据库中是否存在某张表</span></span><br><span class="line">        <span class="comment">// 4-1. 判断命名空间</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            NamespaceDescriptor namespace = admin.getNamespaceDescriptor(<span class="string">"test"</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NamespaceNotFoundException e) &#123;</span><br><span class="line">            NamespaceDescriptor nd = NamespaceDescriptor.create(<span class="string">"test"</span>).build();</span><br><span class="line"></span><br><span class="line">            admin.createNamespace(nd);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4-2. 判断hbase中是否存在某张表</span></span><br><span class="line">        TableName tableName = TableName.valueOf(<span class="string">"test:student"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> flg = admin.tableExists(tableName);</span><br><span class="line">        System.out.println(flg);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (flg) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取指定的表对象</span></span><br><span class="line">            Table table = connection.getTable(tableName);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 查询数据</span></span><br><span class="line">            <span class="comment">// DDL(create,drop, alter), DML(update, insert, delete), DQL(select)</span></span><br><span class="line">            String rowkey = <span class="string">"1001"</span>;</span><br><span class="line">            <span class="comment">// string ==&gt; byte[]</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 字符编码</span></span><br><span class="line">            Get get = <span class="keyword">new</span> Get(Bytes.toBytes(rowkey));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 查询结果</span></span><br><span class="line">            Result result = table.get(get);</span><br><span class="line">            <span class="keyword">boolean</span> empty = result.isEmpty();</span><br><span class="line">            System.out.println(<span class="string">"1001数据是否存在 = "</span> + !empty);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (empty) &#123;</span><br><span class="line">                <span class="comment">// 新增数据</span></span><br><span class="line">                Put put = <span class="keyword">new</span> Put(Bytes.toBytes(rowkey));</span><br><span class="line"></span><br><span class="line">                String family = <span class="string">"info"</span>;</span><br><span class="line">                String column = <span class="string">"name"</span>;</span><br><span class="line">                String val = <span class="string">"zhangsan"</span>;</span><br><span class="line"></span><br><span class="line">                put.addColumn(Bytes.toBytes(family), Bytes.toBytes(column), Bytes.toBytes(val));</span><br><span class="line"></span><br><span class="line">                table.put(put);</span><br><span class="line">                System.out.println(<span class="string">"增加数据"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 展示数据</span></span><br><span class="line">                <span class="keyword">for</span> (Cell cell : result.rawCells()) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 输出基本信息</span></span><br><span class="line">                    <span class="comment">// System.out.println("value = " + CellUtil.cloneValue(cell));</span></span><br><span class="line">                    <span class="comment">// value = [B@265adfad</span></span><br><span class="line"></span><br><span class="line">                    System.out.println(<span class="string">"value = "</span> + Bytes.toString(CellUtil.cloneValue(cell)));</span><br><span class="line">                    System.out.println(<span class="string">"raw = "</span> + Bytes.toString(CellUtil.cloneRow(cell)));</span><br><span class="line">                    System.out.println(<span class="string">"family = "</span> + Bytes.toString(CellUtil.cloneFamily(cell)));</span><br><span class="line">                    System.out.println(<span class="string">"column = "</span> + Bytes.toString(CellUtil.cloneQualifier(cell)));</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 创建表</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建表描述对象</span></span><br><span class="line">            HTableDescriptor td = <span class="keyword">new</span> HTableDescriptor(tableName);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 增加列族</span></span><br><span class="line">            HColumnDescriptor cd = <span class="keyword">new</span> HColumnDescriptor(<span class="string">"info"</span>);</span><br><span class="line">            td.addFamily(cd);</span><br><span class="line"></span><br><span class="line">            admin.createTable(td);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"表格创建成功"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="XML文件"><a href="#XML文件" class="headerlink" title="XML文件"></a>XML文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>pers.haohan.bigdata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hbasestudy<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>hbase_mr<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hbase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hbase-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hbase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hbase-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;实验环境&quot;&gt;&lt;a href=&quot;#实验环境&quot; class=&quot;headerlink&quot; title=&quot;实验环境&quot;&gt;&lt;/a&gt;实验环境&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;Hadoop2.8.0
Hbase-1.4.9
Centos7.2
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=
      
    
    </summary>
    
      <category term="Hadoop" scheme="https://plutoacharon.github.io/categories/Hadoop/"/>
    
    
      <category term="Hbase" scheme="https://plutoacharon.github.io/tags/Hbase/"/>
    
  </entry>
  
  <entry>
    <title>Hive java API接口</title>
    <link href="https://plutoacharon.github.io/2019/11/28/Hive-java-API%E6%8E%A5%E5%8F%A3/"/>
    <id>https://plutoacharon.github.io/2019/11/28/Hive-java-API接口/</id>
    <published>2019-11-28T09:31:30.000Z</published>
    <updated>2019-11-28T09:31:46.553Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><pre><code>Hadoop2.8.0Hbase-1.4.9Centos7.2</code></pre><h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>java_Hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java_Hadoop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>6<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>6<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-hdfs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-mapreduce-client-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-mapreduce-client-jobclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hive<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hive-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Hive;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Hdfs.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileStatus;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hive</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">    <span class="keyword">static</span>   &#123;</span><br><span class="line"></span><br><span class="line">        conf.set(<span class="string">"fs.defaultFS"</span>, <span class="string">"172.18.74.236:9000"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    FileSystem fs = FileSystem.get(conf);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 驱动，固定的</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driverName = <span class="string">"org.apache.hive.jdbc.HiveDriver"</span>;</span><br><span class="line">    <span class="comment">// 默认就是10000端口，ip地址使用hive服务器的</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url = <span class="string">"jdbc:hive2://172.18.74.236:10000/default"</span>;</span><br><span class="line">    <span class="comment">// hive连接的用户名和密码，默认就算是下面这两个</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String user = <span class="string">"root"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password = <span class="string">"输入你的密码"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String today = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>).format(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 公共使用的变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Connection conn = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hive</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载驱动、创建连接</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class.forName(driverName);</span><br><span class="line">        conn = DriverManager.getConnection(url,user,password);</span><br><span class="line">        stmt = conn.createStatement();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( rs != <span class="keyword">null</span>) &#123;</span><br><span class="line">            rs.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (stmt != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stmt.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">            conn.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//建立连接</span></span><br><span class="line">        init();</span><br><span class="line">        <span class="comment">//表名称</span></span><br><span class="line">        String Tablename = <span class="string">"Test"</span>;</span><br><span class="line">        <span class="comment">//文件路径</span></span><br><span class="line"></span><br><span class="line">        String localFilePath = <span class="string">"E:\\Data.txt"</span>;</span><br><span class="line">        String hdfsFilePath = <span class="string">"/Test"</span> +today.substring(<span class="number">0</span>,<span class="number">7</span>) + <span class="string">"/upload_date="</span> + today + <span class="string">"/"</span>;</span><br><span class="line">        File localfilepath = <span class="keyword">new</span> File(localFilePath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1.查看hdfs中所有目录</span></span><br><span class="line"><span class="comment">         * 2.创建文件夹</span></span><br><span class="line"><span class="comment">         * 3.将本地文件上传到hdfs中</span></span><br><span class="line"><span class="comment">         * 4.将hdfs的文件上传到hive表中</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"><span class="comment">//        HdfsTest.getDiretoryFromHdfs("/");</span></span><br><span class="line"><span class="comment">//        HdfsTest.mkdir(hdfsFilePath);</span></span><br><span class="line"><span class="comment">//        HdfsTest.uploadFile(localFilePath,hdfsFilePath);</span></span><br><span class="line"><span class="comment">//        HdfsTest.getDiretoryFromHdfs(hdfsFilePath);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        createTable(Tablename);</span></span><br><span class="line"><span class="comment">//        showTables();</span></span><br><span class="line"><span class="comment">//    loadData(hdfsFilePath+localfilepath.getName(),Tablename);</span></span><br><span class="line">        descTable(Tablename);</span><br><span class="line"></span><br><span class="line"><span class="comment">//    selectData();</span></span><br><span class="line"><span class="comment">//    countData();</span></span><br><span class="line"><span class="comment">//    dropTable();</span></span><br><span class="line">        destory();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建表</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createTable</span><span class="params">(String Tablename)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        stmt.execute(<span class="string">"drop table if exists "</span> + Tablename );</span><br><span class="line">        String sql = <span class="string">"create table "</span> + Tablename + <span class="string">" (id int, name string)"</span>;</span><br><span class="line">        stmt.execute(sql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询所有表</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showTables</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String sql = <span class="string">"show tables"</span>;</span><br><span class="line">        rs = stmt.executeQuery(sql);</span><br><span class="line">        <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">            System.out.println(rs.getString(<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查看表结构</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">descTable</span><span class="params">(String Tablename)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String sql = <span class="string">"desc "</span>+Tablename+<span class="string">""</span>;</span><br><span class="line">        rs = stmt.executeQuery(sql);</span><br><span class="line">        <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">            System.out.println(rs.getString(<span class="number">1</span>) + <span class="string">"\t"</span> + rs.getString(<span class="number">2</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadData</span><span class="params">(String filePath,String Tablename)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        String sql = <span class="string">"load data inpath '"</span> + filePath + <span class="string">"' into table "</span>+Tablename;</span><br><span class="line">        stmt.execute(sql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectData</span><span class="params">(String Tablename)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String sql = <span class="string">"select * from "</span>+Tablename+<span class="string">""</span>;</span><br><span class="line">        rs = stmt.executeQuery(sql);</span><br><span class="line">        <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">            System.out.println(rs.getString(<span class="string">"foo"</span>) + <span class="string">"\t\t"</span> + rs.getString(<span class="string">"bar"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除数据库表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dropTable</span><span class="params">(String Tablename)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String sql = <span class="string">"drop table if exists "</span>+ Tablename;</span><br><span class="line">        stmt.execute(sql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里跟HDFS接口有所依赖,可以参考我这篇文章<a href="https://plutoacharon.github.io/2019/08/31/HDFS%E6%96%87%E4%BB%B6%E6%8E%A5%E5%8F%A3/">HDFS接口</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;实验环境&quot;&gt;&lt;a href=&quot;#实验环境&quot; class=&quot;headerlink&quot; title=&quot;实验环境&quot;&gt;&lt;/a&gt;实验环境&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;Hadoop2.8.0
Hbase-1.4.9
Centos7.2
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=
      
    
    </summary>
    
      <category term="Hive" scheme="https://plutoacharon.github.io/categories/Hive/"/>
    
    
      <category term="Hive" scheme="https://plutoacharon.github.io/tags/Hive/"/>
    
  </entry>
  
</feed>
