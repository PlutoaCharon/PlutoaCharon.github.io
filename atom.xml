<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>浩翰Redamancy的博客</title>
  
  <subtitle>文质彬彬 然后君子</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-06T13:09:45.234Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>😁</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>思科模拟器 使用IOS配置启用ospf路由</title>
    <link href="http://yoursite.com/2019/10/06/%E6%80%9D%E7%A7%91%E6%A8%A1%E6%8B%9F%E5%99%A8-%E4%BD%BF%E7%94%A8IOS%E9%85%8D%E7%BD%AE%E5%90%AF%E7%94%A8ospf%E8%B7%AF%E7%94%B1/"/>
    <id>http://yoursite.com/2019/10/06/思科模拟器-使用IOS配置启用ospf路由/</id>
    <published>2019-10-06T13:04:17.000Z</published>
    <updated>2019-10-06T13:09:45.234Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网络拓扑如下"><a href="#网络拓扑如下" class="headerlink" title="网络拓扑如下"></a>网络拓扑如下</h2><p><img src="https://img-blog.csdnimg.cn/20191006185700373.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="IP地址分配表"><a href="#IP地址分配表" class="headerlink" title="IP地址分配表"></a>IP地址分配表</h3><table><thead><tr><th>设备名</th><th>端口/接口</th><th>IP地址</th><th>掩码长度</th><th>网关</th></tr></thead><tbody><tr><td>PC0</td><td>Fa0</td><td>172.16.1.2</td><td>24</td><td>172.16.1.1</td></tr><tr><td>PC1</td><td>Fa0</td><td>7.0.0.2</td><td>30</td><td>7.0.0.1</td></tr><tr><td>Inter-Srv</td><td>Fa0</td><td>6.0.0.2</td><td>8</td><td>6.0.0.1</td></tr><tr><td>FireWall</td><td>Fa0/0</td><td>172.16.1.1</td><td>24</td></tr><tr><td>FireWall</td><td>Gig0/3/0</td><td>2.0.0.2</td><td>30</td></tr><tr><td>ISP1</td><td>Fa0/0</td><td>5.0.0.1</td><td>8</td></tr><tr><td>ISP1</td><td>Fa0/1</td><td>3.0.0.1</td><td>8</td></tr><tr><td>ISP1</td><td>Gig0/3/0</td><td>2.0.0.0</td><td>30</td></tr><tr><td>ISP2</td><td>Fa0/0</td><td>5.0.0.2</td><td>8</td></tr><tr><td>ISP2</td><td>Fa0/1</td><td>4.0.0.2</td><td>8</td></tr><tr><td>ISP2</td><td>Fa1/0</td><td>7.0.0.1</td><td>30</td></tr><tr><td>ISP3</td><td>Fa0/0</td><td>3.0.0.2</td><td>8</td></tr><tr><td>ISP3</td><td>Fa0/1</td><td>4.0.0.1</td><td>8</td></tr><tr><td>ISP3</td><td>Fa1/0</td><td>6.0.0.1</td><td>8</td></tr></tbody></table><h3 id="静态路由表"><a href="#静态路由表" class="headerlink" title="静态路由表"></a>静态路由表</h3><h4 id="FireWall"><a href="#FireWall" class="headerlink" title="FireWall"></a>FireWall</h4><table><thead><tr><th>目的网络</th><th>掩码</th><th>下一跳地址</th><th>说明</th></tr></thead><tbody><tr><td>6.0.0.0</td><td>255.0.0.0</td><td>2.0.0.1</td></tr><tr><td>7.0.0.0</td><td>255.255.255.252</td><td>2.0.0.1</td></tr></tbody></table><h4 id="ISP1"><a href="#ISP1" class="headerlink" title="ISP1"></a>ISP1</h4><table><thead><tr><th>目的网络</th><th>掩码</th><th>下一跳地址</th><th>说明</th></tr></thead><tbody><tr><td>6.0.0.0</td><td>255.0.0.0</td><td>3.0.0.2</td></tr><tr><td>7.0.0.0</td><td>255.0.0.0</td><td>5.0.0.2</td></tr><tr><td>172.16.1.0</td><td>255.255.255.0</td><td>2.0.0.2</td></tr></tbody></table><h4 id="ISP2"><a href="#ISP2" class="headerlink" title="ISP2"></a>ISP2</h4><table><thead><tr><th>目的网络</th><th>掩码</th><th>下一跳地址</th><th>说明</th></tr></thead><tbody><tr><td>172.16.1.0</td><td>255.255.255.0</td><td>5.0.0.1</td></tr><tr><td>6.0.0.0</td><td>55.0.0.0</td><td>6.0.0.1</td></tr></tbody></table><h4 id="ISP3"><a href="#ISP3" class="headerlink" title="ISP3"></a>ISP3</h4><table><thead><tr><th>目的网络</th><th>掩码</th><th>下一跳地址</th><th>说明</th></tr></thead><tbody><tr><td>7.0.0.0</td><td>255.255.255.252</td><td>4.0.0.2</td></tr><tr><td>172.16.1.0</td><td>255.255.255.0</td><td>3.0.0.1</td></tr></tbody></table><p><strong>删除ISP1、ISP2、ISP3、FireWall上的静态路由表</strong><br>例如:<br><img src="https://img-blog.csdnimg.cn/20191006185721994.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191006185623206.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="在ISP1、ISP2、ISP3上配置ospf动态路由"><a href="#在ISP1、ISP2、ISP3上配置ospf动态路由" class="headerlink" title="在ISP1、ISP2、ISP3上配置ospf动态路由"></a>在ISP1、ISP2、ISP3上配置ospf动态路由</h2><ol><li>在ISP1上启用ospf路由，宣告网络<br><img src="https://img-blog.csdnimg.cn/20191006185749608.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/201910061858454.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>在ISP2上启用ospf路由，宣告网络<br><img src="https://img-blog.csdnimg.cn/20191006190130949.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ol><p><img src="https://img-blog.csdnimg.cn/20191006190205761.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol start="3"><li><p>在ISP3上启用ospf路由，宣告网络<img src="https://img-blog.csdnimg.cn/20191006185927707.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191006185936819.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>在ISP1上使用<code>show ip route</code> 查看路由表<br><img src="https://img-blog.csdnimg.cn/20191006190236476.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li>使用ping命令检查PC1到inter-Srv的连通性<br><img src="https://img-blog.csdnimg.cn/20191006191029621.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ol><h3 id="在FireWall上配置静态默认路由"><a href="#在FireWall上配置静态默认路由" class="headerlink" title="在FireWall上配置静态默认路由"></a>在FireWall上配置静态默认路由</h3><ol><li>在FireWall上查看路由表，<br><img src="https://img-blog.csdnimg.cn/2019100619105616.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>在FireWall上配置默认路由指向ISP1<br><img src="https://img-blog.csdnimg.cn/20191006191208613.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>ping命令检查PC0到PC1和inter-Srv的连通性<blockquote><p>说明: 这里肯定是不通的 因为作业要求使用不给Firewall配置ospf路由<br>想要PC0到PC1和inter-Srv互通需要设置Firewall到ISP1网段掩码由30改为8,再给Firewall配上ospf路由即可通讯</p></blockquote></li></ol><h4 id="原因"><a href="#原因" class="headerlink" title="原因:"></a>原因:</h4><p><img src="https://img-blog.csdnimg.cn/20191006191539673.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191006191620318.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>Server1到firewall不通</p><p>我尝试从pc1与ISP3进行连接发现也是不通,我认为应该是ISP3路由没有与172.16.1.0网段建立连接</p><p>解决:因此我尝试在ISP1上添加了静态默认路由<br><img src="https://img-blog.csdnimg.cn/20191006191639676.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>并且也在ISP2与ISP3中建立了与172.16.1.0网段的连接</p><p>尝试PC0与PC1,Server的连接</p><p><img src="https://img-blog.csdnimg.cn/20191006191656972.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191006191706489.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>成功!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;网络拓扑如下&quot;&gt;&lt;a href=&quot;#网络拓扑如下&quot; class=&quot;headerlink&quot; title=&quot;网络拓扑如下&quot;&gt;&lt;/a&gt;网络拓扑如下&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/2019100618570037
      
    
    </summary>
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="网络" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>payload、shellcode、exp、poc区分方法</title>
    <link href="http://yoursite.com/2019/10/06/payload%E3%80%81shellcode%E3%80%81exp%E3%80%81poc%E5%8C%BA%E5%88%86%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/10/06/payload、shellcode、exp、poc区分方法/</id>
    <published>2019-10-06T13:02:58.000Z</published>
    <updated>2019-10-06T13:03:48.193Z</updated>
    
    <content type="html"><![CDATA[<p>在学习网络安全的过程中经常会听到几个名词,例如</p><p><code>payload、shellcode、exp、poc</code>等</p><p>碰见不懂的东西就要去搞懂,于是动手查了查资料</p><h2 id="Payload是什么？"><a href="#Payload是什么？" class="headerlink" title="Payload是什么？"></a>Payload是什么？</h2><p>是包含在你用于一次漏洞利用（<strong>exploit</strong>）中的<strong>ShellCode</strong>中的主要功能代码</p><p>对于一个漏洞，他可以被利用（<strong>exploit</strong>），利用有一个完整的解决方案你可以把这个看作是名词的（<strong>exploit</strong>），然后利用必然有目的，而你的目的就是通过<strong>Payload</strong>来实现的，比如开3389，创建用户，修改密码等等等。</p><p><strong>Payload</strong>是可以被模块化的，一个<strong>Payload</strong>可以稍作修改就用于各种漏洞，同时，对于一个漏洞，他的利用方式必然要涉及到<strong>ShellCode</strong>，因为<strong>Payload</strong>是包含在<strong>ShellCode</strong>中的，<strong>ShellCode</strong>是真正的被输入到存在漏洞的程序中的，并且<strong>ShellCode</strong>负责把程序的流程最终转移到你的<strong>Payload代码</strong>中。所以对于一个漏洞来说，<strong>ShellCode</strong>就是一个用于某个漏洞的二进制代码框架，有了这个框架你可以在这个<strong>ShellCode</strong>中包含你需要的<strong>Payload</strong>来做一些事情。</p><p>然后你整理这个过程，把<strong>Crash</strong>的原因和导致的结果分析写出文章，然后附上你上面写的<strong>ShellCode</strong>，这就是一个<strong>POC</strong>（Proof of Concept概念证明）。</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>payload:翻译过来是有效载荷</p><p>通常在传输数据时，为了使数据传输更可靠，要把原始数据分批传输，并且在每一批数据的头和尾都加上一定的辅助信息，比如数据量的大小、校验位等，这样就相当于给已经分批的原始数据加一些外套，这些外套起标示作用，使得原始数据不易丢失，一批数据加上“外套”就形成了传输通道的基本传输单元，叫做数据帧或数据包，而其中的原始数据就是payload</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在学习网络安全的过程中经常会听到几个名词,例如&lt;/p&gt;
&lt;p&gt;&lt;code&gt;payload、shellcode、exp、poc&lt;/code&gt;等&lt;/p&gt;
&lt;p&gt;碰见不懂的东西就要去搞懂,于是动手查了查资料&lt;/p&gt;
&lt;h2 id=&quot;Payload是什么？&quot;&gt;&lt;a href=&quot;#P
      
    
    </summary>
    
      <category term="CTF" scheme="http://yoursite.com/categories/CTF/"/>
    
    
      <category term="安全" scheme="http://yoursite.com/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Kali apt-get报E: 无法打开锁文件 /var/lib/dpkg/lock-frontend - open (2: 没有那个文件或目录)</title>
    <link href="http://yoursite.com/2019/10/06/Kali-apt-get%E6%8A%A5E-%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%E9%94%81%E6%96%87%E4%BB%B6-var-lib-dpkg-lock-frontend-open-2-%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B8%AA%E6%96%87%E4%BB%B6%E6%88%96%E7%9B%AE%E5%BD%95/"/>
    <id>http://yoursite.com/2019/10/06/Kali-apt-get报E-无法打开锁文件-var-lib-dpkg-lock-frontend-open-2-没有那个文件或目录/</id>
    <published>2019-10-06T13:02:29.000Z</published>
    <updated>2019-10-06T13:02:44.156Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Kali-apt-get报E-无法打开锁文件-var-lib-dpkg-lock-frontend-open-2-没有那个文件或目录"><a href="#Kali-apt-get报E-无法打开锁文件-var-lib-dpkg-lock-frontend-open-2-没有那个文件或目录" class="headerlink" title="Kali apt-get报E: 无法打开锁文件 /var/lib/dpkg/lock-frontend - open (2: 没有那个文件或目录)"></a>Kali apt-get报E: 无法打开锁文件 /var/lib/dpkg/lock-frontend - open (2: 没有那个文件或目录)</h2><p>由于使用apt安装时一直报错,所以把文件夹直接删除</p><p>删除一时爽,删完毁断肠</p><p>解决办法：</p><pre><code>sudo mkdir -p /var/lib/dpkg/{alternatives,info,parts,triggers,updates}sudo cp /var/backups/dpkg.status.0 /var/lib/dpkg/statusapt-get download dpkgsudo dpkg -i dpkg*.debapt-get download base-filessudo dpkg -i base-files*.debsudo apt-get updatesudo apt-get check</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Kali-apt-get报E-无法打开锁文件-var-lib-dpkg-lock-frontend-open-2-没有那个文件或目录&quot;&gt;&lt;a href=&quot;#Kali-apt-get报E-无法打开锁文件-var-lib-dpkg-lock-frontend-open
      
    
    </summary>
    
      <category term="Liunx" scheme="http://yoursite.com/categories/Liunx/"/>
    
    
      <category term="Kali" scheme="http://yoursite.com/tags/Kali/"/>
    
  </entry>
  
  <entry>
    <title>Kali apt报错E: 无法获得锁 /var/cache/apt/archives/lock - open (11: 资源暂时不可用)</title>
    <link href="http://yoursite.com/2019/10/06/Kali-apt%E6%8A%A5%E9%94%99E-%E6%97%A0%E6%B3%95%E8%8E%B7%E5%BE%97%E9%94%81-var-cache-apt-archives-lock-open-11-%E8%B5%84%E6%BA%90%E6%9A%82%E6%97%B6%E4%B8%8D%E5%8F%AF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/10/06/Kali-apt报错E-无法获得锁-var-cache-apt-archives-lock-open-11-资源暂时不可用/</id>
    <published>2019-10-06T13:01:48.000Z</published>
    <updated>2019-10-06T13:02:13.214Z</updated>
    
    <content type="html"><![CDATA[<p>kali apt时报错:</p><pre><code>root@kali:~# apt-get clean &amp;&amp; apt-get update &amp;&amp; apt-get upgrade -y &amp;&amp; apt-get dist-upgrade -y E: 无法获得锁 /var/cache/apt/archives/lock - open (11: 资源暂时不可用)E: 无法对目录 /var/cache/apt/archives/ 加锁</code></pre><p>解决:</p><p>将/var/cache/apt/archives/lock删除</p><p><code>rm -rf /var/cache/apt/archives/lock</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;kali apt时报错:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;root@kali:~# apt-get clean &amp;amp;&amp;amp; apt-get update &amp;amp;&amp;amp; apt-get upgrade -y &amp;amp;&amp;amp; apt-get dist-up
      
    
    </summary>
    
      <category term="CTF" scheme="http://yoursite.com/categories/CTF/"/>
    
    
      <category term="Kali" scheme="http://yoursite.com/tags/Kali/"/>
    
  </entry>
  
  <entry>
    <title>kali20119最新更新源</title>
    <link href="http://yoursite.com/2019/10/06/kali20119%E6%9C%80%E6%96%B0%E6%9B%B4%E6%96%B0%E6%BA%90/"/>
    <id>http://yoursite.com/2019/10/06/kali20119最新更新源/</id>
    <published>2019-10-06T13:00:55.000Z</published>
    <updated>2019-10-06T13:01:32.403Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查看添加更新源"><a href="#查看添加更新源" class="headerlink" title="查看添加更新源"></a>查看添加更新源</h2><h3 id="编辑sources-list-将kali更新源加入其中"><a href="#编辑sources-list-将kali更新源加入其中" class="headerlink" title="编辑sources.list,将kali更新源加入其中"></a>编辑sources.list,将kali更新源加入其中</h3><p><code>sudo vim /etc/apt/sources.list</code></p><pre><code>#中科大deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contribdeb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib#阿里云deb http://mirrors.aliyun.com/kali kali-rolling main non-free contribdeb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib#清华大学deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-freedeb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free#浙大deb http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-freedeb-src http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-freedeb http://mirrors.163.com/debian/ jessie main non-free contribdeb http://mirrors.163.com/debian/ jessie-updates main non-free contribdeb http://mirrors.163.com/debian/ jessie-backports main non-free contribdeb-src http://mirrors.163.com/debian/ jessie main non-free contribdeb-src http://mirrors.163.com/debian/ jessie-updates main non-free contribdeb-src http://mirrors.163.com/debian/ jessie-backports main non-free contribdeb http://mirrors.163.com/debian-security/ jessie/updates main non-free contribdeb-src http://mirrors.163.com/debian-security/ jessie/updates main non-free contrib</code></pre><blockquote><p>注：由于kali官方源较慢非常卡，所以可以换成国内更新源，并且国内更新源也不宜添加过多！</p></blockquote><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p><code>apt-get clean &amp;&amp; apt-get update &amp;&amp; apt-get upgrade -y &amp;&amp; apt-get dist-upgrade -y</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;查看添加更新源&quot;&gt;&lt;a href=&quot;#查看添加更新源&quot; class=&quot;headerlink&quot; title=&quot;查看添加更新源&quot;&gt;&lt;/a&gt;查看添加更新源&lt;/h2&gt;&lt;h3 id=&quot;编辑sources-list-将kali更新源加入其中&quot;&gt;&lt;a href=&quot;#编辑sour
      
    
    </summary>
    
      <category term="CTF" scheme="http://yoursite.com/categories/CTF/"/>
    
    
      <category term="Kali" scheme="http://yoursite.com/tags/Kali/"/>
    
  </entry>
  
  <entry>
    <title>Liunx提权常用命令</title>
    <link href="http://yoursite.com/2019/10/06/Liunx%E6%8F%90%E6%9D%83%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2019/10/06/Liunx提权常用命令/</id>
    <published>2019-10-06T13:00:13.000Z</published>
    <updated>2019-10-06T13:00:30.902Z</updated>
    
    <content type="html"><![CDATA[<h2 id="操作系统信息收集"><a href="#操作系统信息收集" class="headerlink" title="操作系统信息收集"></a>操作系统信息收集</h2><h3 id="如何查看服务器的版本"><a href="#如何查看服务器的版本" class="headerlink" title="如何查看服务器的版本"></a>如何查看服务器的版本</h3><pre><code>cat /etc/issuecat /etc/*-releasecat /etc/lsb-release # 基于 Debiancat /etc/redhat-release # 基于 Redhat</code></pre><h3 id="如何查看内核的版本信息？"><a href="#如何查看内核的版本信息？" class="headerlink" title="如何查看内核的版本信息？"></a>如何查看内核的版本信息？</h3><pre><code>cat /proc/versionuname -auname -mrsrpm -q kerneldmesg | grep Linuxls /boot | grep vmlinuz-</code></pre><h2 id="应用和服务信息"><a href="#应用和服务信息" class="headerlink" title="应用和服务信息"></a>应用和服务信息</h2><h3 id="有什么服务在运行？是以什么样的权限在运行？"><a href="#有什么服务在运行？是以什么样的权限在运行？" class="headerlink" title="有什么服务在运行？是以什么样的权限在运行？"></a>有什么服务在运行？是以什么样的权限在运行？</h3><pre><code>ps auxps -eftopcat /etc/services</code></pre><h2 id="有什么工作任务计划？"><a href="#有什么工作任务计划？" class="headerlink" title="有什么工作任务计划？"></a>有什么工作任务计划？</h2><pre><code>crontab -lls -alh /var/spool/cronls -al /etc/ | grep cronls -al /etc/cron*cat /etc/cron*cat /etc/at.allowcat /etc/at.denycat /etc/cron.allowcat /etc/cron.denycat /etc/crontabcat /etc/anacrontabcat /var/spool/cron/crontabs/root</code></pre><h2 id="跟用户相关的信息"><a href="#跟用户相关的信息" class="headerlink" title="跟用户相关的信息"></a>跟用户相关的信息</h2><h3 id="我是谁？谁登入了？谁登入过？等"><a href="#我是谁？谁登入了？谁登入过？等" class="headerlink" title="我是谁？谁登入了？谁登入过？等"></a>我是谁？谁登入了？谁登入过？等</h3><pre><code>idwhowlastcat /etc/passwd | cut -d: -f1 # 列出用户grep -v -E &quot;^#&quot; /etc/passwd | awk -F: &apos;$3 == 0 { print $1}&apos; # 列出超级用户awk -F: &apos;($3 == &quot;0&quot;) {print}&apos; /etc/passwd # 列出超级用户cat /etc/sudoerssudo -l</code></pre><p>有哪些敏感文件？</p><pre><code>cat /etc/passwdcat /etc/groupcat /etc/shadowls -alh /var/mail/</code></pre><p>转自: </p><p>cnblogs.com/-qing-/p/10610827.html</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;操作系统信息收集&quot;&gt;&lt;a href=&quot;#操作系统信息收集&quot; class=&quot;headerlink&quot; title=&quot;操作系统信息收集&quot;&gt;&lt;/a&gt;操作系统信息收集&lt;/h2&gt;&lt;h3 id=&quot;如何查看服务器的版本&quot;&gt;&lt;a href=&quot;#如何查看服务器的版本&quot; class=&quot;
      
    
    </summary>
    
      <category term="Liunx" scheme="http://yoursite.com/categories/Liunx/"/>
    
    
      <category term="Liunx" scheme="http://yoursite.com/tags/Liunx/"/>
    
  </entry>
  
  <entry>
    <title>MobaXterm汉化以及解决中文乱码问题</title>
    <link href="http://yoursite.com/2019/10/06/MobaXterm%E6%B1%89%E5%8C%96%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/10/06/MobaXterm汉化以及解决中文乱码问题/</id>
    <published>2019-10-06T12:59:30.000Z</published>
    <updated>2019-10-06T12:59:52.851Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/2019100419570919.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>在使用MobaXterm过程中会遇到中文乱码的问题,这时候我们需要设置一下编码<br>点击鼠标右键<br><img src="https://img-blog.csdnimg.cn/20191004195814767.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>选择第二个ISO选项<br><img src="https://img-blog.csdnimg.cn/2019100419584583.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>再次输入出现乱码的命令<br><img src="https://img-blog.csdnimg.cn/20191004195923291.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>修改成功!</p><hr><p>如果设置完以后使用其他命令出现乱码,则修改回UTF-8编码即可</p><h2 id="汉化包下载"><a href="#汉化包下载" class="headerlink" title="汉化包下载:"></a>汉化包下载:</h2><p>链接: <a href="https://pan.baidu.com/s/1UAxKfsSj9OOpC3ojaLN5IQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1UAxKfsSj9OOpC3ojaLN5IQ</a> 提取码: myi3</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/2019100419570919.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6
      
    
    </summary>
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>centos7 使用vi编辑器配置网络环境</title>
    <link href="http://yoursite.com/2019/10/03/centos7-%E4%BD%BF%E7%94%A8vi%E7%BC%96%E8%BE%91%E5%99%A8%E9%85%8D%E7%BD%AE%E7%BD%91%E7%BB%9C%E7%8E%AF%E5%A2%83/"/>
    <id>http://yoursite.com/2019/10/03/centos7-使用vi编辑器配置网络环境/</id>
    <published>2019-10-03T13:50:11.000Z</published>
    <updated>2019-10-03T13:53:57.241Z</updated>
    
    <content type="html"><![CDATA[<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><table><thead><tr><th>命令和路径</th><th>描述</th></tr></thead><tbody><tr><td>ifconfig</td><td>改变网卡地址，启用禁用网卡</td></tr><tr><td>route</td><td>管理本机路由表</td></tr><tr><td>hostname</td><td>设置本机主机名</td></tr></tbody></table><h2 id="一-使用ifconfig命令改变网卡IP地址"><a href="#一-使用ifconfig命令改变网卡IP地址" class="headerlink" title="一 使用ifconfig命令改变网卡IP地址"></a>一 使用ifconfig命令改变网卡IP地址</h2><ol><li>使用ifconfig命令查看虚拟机的IP地址<br><img src="https://img-blog.csdnimg.cn/20191003182737246.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li><p>使用ifconfig命令把虚拟机的地址设成192.168.238.7</p><blockquote><p>注意:这里我修改了静态,所以使用该命令的时候需要是DHCP才可以更改成功</p></blockquote></li></ol><p><img src="https://img-blog.csdnimg.cn/20191003182741787.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol start="3"><li>使用ping命令检查虚拟机到主机的互通性<br><img src="https://img-blog.csdnimg.cn/2019100318274835.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>使用route命令查看本机的路由表</li></ol><p><img src="https://img-blog.csdnimg.cn/20191003182955697.png" alt="在这里插入图片描述"></p><h2 id="二-熟悉vi的基本命令"><a href="#二-熟悉vi的基本命令" class="headerlink" title="二 熟悉vi的基本命令"></a>二 熟悉vi的基本命令</h2><h3 id="编辑作业2任务二的命令行到一个文件中"><a href="#编辑作业2任务二的命令行到一个文件中" class="headerlink" title="编辑作业2任务二的命令行到一个文件中"></a>编辑作业2任务二的命令行到一个文件中</h3><pre><code>1.    vi的三种模式的特点、如何切换i                进入插入模式esc                进入命令模式：              进入末行模式2.    vi  &lt;文件名&gt;        打开文件:q                结束编辑:q!                不存盘退出:w                存盘后退出:wq                强制存盘后退出3.    vi基本编辑（命令模式下）dd                删除光标所在行yy                复制光标所在行nyy                复制光标所在n行p                粘贴</code></pre><p> <img src="https://img-blog.csdnimg.cn/20191003183021603.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="三-编辑网卡配置文件配置IP地址和网关以及DNS"><a href="#三-编辑网卡配置文件配置IP地址和网关以及DNS" class="headerlink" title="三 编辑网卡配置文件配置IP地址和网关以及DNS"></a>三 编辑网卡配置文件配置IP地址和网关以及DNS</h2><p>配置文件|    描述<br>|–|–|<br>/ect/sysconfig/network-scripts/ifcfg-ens*|    第一块以太网卡的配置文件<br>/etc/resolv.conf|    域名服务器配置文件</p><ol><li>打开vmware虚拟网络编辑器，查看vmnet8的地址和网关<br><img src="https://img-blog.csdnimg.cn/2019100318313638.png" alt="在这里插入图片描述"></li><li>使用vi编辑/etc/sysconfig/network-scripts/ifcfg-ens，把地址设置为vmnet8的同一网段，网关地址相同，编辑好的ifcfg-ens*文件<br><img src="https://img-blog.csdnimg.cn/20191003183139842.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>使用systemctl  restart  network  重启网络服务<br><img src="https://img-blog.csdnimg.cn/20191003183143937.png" alt="在这里插入图片描述"></li><li>使用ifconfig检查IP地址配置，ping <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a><br><img src="https://img-blog.csdnimg.cn/20191003183159206.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>使用vi编辑/etc/resolv.conf，ping <a href="http://www.baidu.com，" target="_blank" rel="noopener">www.baidu.com，</a><br><img src="https://img-blog.csdnimg.cn/20191003183203873.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191003183212607.png" alt="在这里插入图片描述"><h2 id="四-使用SSH远程管理linux服务器"><a href="#四-使用SSH远程管理linux服务器" class="headerlink" title="四 使用SSH远程管理linux服务器"></a>四 使用SSH远程管理linux服务器</h2></li><li>使用netstat -antp 查看虚拟机开放端口，标出sshd<br><img src="https://img-blog.csdnimg.cn/20191003183836361.png" alt="在这里插入图片描述"></li><li>使用systemctl  stop  sshd 停止服务，再查看虚拟机开放端口<br><img src="https://img-blog.csdnimg.cn/20191003183840555.png" alt="在这里插入图片描述"></li><li><p>查看sshd的配置文件，/etc/ssh/ sshd_config; /etc/ssh/ ssh_config<br><code>grep  -v  ^#  /etc/ssh/sshd_config | grep  -v  ^$</code><br><img src="https://img-blog.csdnimg.cn/20191003183845300.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>查看sshd的密钥文件，/etc/ssh/ ssh_host_rsa_key; /etc/ssh/ ssh_host_rsa_key.pub<br><img src="https://img-blog.csdnimg.cn/20191003183849314.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191003183855234.png" alt="在这里插入图片描述"></p></li><li>使用systemctl  start  sshd启动服务，再查看虚拟机开放端口<br><img src="https://img-blog.csdnimg.cn/20191003183858775.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li><p>在主机使用xshell连接虚拟机<br><img src="https://img-blog.csdnimg.cn/20191003183928447.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20191003183932718.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>在主机和虚拟机分别使用netstat命令查看网络连接状况<br><img src="https://img-blog.csdnimg.cn/20191003184059531.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ol><h2 id="五-配置SSH免密码登录"><a href="#五-配置SSH免密码登录" class="headerlink" title="五 配置SSH免密码登录"></a>五 配置SSH免密码登录</h2><ol><li>克隆并启动两台linux虚拟机ssh-client和ssh-server<br><img src="https://img-blog.csdnimg.cn/20191003184112185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>在ssh-server上启动sshd服务<br><img src="https://img-blog.csdnimg.cn/20191003184209275.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li><p>在ssh-client上创建rsa密钥对，查看密钥对<img src="https://img-blog.csdnimg.cn/20191003184117552.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>使用scp命令把ssh-client的公钥拷贝到ssh-server上的认证文件中<br>这里我是使用了 cat命令查看公钥 然后复制到client机器上的认证文件中,效果跟scp一样,只不过省去了一部分<br><img src="https://img-blog.csdnimg.cn/20191003184121597.png" alt="在这里插入图片描述"><br>将master节点上的公钥复制到authorized_keys中<br><img src="https://img-blog.csdnimg.cn/2019100318414544.png" alt="在这里插入图片描述"><br>然后将slave1复制到master的authorized_keys中</p></li></ol><p><img src="https://img-blog.csdnimg.cn/20191003184310310.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>将authorized_keys文件复制到其他机器</p><p><img src="https://img-blog.csdnimg.cn/20191003184322481.png" alt="在这里插入图片描述"></p><ol start="5"><li>在ssh-client使用ssh登录ssh-serve</li></ol><p><img src="https://img-blog.csdnimg.cn/20191003184326605.png" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;命令&quot;&gt;&lt;a href=&quot;#命令&quot; class=&quot;headerlink&quot; title=&quot;命令&quot;&gt;&lt;/a&gt;命令&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令和路径&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;t
      
    
    </summary>
    
      <category term="Liunx" scheme="http://yoursite.com/categories/Liunx/"/>
    
    
      <category term="Liunx" scheme="http://yoursite.com/tags/Liunx/"/>
    
  </entry>
  
  <entry>
    <title>centos7 挂载使用外部存储系统</title>
    <link href="http://yoursite.com/2019/10/03/centos7-%E6%8C%82%E8%BD%BD%E4%BD%BF%E7%94%A8%E5%A4%96%E9%83%A8%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F/"/>
    <id>http://yoursite.com/2019/10/03/centos7-挂载使用外部存储系统/</id>
    <published>2019-10-03T13:49:11.000Z</published>
    <updated>2019-10-03T13:54:57.568Z</updated>
    
    <content type="html"><![CDATA[<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>fdisk</td><td>管理磁盘分区</td></tr><tr><td>mkfs</td><td>创建文件系统</td></tr><tr><td>mount</td><td>挂载文件系统</td></tr><tr><td>umount</td><td>卸载文件系统</td></tr><tr><td>du</td><td>统计目录的磁盘使用情况</td></tr><tr><td>df</td><td>统计未使用的磁盘空间</td></tr></tbody></table><h2 id="一-在linux系统中挂载使用光盘"><a href="#一-在linux系统中挂载使用光盘" class="headerlink" title="一 在linux系统中挂载使用光盘"></a>一 在linux系统中挂载使用光盘</h2><ol><li><p>在vmware虚拟机中配置光驱使用ISO光盘映像</p></li><li><p>使用mount命令把光盘挂载到/mnt/cdrom<br><img src="https://img-blog.csdnimg.cn/20191003174739273.png" alt="在这里插入图片描述"></p></li><li>查看光盘内容<br><img src="https://img-blog.csdnimg.cn/20191003174739273.png" alt="在这里插入图片描述"></li><li>使用umonut命令卸载光盘<br><img src="https://img-blog.csdnimg.cn/20191003174743314.png" alt="在这里插入图片描述"></li><li>使用mount命令挂载linux系统中的ISO光盘映像<br><img src="https://img-blog.csdnimg.cn/20191003180100401.png" alt="在这里插入图片描述"></li></ol><h2 id="二-在linux系统中挂载使用U盘"><a href="#二-在linux系统中挂载使用U盘" class="headerlink" title="二 在linux系统中挂载使用U盘"></a>二 在linux系统中挂载使用U盘</h2><ol><li><p>在主机上插入U盘<br><img src="https://img-blog.csdnimg.cn/20191003180116393.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>在linux系统中，fdisk -l 查看U盘分区信息</p></li></ol><p><img src="https://img-blog.csdnimg.cn/20191003180125299.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol start="3"><li>使用mount命令把U盘分区挂载到/mnt/u<br><img src="https://img-blog.csdnimg.cn/20191003180132245.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>查看U盘内容</li></ol><p><img src="https://img-blog.csdnimg.cn/20191003180208845.png" alt="在这里插入图片描述"></p><ol start="5"><li>使用umonut命令卸载U盘<br><img src="https://img-blog.csdnimg.cn/20191003180152568.png" alt="在这里插入图片描述"></li></ol><h2 id="三-在linux系统中增加新硬盘，对硬盘分区并创建文件系统，挂载文件系统"><a href="#三-在linux系统中增加新硬盘，对硬盘分区并创建文件系统，挂载文件系统" class="headerlink" title="三 在linux系统中增加新硬盘，对硬盘分区并创建文件系统，挂载文件系统"></a>三 在linux系统中增加新硬盘，对硬盘分区并创建文件系统，挂载文件系统</h2><ol><li>在虚拟机中增加一块硬盘，容量1GB<br><img src="https://img-blog.csdnimg.cn/20191003180222581.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>使用fdisk查看两块硬盘的分区情况<br><img src="https://img-blog.csdnimg.cn/20191003180230436.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>使用fdisk对新硬盘分区，划分两个主分区各300MB<br><img src="https://img-blog.csdnimg.cn/20191003180234147.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191003180254635.png" alt="在这里插入图片描述"></li><li>使用mkfs对其中一个分区格式化创建文件系统<br><img src="https://img-blog.csdnimg.cn/20191003180310409.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>建立/mnt/new目录，使用mount把分区挂载到目录下<br><img src="https://img-blog.csdnimg.cn/20191003180315213.png" alt="在这里插入图片描述"></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;命令&quot;&gt;&lt;a href=&quot;#命令&quot; class=&quot;headerlink&quot; title=&quot;命令&quot;&gt;&lt;/a&gt;命令&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;

      
    
    </summary>
    
      <category term="Liunx" scheme="http://yoursite.com/categories/Liunx/"/>
    
    
      <category term="Liunx" scheme="http://yoursite.com/tags/Liunx/"/>
    
  </entry>
  
  <entry>
    <title>centos7 使用linux命令管理目录和文件</title>
    <link href="http://yoursite.com/2019/10/03/centos7-%E4%BD%BF%E7%94%A8linux%E5%91%BD%E4%BB%A4%E7%AE%A1%E7%90%86%E7%9B%AE%E5%BD%95%E5%92%8C%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2019/10/03/centos7-使用linux命令管理目录和文件/</id>
    <published>2019-10-03T13:48:25.000Z</published>
    <updated>2019-10-03T13:54:59.233Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-使用命令查看系统基本信息"><a href="#一-使用命令查看系统基本信息" class="headerlink" title="一 使用命令查看系统基本信息"></a>一 使用命令查看系统基本信息</h2><ol><li>uname命令查看内核版本、硬件平台<br><img src="https://img-blog.csdnimg.cn/20191003172243802.png" alt="在这里插入图片描述"></li><li>hostname查看修改主机名<br><img src="https://img-blog.csdnimg.cn/2019100317225087.png" alt="在这里插入图片描述"></li><li>ifconfig查看修改IP地址<br><img src="https://img-blog.csdnimg.cn/20191003172256862.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>df查看磁盘空间占用情况<br><img src="https://img-blog.csdnimg.cn/20191003172302486.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li><p>free查看内存空间占用情况<br><img src="https://img-blog.csdnimg.cn/20191003172309641.png" alt="在这里插入图片描述"></p><h2 id="二-使用linux命令完成如下目录和文件操作"><a href="#二-使用linux命令完成如下目录和文件操作" class="headerlink" title="二 使用linux命令完成如下目录和文件操作"></a>二 使用linux命令完成如下目录和文件操作</h2><p>|命令|描述  |<br>|–|–|<br>| ls | 列出目录下的文件 |<br>|mkdir、cd、rmdir、pwd|目录操作命令|<br>|rm、mv、cp|文件操作命令|</p></li><li><p>在/root目录下建立temp目录<br><img src="https://img-blog.csdnimg.cn/2019100317355813.png" alt="在这里插入图片描述"></p></li><li>把/bin目录下的a开头的文件拷贝到/root/temp目录<br><img src="https://img-blog.csdnimg.cn/20191003173615706.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>把/etc/httpd/目录下所有文件和子目录拷贝到/root/temp目录<br><img src="https://img-blog.csdnimg.cn/20191003173626272.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>给/sbin/ifconfig建立符号链接ipconfig放到/root/temp目录</li></ol><p><img src="https://img-blog.csdnimg.cn/20191003173654467.png" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20191003173657588.png" alt="在这里插入图片描述"></p><ol start="5"><li><p>查找名字为yum的文件，拷贝到/root/temp目录<br>使用cp命令</p><p><img src="https://img-blog.csdnimg.cn/20191003173838831.png" alt="在这里插入图片描述"></p></li><li>删除/root/temp目录，命令及执行结果截图<br><img src="https://img-blog.csdnimg.cn/20191003173844236.png" alt="在这里插入图片描述"></li></ol><h2 id="三-使用linux命令查看检索文件内容"><a href="#三-使用linux命令查看检索文件内容" class="headerlink" title="三 使用linux命令查看检索文件内容"></a>三 使用linux命令查看检索文件内容</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>cat、less、more、head、tail</td><td>查看文件内容</td></tr><tr><td>wc、grep</td><td>统计文件内容、检索文件内容</td></tr></tbody></table><p>1．    cat /proc/cpuinfo查看CPU信息<br> <img src="https://img-blog.csdnimg.cn/20191003173855417.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>2．    cat  /etc/passwd查看系统用户信息<br> <img src="https://img-blog.csdnimg.cn/20191003173907762.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>3．    tail  /var/log/message 查看日志信息<br> <img src="https://img-blog.csdnimg.cn/20191003173916172.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>4．    more  /etc/passwd查看系统用户信息<br> <img src="https://img-blog.csdnimg.cn/2019100317392025.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>5．    more  /var/log/message 查看日志信息<br> <img src="https://img-blog.csdnimg.cn/20191003173923639.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>6．    wc  /etc/passwd统计文件的行数<br> <img src="https://img-blog.csdnimg.cn/20191003173930278.png" alt="在这里插入图片描述"><br>7．    使用grep命令检索/etc/passwd中包含root的行和以root开头的行<br>   <img src="https://img-blog.csdnimg.cn/2019100317393672.png" alt="在这里插入图片描述"></p><h2 id="四-使用linux命令打包、压缩、备份、还原文件"><a href="#四-使用linux命令打包、压缩、备份、还原文件" class="headerlink" title="四 使用linux命令打包、压缩、备份、还原文件"></a>四 使用linux命令打包、压缩、备份、还原文件</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>tar、gzip、bzip2</td><td>归档和压缩</td></tr></tbody></table><p>1．    在/root建立目录temp<br> <img src="https://img-blog.csdnimg.cn/20191003174001833.png" alt="在这里插入图片描述"><br>2．    把/bin目录下所有字母n开头的文件拷贝过来<br> <img src="https://img-blog.csdnimg.cn/20191003174006549.png" alt="在这里插入图片描述"><br>3．    把/下所有http开头的文件拷贝过来</p><p> <img src="https://img-blog.csdnimg.cn/20191003174011592.png" alt="在这里插入图片描述"><br> <img src="https://img-blog.csdnimg.cn/20191003174032932.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>4．    打包压缩/root/temp</p><p> <img src="https://img-blog.csdnimg.cn/20191003174037958.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>5．    删除/root/temp目录及文件<br> <img src="https://img-blog.csdnimg.cn/20191003174041681.png" alt="在这里插入图片描述"><br>6．    还原/root/temp<br> <img src="https://img-blog.csdnimg.cn/20191003174044445.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一-使用命令查看系统基本信息&quot;&gt;&lt;a href=&quot;#一-使用命令查看系统基本信息&quot; class=&quot;headerlink&quot; title=&quot;一 使用命令查看系统基本信息&quot;&gt;&lt;/a&gt;一 使用命令查看系统基本信息&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;uname命令查看内核版本、硬件
      
    
    </summary>
    
      <category term="Liunx" scheme="http://yoursite.com/categories/Liunx/"/>
    
    
      <category term="Liunx" scheme="http://yoursite.com/tags/Liunx/"/>
    
  </entry>
  
  <entry>
    <title>Centos7 图形化安装,分区,网络设置</title>
    <link href="http://yoursite.com/2019/10/03/Centos7-%E5%9B%BE%E5%BD%A2%E5%8C%96%E5%AE%89%E8%A3%85-%E5%88%86%E5%8C%BA-%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE/"/>
    <id>http://yoursite.com/2019/10/03/Centos7-图形化安装-分区-网络设置/</id>
    <published>2019-10-03T13:47:20.000Z</published>
    <updated>2019-10-03T13:53:55.787Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-使用vmware建立新的虚拟机"><a href="#一-使用vmware建立新的虚拟机" class="headerlink" title="一 使用vmware建立新的虚拟机"></a>一 使用vmware建立新的虚拟机</h2><p><img src="https://img-blog.csdnimg.cn/20191003171132945.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191003171139898.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191003171152516.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="二-安装CentOS7-4系统"><a href="#二-安装CentOS7-4系统" class="headerlink" title="二 安装CentOS7.4系统"></a>二 安装CentOS7.4系统</h2><p> 使用安装光盘映像引导系统，进入安装界面</p><p> <img src="https://img-blog.csdnimg.cn/20191003171241712.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>重新划分磁盘分区，交换分区swap为2G，“/boot”分区512M，其余的划为根分区，分区表</p><p><img src="https://img-blog.csdnimg.cn/20191003171249308.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>选择DeskTop安装<br> <img src="https://img-blog.csdnimg.cn/20191003171256101.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>配置root密码为123456<br> <img src="https://img-blog.csdnimg.cn/20191003171300520.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>安装完成重新启动系统并登录</p><p><img src="https://img-blog.csdnimg.cn/20191003171304866.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="三-系统登录、控制台切换、图形界面操作"><a href="#三-系统登录、控制台切换、图形界面操作" class="headerlink" title="三 系统登录、控制台切换、图形界面操作"></a>三 系统登录、控制台切换、图形界面操作</h2><ol><li>图形界面root超级用户的登陆<br><img src="https://img-blog.csdnimg.cn/20191003171319265.png" alt="在这里插入图片描述"></li><li>控制台切换快捷键，切换到字符界面登录<br>使用 init 3 命令切换到命令行界面<br><img src="https://img-blog.csdnimg.cn/20191003171336781.png" alt="在这里插入图片描述"></li><li><p>切换回图形界面，打开终端<br>使用 init 5 命令切换到命令行界面<br><img src="https://img-blog.csdnimg.cn/20191003171341254.png" alt="在这里插入图片描述"></p></li><li><p>使用图形界面设置桌面、网络ip和dns、设置root密码<br>我的网关是192.168.238.2 所以静态的设置网关填写应该按照标准来</p><p><img src="https://img-blog.csdnimg.cn/20191003171347855.png" alt="在这里插入图片描述"></p></li></ol><p><img src="https://img-blog.csdnimg.cn/20191003171353386.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>设置静态<br><img src="https://img-blog.csdnimg.cn/20191003171405643.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>重启网卡<br><img src="https://img-blog.csdnimg.cn/20191003171414179.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191003171428425.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>Ping通证明有网!!!</p><h2 id="关机、重启"><a href="#关机、重启" class="headerlink" title="关机、重启"></a>关机、重启</h2><ol><li><p>使用shutdown命令关机</p></li><li><p>使用shutdown命令重启</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一-使用vmware建立新的虚拟机&quot;&gt;&lt;a href=&quot;#一-使用vmware建立新的虚拟机&quot; class=&quot;headerlink&quot; title=&quot;一 使用vmware建立新的虚拟机&quot;&gt;&lt;/a&gt;一 使用vmware建立新的虚拟机&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;
      
    
    </summary>
    
      <category term="Liunx" scheme="http://yoursite.com/categories/Liunx/"/>
    
    
      <category term="Liunx" scheme="http://yoursite.com/tags/Liunx/"/>
    
  </entry>
  
  <entry>
    <title>yum更新报错 您可以尝试添加 --skip-broken 选项来解决该问题</title>
    <link href="http://yoursite.com/2019/10/03/yum%E6%9B%B4%E6%96%B0%E6%8A%A5%E9%94%99-%E6%82%A8%E5%8F%AF%E4%BB%A5%E5%B0%9D%E8%AF%95%E6%B7%BB%E5%8A%A0-skip-broken-%E9%80%89%E9%A1%B9%E6%9D%A5%E8%A7%A3%E5%86%B3%E8%AF%A5%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/10/03/yum更新报错-您可以尝试添加-skip-broken-选项来解决该问题/</id>
    <published>2019-10-03T13:46:37.000Z</published>
    <updated>2019-10-03T13:46:59.412Z</updated>
    
    <content type="html"><![CDATA[<p>在centos7 中执行 <code>yum -y update</code>时系统报错:</p><pre><code>错误：软件包：kernel-3.10.0-1062.1.2.el7.x86_64 (updates)          需要：linux-firmware &gt;= 20190429-72          正在删除: linux-firmware-20160830-49.git7534e19.el7.noarch (@anaconda)              linux-firmware = 20160830-49.git7534e19.el7          更新，由: linux-firmware-20180911-69.git85c5d90.el7.noarch (base)              linux-firmware = 20180911-69.git85c5d90.el7 您可以尝试添加 --skip-broken 选项来解决该问题 您可以尝试执行：rpm -Va --nofiles --nodigest</code></pre><p>尝试使用<code>yum -y update --skip-broken</code>解决</p><pre><code>跳过（依赖问题）:  grubby.x86_64 0:8.28-25.el7                        kernel.x86_64 0:3.10.0-1062.1.2.el7                        microcode_ctl.x86_64 2:2.1-47.el7  替代:  NetworkManager.x86_64 1:1.4.0-12.el7    grub2.x86_64 1:2.02-0.44.el7.centos    grub2-tools.x86_64 1:2.02-0.44.el7.centos    pygobject3-base.x86_64 0:3.14.0-3.el7     rdma.noarch 0:7.3_4.7_rc2-5.el7        完毕！</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在centos7 中执行 &lt;code&gt;yum -y update&lt;/code&gt;时系统报错:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;错误：软件包：kernel-3.10.0-1062.1.2.el7.x86_64 (updates)
          需要：linux-firmwa
      
    
    </summary>
    
      <category term="Liunx" scheme="http://yoursite.com/categories/Liunx/"/>
    
    
      <category term="Liunx" scheme="http://yoursite.com/tags/Liunx/"/>
    
  </entry>
  
  <entry>
    <title>Nmap工具命令详解</title>
    <link href="http://yoursite.com/2019/10/02/Nmap%E5%B7%A5%E5%85%B7%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/10/02/Nmap工具命令详解/</id>
    <published>2019-10-02T14:44:16.000Z</published>
    <updated>2019-10-02T14:45:14.264Z</updated>
    
    <content type="html"><![CDATA[<h2 id="nmap用于网络扫描和主机检测-漏洞探测-安全扫描"><a href="#nmap用于网络扫描和主机检测-漏洞探测-安全扫描" class="headerlink" title="nmap用于网络扫描和主机检测 漏洞探测 安全扫描"></a>nmap用于网络扫描和主机检测 漏洞探测 安全扫描</h2><h3 id="发现主机"><a href="#发现主机" class="headerlink" title="发现主机"></a>发现主机</h3><pre><code>nmap -sP 10.0.3.0/24   发现有哪些机器，主机，路由器，交换机，跳过端口检测nmap  -sn 10.0.1.161-166  ping探测扫描主机，不进行端口扫描nmap 10.0.1.161 -sA （发送tcp的ack包进行探测，可以探测主机是否存活）nmap 192.168.1.1-100 (扫描IP地址为192.168.1.1-192.168.1.100内的所有主机)nmap -iL target.txt （ip地址列表）nmap 192.168.1.1/24 -exclude  192.168.1.1（扫描除过某一个ip外的所有子网主机）nmap 192.168.1.1/24 -exclude filexxx.txt(xxx.txt中的文件将会从扫描的主机中排除)</code></pre><h3 id="端口（服务发现）"><a href="#端口（服务发现）" class="headerlink" title="端口（服务发现）"></a>端口（服务发现）</h3><pre><code> nmap -F 192.168.11128,使用快速扫描方式，仅扫描TOP 100的端口指定具体的端口类型和端口号来让nmap扫描nmap -p T:8888,80 server2.tecmint.com有时候包过滤防火墙会阻断标准的ICMP ping请求，在这种情况下，我们可以使用TCP ACK和TCP Syn方法来扫描远程主机。 nmap -PS 192.168.0.101nmap -vv 192.168.11.128,用Nmap进行简单扫描，并对返回的结果详细描述输入。  -vv 参数设置对结果的详细输出使用TCP ACK扫描远程主机上特定的端口 nmap -PA -p 22,80 192.168.0.101使用TCP Syn扫描远程主机上特定的端口nmap -PS -p 22,80 192.168.0.101**Tcp SYN Scan (sS) 默认扫描类型，半开放扫描，不会在远程主机产生会话和任何日志记录，需要root/administrator权限nmap -sS 192.168.1.1**TCP connect()扫描 调用系统的connect() 需要完成三次握手  适用于找出TCP和UDP端口nmap -sT 192.168.1.1nmap -sT 10.0.1.161等同于 nmap 10.0.1.161**Udp scan(sU)  针对UDP端口的nmap -sU 192.168.1.1**FIN scan(sF) 目标主机有时候可能有IDS和IPS系统的存在,防火墙会阻止掉SYN数据包。发送一个设置了FIN标志的数据包并不需要完成TCP的握手.和sS扫描效果差不多，比sT速度快（对windows无效）nmap -sF  10.0.1.161nmap -sN 192.168.0.101（执行TCP空扫描以骗过防火墙）</code></pre><h3 id="版本检测-系统检测"><a href="#版本检测-系统检测" class="headerlink" title="版本检测 系统检测"></a>版本检测 系统检测</h3><pre><code>用来扫描目标主机和端口上运行的软件的版本nmap -sV 10.0.1.161nmap -version-intensity 3 172.16.1.252  强度越高，探测出的服务越准确nmap -O 172.16.1.252  通过目标开放的端口来探测主机所运行的操作系统类型nmap --traceroute 192.168.11.128 跟踪详细路由信息nmap -sV -v -O - Pn 172.16.1.175-sV，代表进行版本侦测，-O 代表进行OS侦测，-pn将所有指定的主机视作开启，跳过主机发现的过程 ，-v表示详细的显示所有结果。</code></pre><h3 id="常用NSE脚本"><a href="#常用NSE脚本" class="headerlink" title="常用NSE脚本"></a>常用NSE脚本</h3><pre><code>nmap --script=vuln 192.168.11.128, 检查是否存在常见漏洞nmap --script=auth 192.168.11.128 负责处理鉴权证书（绕开鉴权）的脚本,也可以作为检测部分应用弱口令nmap --script=default 192.168.11.128 或者 nmap -sC 192.168.11.128,默认的脚本扫描，主要是搜集各种应用服务的信息，收集到后，可再针对具体服务进行攻击nmap --script=broadcast-netbios-master-browser 192.168.11.128,使用脚本 发现网关nmap -sV -p139,445 -oG 1.txt 192.168.11.128，其中-sV代表让nmap进行版本侦测，-p代表指定端口，-oG代表输出为1.txt文件</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;nmap用于网络扫描和主机检测-漏洞探测-安全扫描&quot;&gt;&lt;a href=&quot;#nmap用于网络扫描和主机检测-漏洞探测-安全扫描&quot; class=&quot;headerlink&quot; title=&quot;nmap用于网络扫描和主机检测 漏洞探测 安全扫描&quot;&gt;&lt;/a&gt;nmap用于网络扫描和
      
    
    </summary>
    
      <category term="Liunx" scheme="http://yoursite.com/categories/Liunx/"/>
    
    
      <category term="Liunx" scheme="http://yoursite.com/tags/Liunx/"/>
    
  </entry>
  
  <entry>
    <title>Linux下查看用户列表</title>
    <link href="http://yoursite.com/2019/10/02/Linux%E4%B8%8B%E6%9F%A5%E7%9C%8B%E7%94%A8%E6%88%B7%E5%88%97%E8%A1%A8/"/>
    <id>http://yoursite.com/2019/10/02/Linux下查看用户列表/</id>
    <published>2019-10-02T14:43:59.000Z</published>
    <updated>2019-10-02T14:44:55.331Z</updated>
    
    <content type="html"><![CDATA[<p>以下是用到的一些命令。</p><p>查看用户</p><p><code>cat /etc/passwd</code></p><p>查看用户组</p><p><code>cat /etc/group</code></p><p>查看当前活跃的用户列表</p><p><code>w</code><br>但是，你会发现，在使用上面的 cat 命令所打印出来的东西太杂乱了，于是网上找到下面的这个命令：</p><h2 id="对于-cat-etc-passwd-的替换"><a href="#对于-cat-etc-passwd-的替换" class="headerlink" title="对于 cat /etc/passwd 的替换"></a>对于 cat /etc/passwd 的替换</h2><p><code>cat /etc/passwd|grep -v nologin|grep -v halt|grep -v shutdown|awk -F&quot;:&quot; &#39;{ print $1&quot;|&quot;$3&quot;|&quot;$4 }&#39;|more</code></p><p>输出结果类似下面这样的：</p><pre><code>root|0|0sync|5|0master|1000|1000mysql|27|27docker|1001|1001</code></pre><p>原文链接：<a href="https://blog.csdn.net/rainbow702/article/details/50985672" target="_blank" rel="noopener">https://blog.csdn.net/rainbow702/article/details/50985672</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以下是用到的一些命令。&lt;/p&gt;
&lt;p&gt;查看用户&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cat /etc/passwd&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查看用户组&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cat /etc/group&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查看当前活跃的用户列表&lt;/p&gt;
&lt;p&gt;&lt;co
      
    
    </summary>
    
      <category term="Liunx" scheme="http://yoursite.com/categories/Liunx/"/>
    
    
      <category term="Liunx" scheme="http://yoursite.com/tags/Liunx/"/>
    
  </entry>
  
  <entry>
    <title>Linux crontab命令详解</title>
    <link href="http://yoursite.com/2019/10/02/Linux-crontab%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/10/02/Linux-crontab命令详解/</id>
    <published>2019-10-02T14:43:42.000Z</published>
    <updated>2019-10-02T14:44:37.927Z</updated>
    
    <content type="html"><![CDATA[<p>Linux crontab是用来定期执行程序的命令。</p><p>当安装完成操作系统之后，默认便会启动此任务调度命令。</p><p>crond命令每分锺会定期检查是否有要执行的工作，如果有要执行的工作便会自动执行该工作。</p><p>而linux任务调度的工作主要分为以下两类：</p><ol><li>系统执行的工作：系统周期性所要执行的工作，如备份系统数据、清理缓存</li><li>个人执行的工作：某个用户定期要做的工作，例如每隔10分钟检查邮件服务器是否有新信，这些工作可由每个用户自行设置</li></ol><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><code>crontab [ -u user ] file</code><br>或<br><code>crontab [ -u user ] { -l | -r | -e }</code>  </p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>crontab 是用来让使用者在固定时间或固定间隔执行程序之用，换句话说，也就是类似使用者的时程表</p><p><code>-u user</code> 是指设定指定 user 的时程表，这个前提是你必须要有其权限(比如说是 root)才能够指定他人的时程表。如果不使用 <code>-u user</code> 的话，就是表示设定自己的时程表。</p><p>参数说明：</p><pre><code>-e : 执行文字编辑器来设定时程表，内定的文字编辑器是 VI，如果你想用别的文字编辑器，则请先设定 VISUAL 环境变数来指定使用那个文字编辑器(比如说 setenv VISUAL joe)-r : 删除目前的时程表-l : 列出目前的时程表</code></pre><p>时程表的格式如下：</p><p><code>f1 f2 f3 f4 f5 program</code></p><pre><code>其中 f1 是表示分钟，f2 表示小时，f3 表示一个月份中的第几日，f4 表示月份，f5 表示一个星期中的第几天。program 表示要执行的程序。当 f1 为 * 时表示每分钟都要执行 program，f2 为 * 时表示每小时都要执行程序，其馀类推当 f1 为 a-b 时表示从第 a 分钟到第 b 分钟这段时间内要执行，f2 为 a-b 时表示从第 a 到第 b 小时都要执行，其馀类推当 f1 为 */n 时表示每 n 分钟个时间间隔执行一次，f2 为 */n 表示每 n 小时个时间间隔执行一次，其馀类推当 f1 为 a, b, c,... 时表示第 a, b, c,... 分钟要执行，f2 为 a, b, c,... 时表示第 a, b, c...个小时要执行，其馀类推使用者也可以将所有的设定先存放在文件中，用 crontab file 的方式来设定时程表。</code></pre><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><pre><code>每月每天每小时的第 0 分钟执行一次 /bin/ls0 * * * * /bin/ls在 12 月内, 每天的早上 6 点到 12 点，每隔 3 个小时 0 分钟执行一次 /usr/bin/backup0 6-12/3 * 12 * /usr/bin/backup周一到周五每天下午 5:00 寄一封信给 alex@domain.name0 17 * * 1-5 mail -s &quot;hi&quot; alex@domain.name &lt; /tmp/maildata每月每天的午夜 0 点 20 分, 2 点 20 分, 4 点 20 分....执行 echo &quot;haha&quot;20 0-23/2 * * * echo &quot;haha&quot;</code></pre><p>下面再看看几个具体的例子：</p><pre><code>0 */2 * * * /sbin/service httpd restart  意思是每两个小时重启一次apache 50 7 * * * /sbin/service sshd start  意思是每天7：50开启ssh服务 50 22 * * * /sbin/service sshd stop  意思是每天22：50关闭ssh服务 0 0 1,15 * * fsck /home  每月1号和15号检查/home 磁盘 1 * * * * /home/bruce/backup  每小时的第一分执行 /home/bruce/backup这个文件 00 03 * * 1-5 find /home &quot;*.xxx&quot; -mtime +4 -exec rm {} \;  每周一至周五3点钟，在目录/home中，查找文件名为*.xxx的文件，并删除4天前的文件。30 6 */10 * * ls  意思是每月的1、11、21、31日是的6：30执行一次ls命令</code></pre><blockquote><p>注意：当程序在你所指定的时间执行后，系统会寄一封信给你，显示该程序执行的内容，若是你不希望收到这样的信，请在每一行空一格之后加上 &gt; /dev/null 2&gt;&amp;1 即可</p></blockquote><p>参考网站:</p><p><a href="https://www.runoob.com/linux/linux-comm-crontab.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-comm-crontab.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Linux crontab是用来定期执行程序的命令。&lt;/p&gt;
&lt;p&gt;当安装完成操作系统之后，默认便会启动此任务调度命令。&lt;/p&gt;
&lt;p&gt;crond命令每分锺会定期检查是否有要执行的工作，如果有要执行的工作便会自动执行该工作。&lt;/p&gt;
&lt;p&gt;而linux任务调度的工作主要分为
      
    
    </summary>
    
      <category term="Liunx" scheme="http://yoursite.com/categories/Liunx/"/>
    
    
      <category term="Liunx" scheme="http://yoursite.com/tags/Liunx/"/>
    
  </entry>
  
  <entry>
    <title>Liunx curl命令详解</title>
    <link href="http://yoursite.com/2019/10/02/Liunx-curl%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/10/02/Liunx-curl命令详解/</id>
    <published>2019-10-02T14:43:03.000Z</published>
    <updated>2019-10-02T14:43:24.210Z</updated>
    
    <content type="html"><![CDATA[<p>curl 是常用的命令行工具，用来请求 Web 服务器。它的名字就是客户端（client）的 URL 工具的意思。</p><p>它的功能非常强大，命令行参数多达几十种。如果熟练的话，完全可以取代 Postman 这一类的图形界面工具。</p><p><img src="https://www.wangbase.com/blogimg/asset/201909/bg2019090501.jpg" alt title></p><p>不带有任何参数时，curl 就是发出 GET 请求。</p><blockquote><pre class=" language-bash"><code class=" language-bash"><br>$ curl https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com<br></code></pre></blockquote><p>上面命令向<code><a href="http://www.example.com" target="_blank" rel="noopener">www.example.com</a></code>发出 GET 请求，服务器返回的内容会在命令行输出。</p><h2><strong>-A</strong></h2><p><code>-A</code>参数指定客户端的用户代理标头，即<code>User-Agent</code>。curl 的默认用户代理字符串是<code>curl/[version]</code>。</p><blockquote><pre class=" language-bash"><code class=" language-bash"><br>$ curl <span class="token operator">-</span>A <span class="token string">‘Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36’</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>google<span class="token punctuation">.</span>com<br></code></pre></blockquote><p>上面命令将<code>User-Agent</code>改成 Chrome 浏览器。</p><blockquote><pre class=" language-bash"><code class=" language-bash"><br>$ curl <span class="token operator">-</span>A <span class="token string">‘’</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>google<span class="token punctuation">.</span>com<br></code></pre></blockquote><p>上面命令会移除<code>User-Agent</code>标头。</p><p>也可以通过<code>-H</code>参数直接指定标头，更改<code>User-Agent</code>。</p><blockquote><pre class=" language-bash"><code class=" language-bash"><br>$ curl <span class="token operator">-</span>H <span class="token string">‘User-Agent: php/1.0’</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>google<span class="token punctuation">.</span>com<br></code></pre></blockquote><h2><strong>-b</strong></h2><p><code>-b</code>参数用来向服务器发送 Cookie。</p><blockquote><pre class=" language-bash"><code class=" language-bash"><br>$ curl <span class="token operator">-</span>b <span class="token string">‘foo=bar’</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>google<span class="token punctuation">.</span>com<br></code></pre></blockquote><p>上面命令会生成一个标头<code>Cookie: foo=bar</code>，向服务器发送一个名为<code>foo</code>、值为<code>bar</code>的 Cookie。</p><blockquote><pre class=" language-bash"><code class=" language-bash"><br>$ curl <span class="token operator">-</span>b <span class="token string">‘foo1=bar’</span> <span class="token operator">-</span>b <span class="token string">‘foo2=baz’</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>google<span class="token punctuation">.</span>com<br></code></pre></blockquote><p>上面命令发送两个 Cookie。</p><blockquote><pre class=" language-bash"><code class=" language-bash"><br>$ curl <span class="token operator">-</span>b cookies<span class="token punctuation">.</span>txt https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>google<span class="token punctuation">.</span>com<br></code></pre></blockquote><p>上面命令读取本地文件<code>cookies.txt</code>，里面是服务器设置的 Cookie（参见<code>-c</code>参数），将其发送到服务器。</p><h2><strong>-c</strong></h2><p><code>-c</code>参数将服务器设置的 Cookie 写入一个文件。</p><blockquote><pre class=" language-bash"><code class=" language-bash"><br>$ curl <span class="token operator">-</span>c cookies<span class="token punctuation">.</span>txt https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>google<span class="token punctuation">.</span>com<br></code></pre></blockquote><p>上面命令将服务器的 HTTP 回应所设置 Cookie 写入文本文件<code>cookies.txt</code>。</p><h2><strong>-d</strong></h2><p><code>-d</code>参数用于发送 POST 请求的数据体。</p><blockquote><pre class=" language-bash"><code class=" language-bash"><br>$ curl <span class="token operator">-</span>d<span class="token string">‘login=emma＆password=123’</span><span class="token operator">-</span>X POST https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>google<span class="token punctuation">.</span>com<span class="token operator">/</span>login<br><span class="token comment" spellcheck="true"># 或者<br></span>$ curl <span class="token operator">-</span>d <span class="token string">‘login=emma’</span> <span class="token operator">-</span>d <span class="token string">‘password=123’</span> <span class="token operator">-</span>X POST  https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>google<span class="token punctuation">.</span>com<span class="token operator">/</span>login<br></code></pre></blockquote><p>使用<code>-d</code>参数以后，HTTP 请求会自动加上标头<code>Content-Type : application/x-www-form-urlencoded</code>。并且会自动将请求转为 POST 方法，因此可以省略<code>-X POST</code>。</p><p><code>-d</code>参数可以读取本地文本文件的数据，向服务器发送。</p><blockquote><pre class=" language-bash"><code class=" language-bash"><br>$ curl <span class="token operator">-</span>d <span class="token string"><a href="mailto:&#39;@data.txt" target="_blank" rel="noopener">&#39;@data.txt</a>‘</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>google<span class="token punctuation">.</span>com<span class="token operator">/</span>login<br></code></pre></blockquote><p>上面命令读取<code>data.txt</code>文件的内容，作为数据体向服务器发送。</p><h2><strong>–data-urlencode</strong></h2><p><code>–data-urlencode</code>参数等同于<code>-d</code>，发送 POST 请求的数据体，区别在于会自动将发送的数据进行 URL 编码。</p><blockquote><pre class=" language-bash"><code class=" language-bash"><br>$ curl <span class="token operator">–</span>data<span class="token operator">-</span>urlencode <span class="token string">‘comment=hello world’</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>google<span class="token punctuation">.</span>com<span class="token operator">/</span>login<br></code></pre></blockquote><p>上面代码中，发送的数据<code>hello world</code>之间有一个空格，需要进行 URL 编码。</p><h2><strong>-e</strong></h2><p><code>-e</code>参数用来设置 HTTP 的标头<code>Referer</code>，表示请求的来源。</p><blockquote><pre class=" language-bash"><code class=" language-bash"><br>curl <span class="token operator">-</span>e <span class="token string">‘<a class="token url-link" href="https://google.com" target="_blank" rel="noopener">https://google.com</a>?q=example’</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com<br></code></pre></blockquote><p>上面命令将<code>Referer</code>标头设为<code><a href="https://google.com?q=example" target="_blank" rel="noopener">https://google.com?q=example</a></code>。</p><p><code>-H</code>参数可以通过直接添加标头<code>Referer</code>，达到同样效果。</p><blockquote><pre class=" language-bash"><code class=" language-bash"><br>curl <span class="token operator">-</span>H <span class="token string">‘Referer: <a class="token url-link" href="https://google.com" target="_blank" rel="noopener">https://google.com</a>?q=example’</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com<br></code></pre></blockquote><h2><strong>-F</strong></h2><p><code>-F</code>参数用来向服务器上传二进制文件。</p><blockquote><pre class=" language-bash"><code class=" language-bash"><br>$ curl <span class="token operator">-</span>F <span class="token string">‘<a class="token email-link" href="mailto:file=@photo.png" target="_blank" rel="noopener">file=@photo.png</a>‘</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>google<span class="token punctuation">.</span>com<span class="token operator">/</span>profile<br></code></pre></blockquote><p>上面命令会给 HTTP 请求加上标头<code>Content-Type: multipart/form-data</code>，然后将文件<code>photo.png</code>作为<code>file</code>字段上传。</p><p><code>-F</code>参数可以指定 MIME 类型。</p><blockquote><pre class=" language-bash"><code class=" language-bash"><br>$ curl <span class="token operator">-</span>F <span class="token string">‘<a class="token email-link" href="mailto:file=@photo.png" target="_blank" rel="noopener">file=@photo.png</a>;type=image/png’</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>google<span class="token punctuation">.</span>com<span class="token operator">/</span>profile<br></code></pre></blockquote><p>上面命令指定 MIME 类型为<code>image/png</code>，否则 curl 会把 MIME 类型设为<code>application/octet-stream</code>。</p><p><code>-F</code>参数也可以指定文件名。</p><blockquote><pre class=" language-bash"><code class=" language-bash"><br>$ curl <span class="token operator">-</span>F <span class="token string">‘<a class="token email-link" href="mailto:file=@photo.png" target="_blank" rel="noopener">file=@photo.png</a>;filename=me.png’</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>google<span class="token punctuation">.</span>com<span class="token operator">/</span>profile<br></code></pre></blockquote><p>上面命令中，原始文件名为<code>photo.png</code>，但是服务器接收到的文件名为<code>me.png</code>。</p><h2><strong>-G</strong></h2><p><code>-G</code>参数用来构造 URL 的查询字符串。</p><blockquote><pre class=" language-bash"><code class=" language-bash"><br>$ curl <span class="token operator">-</span>G <span class="token operator">-</span>d <span class="token string">‘q=kitties’</span> <span class="token operator">-</span>d <span class="token string">‘count=20’</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>google<span class="token punctuation">.</span>com<span class="token operator">/</span>search<br></code></pre></blockquote><p>上面命令会发出一个 GET 请求，实际请求的 URL 为<code><a href="https://google.com/search?q=kitties&amp;count=20" target="_blank" rel="noopener">https://google.com/search?q=kitties&amp;count=20</a></code>。如果省略<code>–G</code>，会发出一个 POST 请求。</p><p>如果数据需要 URL 编码，可以结合<code>–data–urlencode</code>参数。</p><blockquote><pre class=" language-bash"><code class=" language-bash"><br>$ curl <span class="token operator">-</span>G <span class="token operator">–</span>data<span class="token operator">-</span>urlencode <span class="token string">‘comment=hello world’</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com<br></code></pre></blockquote><h2><strong>-H</strong></h2><p><code>-H</code>参数添加 HTTP 请求的标头。</p><blockquote><pre class=" language-bash"><code class=" language-bash"><br>$ curl <span class="token operator">-</span>H <span class="token string">‘Accept-Language: en-US’</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>google<span class="token punctuation">.</span>com<br></code></pre></blockquote><p>上面命令添加 HTTP 标头<code>Accept-Language: en-US</code>。</p><blockquote><pre class=" language-bash"><code class=" language-bash"><br>$ curl <span class="token operator">-</span>H <span class="token string">‘Accept-Language: en-US’</span> <span class="token operator">-</span>H <span class="token string">‘Secret-Message: xyzzy’</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>google<span class="token punctuation">.</span>com<br></code></pre></blockquote><p>上面命令添加两个 HTTP 标头。</p><blockquote><pre class=" language-bash"><code class=" language-bash"><br>$ curl <span class="token operator">-</span>d <span class="token string">‘{“login”: “emma”, “pass”: “123”}’</span> <span class="token operator">-</span>H <span class="token string">‘Content-Type: application/json’</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>google<span class="token punctuation">.</span>com<span class="token operator">/</span>login<br></code></pre></blockquote><p>上面命令添加 HTTP 请求的标头是<code>Content-Type: application/json</code>，然后用<code>-d</code>参数发送 JSON 数据。</p><h2><strong>-i</strong></h2><p><code>-i</code>参数打印出服务器回应的 HTTP 标头。</p><blockquote><pre class=" language-bash"><code class=" language-bash"><br>$ curl <span class="token operator">-</span>i https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com<br></code></pre></blockquote><p>上面命令收到服务器回应后，先输出服务器回应的标头，然后空一行，再输出网页的源码。</p><h2><strong>-I</strong></h2><p><code>-I</code>参数向服务器发出 HEAD 请求，然会将服务器返回的 HTTP 标头打印出来。</p><blockquote><pre class=" language-bash"><code class=" language-bash"><br>$ curl <span class="token operator">-</span>I https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com<br></code></pre></blockquote><p>上面命令输出服务器对 HEAD 请求的回应。</p><p><code>–head</code>参数等同于<code>-I</code>。</p><blockquote><pre class=" language-bash"><code class=" language-bash"><br>$ curl <span class="token operator">–</span>head https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com<br></code></pre></blockquote><h2><strong>-k</strong></h2><p><code>-k</code>参数指定跳过 SSL 检测。</p><blockquote><pre class=" language-bash"><code class=" language-bash"><br>$ curl <span class="token operator">-</span>k https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com<br></code></pre></blockquote><p>上面命令不会检查服务器的 SSL 证书是否正确。</p><h2><strong>-L</strong></h2><p><code>-L</code>参数会让 HTTP 请求跟随服务器的重定向。curl 默认不跟随重定向。</p><blockquote><pre class=" language-bash"><code class=" language-bash"><br>$ curl <span class="token operator">-</span>L <span class="token operator">-</span>d <span class="token string">‘tweet=hi’</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>api<span class="token punctuation">.</span>twitter<span class="token punctuation">.</span>com<span class="token operator">/</span>tweet<br></code></pre></blockquote><h2><strong>–limit-rate</strong></h2><p><code>–limit-rate</code>用来限制 HTTP 请求和回应的带宽，模拟慢网速的环境。</p><blockquote><pre class=" language-bash"><code class=" language-bash"><br>$ curl <span class="token operator">–</span>limit<span class="token operator">-</span>rate 200k https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>google<span class="token punctuation">.</span>com<br></code></pre></blockquote><p>上面命令将带宽限制在每秒 200K 字节。</p><h2><strong>-o</strong></h2><p><code>-o</code>参数将服务器的回应保存成文件，等同于<code>wget</code>命令。</p><blockquote><pre class=" language-bash"><code class=" language-bash"><br>$ curl <span class="token operator">-</span>o example<span class="token punctuation">.</span>html https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com<br></code></pre></blockquote><p>上面命令将<code><a href="http://www.example.com" target="_blank" rel="noopener">www.example.com</a></code>保存成<code>example.html</code>。</p><h2><strong>-O</strong></h2><p><code>-O</code>参数将服务器回应保存成文件，并将 URL 的最后部分当作文件名。</p><blockquote><pre class=" language-bash"><code class=" language-bash"><br>$ curl <span class="token operator">-</span>O https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com<span class="token operator">/</span>foo<span class="token operator">/</span>bar<span class="token punctuation">.</span>html<br></code></pre></blockquote><p>上面命令将服务器回应保存成文件，文件名为<code>bar.html</code>。</p><h2><strong>-s</strong></h2><p><code>-s</code>参数将不输出错误和进度信息。</p><blockquote><pre class=" language-bash"><code class=" language-bash"><br>$ curl <span class="token operator">-</span>s https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com<br></code></pre></blockquote><p>上面命令一旦发生错误，不会显示错误信息。不发生错误的话，会正常显示运行结果。</p><p>如果想让 curl 不产生任何输出，可以使用下面的命令。</p><blockquote><pre class=" language-bash"><code class=" language-bash"><br>$ curl <span class="token operator">-</span>s <span class="token operator">-</span>o <span class="token operator">/</span>dev<span class="token operator">/</span>null https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>google<span class="token punctuation">.</span>com<br></code></pre></blockquote><h2><strong>-S</strong></h2><p><code>-S</code>参数指定只输出错误信息，通常与<code>-s</code>一起使用。</p><blockquote><pre class=" language-bash"><code class=" language-bash"><br>$ curl <span class="token operator">-</span>s <span class="token operator">-</span>o <span class="token operator">/</span>dev<span class="token operator">/</span>null https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>google<span class="token punctuation">.</span>com<br></code></pre></blockquote><p>上面命令没有任何输出，除非发生错误。</p><h2><strong>-u</strong></h2><p><code>-u</code>参数用来设置服务器认证的用户名和密码。</p><blockquote><pre class=" language-bash"><code class=" language-bash"><br>$ curl <span class="token operator">-</span>u <span class="token string">‘bob:12345’</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>google<span class="token punctuation">.</span>com<span class="token operator">/</span>login<br></code></pre></blockquote><p>上面命令设置用户名为<code>bob</code>，密码为<code>12345</code>，然后将其转为 HTTP 标头<code>Authorization: Basic Ym9iOjEyMzQ1</code>。</p><p>curl 能够识别 URL 里面的用户名和密码。</p><blockquote><pre class=" language-bash"><code class=" language-bash"><br>$ curl https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>bob<span class="token punctuation">:</span><span class="token number">12345</span>@google<span class="token punctuation">.</span>com<span class="token operator">/</span>login<br></code></pre></blockquote><p>上面命令能够识别 URL 里面的用户名和密码，将其转为上个例子里面的 HTTP 标头。</p><blockquote><pre class=" language-bash"><code class=" language-bash"><br>$ curl <span class="token operator">-</span>u <span class="token string">‘bob’</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>google<span class="token punctuation">.</span>com<span class="token operator">/</span>login<br></code></pre></blockquote><p>上面命令只设置了用户名，执行后，curl 会提示用户输入密码。</p><h2><strong>-v</strong></h2><p><code>-v</code>参数输出通信的整个过程，用于调试。</p><blockquote><pre class=" language-bash"><code class=" language-bash"><br>$ curl <span class="token operator">-</span>v https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com<br></code></pre></blockquote><p><code>–trace</code>参数也可以用于调试，还会输出原始的二进制数据。</p><blockquote><pre class=" language-bash"><code class=" language-bash"><br>$ curl <span class="token operator">–</span>trace <span class="token operator">-</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com<br></code></pre></blockquote><h2><strong>-x</strong></h2><p><code>-x</code>参数指定 HTTP 请求的代理。</p><blockquote><pre class=" language-bash"><code class=" language-bash"><br>$ curl <span class="token operator">-</span>x socks5<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>james<span class="token punctuation">:</span><a class="token email-link" href="mailto:cats@myproxy" target="_blank" rel="noopener">cats@myproxy</a><span class="token punctuation">.</span>com<span class="token punctuation">:</span><span class="token number">8080</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com<br></code></pre></blockquote><p>上面命令指定 HTTP 请求通过<code>myproxy.com:8080</code>的 socks5 代理发出。</p><p>如果没有指定代理协议，默认为 HTTP。</p><blockquote><pre class=" language-bash"><code class=" language-bash"><br>$ curl <span class="token operator">-</span>x james<span class="token punctuation">:</span><a class="token email-link" href="mailto:cats@myproxy" target="_blank" rel="noopener">cats@myproxy</a><span class="token punctuation">.</span>com<span class="token punctuation">:</span><span class="token number">8080</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com<br></code></pre></blockquote><p>上面命令中，请求的代理使用 HTTP 协议。</p><h2><strong>-X</strong></h2><p><code>-X</code>参数指定 HTTP 请求的方法。</p><blockquote><pre class=" language-bash"><code class=" language-bash"><br>$ curl <span class="token operator">-</span>X POST https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com<br></code></pre></blockquote><p>上面命令对<code><a href="https://www.example.com" target="_blank" rel="noopener">https://www.example.com</a></code>发出 POST 请求。</p><h2>参考链接</h2><ul><br><li><a href="https://catonmat.net/cookbooks/curl" target="_blank">Curl Cookbook</a></li><br></ul><p>文章转自:</p><p><a href="http://www.ruanyifeng.com/blog/2019/09/curl-reference.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2019/09/curl-reference.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;curl 是常用的命令行工具，用来请求 Web 服务器。它的名字就是客户端（client）的 URL 工具的意思。&lt;/p&gt;

&lt;p&gt;它的功能非常强大，命令行参数多达几十种。如果熟练的话，完全可以取代 Postman 这一类的图形界面工具。&lt;/p&gt;

&lt;p&gt;&lt;img src=
      
    
    </summary>
    
      <category term="Liunx" scheme="http://yoursite.com/categories/Liunx/"/>
    
    
      <category term="Liunx" scheme="http://yoursite.com/tags/Liunx/"/>
    
  </entry>
  
  <entry>
    <title>Python 爬取Boos直聘</title>
    <link href="http://yoursite.com/2019/10/02/Python-%E7%88%AC%E5%8F%96Boos%E7%9B%B4%E8%81%98/"/>
    <id>http://yoursite.com/2019/10/02/Python-爬取Boos直聘/</id>
    <published>2019-10-02T14:42:03.000Z</published>
    <updated>2019-10-02T14:42:38.102Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据采集"><a href="#数据采集" class="headerlink" title="数据采集"></a>数据采集</h2><p>数据采集（Date Capture），又叫做数据获取，数据采集是将系统需要管理的所有对象的原始数据（外部数据）进行一系列的操作并输入到系统内部的一个接口。像摄像头、麦克风等等，都是数据采集工具，而在计算机世界，相应的数据采集工具就更多了，简单的采集工具有Hawk、八爪鱼等。在计算机广泛应用的今天，数据采集在多个领域具有非常重要的意义。它是计算机与外部物理世界连接的桥梁。</p><p>前几个月做了一个互联网加项目,是基于机器学习的一个简历招聘推荐系统</p><p>今天就分享一下当时爬取Boss直聘时的爬虫代码</p><h2 id="用到的库"><a href="#用到的库" class="headerlink" title="用到的库"></a>用到的库</h2><ul><li>Python3</li><li>selenium</li><li>BeautifulSoup</li><li>os</li><li>io</li><li>re</li></ul><h2 id="简述思路"><a href="#简述思路" class="headerlink" title="简述思路"></a>简述思路</h2><h3 id="第一步-查看网站url与网站标签"><a href="#第一步-查看网站url与网站标签" class="headerlink" title="第一步 查看网站url与网站标签"></a>第一步 查看网站url与网站标签</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9wdXVpLnFwaWMuY24vZmFuc19hZG1pbi8wLzNfMzExNTkyMDU5XzE1NzAwMTM0MzYyNTkvMA?x-oss-process=image/format,png" alt><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9wdXVpLnFwaWMuY24vZmFuc19hZG1pbi8wLzNfNTE2NTY3NDE4XzE1NzAwMTM5Mjc0MTcvMA?x-oss-process=image/format,png" alt></p><p>可以看到所有的子网页与招聘职位便签都是有规律的，所以咱们可以从这里下手</p><p><strong>代码</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> Chrome</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#寻找网站</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_boss</span><span class="params">()</span>:</span></span><br><span class="line">    main_html = BeautifulSoup(browser.page_source, <span class="string">"lxml"</span>)</span><br><span class="line">    htmls_two = main_html.find_all(<span class="string">"a"</span>, href=re.compile(<span class="string">'\w.*?-\w.*?'</span>))   <span class="comment">#寻找职位href</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> html_two <span class="keyword">in</span> htmls_two:                                           <span class="comment">#遍历</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100</span>):                                          <span class="comment">#寻找下一页</span></span><br><span class="line"></span><br><span class="line">            browser.get(base_url+html_two[<span class="string">'href'</span>]+<span class="string">'?page='</span>+str(i)+<span class="string">'&amp;ka=page-'</span>+str(i))</span><br><span class="line">            print(<span class="string">"第&#123;&#125;页"</span>.format(str(i)))                                 <span class="comment">#输出下一页</span></span><br><span class="line"></span><br><span class="line">            soup_one = BeautifulSoup(browser.page_source, <span class="string">'lxml'</span>)</span><br><span class="line">            link_lists_nexts = soup_one.find_all(<span class="string">'a'</span>, href=re.compile(<span class="string">'job_detail/.*?~.html'</span>))  <span class="comment">#寻找需要爬取的职位网站</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> link_lists_next <span class="keyword">in</span> link_lists_nexts:                      <span class="comment">#遍历</span></span><br><span class="line">                html_end=base_url+link_lists_next[<span class="string">'href'</span>]</span><br><span class="line">                browser.get(html_end)</span><br><span class="line"></span><br><span class="line">                reptilian()                                             <span class="comment">#执行爬虫函数</span></span><br><span class="line">                time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#主函数</span></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">#获取目标网站url 与 创建招聘信息文件</span></span><br><span class="line">    url=<span class="string">'https://www.zhipin.com/?ka=header-home-logo'</span></span><br><span class="line">    base_url=<span class="string">'https://www.zhipin.com'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#打开浏览器</span></span><br><span class="line">    browser=Chrome()</span><br><span class="line">    browser.get(url)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#主函数</span></span><br><span class="line"></span><br><span class="line">    find_boss()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#关闭浏览器</span></span><br><span class="line">    browser.close()</span><br></pre></td></tr></table></figure></p><p>构造函数的时候使用了正则表达式匹配了第一页所有的招聘岗位网站</p><p>构造成功后可以爬虫就可以定位到想要爬取的具体招聘岗位网页了</p><h3 id="第二步-爬取岗位具体信息"><a href="#第二步-爬取岗位具体信息" class="headerlink" title="第二步 爬取岗位具体信息"></a>第二步 爬取岗位具体信息</h3><p><img src="https://img-blog.csdnimg.cn/20191002190452952.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>现在我们要根据要爬取的具体信息来分析标签了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#构造爬虫函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reptilian</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    page_source=browser.page_source</span><br><span class="line">    soup=BeautifulSoup(page_source, <span class="string">'html.parser'</span>)</span><br><span class="line">    <span class="comment">#工作名称 学历 福利 工资</span></span><br><span class="line">    company_info=soup.find(<span class="string">'div'</span>, class_=<span class="string">'info-primary'</span>)</span><br><span class="line">    job_name = company_info.find(<span class="string">'div'</span>, class_=<span class="string">'name'</span>)</span><br><span class="line">    study_infor=company_info.find(<span class="string">'p'</span>,)</span><br><span class="line">    job_tags=company_info.find(<span class="string">'div'</span>,class_=<span class="string">'job-tags'</span>)</span><br><span class="line">    describe=soup.find(<span class="string">'div'</span>,class_=<span class="string">'text'</span>)</span><br><span class="line">    <span class="comment">#工作地址 公司名称</span></span><br><span class="line">    detail_content=soup.find(<span class="string">'div'</span>, class_=<span class="string">'detail-content'</span>)</span><br><span class="line">    company_name=detail_content.find(<span class="string">'div'</span>, class_=<span class="string">'name'</span>)</span><br><span class="line">    company_addr=detail_content.find(<span class="string">'div'</span>,class_=<span class="string">'location-address'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#去标签</span></span><br><span class="line">    job_name = <span class="string">' '</span>.join(<span class="string">'%s'</span> % id <span class="keyword">for</span> id <span class="keyword">in</span> job_name)</span><br><span class="line">    study_infor = <span class="string">' '</span>.join(<span class="string">'%s'</span> % id <span class="keyword">for</span> id <span class="keyword">in</span> study_infor)</span><br><span class="line">    job_tags = <span class="string">' '</span>.join(<span class="string">'%s'</span> % id <span class="keyword">for</span> id <span class="keyword">in</span> job_tags)</span><br><span class="line">    describe=<span class="string">' '</span>.join(<span class="string">'%s'</span> % id <span class="keyword">for</span> id <span class="keyword">in</span> describe)</span><br><span class="line">    company_name = <span class="string">' '</span>.join(<span class="string">'%s'</span> % id <span class="keyword">for</span> id <span class="keyword">in</span> company_name)</span><br><span class="line">    company_addr = <span class="string">' '</span>.join(<span class="string">'%s'</span> % id <span class="keyword">for</span> id <span class="keyword">in</span> company_addr)</span><br><span class="line">    cut = re.compile(<span class="string">r'&lt;[^&gt;]+&gt;'</span>, re.S)</span><br><span class="line"></span><br><span class="line">    job_name= cut.sub(<span class="string">''</span>, job_name)</span><br><span class="line">    study_infor= cut.sub(<span class="string">''</span>, study_infor)</span><br><span class="line">    job_tags= cut.sub(<span class="string">''</span>, job_tags)</span><br><span class="line">    company_name= cut.sub(<span class="string">''</span>, company_name)</span><br><span class="line">    company_addr= cut.sub(<span class="string">''</span>, company_addr)</span><br><span class="line">    describe = cut.sub(<span class="string">''</span>, describe)</span><br><span class="line"></span><br><span class="line">    f=<span class="string">"-------------------------------------------------------------------------------------"</span></span><br><span class="line"></span><br><span class="line">    infors=str(job_name)+str(study_infor)+str(job_tags)+str(company_name)+str(company_addr)+<span class="string">'\n'</span>+<span class="string">"职位描述 : "</span>+<span class="string">'\n'</span>+str(describe)+<span class="string">'\n'</span>+str(f)+<span class="string">'\n'</span></span><br><span class="line"></span><br><span class="line">    write_data(file_path=file_path, file_name=file_name, data=infors)</span><br></pre></td></tr></table></figure><p>可以添加个写入txt文件的函数,便于保存</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建文件函数（文件路径，文件名）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">establish_file</span><span class="params">(file_path, file_name)</span>:</span></span><br><span class="line">    <span class="comment"># 文件路径</span></span><br><span class="line">    path = file_path + file_name</span><br><span class="line">    <span class="comment"># 判断文件是否存在</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(path):</span><br><span class="line">        print(file_name + <span class="string">"文件已经存在，正在删除~~~~~"</span>)</span><br><span class="line">        <span class="comment"># 删除原有的文件</span></span><br><span class="line">        os.remove(path)</span><br><span class="line">        print(<span class="string">"原有文件已经删除，正在重新创建文件~~~~"</span>)</span><br><span class="line">    <span class="comment"># 创建文件（文件路径， 打开方式‘w’只写， 编码格式）</span></span><br><span class="line"></span><br><span class="line">    f = io.open(path, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="comment"># 关闭文件</span></span><br><span class="line">    f.close()</span><br><span class="line">    print(<span class="string">"文件创建成功！"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将获取数据写入文件中（文件路径，文件名，数据）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_data</span><span class="params">(file_path, file_name, data)</span>:</span></span><br><span class="line">    <span class="comment"># 文件路径</span></span><br><span class="line">    path = file_path + file_name</span><br><span class="line">    <span class="comment"># 打开创建文件（文件路径，打开方式'a'追加， 编码格式）</span></span><br><span class="line">    f = io.open(path, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">    print(<span class="string">"正在写入"</span> + file_name + <span class="string">"..."</span>)</span><br><span class="line">    <span class="comment"># 数据写入文件</span></span><br><span class="line">    f.write(data)</span><br><span class="line">    print(<span class="string">"写入成功"</span>)</span><br><span class="line">    <span class="comment"># 关闭文件</span></span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><p>这样就成功将该招聘岗位的基本信息就爬取到了</p><p><img src="https://img-blog.csdnimg.cn/20191002190850746.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="自动化爬取"><a href="#自动化爬取" class="headerlink" title="自动化爬取"></a>自动化爬取</h3><p>接下来就考虑将所有页数的与所有在招聘岗位自动化爬取了<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> Chrome</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建文件函数（文件路径，文件名）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">establish_file</span><span class="params">(file_path, file_name)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 文件路径</span></span><br><span class="line">    path = file_path + file_name</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断文件是否存在</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(path):</span><br><span class="line"></span><br><span class="line">        print(file_name + <span class="string">"文件已经存在"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">        f = io.open(path, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">        <span class="comment"># 关闭文件</span></span><br><span class="line">        f.close()</span><br><span class="line">        print(<span class="string">"文件创建成功！"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 主函数</span></span><br><span class="line"></span><br><span class="line">        find_boss()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将获取数据写入文件中（文件路径，文件名，数据）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_data</span><span class="params">(file_path, file_name, data)</span>:</span></span><br><span class="line">    <span class="comment"># 文件路径</span></span><br><span class="line">    path = file_path + file_name</span><br><span class="line">    <span class="comment"># 打开创建文件（文件路径，打开方式'a'追加， 编码格式）</span></span><br><span class="line">    f = io.open(path, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">    print(<span class="string">"正在写入"</span> +file_name + <span class="string">"..."</span>)</span><br><span class="line">    <span class="comment"># 数据写入文件</span></span><br><span class="line">    f.write(data)</span><br><span class="line">    print(<span class="string">"写入成功"</span>)</span><br><span class="line">    <span class="comment"># 关闭文件</span></span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#构造爬虫函数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造爬虫函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reptilian</span><span class="params">()</span>:</span></span><br><span class="line">    page_source = browser.page_source</span><br><span class="line">    soup = BeautifulSoup(page_source, <span class="string">'html.parser'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 工作名称 学历 福利 工资</span></span><br><span class="line">        company_info = soup.find(<span class="string">'div'</span>, class_=<span class="string">'info-primary'</span>)</span><br><span class="line">        job_name = company_info.find(<span class="string">'div'</span>, class_=<span class="string">'name'</span>)</span><br><span class="line">        study_infor = company_info.find(<span class="string">'p'</span>)</span><br><span class="line">        job_tags = company_info.find(<span class="string">'div'</span>, class_=<span class="string">'job-tags'</span>)</span><br><span class="line">        describe = soup.find(<span class="string">'div'</span>, class_=<span class="string">'text'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 工作地址 公司名称</span></span><br><span class="line">        detail_content = soup.find(<span class="string">'div'</span>, class_=<span class="string">'detail-content'</span>)</span><br><span class="line">        company_name = detail_content.find(<span class="string">'div'</span>, class_=<span class="string">'name'</span>)</span><br><span class="line">        company_addr = detail_content.find(<span class="string">'div'</span>, class_=<span class="string">'location-address'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 剔除标签</span></span><br><span class="line">        job_name = job_name.get_text(<span class="string">""</span>, strip=<span class="literal">True</span>)</span><br><span class="line">        study_infor = study_infor.get_text(<span class="string">""</span>, strip=<span class="literal">True</span>)</span><br><span class="line">        job_tags = job_tags.get_text(<span class="string">""</span>, strip=<span class="literal">True</span>)</span><br><span class="line">        describe = describe.get_text(<span class="string">""</span>, strip=<span class="literal">True</span>)</span><br><span class="line">        company_name = company_name.get_text(<span class="string">""</span>, strip=<span class="literal">True</span>)</span><br><span class="line">        company_addr = company_addr.get_text(<span class="string">""</span>, strip=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> AttributeError:</span><br><span class="line"></span><br><span class="line">        print(<span class="string">"该页面不存在，请跳过本次页面"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">        f = <span class="string">"-------------------------------------------------------------------------------------"</span></span><br><span class="line">        infors = <span class="string">"工作名称 工资："</span> + job_name + <span class="string">'\n'</span> + <span class="string">"工作地点 工作经验 学历："</span> + study_infor + <span class="string">'\n'</span> + <span class="string">"公司福利："</span> + job_tags + <span class="string">'\n'</span> + <span class="string">"职位描述："</span> + describe + <span class="string">'\n'</span> + <span class="string">"公司名称："</span> + company_name + <span class="string">'\n'</span> + <span class="string">"工作地址："</span> + company_addr + <span class="string">'\n'</span> + f + <span class="string">'\n'</span></span><br><span class="line">        write_data(file_path=file_path, file_name=file_name, data=infors)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#寻找网站</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_boss</span><span class="params">()</span>:</span></span><br><span class="line">    main_html = BeautifulSoup(browser.page_source, <span class="string">"lxml"</span>)</span><br><span class="line">    job_list=main_html.find(<span class="string">'div'</span>,class_=<span class="string">"menu-sub"</span>)</span><br><span class="line">    htmls_two = job_list.find_all(<span class="string">"a"</span>, href=re.compile(<span class="string">'\w.*?-\w.*?'</span>))   <span class="comment">#寻找职位href</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> html_two <span class="keyword">in</span> htmls_two:                                           <span class="comment">#遍历</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>):                                          <span class="comment">#寻找下一页</span></span><br><span class="line"></span><br><span class="line">            browser.get(base_url+html_two[<span class="string">'href'</span>]+<span class="string">'?page='</span>+str(i)+<span class="string">'&amp;ka=page-'</span>+str(i))</span><br><span class="line">            print(<span class="string">"第&#123;&#125;页"</span>.format(str(i)))                                 <span class="comment">#输出下一页</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            soup_one = BeautifulSoup(browser.page_source, <span class="string">'lxml'</span>)</span><br><span class="line">            link_lists_nexts = soup_one.find_all(<span class="string">'a'</span>, href=re.compile(<span class="string">'job_detail/.*?~.html'</span>))  <span class="comment">#寻找需要爬取的职位网站</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> link_lists_next <span class="keyword">in</span> link_lists_nexts:                      <span class="comment">#遍历</span></span><br><span class="line">                html_end=base_url+link_lists_next[<span class="string">'href'</span>]</span><br><span class="line">                browser.get(html_end)</span><br><span class="line">                reptilian()                                             <span class="comment">#执行爬虫函数</span></span><br><span class="line">                time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#主函数</span></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">#获取目标网站url 与 创建招聘信息文件</span></span><br><span class="line">    url=<span class="string">'https://www.zhipin.com/?ka=header-home-logo'</span></span><br><span class="line">    base_url=<span class="string">'https://www.zhipin.com'</span></span><br><span class="line">    file_path=<span class="string">'E:\\'</span>   <span class="comment">#路径</span></span><br><span class="line">    file_name=str(input(<span class="string">"请输入要创建的文件名称："</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#打开浏览器</span></span><br><span class="line">    browser=Chrome()</span><br><span class="line">    browser.get(url)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#创建文件</span></span><br><span class="line">    establish_file(file_path=file_path, file_name=file_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#关闭浏览器</span></span><br><span class="line">    browser.close()</span><br></pre></td></tr></table></figure></p><p><strong>注意</strong></p><p>在设计代码的时候一定要考虑到404网站的存在,及时抛出异常,考虑周到</p><h3 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> Chrome</span><br><span class="line">      </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#寻找网站</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_boss</span><span class="params">()</span>:</span></span><br><span class="line">    main_html = BeautifulSoup(browser.page_source, <span class="string">"lxml"</span>)</span><br><span class="line">    job_lists = main_html.find(<span class="string">'div'</span>, class_=<span class="string">"menu-sub"</span>)</span><br><span class="line">    job_list= job_lists.find_all(<span class="string">"a"</span>, href=re.compile(<span class="string">'\w.*?-\w.*?'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> html_two <span class="keyword">in</span> job_list[<span class="number">79</span>:]:</span><br><span class="line"></span><br><span class="line">        browser.get(base_url+html_two[<span class="string">'href'</span>])</span><br><span class="line"></span><br><span class="line">        soup_one = BeautifulSoup(browser.page_source, <span class="string">'lxml'</span>)</span><br><span class="line">        link_lists_nexts = soup_one.find_all(<span class="string">'a'</span>, href=re.compile(<span class="string">'job_detail/.*?~.html'</span>))  <span class="comment">#寻找需要爬取的职位网站</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> link_lists_next <span class="keyword">in</span> link_lists_nexts:                    <span class="comment">#遍历</span></span><br><span class="line"></span><br><span class="line">            html_end=base_url+link_lists_next[<span class="string">'href'</span>]</span><br><span class="line">            print(html_end)</span><br><span class="line">            browser.get(html_end)</span><br><span class="line">            <span class="comment"># reptilian()                                                           #执行爬虫函数</span></span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">try</span>:                                                                        <span class="comment">#下一页</span></span><br><span class="line"></span><br><span class="line">            next_page =soup_one.find(<span class="string">'div'</span>, class_=<span class="string">"page"</span>)</span><br><span class="line">            next_page_end = next_page.find(<span class="string">"a"</span>, class_=<span class="string">'next'</span>)</span><br><span class="line">            browser.get(base_url + next_page_end[<span class="string">'href'</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span>                                                               <span class="comment">#如果没有则退出</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#主函数</span></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">#获取目标网站url 与 创建招聘信息文件</span></span><br><span class="line">    url=<span class="string">'https://www.zhipin.com/?ka=header-home-logo'</span></span><br><span class="line">    base_url=<span class="string">'https://www.zhipin.com'</span></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="comment">#打开浏览器</span></span><br><span class="line">    browser=Chrome()</span><br><span class="line">    browser.get(url)</span><br><span class="line"></span><br><span class="line">   <span class="comment">#运行主函数</span></span><br><span class="line">    find_boss()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191002191147429.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>这样,一个简单的python爬虫就实现了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数据采集&quot;&gt;&lt;a href=&quot;#数据采集&quot; class=&quot;headerlink&quot; title=&quot;数据采集&quot;&gt;&lt;/a&gt;数据采集&lt;/h2&gt;&lt;p&gt;数据采集（Date Capture），又叫做数据获取，数据采集是将系统需要管理的所有对象的原始数据（外部数据）进行一系列的操
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="数据采集" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>CTF隐写总结</title>
    <link href="http://yoursite.com/2019/10/02/CTF%E9%9A%90%E5%86%99%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/10/02/CTF隐写总结/</id>
    <published>2019-10-02T14:41:07.000Z</published>
    <updated>2019-10-02T14:41:35.297Z</updated>
    
    <content type="html"><![CDATA[<p>打了有小半年ctf比赛了，一直没有时间来写几篇关于ctf的博客，今天抽出时间写了点杂项中隐写的总结，希望能够帮到大家</p><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>隐写术是一门关于信息隐藏的技巧与科学，所谓信息隐藏指的是不让除预期的接收者之外的任何人知晓信息的传递事件或者信息的内容。隐写术的英文叫做Steganography，来源于特里特米乌斯的一本讲述密码学与隐写术的著作Steganographia，该书书名源于希腊语，意为“隐秘书写”。</p><h2 id="CTF隐写常见方式："><a href="#CTF隐写常见方式：" class="headerlink" title="CTF隐写常见方式："></a>CTF隐写常见方式：</h2><p>1.增加数据的方式 隐藏信息<br>另存为.zip后解压，正常的.JPG图片在文本编辑器（winhex）中，16进制是以FF D9结尾<br>原理：a.先制作一个1.zip 把含有隐藏的内容放进去‘<br>   b.另找一张.jpg图片(2.jpg)，执行命令：copy /b 2.jpg+1.zip output.jpg,得到一张output.jpg图片<br>   c.图片查看器会忽视jpg结束符之后的内容，所以附加的1.zip不会影响图像的正常显示</p><p>2.修改数据的方式 隐藏信息<br>利用LSB（最低有效位）来进行隐写<br>原理：图片的像素由三种颜色组成，即三原色，由这三种颜色可以组成其他各种颜色<br>例如：在.png图片的存储中，每个颜色会有8bit，LSB隐写就是修改了像数中最低的1bit，在人烟看来是看不出区别的，也就隐藏了信息<br>例如：把‘A’隐藏进图片，可以把‘A’转成16进制0x61再转成二进制01100001，再修改为红色通道的最低位为这些二进制字符串<br>工具：stegsolve<br>注意：隐写的载体不能使.jpg格式，jpg图片对像素数进行了有损的压缩，修改的信息可能会被破坏</p><p>3.隐写与加密<br>例如：打开一个.gif文件报错，这时，需要我们手动修复图片，首先需要对于这种图片的文件结构有所了解<br>查看.gif图片文档格式链接：<a href="http://dev.gameres.com/Program/Visual/Other%20/GIFDoc.htm" target="_blank" rel="noopener">http://dev.gameres.com/Program/Visual/Other%20/GIFDoc.htm</a><br>浏览图片后发现，有个PASSWORD一闪而过，gif与其他图片的最大区别是gif是动态图，可以由多帧组成，顺序播放，我们可以使用工具一帧一帧的观察图片，得到密文，进行解密<br>工具：Stegsolve或Namo_GIF_gr</p><p>4.载体<br>拿到一张含有信息的图片时：<br>a.分析数据隐藏在哪里，也就是说利用什么作为载体<br>b.进一步分析是加密的或是编码的<br>总结：我们要对一个图片的格式有所了解，知道哪些地方是可疑的，那些可以隐藏信息，那些有冗余的成分<br>例如：jpg图片可以吧信息隐藏在头部exif部分（插入了数码照片的信息），可以用查看属性的方式修改，也可以用exif编辑器编辑工具：power_exif</p><p>5.编程辅助<br>有一些情况下，没有现成的工具来完成，可以写一些的程序来辅助我们进行分析，或者是加解密<br>例如：一个png图片找flag，首先要对png图片格式了解：<a href="http://www.cnblogs.com/fengyv/archive/2006/04/30/2423964.html" target="_blank" rel="noopener">http://www.cnblogs.com/fengyv/archive/2006/04/30/2423964.html</a><br>先用stegsolve查看一下，没有发现问题，然后看一下结构，发现有一些异常的IDAT块（png图片中存储图像像数数据的块），可以用pngcheck来辅助我们观察，命令：pngcheck.exe -v 1.png,找到异常的IDAT部分，利用winhex扣出来研究</p><p>6.双图<br>给出两张图片，或是需要去寻到原来图片进行对比找出隐藏的信息</p><h2 id="隐写解决方案"><a href="#隐写解决方案" class="headerlink" title="隐写解决方案"></a>隐写解决方案</h2><p>一、隐写术可以利用图片、音频、视频为载体将数据隐藏在其中，将数据隐写到图像中较为常见。</p><p>二、图像隐写术进行数据隐写分为以下几类：</p><p>1.在图片右击-属性-详细信息中隐藏数据信息</p><p>2.将数据类型进行改写（rar类型数据 将其改写成jpg格式）</p><p>3.根据各种类型图像的固定格式，隐藏数据</p><p>修改图像开始标志，改变其原有图像格式；</p><p>在图像结束标志后加入数据；</p><p>在图像数据中假如数据，不影响视觉效果情况下修改像素数据，加入信息。</p><p>4.利用隐写算法将数据隐写到图像中而不影响图像（仅限于jpg图像），隐写算法常见有F5、Guess、JSteg和JPHide等</p><p>三、破解隐写术方法及步骤：</p><p>1.查看图像-属性-详细信息是否包括隐藏内容</p><p>2.利用WinHex打开图像，搜索CTF、ctf或flag看是否在打开数据中存在相关信息</p><p>3.检查图像开始标志和结束标志是否正确，若不正确修改图像标志恢复图像，打开查看是否ctf或flag等信息（往往gif属于动图，需要分帧查看各帧图像组合所得数据 若不是直接的ctf或flag信息 需要考虑将其解码）</p><p>jpg图像开始标志：FF D8     结束标志：FF D9</p><p>gif图像开始标志：47 49 46 38 39 61   结束标志：01 01 00 3B</p><p>4.将图像放置kali系统中，执行binwalk xxx.jpg 查看图像中是否是多个图像组合或者其中包含其他文件（若存在多幅图像组合，再执行foremost xxx.jpg会自动分离；若检测出其他文件修改其后缀即可，如.zip）</p><p>5.使用StegSolve对图像进行分通道扫描，查看是否为LSB隐写</p><p>6.在windows系统命令行下使用F5-steganography-master进行jpg图像是否为F5算法隐写</p><p>7.在kali系统中使用outguess-master工具（需要安装），检测是否为guess算法隐写</p><p>8.改图片高度（对应题目难度：中）</p><p>CTF比赛中可利用16进制编辑工具更改图片的高度，使图片只显示一部分，下面的部分被隐藏，嗯，这是个藏东西的好办法！</p><p>当以上方法均不可以得到FLAG，且图片长宽比例诡异时，可以尝试改图片大小，下面介绍找图片宽度和高度的标志位的方法：</p><p>A）对于png文件，其第二行第六列是高度位，改这一位即可；</p><p>B）对于其他格式图片，可以先看看图片的属性，得到宽高值，转成16进制数，搜索该16进制值就能找到标志位了；</p><h2 id="常用脚本"><a href="#常用脚本" class="headerlink" title="常用脚本"></a>常用脚本</h2><p><strong>异或和</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: gbk -*-</span></span><br><span class="line"><span class="comment"># -*- coding: utf_8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">png1=Image.open(<span class="string">'1.png'</span>)</span><br><span class="line">png2=Image.open(<span class="string">'2.png'</span>)</span><br><span class="line"><span class="comment">#png2不是RGB类型，转换</span></span><br><span class="line">png2=png2.convert(<span class="string">'RGB'</span>)</span><br><span class="line"><span class="comment">#获取图片大小信息</span></span><br><span class="line">width,height=png2.size</span><br><span class="line">pic=Image.new(<span class="string">'RGB'</span>,(width,height))</span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> range(height):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(width):</span><br><span class="line">         b1,g1,r1=png1.getpixel((x,y))</span><br><span class="line">         b2,g2,r2=png2.getpixel((x,y))</span><br><span class="line">         <span class="comment">#两张图片逐像素异或</span></span><br><span class="line">         b,g,r=b1^b2,g1^g2,r1^r2</span><br><span class="line">         <span class="comment">#异或后图片黑色置成白色，其他置成黑色</span></span><br><span class="line">         <span class="keyword">if</span>((b,g,r)==(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)):</span><br><span class="line">             pic.putpixel([x,y], (<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))</span><br><span class="line">         <span class="keyword">else</span>:</span><br><span class="line">             pic.putpixel([x,y],(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">             pic.show()</span><br><span class="line">             pic.save(<span class="string">'3.png'</span>)</span><br></pre></td></tr></table></figure></p><p><strong>三原色</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span>  PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">x = <span class="number">503</span> <span class="comment">#x坐标  通过对txt里的行数进行整数分解</span></span><br><span class="line">y = <span class="number">122</span> <span class="comment">#y坐标  x*y = 行数</span></span><br><span class="line"></span><br><span class="line">im = Image.new(<span class="string">"RGB"</span>,(x,y))<span class="comment">#创建图片</span></span><br><span class="line">file = open(<span class="string">'misc100.txt'</span>) <span class="comment">#打开rbg值文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#通过一个个rgb点生成图片</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,x):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,y):</span><br><span class="line">        line = file.readline()<span class="comment">#获取一行</span></span><br><span class="line">        rgb = line.split(<span class="string">","</span>)<span class="comment">#分离rgb</span></span><br><span class="line">        im.putpixel((i,j),(int(rgb[<span class="number">0</span>]),int(rgb[<span class="number">1</span>]),int(rgb[<span class="number">2</span>])))<span class="comment">#rgb转化为像素</span></span><br><span class="line">im.show()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;打了有小半年ctf比赛了，一直没有时间来写几篇关于ctf的博客，今天抽出时间写了点杂项中隐写的总结，希望能够帮到大家&lt;/p&gt;
&lt;h2 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h2&gt;&lt;p&gt;隐写术是
      
    
    </summary>
    
      <category term="CTF" scheme="http://yoursite.com/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>修改Compare.py报错时的解决方案</title>
    <link href="http://yoursite.com/2019/09/29/%E4%BF%AE%E6%94%B9Compare-py%E6%8A%A5%E9%94%99%E6%97%B6%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://yoursite.com/2019/09/29/修改Compare-py报错时的解决方案/</id>
    <published>2019-09-29T15:14:49.000Z</published>
    <updated>2019-09-29T15:15:22.981Z</updated>
    
    <content type="html"><![CDATA[<p>错误：<br>在安装opevncv时会出现 ImportError: No module named cv2 的错误，找不到cv2的包。<br>解决：</p><p>这时候安装扩展包即可：</p><p><code>pip install opencv-python</code></p><hr><p>错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;data_generator.py&quot;, line 24, in &lt;module&gt;</span><br><span class="line">    import cv2</span><br><span class="line">  File &quot;/usr/local/lib/python3.5/dist-packages/cv2/__init__.py&quot;, line 3, in &lt;module&gt;</span><br><span class="line">    from .cv2 import *</span><br><span class="line">ImportError: libSM.so.6: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure><p>解决方案：<code>sudo apt-get install -y python-qt4</code></p><hr><p>问题：<br><code>ValueError: Input 0 of node Reshape was passed int32 from batch_join:1 incompatible with expected int64.</code></p><p>解决：打开validate_on_lfw.py，找到这三个地方，data_flow_ops.FIFOQueue，labels_placeholder，control_placeholder，将他们的tf.int32全部换成tf.int64重新运行即可</p><hr><p>错误:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SyntaxError:</span><br><span class="line"> Non-UTF-8 code starting with &apos;\xb2&apos; in file src/compare.py on line 58, but no encoding declared; see http://python.org/dev/peps/pep-0263/ for details</span><br></pre></td></tr></table></figure></p><p>SyntaxError: Non-ASCII character ‘\xe2’ in file意思是说，在文件中存在非ASCII字符；<br>ASCII是8位即一个字符，一共256个字符，随着计算机的发展，现在已经用到2个或者4个字符；<br>解决方案：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">建议在文件头追加：</span><br><span class="line"># -*- coding: cp936 -*-</span><br><span class="line">或者</span><br><span class="line"># -*- coding: utf-8 -*</span><br></pre></td></tr></table></figure><p>文件头追加以后<br>报错：</p><p><code>SyntaxError: (unicode error) &#39;utf-8&#39; codec can&#39;t decode byte 0xb2 in position 0: invalid start byte</code></p><p>解决方案：<br>将该py文件用notepad++打开，转为utf-8编码</p><hr><p><img src="https://img-blog.csdnimg.cn/20190925180841590.png" alt="在这里插入图片描述"><br>原因：<br>excel不能够有效识别出文件中的中文数据<br>解决方案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">加入encoding=<span class="string">'utf-8-sig'</span>就不会乱码了</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"result.csv"</span>, <span class="string">"w"</span>,newline=<span class="string">''</span>,encoding=<span class="string">'utf-8-sig'</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">        writer = csv.writer(csvfile)</span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">        <span class="comment"># first row</span></span><br><span class="line">        writer.writerow([<span class="string">"查询图像ID"</span>, <span class="string">"t底库中对应top1相似度的人脸ID"</span>, <span class="string">"相似度"</span>, <span class="string">"底库中对应top2相似度的人脸ID"</span>, <span class="string">"相似度"</span>, <span class="string">"底库中对应top3相似度的人脸ID"</span>, <span class="string">"相似度"</span>,</span><br><span class="line">                         <span class="string">"底库中对应top4相似度的人脸ID"</span>, <span class="string">"相似度"</span>, <span class="string">"底库中对应top5相似度的人脸ID"</span>, <span class="string">"相似度"</span>, <span class="string">"底库中对应top6相似度的人脸ID"</span>, <span class="string">"相似度"</span>,</span><br><span class="line">                         <span class="string">"底库中对应top7相似度的人脸ID"</span>, <span class="string">"相似度"</span>, <span class="string">"底库中对应top8相似度的人脸ID"</span>, <span class="string">"相似度"</span>, <span class="string">"底库中对应top9相似度的人脸ID"</span>, <span class="string">"相似度"</span>,</span><br><span class="line">                         <span class="string">"底库中对应top10相似度的人脸ID"</span>, <span class="string">"相似度"</span>, <span class="string">"底库中对应top11相似度的人脸ID"</span>, <span class="string">"相似度"</span>, <span class="string">"底库中对应top12相似度的人脸ID"</span>, <span class="string">"相似度"</span>,</span><br><span class="line">                         <span class="string">"底库中对应top13相似度的人脸ID"</span>, <span class="string">"相似度"</span>, <span class="string">"底库中对应top14相似度的人脸ID"</span>, <span class="string">"相似度"</span>, <span class="string">"底库中对应top15相似度的人脸ID"</span>, <span class="string">"相似度"</span>,</span><br><span class="line">                         <span class="string">"底库中对应top16相似度的人脸ID"</span>, <span class="string">"相似度"</span>, <span class="string">"底库中对应top17相似度的人脸ID"</span>, <span class="string">"相似度"</span>, <span class="string">"底库中对应top18相似度的人脸ID"</span>, <span class="string">"相似度"</span>,</span><br><span class="line">                         <span class="string">"底库中对应top19相似度的人脸ID"</span>, <span class="string">"相似度"</span>, <span class="string">"底库中对应top20相似度的人脸ID"</span>, <span class="string">"相似度"</span>, <span class="string">"底库中对应top21相似度的人脸ID"</span>, <span class="string">"相似度"</span>,</span><br><span class="line">                         <span class="string">"底库中对应top22相似度的人脸ID"</span>, <span class="string">"相似度"</span>, <span class="string">"底库中对应top23相似度的人脸ID"</span>, <span class="string">"相似度"</span>, <span class="string">"底库中对应top24相似度的人脸ID"</span>, <span class="string">"相似度"</span>,</span><br><span class="line">                         <span class="string">"底库中对应top25相似度的人脸ID"</span>, <span class="string">"相似度"</span>, <span class="string">"底库中对应top26相似度的人脸ID"</span>, <span class="string">"相似度"</span>, <span class="string">"底库中对应top27相似度的人脸ID"</span>, <span class="string">"相似度"</span>,</span><br><span class="line">                         <span class="string">"底库中对应top28相似度的人脸ID"</span>, <span class="string">"相似度"</span>, <span class="string">"底库中对应top29相似度的人脸ID"</span>, <span class="string">"相似度"</span>, <span class="string">"底库中对应top30相似度的人脸ID"</span>, <span class="string">"相似度"</span>,</span><br><span class="line">                         <span class="string">"底库中对应top31相似度的人脸ID"</span>, <span class="string">"相似度"</span>, <span class="string">"底库中对应top32相似度的人脸ID"</span>, <span class="string">"相似度"</span>, <span class="string">"底库中对应top33相似度的人脸ID"</span>, <span class="string">"相似度"</span>,</span><br><span class="line">                         <span class="string">"底库中对应top34相似度的人脸ID"</span>, <span class="string">"相似度"</span>, <span class="string">"底库中对应top35相似度的人脸ID"</span>, <span class="string">"相似度"</span>, <span class="string">"底库中对应top36相似度的人脸ID"</span>, <span class="string">"相似度"</span>,</span><br><span class="line">                         <span class="string">"底库中对应top37相似度的人脸ID"</span>, <span class="string">"相似度"</span>, <span class="string">"底库中对应top38相似度的人脸ID"</span>, <span class="string">"相似度"</span>, <span class="string">"底库中对应top39相似度的人脸ID"</span>, <span class="string">"相似度"</span>,</span><br><span class="line">                         <span class="string">"底库中对应top40相似度的人脸ID"</span>, <span class="string">"相似度"</span>, <span class="string">"底库中对应top41相似度的人脸ID"</span>, <span class="string">"相似度"</span>, <span class="string">"底库中对应top42相似度的人脸ID"</span>, <span class="string">"相似度"</span>,</span><br><span class="line">                         <span class="string">"底库中对应top43相似度的人脸ID"</span>, <span class="string">"相似度"</span>, <span class="string">"底库中对应top44相似度的人脸ID"</span>, <span class="string">"相似度"</span>, <span class="string">"底库中对应top45相似度的人脸ID"</span>, <span class="string">"相似度"</span>,</span><br><span class="line">                         <span class="string">"底库中对应top46相似度的人脸ID"</span>, <span class="string">"相似度"</span>, <span class="string">"底库中对应top47相似度的人脸ID"</span>, <span class="string">"相似度"</span>, <span class="string">"底库中对应top48相似度的人脸ID"</span>, <span class="string">"相似度"</span>,</span><br><span class="line">                         <span class="string">"底库中对应top49相似度的人脸ID"</span>, <span class="string">"相似度"</span>, <span class="string">"底库中对应top50相似度的人脸ID"</span>, <span class="string">"相似度"</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list_result.sort(key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>])          <span class="comment"># 根据第2个值排序</span></span><br><span class="line">list_result.sort(key=operator.itemgetter(<span class="number">1</span>)) <span class="comment"># 根据第2个值排序</span></span><br></pre></td></tr></table></figure><p>将元组里的字典按value值排序</p><hr><p>输出形式为列表里的列表元组<img src="https://img-blog.csdnimg.cn/20190925180931462.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><code>result = sorted(list_result.items(), key=lambda item: item[1])</code></p><p><img src="https://img-blog.csdnimg.cn/2019092518095460.png" alt="在这里插入图片描述"><br>修改为：</p><pre><code>list_result.extend(images_distance)...list_result=sorted(list_result, key=lambda x:x[1])</code></pre><hr><p>报错：</p><p><code>TypeError: writerow() takes exactly one argument (2 given)</code><br>解决方案<br>将<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"result.csv"</span>, <span class="string">"w"</span>,newline=<span class="string">''</span>,encoding=<span class="string">'utf-8-sig'</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">                    writer = csv.writer(csvfile)</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment"># writerows</span></span><br><span class="line">                    writer.writerow([image_QUERY]+list_result[<span class="number">50</span>])</span><br></pre></td></tr></table></figure></p><p>改变为<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"result.csv"</span>, <span class="string">"w"</span>,newline=<span class="string">''</span>,encoding=<span class="string">'utf-8-sig'</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">                    writer = csv.writer(csvfile)</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment"># writerows</span></span><br><span class="line">                    writer.writerow([image_QUERY]+list_result[<span class="number">50</span>])</span><br></pre></td></tr></table></figure></p><hr><p>错误：<br>python提示AttributeError: ‘NoneType’ object has no attribute ‘extend’</p><p>原因：</p><pre><code>a=[]b=[1,2,3,4]a = a.extend(b)</code></pre><p>报出a的类型变为了NoneType<br>extend会修改a本身，并且返回None。不能把返回值再赋值给a。<br>解决：</p><p>将a = a.extend(b)变为 a.extend(b)后问题解决</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;错误：&lt;br&gt;在安装opevncv时会出现 ImportError: No module named cv2 的错误，找不到cv2的包。&lt;br&gt;解决：&lt;/p&gt;
&lt;p&gt;这时候安装扩展包即可：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip install opencv-python&lt;/co
      
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>基于Facenet与MTCNN的人脸识别</title>
    <link href="http://yoursite.com/2019/09/29/%E5%9F%BA%E4%BA%8EFacenet%E4%B8%8EMTCNN%E7%9A%84%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"/>
    <id>http://yoursite.com/2019/09/29/基于Facenet与MTCNN的人脸识别/</id>
    <published>2019-09-29T15:14:15.000Z</published>
    <updated>2019-09-29T15:14:36.190Z</updated>
    
    <content type="html"><![CDATA[<p>本文来自于中国科学院深圳先进技术研究院，目前发表在arXiv上，是2016年4月份的文章，算是比较新的文章。<br>论文地址：<br><a href="https://kpzhang93.github.io/MTCNN_face_detection_alignment/" target="_blank" rel="noopener">https://kpzhang93.github.io/MTCNN_face_detection_alignment/</a></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>相比于R-CNN系列通用检测方法，本文更加针对人脸检测这一专门的任务，速度和精度都有足够的提升。R-CNN，Fast R-CNN，FasterR-CNN这一系列的方法不是一篇博客能讲清楚的，有兴趣可以找相关论文阅读。类似于TCDCN，本文提出了一种Multi-task的人脸检测框架，将人脸检测和人脸特征点检测同时进行。论文使用3个CNN级联的方式，和Viola-Jones类似，实现了coarse-to-fine的算法结构。</p><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><p>算法流程<br><img src="https://img-blog.csdnimg.cn/20190925171034228.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>当给定一张照片的时候，将其缩放到不同尺度形成图像金字塔，以达到尺度不变。</p><p><strong>Stage 1</strong>：使用P-Net是一个全卷积网络，用来生成候选窗和边框回归向量(bounding box regression vectors)。使用Bounding box regression的方法来校正这些候选窗，使用非极大值抑制（NMS）合并重叠的候选框。全卷积网络和Faster R-CNN中的RPN一脉相承。</p><p><strong>Stage 2</strong>：使用N-Net改善候选窗。将通过P-Net的候选窗输入R-Net中，拒绝掉大部分false的窗口，继续使用Bounding box regression和NMS合并。</p><p><strong>Stage 3</strong>：最后使用O-Net输出最终的人脸框和特征点位置。和第二步类似，但是不同的是生成5个特征点位置</p><h3 id="CNN结构"><a href="#CNN结构" class="headerlink" title="CNN结构"></a>CNN结构</h3><p>本文使用三个CNN，结构如图：<br><img src="https://img-blog.csdnimg.cn/20190925171108487.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h3><p>这个算法需要实现三个任务的学习：人脸非人脸的分类，bounding box regression和人脸特征点定位。</p><p>(1)人脸检测<br>这就是一个分类任务，使用交叉熵损失函数即可：<br>(2)Bounding box regression<br>这是一个回归问题，使用平方和损失函数：<br>(3)人脸特征点定位<br>这也是一个回归问题，目标是5个特征点与标定好的数据的平方和损失：<br>(4)多任务训练<br>不是每个sample都要使用这三种损失函数的，比如对于背景只需要计算，不需要计算别的损失，这样就需要引入一个指示值指示样本是否需要计算某一项损失。最终的训练目标函数是：<br>N是训练样本的数量。表示任务的重要性。在P-Net和R-Net中，在O-Net中，<br>(5)online hard sample mining<br>传统的难例处理方法是检测过一次以后，手动检测哪些困难的样本无法被分类，本文采用online hard sample mining的方法。具体就是在每个mini-batch中，取loss最大的70%进行反向传播，忽略那些简单的样本。</p><h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><p>本文主要使用三个数据集进行训练：FDDB，Wider Face，AFLW。<br>A、训练数据<br>本文将数据分成4种：<br>Negative：非人脸<br>Positive：人脸<br>Part faces：部分人脸<br>Landmark face：标记好特征点的人脸<br>分别用于训练三种不同的任务。Negative和Positive用于人脸分类，positive和part faces用于bounding box regression，landmark face用于特征点定位。<br>B、效果<br>本文的人脸检测和人脸特征点定位的效果都非常好。关键是这个算法速度很快，在2.6GHZ的CPU上达到16fps，在Nvidia Titan达到99fps。</p><p>总结<br>本文使用一种级联的结构进行人脸检测和特征点检测，该方法速度快效果好，可以考虑在移动设备上使用。这种方法也是一种由粗到细的方法，和Viola-Jones的级联AdaBoost思路相似。<br>类似于Viola-Jones：1、如何选择待检测区域：图像金字塔+P-Net；2、如何提取目标特征：CNN；3、如何判断是不是指定目标：级联判断。</p><h2 id="本次实验过程"><a href="#本次实验过程" class="headerlink" title="本次实验过程"></a>本次实验过程</h2><p>使用MTCNN将人脸选择出来（分割人脸），然后使用facenet训练（欧氏距离算法</p><h3 id="compare-py源码如下"><a href="#compare-py源码如下" class="headerlink" title="compare.py源码如下"></a>compare.py源码如下</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""Performs face alignment and calculates L2 distance between the embeddings of images."""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MIT License</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># Copyright (c) 2016 David Sandberg</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># Permission is hereby granted, free of charge, to any person obtaining a copy</span></span><br><span class="line"><span class="comment"># of this software and associated documentation files (the "Software"), to deal</span></span><br><span class="line"><span class="comment"># in the Software without restriction, including without limitation the rights</span></span><br><span class="line"><span class="comment"># to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span></span><br><span class="line"><span class="comment"># copies of the Software, and to permit persons to whom the Software is</span></span><br><span class="line"><span class="comment"># furnished to do so, subject to the following conditions:</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># The above copyright notice and this permission notice shall be included in all</span></span><br><span class="line"><span class="comment"># copies or substantial portions of the Software.</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></span><br><span class="line"><span class="comment"># IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></span><br><span class="line"><span class="comment"># FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></span><br><span class="line"><span class="comment"># AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></span><br><span class="line"><span class="comment"># LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></span><br><span class="line"><span class="comment"># OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></span><br><span class="line"><span class="comment"># SOFTWARE.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> misc</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> facenet</span><br><span class="line"><span class="keyword">import</span> align.detect_face</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(args)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#使用MTCNN网络在原始图片中进行检测和对齐</span></span><br><span class="line">    images = load_and_align_data(args.image_files, args.image_size, args.margin, args.gpu_memory_fraction)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> tf.Graph().as_default():</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">      </span><br><span class="line">            <span class="comment"># Load the facenet  model</span></span><br><span class="line">            facenet.load_model(args.model)</span><br><span class="line">    </span><br><span class="line">            <span class="comment"># Get input and output tensors</span></span><br><span class="line">            <span class="comment"># 输入图像占位符</span></span><br><span class="line">            images_placeholder = tf.get_default_graph().get_tensor_by_name(<span class="string">"input:0"</span>)</span><br><span class="line">            <span class="comment">#卷及网络最后输出的"特征"</span></span><br><span class="line">            embeddings = tf.get_default_graph().get_tensor_by_name(<span class="string">"embeddings:0"</span>)</span><br><span class="line">            <span class="comment">#训练？</span></span><br><span class="line">            phase_train_placeholder = tf.get_default_graph().get_tensor_by_name(<span class="string">"phase_train:0"</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Run forward pass to calculate embeddings </span></span><br><span class="line">            feed_dict = &#123; images_placeholder: images, phase_train_placeholder:<span class="literal">False</span> &#125;</span><br><span class="line">            emb = sess.run(embeddings, feed_dict=feed_dict)</span><br><span class="line">            </span><br><span class="line">            nrof_images = len(args.image_files)</span><br><span class="line"></span><br><span class="line">            print(<span class="string">'Images:'</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(nrof_images):</span><br><span class="line">                print(<span class="string">'%1d: %s'</span> % (i, args.image_files[i]))</span><br><span class="line">            print(<span class="string">''</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># Print distance matrix</span></span><br><span class="line">            print(<span class="string">'Distance matrix'</span>)</span><br><span class="line">            print(<span class="string">'    '</span>, end=<span class="string">''</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(nrof_images):</span><br><span class="line">                print(<span class="string">'    %1d     '</span> % i, end=<span class="string">''</span>)</span><br><span class="line">            print(<span class="string">''</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(nrof_images):</span><br><span class="line">                print(<span class="string">'%1d  '</span> % i, end=<span class="string">''</span>)</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(nrof_images):</span><br><span class="line">                    <span class="comment">#对特征计算两两之间的距离以得到人脸之间的相似度</span></span><br><span class="line">                    dist = np.sqrt(np.sum(np.square(np.subtract(emb[i,:], emb[j,:]))))</span><br><span class="line">                    print(<span class="string">'  %1.4f  '</span> % dist, end=<span class="string">''</span>)</span><br><span class="line">                print(<span class="string">''</span>)</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_and_align_data</span><span class="params">(image_paths, image_size, margin, gpu_memory_fraction)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    返回经过MTCNN处理后的人脸图像集合 [n,160,160,3]</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    minsize = <span class="number">20</span> <span class="comment"># minimum size of face</span></span><br><span class="line">    threshold = [ <span class="number">0.6</span>, <span class="number">0.7</span>, <span class="number">0.7</span> ]  <span class="comment"># three steps's threshold</span></span><br><span class="line">    factor = <span class="number">0.709</span> <span class="comment"># scale factor</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#创建P-Net,R-Net,O-Net网络，并加载参数</span></span><br><span class="line">    print(<span class="string">'Creating networks and loading parameters'</span>)</span><br><span class="line">    <span class="keyword">with</span> tf.Graph().as_default():</span><br><span class="line">        gpu_options = tf.GPUOptions(per_process_gpu_memory_fraction=gpu_memory_fraction)</span><br><span class="line">        sess = tf.Session(config=tf.ConfigProto(gpu_options=gpu_options, log_device_placement=<span class="literal">False</span>))</span><br><span class="line">        <span class="keyword">with</span> sess.as_default():</span><br><span class="line">            pnet, rnet, onet = align.detect_face.create_mtcnn(sess, <span class="literal">None</span>)</span><br><span class="line">  </span><br><span class="line">    </span><br><span class="line">    tmp_image_paths=copy.copy(image_paths)</span><br><span class="line">    img_list = []</span><br><span class="line">    <span class="comment">#遍历测试图片</span></span><br><span class="line">    <span class="keyword">for</span> image <span class="keyword">in</span> tmp_image_paths:</span><br><span class="line">        img = misc.imread(os.path.expanduser(image), mode=<span class="string">'RGB'</span>)</span><br><span class="line">        img_size = np.asarray(img.shape)[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">        <span class="comment">#人脸检测 bounding_boxes：表示边界框 形状为[n,5] 5对应x1,y1,x2,y2,score</span></span><br><span class="line">        <span class="comment">#_：人脸关键点坐标 形状为 [n,10]</span></span><br><span class="line">        bounding_boxes, _ = align.detect_face.detect_face(img, minsize, pnet, rnet, onet, threshold, factor)</span><br><span class="line">        <span class="keyword">if</span> len(bounding_boxes) &lt; <span class="number">1</span>:</span><br><span class="line">          image_paths.remove(image)</span><br><span class="line">          print(<span class="string">"can't detect face, remove "</span>, image)</span><br><span class="line">          <span class="keyword">continue</span></span><br><span class="line">        <span class="comment">#对图像进行处理:扩展、裁切、缩放</span></span><br><span class="line">        det = np.squeeze(bounding_boxes[<span class="number">0</span>,<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line">        bb = np.zeros(<span class="number">4</span>, dtype=np.int32)</span><br><span class="line">        bb[<span class="number">0</span>] = np.maximum(det[<span class="number">0</span>]-margin/<span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">        bb[<span class="number">1</span>] = np.maximum(det[<span class="number">1</span>]-margin/<span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">        bb[<span class="number">2</span>] = np.minimum(det[<span class="number">2</span>]+margin/<span class="number">2</span>, img_size[<span class="number">1</span>])</span><br><span class="line">        bb[<span class="number">3</span>] = np.minimum(det[<span class="number">3</span>]+margin/<span class="number">2</span>, img_size[<span class="number">0</span>])</span><br><span class="line">        cropped = img[bb[<span class="number">1</span>]:bb[<span class="number">3</span>],bb[<span class="number">0</span>]:bb[<span class="number">2</span>],:]</span><br><span class="line">        aligned = misc.imresize(cropped, (image_size, image_size), interp=<span class="string">'bilinear'</span>)</span><br><span class="line">        <span class="comment">#归一化处理</span></span><br><span class="line">        prewhitened = facenet.prewhiten(aligned)</span><br><span class="line">        img_list.append(prewhitened)</span><br><span class="line">    <span class="comment">#[n,160,160,3]</span></span><br><span class="line">    images = np.stack(img_list)</span><br><span class="line">    <span class="keyword">return</span> images</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_arguments</span><span class="params">(argv)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    参数解析</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    </span><br><span class="line">    parser.add_argument(<span class="string">'model'</span>, type=str, </span><br><span class="line">        help=<span class="string">'Could be either a directory containing the meta_file and ckpt_file or a model protobuf (.pb) file'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'image_files'</span>, type=str, nargs=<span class="string">'+'</span>, help=<span class="string">'Images to compare'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'--image_size'</span>, type=int,</span><br><span class="line">        help=<span class="string">'Image size (height, width) in pixels.'</span>, default=<span class="number">160</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'--margin'</span>, type=int,</span><br><span class="line">        help=<span class="string">'Margin for the crop around the bounding box (height, width) in pixels.'</span>, default=<span class="number">44</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'--gpu_memory_fraction'</span>, type=float,</span><br><span class="line">        help=<span class="string">'Upper bound on the amount of GPU memory that will be used by the process.'</span>, default=<span class="number">1.0</span>)</span><br><span class="line">    <span class="keyword">return</span> parser.parse_args(argv)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main(parse_arguments(sys.argv[<span class="number">1</span>:]))</span><br></pre></td></tr></table></figure><p><code>compare.py</code> 该py文件作用是用自己的图像上应用已有模型来计算人脸之间的距离，即欧氏距离。<br>当欧氏距离小于1时，我们可以看做输入的两个照片为同一个人。</p><p>这三张照片分为起名为 img1.jpg,img2.jpg,img3.jpg。<br><img src="https://img-blog.csdnimg.cn/20190925171501754.png" alt="在这里插入图片描述"><br>在facenet目录下运行 </p><p><code>python src/compare.py models/20180408-102900 src/img1.jpg  src/img2.jpg src/img3.jpg</code></p><p>结果：<br><img src="https://img-blog.csdnimg.cn/20190925171536641.png" alt="在这里插入图片描述"><br>上面为官方的输入和输出</p><p>但是在该比赛中，比赛评委要求输出：</p><pre><code>（输出）检索结果：要求参评单位将检索结果整理为CSV文件。每一项用制表符&apos;\t&apos;分割，每一行具体格式如下：（所有输出以UTF-8无BOM格式编码）查询图像ID\t底库中对应top1相似度的人脸ID\t相似度\t底库中对应top2相似度的人脸ID\t相似度\t…\t底库中对应top50相似度的人脸ID\t相似度</code></pre><p>我尝试用compare.py文件的欧氏距离来计算出图片的相似度</p><h2 id="开始修改源码"><a href="#开始修改源码" class="headerlink" title="开始修改源码"></a>开始修改源码</h2><p>（过程很痛苦，网上没有修改compare.py文件的例子）</p><p>1.将矩阵输出为1行，即只取第一行矩阵。因为比赛只要求用QUERY _查询集唯一ID.jpg去DB库里比较所有图片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'Distance matrix'</span>)</span><br><span class="line">print(<span class="string">'    '</span>, end=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(nrof_images):</span><br><span class="line">    print(<span class="string">'    %1d     '</span> % i, end=<span class="string">''</span>)</span><br><span class="line">print(<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'%1d  '</span> % <span class="number">0</span>, end=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">list = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(nrof_images):</span><br><span class="line">    dist = np.sqrt(np.sum(np.square(np.subtract(emb[<span class="number">0</span>, :], emb[j, :]))))   <span class="comment">#计算欧式距离</span></span><br><span class="line">    print(<span class="string">'  %1.4f  '</span> % dist, end=<span class="string">''</span>)</span><br><span class="line">    list.append(dist)</span><br><span class="line">print(<span class="string">''</span>)</span><br><span class="line">print(list[<span class="number">1</span>:])</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190925171840227.png" alt="在这里插入图片描述"></p><ol start="2"><li>将图片id与矩阵里的数据组成字典，并且按照比赛要求排序</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">list_images=[]  <span class="comment">#图片路径的列表</span></span><br><span class="line">print(<span class="string">'Images:'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(nrof_images):</span><br><span class="line">    print(<span class="string">'%1d: %s'</span> % (i, image_files[i]))</span><br><span class="line">    list_images.append(image_files[i])<span class="comment">#图片路径存入</span></span><br><span class="line">print(<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Distance matrix'</span>)</span><br><span class="line">print(<span class="string">'    '</span>, end=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(nrof_images):</span><br><span class="line">    print(<span class="string">'    %1d     '</span> % i, end=<span class="string">''</span>)</span><br><span class="line">print(<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'%1d  '</span> % <span class="number">0</span>, end=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">list_distance = []<span class="comment">#欧式距离的列表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(nrof_images):</span><br><span class="line">    dist = np.sqrt(np.sum(np.square(np.subtract(emb[<span class="number">0</span>, :], emb[j, :]))))</span><br><span class="line">    print(<span class="string">'  %1.4f  '</span> % dist, end=<span class="string">''</span>)</span><br><span class="line">    list_distance.append(dist)<span class="comment">#欧氏距离存入</span></span><br><span class="line">print(<span class="string">''</span>)</span><br><span class="line">print(list_distance[<span class="number">1</span>:])</span><br><span class="line">images_distance=dict(zip(list_images[<span class="number">1</span>:], list_distance[<span class="number">1</span>:]))<span class="comment">#用dict方法将list_images和list_distance存入字典</span></span><br><span class="line">result=sorted(images_distance.items(),key=<span class="keyword">lambda</span> item:item[<span class="number">1</span>])<span class="comment">#排序</span></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>知识点：</p><p><strong>sorted函数</strong></p><p>sorted(iterable,key,reverse)，sorted一共有iterable,key,reverse这三个参数;<br>其中iterable表示可以迭代的对象，例如可以是dict.items()、dict.keys()等<br>key是一个函数，用来选取参与比较的元素，reverse则是用来指定排序是倒序还是顺序，reverse=true则是倒序，<br>reverse=false时则是顺序，默认时reverse=false。</p><p><strong>dict(zip)</strong><br>zip是Python中的一个内建函数，能够用来组合多个序列类型的数据。它会把传入的所有序列中下标相同的元素组成一个个元组，以最短的序列为基准。</p><p>3.用QUERY里的照片去DB库找相似度前50的人脸照片，需要知道DB库中所有照片的路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> glob</span><br><span class="line">images_paths=glob.glob(<span class="string">r"./QUERY/raw/*/*.jpg"</span>)</span><br></pre></td></tr></table></figure><p>4.用for循环将QUERY _查询集唯一ID.jpg与DB库中的照片每10张就比一次</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">#set a b</span><br><span class="line">a = 0</span><br><span class="line">b = 9</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line"></span><br><span class="line">    image_files = image_QUERY + images_DB[a:b]</span><br><span class="line"></span><br><span class="line">    if b &lt;= 20:</span><br><span class="line"></span><br><span class="line">        images = load_and_align_data(image_files, image_size, margin, gpu_memory_fraction)</span><br><span class="line"></span><br><span class="line">        images_placeholder = tf.get_default_graph().get_tensor_by_name(&quot;input:0&quot;)</span><br><span class="line"></span><br><span class="line">        embeddings = tf.get_default_graph().get_tensor_by_name(&quot;embeddings:0&quot;)</span><br><span class="line"></span><br><span class="line">        phase_train_placeholder = tf.get_default_graph().get_tensor_by_name(&quot;phase_train:0&quot;)</span><br><span class="line"></span><br><span class="line">        feed_dict = &#123;images_placeholder: images, phase_train_placeholder: False&#125;</span><br><span class="line">        emb = sess.run(embeddings, feed_dict=feed_dict)</span><br><span class="line"></span><br><span class="line">        nrof_images = len(image_files)</span><br><span class="line"></span><br><span class="line">        list_images=[]</span><br><span class="line">        print(&apos;Images:&apos;)</span><br><span class="line">        for i in range(nrof_images):</span><br><span class="line">            print(&apos;%1d: %s&apos; % (i, image_files[i]))</span><br><span class="line">            list_images.append(image_files[i])</span><br><span class="line">        print(&apos;&apos;)</span><br><span class="line"></span><br><span class="line">        print(&apos;Distance matrix&apos;)</span><br><span class="line">        print(&apos;    &apos;, end=&apos;&apos;)</span><br><span class="line"></span><br><span class="line">        for i in range(nrof_images):</span><br><span class="line">            print(&apos;    %1d     &apos; % i, end=&apos;&apos;)</span><br><span class="line">        print(&apos;&apos;)</span><br><span class="line"></span><br><span class="line">        print(&apos;%1d  &apos; % 0, end=&apos;&apos;)</span><br><span class="line"></span><br><span class="line">        list_distance = []</span><br><span class="line"></span><br><span class="line">        for j in range(nrof_images):</span><br><span class="line">            dist = np.sqrt(np.sum(np.square(np.subtract(emb[0, :], emb[j, :]))))</span><br><span class="line">            print(&apos;  %1.4f  &apos; % dist, end=&apos;&apos;)</span><br><span class="line">            list_distance.append(dist)</span><br><span class="line">        print(&apos;&apos;)</span><br><span class="line">        print(list_distance[1:])</span><br><span class="line">        images_distance=dict(zip(list_images[1:], list_distance[1:]))</span><br><span class="line">        result=sorted(images_distance.items(),key=lambda item:item[1])</span><br><span class="line">        print(result)</span><br><span class="line"></span><br><span class="line">    else:</span><br><span class="line"></span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line">    a += 10</span><br><span class="line">    b += 10</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190925172250628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol start="5"><li>将数据写入列表，然后排出前50，并且写入csv文件</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"result.csv"</span>,<span class="string">"w"</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    writer = csv.writer(csvfile)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#先写入columns_name</span></span><br><span class="line">    writer.writerow([<span class="string">"查询图像ID"</span>,<span class="string">"t底库中对应top1相似度的人脸ID"</span>,<span class="string">"相似度"</span>,<span class="string">"底库中对应top2相似度的人脸ID"</span>,<span class="string">"相似度"</span>,<span class="string">"底库中对应top3相似度的人脸ID"</span>,<span class="string">"相似度"</span>,<span class="string">"底库中对应top4相似度的人脸ID"</span>,<span class="string">"相似度"</span>,<span class="string">"底库中对应top5相似度的人脸ID"</span>,<span class="string">"相似度"</span>,<span class="string">"底库中对应top6相似度的人脸ID"</span>,<span class="string">"相似度"</span>,<span class="string">"底库中对应top7相似度的人脸ID"</span>,<span class="string">"相似度"</span>,<span class="string">"底库中对应top8相似度的人脸ID"</span>,<span class="string">"相似度"</span>,<span class="string">"底库中对应top9相似度的人脸ID"</span>,<span class="string">"相似度"</span>,<span class="string">"底库中对应top10相似度的人脸ID"</span>,<span class="string">"相似度"</span>,<span class="string">"底库中对应top11相似度的人脸ID"</span>,<span class="string">"相似度"</span>,<span class="string">"底库中对应top12相似度的人脸ID"</span>,<span class="string">"相似度"</span>,<span class="string">"底库中对应top13相似度的人脸ID"</span>,<span class="string">"相似度"</span>,<span class="string">"底库中对应top14相似度的人脸ID"</span>,<span class="string">"相似度"</span>,<span class="string">"底库中对应top15相似度的人脸ID"</span>,<span class="string">"相似度"</span>,<span class="string">"底库中对应top16相似度的人脸ID"</span>,<span class="string">"相似度"</span>,<span class="string">"底库中对应top17相似度的人脸ID"</span>,<span class="string">"相似度"</span>,<span class="string">"底库中对应top18相似度的人脸ID"</span>,<span class="string">"相似度"</span>,<span class="string">"底库中对应top19相似度的人脸ID"</span>,<span class="string">"相似度"</span>,<span class="string">"底库中对应top20相似度的人脸ID"</span>,<span class="string">"相似度"</span>,<span class="string">"底库中对应top21相似度的人脸ID"</span>,<span class="string">"相似度"</span>,<span class="string">"底库中对应top22相似度的人脸ID"</span>,<span class="string">"相似度"</span>,<span class="string">"底库中对应top23相似度的人脸ID"</span>,<span class="string">"相似度"</span>,<span class="string">"底库中对应top24相似度的人脸ID"</span>,<span class="string">"相似度"</span>,<span class="string">"底库中对应top25相似度的人脸ID"</span>,<span class="string">"相似度"</span>,<span class="string">"底库中对应top26相似度的人脸ID"</span>,<span class="string">"相似度"</span>,<span class="string">"底库中对应top27相似度的人脸ID"</span>,<span class="string">"相似度"</span>,<span class="string">"底库中对应top28相似度的人脸ID"</span>,<span class="string">"相似度"</span>,<span class="string">"底库中对应top29相似度的人脸ID"</span>,<span class="string">"相似度"</span>,<span class="string">"底库中对应top30相似度的人脸ID"</span>,<span class="string">"相似度"</span>,<span class="string">"底库中对应top31相似度的人脸ID"</span>,<span class="string">"相似度"</span>,<span class="string">"底库中对应top32相似度的人脸ID"</span>,<span class="string">"相似度"</span>,<span class="string">"底库中对应top33相似度的人脸ID"</span>,<span class="string">"相似度"</span>,<span class="string">"底库中对应top34相似度的人脸ID"</span>,<span class="string">"相似度"</span>,<span class="string">"底库中对应top35相似度的人脸ID"</span>,<span class="string">"相似度"</span>,<span class="string">"底库中对应top36相似度的人脸ID"</span>,<span class="string">"相似度"</span>,<span class="string">"底库中对应top37相似度的人脸ID"</span>,<span class="string">"相似度"</span>,<span class="string">"底库中对应top38相似度的人脸ID"</span>,<span class="string">"相似度"</span>,<span class="string">"底库中对应top39相似度的人脸ID"</span>,<span class="string">"相似度"</span>,<span class="string">"底库中对应top40相似度的人脸ID"</span>,<span class="string">"相似度"</span>,<span class="string">"底库中对应top41相似度的人脸ID"</span>,<span class="string">"相似度"</span>,<span class="string">"底库中对应top42相似度的人脸ID"</span>,<span class="string">"相似度"</span>,<span class="string">"底库中对应top43相似度的人脸ID"</span>,<span class="string">"相似度"</span>,<span class="string">"底库中对应top44相似度的人脸ID"</span>,<span class="string">"相似度"</span>,<span class="string">"底库中对应top45相似度的人脸ID"</span>,<span class="string">"相似度"</span>,<span class="string">"底库中对应top46相似度的人脸ID"</span>,<span class="string">"相似度"</span>,<span class="string">"底库中对应top47相似度的人脸ID"</span>,<span class="string">"相似度"</span>,<span class="string">"底库中对应top48相似度的人脸ID"</span>,<span class="string">"相似度"</span>,<span class="string">"底库中对应top49相似度的人脸ID"</span>,<span class="string">"相似度"</span>,<span class="string">"底库中对应top50相似度的人脸ID"</span>,<span class="string">"相似度"</span>])</span><br><span class="line">    <span class="comment">#写入多行用writerows</span></span><br><span class="line">    writer.writerows([image_QUERY],result[<span class="number">50</span>])</span><br></pre></td></tr></table></figure><p>1）将QUERY的照片一个一个与DB里所有的照片进行比对</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">image_QUERY_path = glob.glob(<span class="string">r"./QUERY/*.jpg"</span>)</span><br><span class="line">image_QUERY = image_QUERY_path</span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> image_QUERY <span class="keyword">in</span> image_QUERY[i]:</span><br><span class="line">    ...</span><br><span class="line">i+=<span class="number">1</span></span><br></pre></td></tr></table></figure><p>将列表里的元组用逗号分开，并且消除括号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list_result=&apos;,&apos;.join(list_result[0:50])</span><br></pre></td></tr></table></figure></p><p>报错：<br><img src="https://img-blog.csdnimg.cn/20190925180412645.png" alt="在这里插入图片描述"><br>原因：<br>list包含数字，不能直接转化成字符串。<br>解决办法：<code>&#39;,&#39;.join(&#39;%s&#39; %result for result in list_result)</code><br>即遍历list的元素，把它转化成字符串<br>运行后报错：<br><code>TypeError: not all arguments converted during string formatting</code></p><p>原因: % 操作符只能直接用于字符串(‘123’)，列表([1,2,3])、元组</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文来自于中国科学院深圳先进技术研究院，目前发表在arXiv上，是2016年4月份的文章，算是比较新的文章。&lt;br&gt;论文地址：&lt;br&gt;&lt;a href=&quot;https://kpzhang93.github.io/MTCNN_face_detection_alignment/&quot; 
      
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
