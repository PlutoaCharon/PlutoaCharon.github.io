<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>浩翰Redamancy的博客</title>
  
  <subtitle>文质彬彬 然后君子</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://plutoacharon.github.io/"/>
  <updated>2020-03-29T03:28:39.674Z</updated>
  <id>https://plutoacharon.github.io/</id>
  
  <author>
    <name>浩翰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Win10家庭版没有组策略怎么办? 教你如何启用组策略gpedit.msc</title>
    <link href="https://plutoacharon.github.io/2020/03/29/Win10%E5%AE%B6%E5%BA%AD%E7%89%88%E6%B2%A1%E6%9C%89%E7%BB%84%E7%AD%96%E7%95%A5%E6%80%8E%E4%B9%88%E5%8A%9E-%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E5%90%AF%E7%94%A8%E7%BB%84%E7%AD%96%E7%95%A5gpedit-msc/"/>
    <id>https://plutoacharon.github.io/2020/03/29/Win10家庭版没有组策略怎么办-教你如何启用组策略gpedit-msc/</id>
    <published>2020-03-29T03:27:52.000Z</published>
    <updated>2020-03-29T03:28:39.674Z</updated>
    
    <content type="html"><![CDATA[<p>今日在优化Windows cpu时遇到了Win10打不开组策略gpedit.msc的问题, 仅以此篇记录开启组策略功能过程</p><h3 id="1-创建cmd脚本"><a href="#1-创建cmd脚本" class="headerlink" title="1. 创建cmd脚本"></a>1. 创建cmd脚本</h3><p>在桌面新建一个txt文件, 将下面的代码复制到txt中, 并且更改后缀为<code>cmd</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">pushd</span> <span class="string">"%~dp0"</span></span><br><span class="line">dir /b C:\Windows\servicing\Packages\Microsoft-Windows-GroupPolicy-ClientExtensions-Package~3*.mum &gt;List.txt</span><br><span class="line">dir /b C:\Windows\servicing\Packages\Microsoft-Windows-GroupPolicy-ClientTools-Package~3*.mum &gt;&gt;List.txt</span><br><span class="line"><span class="keyword">for</span> /f %%i <span class="keyword">in</span> (<span class="string">'findstr /i . List.txt 2^&gt;nul'</span>) <span class="keyword">do</span> dism /online /norestart /add-package:<span class="string">"C:\Windows\servicing\Packages\%%i"</span></span><br><span class="line">pause</span><br></pre></td></tr></table></figure></p><p><img src="https://img-blog.csdnimg.cn/2020032617292670.png" alt="在这里插入图片描述"><br>右键该脚本, 点击以管理员方式运行<br><img src="https://img-blog.csdnimg.cn/20200326173008891.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200326173026239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>桌面会生成一个<code>List.txt</code>文件, 不用管, 删除即可。<br><img src="https://img-blog.csdnimg.cn/20200326173651241.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="2-打开组策略gpedit-msc"><a href="#2-打开组策略gpedit-msc" class="headerlink" title="2. 打开组策略gpedit.msc"></a>2. 打开组策略gpedit.msc</h3><p>键盘输入<code>win+R</code>, 输入<code>gpedit.msc</code><br><img src="https://img-blog.csdnimg.cn/20200326173132836.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200326173138218.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>打开成功!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今日在优化Windows cpu时遇到了Win10打不开组策略gpedit.msc的问题, 仅以此篇记录开启组策略功能过程&lt;/p&gt;
&lt;h3 id=&quot;1-创建cmd脚本&quot;&gt;&lt;a href=&quot;#1-创建cmd脚本&quot; class=&quot;headerlink&quot; title=&quot;1. 创建
      
    
    </summary>
    
      <category term="其他" scheme="https://plutoacharon.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>Golang实战之海量日志收集系统（八）logTransfer之将日志入库到Elasticsearch并通过Kibana进行展示</title>
    <link href="https://plutoacharon.github.io/2020/03/29/Golang%E5%AE%9E%E6%88%98%E4%B9%8B%E6%B5%B7%E9%87%8F%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%85%AB%EF%BC%89logTransfer%E4%B9%8B%E5%B0%86%E6%97%A5%E5%BF%97%E5%85%A5%E5%BA%93%E5%88%B0Elasticsearch%E5%B9%B6%E9%80%9A%E8%BF%87Kibana%E8%BF%9B%E8%A1%8C%E5%B1%95%E7%A4%BA/"/>
    <id>https://plutoacharon.github.io/2020/03/29/Golang实战之海量日志收集系统（八）logTransfer之将日志入库到Elasticsearch并通过Kibana进行展示/</id>
    <published>2020-03-29T03:27:27.000Z</published>
    <updated>2020-03-29T03:29:08.042Z</updated>
    
    <content type="html"><![CDATA[<p>前面我们将logTransfor的配置初始化成功了, 下面将从Kafka中消费数据, 并将日志入库到Elasticsearch并通过Kibana进行展示<br><img src="https://img-blog.csdnimg.cn/2020032911191857.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>图源自 :  <a href="https://www.cnblogs.com/zhaof/p/8948516.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhaof/p/8948516.html</a></p></blockquote><h2 id="将日志保存到ES中"><a href="#将日志保存到ES中" class="headerlink" title="将日志保存到ES中"></a>将日志保存到ES中</h2><h3 id="初始化Es"><a href="#初始化Es" class="headerlink" title="初始化Es"></a>初始化Es</h3><p>在<code>main</code>函数中添加初始化<code>InitEs</code>函数<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化Es</span></span><br><span class="line">err = es.InitEs(logConfig.EsAddr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logs.Error(<span class="string">"初始化Elasticsearch失败, err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">logs.Debug(<span class="string">"初始化Es成功"</span>)</span><br></pre></td></tr></table></figure></p><p>初始化Es<br><strong><code>elasticsearch.go</code></strong><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> es</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/olivere/elastic/v7"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Tweet <span class="keyword">struct</span> &#123;</span><br><span class="line">User    <span class="keyword">string</span></span><br><span class="line">Message <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">esClient *elastic.Client</span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitEs</span><span class="params">(addr <span class="keyword">string</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">client, err := elastic.NewClient(elastic.SetSniff(<span class="literal">false</span>), elastic.SetURL(addr))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"connect es error"</span>, err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">esClient = client</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>注意: Es的地址需要填写为<code>http://localhost:9200/</code></p></blockquote><p>运行main函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">020/03/28 18:01:53.360 [D]  初始化日志模块成功</span><br><span class="line">2020/03/28 18:01:53.374 [D]  初始化Kafka成功</span><br><span class="line">2020/03/28 18:01:53.381 [D]  初始化Es成功</span><br></pre></td></tr></table></figure></p><h3 id="编写run与SendToES函数"><a href="#编写run与SendToES函数" class="headerlink" title="编写run与SendToES函数"></a>编写run与SendToES函数</h3><p>在<code>main</code>函数中添加<code>run</code>函数, 用于运行kafka消费数据到Es<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 运行</span></span><br><span class="line">err = run()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logs.Error(<span class="string">"运行错误, err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><code>run.go</code></strong><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/Shopify/sarama"</span></span><br><span class="line"><span class="string">"github.com/astaxie/beego/logs"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">partitionList, err := kafkaClient.Client.Partitions(kafkaClient.Topic)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logs.Error(<span class="string">"Failed to get the list of partitions: "</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> partition := <span class="keyword">range</span> partitionList &#123;</span><br><span class="line">pc, errRet := kafkaClient.Client.ConsumePartition(kafkaClient.Topic, <span class="keyword">int32</span>(partition), sarama.OffsetNewest)</span><br><span class="line"><span class="keyword">if</span> errRet != <span class="literal">nil</span> &#123;</span><br><span class="line">err = errRet</span><br><span class="line">logs.Error(<span class="string">"Failed to start consumer for partition %d: %s\n"</span>, partition, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> pc.AsyncClose()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(pc sarama.PartitionConsumer)</span></span> &#123;</span><br><span class="line">kafkaClient.wg.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> msg := <span class="keyword">range</span> pc.Messages() &#123;</span><br><span class="line">logs.Debug(<span class="string">"Partition:%d, Offset:%d, Key:%s, Value:%s"</span>, msg.Partition, msg.Offset, <span class="keyword">string</span>(msg.Key), <span class="keyword">string</span>(msg.Value))</span><br><span class="line">err = es.SendToES(kafkaClient.topic, msg.Value)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logs.Warn(<span class="string">"send to es failed, err:%v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">kafkaClient.wg.Done()</span><br><span class="line">&#125;(pc)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">kafkaClient.wg.Wait()</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><code>es.go</code></strong><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> es</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/olivere/elastic/v7"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> LogMessage <span class="keyword">struct</span> &#123;</span><br><span class="line">App     <span class="keyword">string</span></span><br><span class="line">Topic   <span class="keyword">string</span></span><br><span class="line">Message <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">esClient *elastic.Client</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitEs</span><span class="params">(addr <span class="keyword">string</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">client, err := elastic.NewClient(elastic.SetSniff(<span class="literal">false</span>), elastic.SetURL(addr))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"connect es error"</span>, err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">esClient = client</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SendToES</span><span class="params">(topic <span class="keyword">string</span>, data []<span class="keyword">byte</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">msg := &amp;LogMessage&#123;&#125;</span><br><span class="line">msg.Topic = topic</span><br><span class="line">msg.Message = <span class="keyword">string</span>(data)</span><br><span class="line"></span><br><span class="line">_, err = esClient.Index().</span><br><span class="line">Index(topic).</span><br><span class="line">BodyJson(msg).</span><br><span class="line">Do(context.Background())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="构建测试"><a href="#构建测试" class="headerlink" title="构建测试"></a>构建测试</h2><p>运行logAgent数据, 从etcd中读取日志配置, 经过Kafka生产</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">25</span>:<span class="number">17.581</span> [D]  导入日志成功&amp;&#123;debug E:\\Go\\logCollect\\logAgent\\logs\\my.log <span class="number">100</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">9092</span> [] <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">2379</span> /backend/logagent/config/&#125;</span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">25</span>:<span class="number">17.589</span> [D]  resp from etcd:[]</span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">25</span>:<span class="number">17.590</span> [D]  resp from etcd:[]</span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">25</span>:<span class="number">17.590</span> [D]  resp from etcd:[]</span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">25</span>:<span class="number">17.591</span> [D]  resp from etcd:[]</span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">25</span>:<span class="number">17.613</span> [D]  resp from etcd:[key:<span class="string">"/backend/logagent/config/192.168.0.11"</span> create_revision:<span class="number">6</span> mod_revision:<span class="number">12</span> version:<span class="number">7</span> value:<span class="string">"[&#123;\"logpath\":\"E:/nginx/logs/access.log\",\"topic\":\"nginx_log\"&#125;,&#123;\"logpath\":\"E:/nginx/logs/error.log\",\"topic\":\"nginx_log_err\"&#125;,&#123;\"logpath\":\"E:/nginx/logs/error2.log\",\"topic\":\"nginx_log_err2\"&#125;]"</span> ]</span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">25</span>:<span class="number">17.613</span> [D]  日志设置为[&#123;E:/nginx/logs/access.log nginx_log&#125; &#123;E:/nginx/logs/error.log nginx_log_err&#125; &#123;E:/nginx/logs/error2.log nginx_log_err2&#125;]</span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">25</span>:<span class="number">17.613</span> [D]  resp from etcd:[]</span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">25</span>:<span class="number">17.613</span> [D]  连接etcd成功</span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">25</span>:<span class="number">17.613</span> [D]  初始化etcd成功!</span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">25</span>:<span class="number">17.613</span> [D]  初始化tailf成功!</span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">25</span>:<span class="number">17.613</span> [D]  开始监控key: /backend/logagent/config/<span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">25</span>:<span class="number">17.613</span> [D]  开始监控key: /backend/logagent/config/<span class="number">169.254</span><span class="number">.109</span><span class="number">.181</span></span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">25</span>:<span class="number">17.614</span> [D]  开始监控key: /backend/logagent/config/<span class="number">192.168</span><span class="number">.106</span><span class="number">.1</span></span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">25</span>:<span class="number">17.615</span> [D]  开始监控key: /backend/logagent/config/<span class="number">169.254</span><span class="number">.30</span><span class="number">.148</span></span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">25</span>:<span class="number">17.616</span> [D]  开始监控key: /backend/logagent/config/<span class="number">169.254</span><span class="number">.153</span><span class="number">.68</span></span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">25</span>:<span class="number">17.616</span> [D]  开始监控key: /backend/logagent/config/<span class="number">192.168</span><span class="number">.0</span><span class="number">.11</span></span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">25</span>:<span class="number">17.617</span> [D]  初始化Kafka producer成功,地址为: <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">9092</span></span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">25</span>:<span class="number">17.617</span> [D]  初始化Kafka成功!</span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">26</span>:<span class="number">31.675</span> [D]  get config from etcd ,Type: PUT, Key:/backend/logagent/config/<span class="number">192.168</span><span class="number">.0</span><span class="number">.11</span>, Value:[&#123;<span class="string">"logpath"</span>:<span class="string">"E:\\Go\\logCollect\\logAgent\\logs\\my.log"</span>,<span class="string">"topic"</span>:<span class="string">"nginx_log"</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">26</span>:<span class="number">31.675</span> [D]  get config from etcd success, [&#123;E:\Go\logCollect\logAgent\logs\my.log nginx_log&#125;]</span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">26</span>:<span class="number">31.675</span> [W]  tail obj 退出, 配置项为conf:&#123;E:/nginx/logs/error2.log nginx_log_err2&#125;</span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">26</span>:<span class="number">31.675</span> [W]  tail obj 退出, 配置项为conf:&#123;E:/nginx/logs/access.log nginx_log&#125;</span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">26</span>:<span class="number">31.675</span> [W]  tail obj 退出, 配置项为conf:&#123;E:/nginx/logs/error.log nginx_log_err&#125;</span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">26</span>:<span class="number">31.947</span> [D]  read success, pid:<span class="number">0</span>, offset:<span class="number">34210</span>, topic:nginx_log</span><br><span class="line"></span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">26</span>:<span class="number">31.948</span> [D]  read success, pid:<span class="number">0</span>, offset:<span class="number">34211</span>, topic:nginx_log</span><br><span class="line"></span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">26</span>:<span class="number">32.177</span> [D]  read success, pid:<span class="number">0</span>, offset:<span class="number">34212</span>, topic:nginx_log</span><br><span class="line"></span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">26</span>:<span class="number">32.178</span> [D]  read success, pid:<span class="number">0</span>, offset:<span class="number">34213</span>, topic:nginx_log</span><br><span class="line"></span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">26</span>:<span class="number">32.180</span> [D]  read success, pid:<span class="number">0</span>, offset:<span class="number">34214</span>, topic:nginx_log</span><br><span class="line"></span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">26</span>:<span class="number">32.180</span> [D]  read success, pid:<span class="number">0</span>, offset:<span class="number">34215</span>, topic:nginx_log</span><br><span class="line"></span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">26</span>:<span class="number">32.427</span> [D]  read success, pid:<span class="number">0</span>, offset:<span class="number">34216</span>, topic:nginx_log</span><br><span class="line"></span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">26</span>:<span class="number">32.428</span> [D]  read success, pid:<span class="number">0</span>, offset:<span class="number">34217</span>, topic:nginx_log</span><br><span class="line"></span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">26</span>:<span class="number">32.430</span> [D]  read success, pid:<span class="number">0</span>, offset:<span class="number">34218</span>, topic:nginx_log</span><br><span class="line"></span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">26</span>:<span class="number">32.432</span> [D]  read success, pid:<span class="number">0</span>, offset:<span class="number">34219</span>, topic:nginx_log</span><br><span class="line"></span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">26</span>:<span class="number">32.432</span> [D]  read success, pid:<span class="number">0</span>, offset:<span class="number">34220</span>, topic:nginx_log</span><br><span class="line"></span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">26</span>:<span class="number">32.433</span> [D]  read success, pid:<span class="number">0</span>, offset:<span class="number">34221</span>, topic:nginx_log</span><br></pre></td></tr></table></figure><p>启动<code>logTransfer</code>, 收集日志信息, 并将日志信息传入Es中<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">29</span>:<span class="number">17.109</span> [D]  初始化日志模块成功</span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">29</span>:<span class="number">17.118</span> [D]  初始化Kafka成功</span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">29</span>:<span class="number">17.120</span> [D]  初始化Es成功</span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">29</span>:<span class="number">25.518</span> [D]  Partition:<span class="number">0</span>, Offset:<span class="number">153210</span>, Key:, Value:<span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">29</span>:<span class="number">25.265</span> [D]  开始监控key: /backend/logagent/config/<span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">29</span>:<span class="number">27.361</span> [D]  Partition:<span class="number">0</span>, Offset:<span class="number">153211</span>, Key:, Value:<span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">29</span>:<span class="number">25.265</span> [D]  开始监控key: /backend/logagent/config/<span class="number">169.254</span><span class="number">.30</span><span class="number">.148</span></span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">29</span>:<span class="number">27.531</span> [D]  Partition:<span class="number">0</span>, Offset:<span class="number">153212</span>, Key:, Value:<span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">29</span>:<span class="number">25.265</span> [D]  开始监控key: /backend/logagent/config/<span class="number">169.254</span><span class="number">.153</span><span class="number">.68</span></span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">29</span>:<span class="number">27.743</span> [D]  Partition:<span class="number">0</span>, Offset:<span class="number">153213</span>, Key:, Value:<span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">29</span>:<span class="number">25.266</span> [D]  开始监控key: /backend/logagent/config/<span class="number">192.168</span><span class="number">.0</span><span class="number">.11</span></span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">29</span>:<span class="number">27.870</span> [D]  Partition:<span class="number">0</span>, Offset:<span class="number">153214</span>, Key:, Value:<span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">29</span>:<span class="number">25.267</span> [D]  初始化Kafka producer成功,地址为: <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">9092</span></span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">29</span>:<span class="number">28.012</span> [D]  Partition:<span class="number">0</span>, Offset:<span class="number">153215</span>, Key:, Value:<span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">29</span>:<span class="number">25.267</span> [D]  初始化Kafka成功!</span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">29</span>:<span class="number">28.191</span> [D]  Partition:<span class="number">0</span>, Offset:<span class="number">153216</span>, Key:, Value:<span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">29</span>:<span class="number">25.518</span> [D]  read success, pid:<span class="number">0</span>, offset:<span class="number">153210</span>, topic:nginx_log</span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">29</span>:<span class="number">28.311</span> [D]  Partition:<span class="number">0</span>, Offset:<span class="number">153217</span>, Key:, Value:</span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">29</span>:<span class="number">28.456</span> [D]  Partition:<span class="number">0</span>, Offset:<span class="number">153218</span>, Key:, Value:<span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">29</span>:<span class="number">25.521</span> [D]  read success, pid:<span class="number">0</span>, offset:<span class="number">153211</span>, topic:nginx_log</span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">29</span>:<span class="number">28.600</span> [D]  Partition:<span class="number">0</span>, Offset:<span class="number">153219</span>, Key:, Value:</span><br><span class="line"><span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">29</span>:<span class="number">28.744</span> [D]  Partition:<span class="number">0</span>, Offset:<span class="number">153220</span>, Key:, Value:<span class="number">2020</span>/<span class="number">03</span>/<span class="number">28</span> <span class="number">20</span>:<span class="number">29</span>:<span class="number">25.522</span> [D]  read success, pid:<span class="number">0</span>, offset:<span class="number">153212</span>, topic:nginx_log</span><br></pre></td></tr></table></figure></p><p>打开<code>http://localhost:5601/</code> kibana<br><img src="https://img-blog.csdnimg.cn/2020032820372182.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>添加刚才传入的<code>Topic</code>为索引, 然后打开<code>Discover</code>查看<br><img src="https://img-blog.csdnimg.cn/2020032820364455.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>已经能看到最新的数据了, 成功收集!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前面我们将logTransfor的配置初始化成功了, 下面将从Kafka中消费数据, 并将日志入库到Elasticsearch并通过Kibana进行展示&lt;br&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/2020032911191857.pn
      
    
    </summary>
    
      <category term="Golang日志收集系统" scheme="https://plutoacharon.github.io/categories/Golang%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Golang" scheme="https://plutoacharon.github.io/tags/Golang/"/>
    
      <category term="Golang日志收集系统" scheme="https://plutoacharon.github.io/tags/Golang%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Golang实战之海量日志收集系统（七）logTransfer之从kafka中获取日志信息</title>
    <link href="https://plutoacharon.github.io/2020/03/29/Golang%E5%AE%9E%E6%88%98%E4%B9%8B%E6%B5%B7%E9%87%8F%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%83%EF%BC%89logTransfer%E4%B9%8B%E4%BB%8Ekafka%E4%B8%AD%E8%8E%B7%E5%8F%96%E6%97%A5%E5%BF%97%E4%BF%A1%E6%81%AF/"/>
    <id>https://plutoacharon.github.io/2020/03/29/Golang实战之海量日志收集系统（七）logTransfer之从kafka中获取日志信息/</id>
    <published>2020-03-29T03:27:00.000Z</published>
    <updated>2020-03-29T03:29:16.825Z</updated>
    
    <content type="html"><![CDATA[<p>在前六章中已经完成了日志收集的<code>logAgent</code>端, 接下来需要将日志数据写入到<code>Kafka</code>中, 然后将数据落地到<code>Elastciseartch</code>中</p><h3 id="Elastciseartch与Kinaba下载与安装"><a href="#Elastciseartch与Kinaba下载与安装" class="headerlink" title="Elastciseartch与Kinaba下载与安装"></a>Elastciseartch与Kinaba下载与安装</h3><p><a href="https://blog.csdn.net/qq_43442524/article/details/105144156" target="_blank" rel="noopener">Elastciseartch与Kinaba下载与安装</a>, 参考我这篇博客</p><h3 id="使用Golang控制Elasticsearch"><a href="#使用Golang控制Elasticsearch" class="headerlink" title="使用Golang控制Elasticsearch"></a>使用Golang控制Elasticsearch</h3><p>环境版本:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">go 1.14</span><br><span class="line">elasticsearch-7.6.1</span><br><span class="line">kibana-7.6.1-windows-x86_64</span><br></pre></td></tr></table></figure></p><p>我们使用第三方库<code>github.com/olivere/elastic</code></p><p>6.X包路径为<code>github.com/olivere/elastic</code> 7.X的包路径为<code>github.com/olivere/elastic/v7</code>，根据自己安装的elasticsearch版本进行区分</p><p>elastic库的官方文档<code>https://olivere.github.io/elastic/</code>上面有更加详细的实例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/olivere/elastic/v7"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Tweet <span class="keyword">struct</span> &#123;</span><br><span class="line">User    <span class="keyword">string</span></span><br><span class="line">Message <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">client, err := elastic.NewClient(elastic.SetSniff(<span class="literal">false</span>), elastic.SetURL(<span class="string">"http://localhost:9200/"</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"connect es error"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"conn es succ"</span>)</span><br><span class="line"></span><br><span class="line">tweet := Tweet&#123;User: <span class="string">"haohan"</span>, Message: <span class="string">"This is a test"</span>&#125;</span><br><span class="line">_, err = client.Index().</span><br><span class="line">Index(<span class="string">"twitter"</span>).</span><br><span class="line">Id(<span class="string">"1"</span>).</span><br><span class="line">BodyJson(tweet).</span><br><span class="line">Do(context.Background())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// Handle error</span></span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"insert succ"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插入成功<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conn es succ</span><br><span class="line">insert succ</span><br></pre></td></tr></table></figure></p><p><img src="https://img-blog.csdnimg.cn/20200327172051712.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="kafka消费示例"><a href="#kafka消费示例" class="headerlink" title="kafka消费示例"></a>kafka消费示例</h3><p>前面介绍了写数据到kafka中，数据需要从消息队列里面取出最终落地到es中。简单介绍下从kafka中获取数据<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/Shopify/sarama"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line"><span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">consumer, err := sarama.NewConsumer(strings.Split(<span class="string">"localhost:9092"</span>,<span class="string">","</span>), <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Failed to start consumer: %s"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">partitionList, err := consumer.Partitions(<span class="string">"nginx_log"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Failed to get the list of partitions: "</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(partitionList)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照分区来消费</span></span><br><span class="line"><span class="keyword">for</span> partition := <span class="keyword">range</span> partitionList &#123;</span><br><span class="line">pc, err := consumer.ConsumePartition(<span class="string">"nginx_log"</span>, <span class="keyword">int32</span>(partition), sarama.OffsetNewest)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Failed to start consumer for partition %d: %s\n"</span>, partition, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> pc.AsyncClose()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(pc sarama.PartitionConsumer)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> msg := <span class="keyword">range</span> pc.Messages() &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Partition:%d, Offset:%d, Key:%s, Value:%s"</span>, msg.Partition, msg.Offset, <span class="keyword">string</span>(msg.Key), <span class="keyword">string</span>(msg.Value))</span><br><span class="line">fmt.Println()</span><br><span class="line"></span><br><span class="line">&#125;(pc)</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Hour)</span><br><span class="line">_ = consumer.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Partition:0, Offset:34208, Key:, Value:This is a test!</span><br><span class="line">Partition:0, Offset:34209, Key:, Value:</span><br></pre></td></tr></table></figure><p>已经能够从kafka中拿到日志信息了</p><p>下面开始logTransfer服务的开发，数据已经到kafka了，现在要从kafka中消费数据，然后写到es中，logTransfer做的就是这个工作</p><h3 id="初识化logTransfer配置"><a href="#初识化logTransfer配置" class="headerlink" title="初识化logTransfer配置"></a>初识化logTransfer配置</h3><p>项目目录:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">├─config</span><br><span class="line">│      logTransfer.conf</span><br><span class="line">│</span><br><span class="line">├─es</span><br><span class="line">│      elasticsearch.go</span><br><span class="line">│   </span><br><span class="line">├─logs</span><br><span class="line">│      my.log</span><br><span class="line">│</span><br><span class="line">└─main</span><br><span class="line">kafka.go</span><br><span class="line">        config.go</span><br><span class="line">        log.go</span><br><span class="line">        main.go</span><br></pre></td></tr></table></figure></p><p>在<code>main.go</code>中填写初始化信息:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/astaxie/beego/logs"</span></span><br><span class="line"><span class="string">"logCollect/logTransfer/kafka"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 初始化配置</span></span><br><span class="line">err := InitConfig(<span class="string">"ini"</span>, <span class="string">"E:\\Go\\logCollect\\logTransfer\\config\\logTransfer.conf"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">logs.Debug(<span class="string">"初始化配置成功"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化日志模块</span></span><br><span class="line">err = initLogger(logConfig.LogPath, logConfig.LogLevel)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">logs.Debug(<span class="string">"初始化日志模块成功"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化Kafka</span></span><br><span class="line">err = kafka.InitKafka(logConfig.KafkaAddr, logConfig.KafkaTopic)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logs.Error(<span class="string">"初始化Kafka失败, err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">logs.Debug(<span class="string">"初始化Kafka成功"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><code>logTransfer.conf</code></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[logs]</span><br><span class="line">log_level = debug</span><br><span class="line">log_path = &quot;E:\\Go\\logCollect\\logTransfer\\logs\\my.log&quot;</span><br><span class="line"></span><br><span class="line">[kafka]</span><br><span class="line">server_addr = localhost:9092</span><br><span class="line">topic = nginx_log</span><br><span class="line"></span><br><span class="line">[elasticsearch]</span><br><span class="line">addr = http://localhost:9200/</span><br></pre></td></tr></table></figure></p><p><code>config.go</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/astaxie/beego/config"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> LogConfig <span class="keyword">struct</span> &#123;</span><br><span class="line">KafkaAddr  <span class="keyword">string</span></span><br><span class="line">KafkaTopic <span class="keyword">string</span></span><br><span class="line">EsAddr     <span class="keyword">string</span></span><br><span class="line">LogPath    <span class="keyword">string</span></span><br><span class="line">LogLevel   <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">logConfig *LogConfig</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitConfig</span><span class="params">(confType <span class="keyword">string</span>, filename <span class="keyword">string</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">conf, err := config.NewConfig(confType, filename)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"初始化配置文件出错:%v\n"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 导入配置信息</span></span><br><span class="line">logConfig = &amp;LogConfig&#123;&#125;</span><br><span class="line"><span class="comment">// 日志级别</span></span><br><span class="line">logConfig.LogLevel = conf.String(<span class="string">"logs::log_level"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(logConfig.LogLevel) == <span class="number">0</span> &#123;</span><br><span class="line">logConfig.LogLevel = <span class="string">"debug"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 日志输出路径</span></span><br><span class="line">logConfig.LogPath = conf.String(<span class="string">"logs::log_path"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(logConfig.LogPath) == <span class="number">0</span> &#123;</span><br><span class="line">logConfig.LogPath = <span class="string">"E:\\Go\\logCollect\\logTransfer\\logs\\my.log"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Kafka</span></span><br><span class="line">logConfig.KafkaAddr = conf.String(<span class="string">"kafka::server_addr"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(logConfig.KafkaAddr) == <span class="number">0</span> &#123;</span><br><span class="line">err = fmt.Errorf(<span class="string">"初识化Kafka addr失败"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">logConfig.KafkaTopic = conf.String(<span class="string">"kafka::topic"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(logConfig.KafkaAddr) == <span class="number">0</span> &#123;</span><br><span class="line">err = fmt.Errorf(<span class="string">"初识化Kafka topic失败"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Es</span></span><br><span class="line">logConfig.EsAddr = conf.String(<span class="string">"elasticsearch::addr"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(logConfig.EsAddr) == <span class="number">0</span> &#123;</span><br><span class="line">err = fmt.Errorf(<span class="string">"初识化Es addr失败"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><code>log,go</code></strong><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/astaxie/beego/logs"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">convertLogLevel</span><span class="params">(level <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> level &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"debug"</span>:</span><br><span class="line"><span class="keyword">return</span> logs.LevelDebug</span><br><span class="line"><span class="keyword">case</span> <span class="string">"warn"</span>:</span><br><span class="line"><span class="keyword">return</span> logs.LevelWarn</span><br><span class="line"><span class="keyword">case</span> <span class="string">"info"</span>:</span><br><span class="line"><span class="keyword">return</span> logs.LevelInfo</span><br><span class="line"><span class="keyword">case</span> <span class="string">"trace"</span>:</span><br><span class="line"><span class="keyword">return</span> logs.LevelTrace</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> logs.LevelDebug</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initLogger</span><span class="params">(logPath <span class="keyword">string</span>, logLevel <span class="keyword">string</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">config := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">config[<span class="string">"filename"</span>] = logPath</span><br><span class="line">config[<span class="string">"level"</span>] = convertLogLevel(logLevel)</span><br><span class="line">configStr, err := json.Marshal(config)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"初始化日志, 序列化失败:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">_ = logs.SetLogger(logs.AdapterFile, <span class="keyword">string</span>(configStr))</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><code>kafka.go</code></strong><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> kafka</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/Shopify/sarama"</span></span><br><span class="line"><span class="string">"github.com/astaxie/beego/logs"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> KafkaClient <span class="keyword">struct</span> &#123;</span><br><span class="line">client sarama.Consumer</span><br><span class="line">addr   <span class="keyword">string</span></span><br><span class="line">topic  <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">kafkaClient *KafkaClient</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitKafka</span><span class="params">(addr <span class="keyword">string</span>, topic <span class="keyword">string</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">kafkaClient = &amp;KafkaClient&#123;&#125;</span><br><span class="line">consumer, err := sarama.NewConsumer(strings.Split(addr, <span class="string">","</span>), <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logs.Error(<span class="string">"启动Kafka消费者错误: %s"</span>, err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">kafkaClient.client = consumer</span><br><span class="line">kafkaClient.addr = addr</span><br><span class="line">kafkaClient.topic = topic</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行<code>main</code>函数, 构建测试<br>输出日志在<code>logs/my.log</code>中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020/03/28 17:30:02.744 [D]  初始化日志模块成功</span><br><span class="line">2020/03/28 17:30:02.778 [D]  初始化Kafka成功</span><br></pre></td></tr></table></figure></p><p>初始化成功, 下面将使用Kafka消费数据, 并且将获取到的数据存入ES中</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在前六章中已经完成了日志收集的&lt;code&gt;logAgent&lt;/code&gt;端, 接下来需要将日志数据写入到&lt;code&gt;Kafka&lt;/code&gt;中, 然后将数据落地到&lt;code&gt;Elastciseartch&lt;/code&gt;中&lt;/p&gt;
&lt;h3 id=&quot;Elastciseartch与
      
    
    </summary>
    
      <category term="Golang日志收集系统" scheme="https://plutoacharon.github.io/categories/Golang%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Golang" scheme="https://plutoacharon.github.io/tags/Golang/"/>
    
      <category term="Golang日志收集系统" scheme="https://plutoacharon.github.io/tags/Golang%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Windows10配置Elasticsearch7与 Kibana7</title>
    <link href="https://plutoacharon.github.io/2020/03/29/Windows10%E9%85%8D%E7%BD%AEElasticsearch7%E4%B8%8E-Kibana7/"/>
    <id>https://plutoacharon.github.io/2020/03/29/Windows10配置Elasticsearch7与-Kibana7/</id>
    <published>2020-03-29T03:26:39.000Z</published>
    <updated>2020-03-29T03:30:14.008Z</updated>
    
    <content type="html"><![CDATA[<p>Elasticsearch 是一个实时的分布式搜索分析引擎，它能让你以前所未有的速度和规模，<br>去探索你的数据。 它被用作全文检索、结构化搜索、分析以及这三个功能的组合</p><p>Kibana 是一款开源的数据分析和可视化平台，它是 Elastic Stack 成员之一，设计用于和 Elasticsearch 协作。您可以使用 Kibana 对 Elasticsearch 索引中的数据进行搜索、查看、交互操作。您可以很方便的利用图表、表格及地图对数据进行多元化的分析和呈现。</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="https://www.elastic.co/cn/downloads/elasticsearch" target="_blank" rel="noopener">Elasticsearch下载</a>: <code>https://www.elastic.co/cn/downloads/elasticsearch</code></p><p><a href="https://www.elastic.co/cn/downloads/kibana" target="_blank" rel="noopener">Kibana下载地址</a>: <code>https://www.elastic.co/cn/downloads/kibana</code></p><h2 id="配置与启动"><a href="#配置与启动" class="headerlink" title="配置与启动"></a>配置与启动</h2><h3 id="启动Elasticsearch"><a href="#启动Elasticsearch" class="headerlink" title="启动Elasticsearch"></a>启动Elasticsearch</h3><blockquote><p>注意: 启动Elasticsearch需要配置Java环境</p></blockquote><p>解压文件, 打开cmd, 在安装目录下输入<code>.\bin\elasticsearch.bat</code><br><img src="https://img-blog.csdnimg.cn/20200327162317528.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>浏览器输入<code>localhost:9200</code>查看<br><img src="https://img-blog.csdnimg.cn/20200327162403537.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>安装成功</p><h3 id="启动Kibana"><a href="#启动Kibana" class="headerlink" title="启动Kibana"></a>启动Kibana</h3><blockquote><p>注意: <code>Kibana 的版本需要和 Elasticsearch 的版本一致</code>。这是官方支持的配置。<br>运行不同主版本号的 Kibana 和 Elasticsearch 是不支持的（例如 Kibana 5.x 和 Elasticsearch 2.x），若主版本号相同，运行 Kibana 子版本号比 Elasticsearch 子版本号新的版本也是不支持的（例如 Kibana 5.1 和 Elasticsearch 5.0）。<br>运行一个 Elasticsearch 子版本号大于 Kibana 的版本基本不会有问题，这种情况一般是便于先将 Elasticsearch 升级（例如 Kibana 5.0 和 Elasticsearch 5.1）。在这种配置下，Kibana 启动日志中会出现一个警告，所以一般只是使用于 Kibana 即将要升级到和 Elasticsearch 相同版本的场景。<br>运行不同的 Kibana 和 Elasticsearch 补丁版本一般是支持的（例如：Kibana 5.0.0 和 Elasticsearch 5.0.1），尽管我们鼓励用户去运行最新的补丁更新版本。</p></blockquote><p>Kibana官方手册:<code>https://www.elastic.co/guide/cn/kibana/current/index.html</code></p><p>下载解压缩后, 在安装目录下打开cmd输入<code>.\bin\kibana.bat</code><br><img src="https://img-blog.csdnimg.cn/20200327162745424.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>输入<code>http://localhost:5601/</code>启动成功<br><img src="https://img-blog.csdnimg.cn/20200327162957941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如果想要查看中文版的<code>Kinaba</code>, 修改<code>kibana-7.6.1-windows-x86_64\config\kibana.yml</code>的最后一行</p><p>重启<br><img src="https://img-blog.csdnimg.cn/20200327163452940.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200327163609875.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><code>http://localhost:5601/status</code>检查 Kibana 状态</p><p>访问 Kibana 的服务器状态页，状态页展示了服务器资源使用情况和已安装插件列表</p><p><img src="https://img-blog.csdnimg.cn/20200327163836716.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Elasticsearch 是一个实时的分布式搜索分析引擎，它能让你以前所未有的速度和规模，&lt;br&gt;去探索你的数据。 它被用作全文检索、结构化搜索、分析以及这三个功能的组合&lt;/p&gt;
&lt;p&gt;Kibana 是一款开源的数据分析和可视化平台，它是 Elastic Stack 成员
      
    
    </summary>
    
      <category term="Golang日志收集系统" scheme="https://plutoacharon.github.io/categories/Golang%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Golang" scheme="https://plutoacharon.github.io/tags/Golang/"/>
    
      <category term="Golang日志收集系统" scheme="https://plutoacharon.github.io/tags/Golang%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Golang实战之海量日志收集系统（六）监视etcd配置项的变更</title>
    <link href="https://plutoacharon.github.io/2020/03/29/Golang%E5%AE%9E%E6%88%98%E4%B9%8B%E6%B5%B7%E9%87%8F%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%85%AD%EF%BC%89%E7%9B%91%E8%A7%86etcd%E9%85%8D%E7%BD%AE%E9%A1%B9%E7%9A%84%E5%8F%98%E6%9B%B4/"/>
    <id>https://plutoacharon.github.io/2020/03/29/Golang实战之海量日志收集系统（六）监视etcd配置项的变更/</id>
    <published>2020-03-29T03:26:18.000Z</published>
    <updated>2020-03-29T03:29:30.622Z</updated>
    
    <content type="html"><![CDATA[<p>在上一篇中我们已经实现了从<code>etcd</code>中获取配置信息并创建<code>tailTask</code>任务</p><p>现在我们来通过<code>etcd</code>的<code>watch</code>实现新配置的变更</p><h2 id="监视etcd配置项的变更"><a href="#监视etcd配置项的变更" class="headerlink" title="监视etcd配置项的变更"></a>监视etcd配置项的变更</h2><h3 id="实现watch各个不同ip"><a href="#实现watch各个不同ip" class="headerlink" title="实现watch各个不同ip"></a>实现watch各个不同ip</h3><p>在真实生产环境中时会常常添加新的服务器, 这时我们需要借助之前的<code>ip.go</code>获取所有ip节点, 并且实时监控</p><p>修改<code>EtcdClient</code>结构体增加<code>keys</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> EtcdClient <span class="keyword">struct</span> &#123;</span><br><span class="line">client *clientv3.Client</span><br><span class="line">keys   []<span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在main/etcd.go中添加<code>initEtcdWatcher</code>与<code>watchKey</code>函数并且在函数<code>initEtcd</code>中调用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化多个watch监控etcd中配置节点</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initEtcdWatcher</span><span class="params">(addr <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, key := <span class="keyword">range</span> etcdClient.keys &#123;</span><br><span class="line"><span class="keyword">go</span> watchKey(addr,key)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">watchKey</span><span class="params">(addr <span class="keyword">string</span>, key <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化连接etcd</span></span><br><span class="line">cli, err := clientv3.New(clientv3.Config&#123;</span><br><span class="line"><span class="comment">//Endpoints:   []string&#123;"localhost:2379", "localhost:22379", "localhost:32379"&#125;,</span></span><br><span class="line">Endpoints:   []<span class="keyword">string</span>&#123;addr&#125;,</span><br><span class="line">DialTimeout: <span class="number">5</span> * time.Second,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logs.Error(<span class="string">"连接etcd失败:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logs.Debug(<span class="string">"开始监控key:"</span>,key)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Watch操作</span></span><br><span class="line">wch := cli.Watch(context.Background(), key)</span><br><span class="line"><span class="keyword">for</span> resp := <span class="keyword">range</span> wch &#123;</span><br><span class="line"><span class="keyword">for</span> _, ev := <span class="keyword">range</span> resp.Events &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Type: %v, Key:%v, Value:%v\n"</span>, ev.Type, <span class="keyword">string</span>(ev.Kv.Key), <span class="keyword">string</span>(ev.Kv.Value))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">2020/03/24 15:21:27.632 [D]  导入日志成功&amp;&#123;debug E:\\Go\\logagent\\logs\\my.log 100 0.0.0.0:9092 [&#123;E:\\Go\\logagent\\logs\\my.log nginx_log&#125;] 0.0.0.0:2379 /backend/logagent/config/&#125;</span><br><span class="line">2020/03/24 15:21:27.646 [D]  resp from etcd:[]</span><br><span class="line">2020/03/24 15:21:27.646 [D]  resp from etcd:[]</span><br><span class="line">2020/03/24 15:21:27.647 [D]  resp from etcd:[]</span><br><span class="line">2020/03/24 15:21:27.647 [D]  resp from etcd:[]</span><br><span class="line">2020/03/24 15:21:27.647 [D]  resp from etcd:[key:&quot;/backend/logagent/config/192.168.0.11&quot; create_revision:6 mod_revision:9 version:4 value:&quot;[&#123;\&quot;logpath\&quot;:\&quot;E:/nginx/logs/access.log\&quot;,\&quot;topic\&quot;:\&quot;nginx_log\&quot;&#125;,&#123;\&quot;logpath\&quot;:\&quot;E:/nginx/logs/error.log\&quot;,\&quot;topic\&quot;:\&quot;nginx_log_err\&quot;&#125;]&quot; ]</span><br><span class="line">2020/03/24 15:21:27.647 [D]  日志设置为[&#123;E:/nginx/logs/access.log nginx_log&#125; &#123;E:/nginx/logs/error.log nginx_log_err&#125;]</span><br><span class="line">2020/03/24 15:21:27.648 [D]  resp from etcd:[]</span><br><span class="line">2020/03/24 15:21:27.648 [D]  连接etcd成功</span><br><span class="line">2020/03/24 15:21:27.648 [D]  初始化etcd成功!</span><br><span class="line">2020/03/24 15:21:27.648 [D]  初始化tailf成功!</span><br><span class="line">2020/03/24 15:21:27.648 [D]  开始监控key: /backend/logagent/config/169.254.109.181</span><br><span class="line">2020/03/24 15:21:27.648 [D]  开始监控key: /backend/logagent/config/192.168.0.1</span><br><span class="line">2020/03/24 15:21:27.648 [D]  开始监控key: /backend/logagent/config/192.168.106.1</span><br><span class="line">2020/03/24 15:21:27.650 [D]  开始监控key: /backend/logagent/config/169.254.30.148</span><br><span class="line">2020/03/24 15:21:27.650 [D]  开始监控key: /backend/logagent/config/192.168.0.11</span><br><span class="line">2020/03/24 15:21:27.651 [D]  开始监控key: /backend/logagent/config/169.254.153.68</span><br><span class="line">2020/03/24 15:21:27.653 [D]  初始化Kafka producer成功,地址为: 0.0.0.0:9092</span><br><span class="line">2020/03/24 15:21:27.653 [D]  初始化Kafka成功!</span><br></pre></td></tr></table></figure><h3 id="实现watch新的配置"><a href="#实现watch新的配置" class="headerlink" title="实现watch新的配置"></a>实现watch新的配置</h3><h4 id="修改etcd-etcd-go"><a href="#修改etcd-etcd-go" class="headerlink" title="修改etcd/etcd.go"></a>修改<code>etcd/etcd.go</code></h4><p><code>etcd/etcd.go</code>新增<code>initEtcdWatcher</code>与<code>watchKey</code>函数，用于监视<code>etcd</code>的<code>key</code>的变化，当有变化时通知</p><p>其中通过<code>ev.Type</code>判断是<code>delect</code>还是<code>put</code>处理</p><p>当<code>getConfSucc</code>得到配置成功, 进行tailf中的<code>UpdateConfig</code>操作, 进行更新配置<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化多个watch监控etcd中配置节点</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initEtcdWatcher</span><span class="params">(addr <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, key := <span class="keyword">range</span> etcdClient.keys &#123;</span><br><span class="line"><span class="keyword">go</span> watchKey(addr, key)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">watchKey</span><span class="params">(addr <span class="keyword">string</span>, key <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化连接etcd</span></span><br><span class="line">cli, err := clientv3.New(clientv3.Config&#123;</span><br><span class="line"><span class="comment">//Endpoints:   []string&#123;"localhost:2379", "localhost:22379", "localhost:32379"&#125;,</span></span><br><span class="line">Endpoints:   []<span class="keyword">string</span>&#123;addr&#125;,</span><br><span class="line">DialTimeout: <span class="number">5</span> * time.Second,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logs.Error(<span class="string">"连接etcd失败:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logs.Debug(<span class="string">"开始监控key:"</span>, key)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Watch操作</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">var</span> collectConf []tailf.CollectConf</span><br><span class="line"><span class="keyword">var</span> getConfSucc = <span class="literal">true</span></span><br><span class="line">wch := cli.Watch(context.Background(), key)</span><br><span class="line"><span class="keyword">for</span> resp := <span class="keyword">range</span> wch &#123;</span><br><span class="line"><span class="keyword">for</span> _, ev := <span class="keyword">range</span> resp.Events &#123;</span><br><span class="line"><span class="comment">// DELETE处理</span></span><br><span class="line"><span class="keyword">if</span> ev.Type == mvccpb.DELETE &#123;</span><br><span class="line">logs.Warn(<span class="string">"删除Key[%s]配置"</span>, key)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// PUT处理</span></span><br><span class="line"><span class="keyword">if</span> ev.Type == mvccpb.PUT &amp;&amp; <span class="keyword">string</span>(ev.Kv.Key) == key &#123;</span><br><span class="line">err = json.Unmarshal(ev.Kv.Value, &amp;collectConf)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logs.Error(<span class="string">"反序列化key[%s]失败:"</span>, err)</span><br><span class="line">getConfSucc = <span class="literal">false</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">logs.Debug(<span class="string">"get config from etcd ,Type: %v, Key:%v, Value:%v\n"</span>, ev.Type, <span class="keyword">string</span>(ev.Kv.Key), <span class="keyword">string</span>(ev.Kv.Value))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> getConfSucc &#123;</span><br><span class="line">logs.Debug(<span class="string">"get config from etcd success, %v"</span>, collectConf)</span><br><span class="line">_ = tailf.UpdateConfig(collectConf)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="修改tailf-tail-go"><a href="#修改tailf-tail-go" class="headerlink" title="修改tailf/tail.go"></a>修改<code>tailf/tail.go</code></h4><p>在<code>TailObj</code>结构体中添加<code>status</code>(当前配置状态)与<code>exitChan</code>(管道里有数值时即为退出)<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> TailObj <span class="keyword">struct</span> &#123;</span><br><span class="line">tail     *tail.Tail</span><br><span class="line">conf     CollectConf</span><br><span class="line">status   <span class="keyword">int</span></span><br><span class="line">exitChan <span class="keyword">chan</span> <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义常量</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">StatusNormal = <span class="number">1</span> <span class="comment">// 正常状态</span></span><br><span class="line">StatusDelete = <span class="number">2</span> <span class="comment">// 删除状态</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>在<code>UpdateConfig</code>函数中遍历所有配置项</p><p>当<code>isRuning</code>为false时, 即可认为此项配置不存在, 需要新建任务, 调用<code>createNewTask</code>函数</p><p>重新遍历所有配置项, 如果<code>obj.status == StatusDelete</code>时, 将<code>obj.exitChan &lt;- 1</code>传入数值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新增etcd配置项</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UpdateConfig</span><span class="params">(confs []CollectConf)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建新的tailtask</span></span><br><span class="line"><span class="keyword">for</span> _, oneConf := <span class="keyword">range</span> confs &#123;</span><br><span class="line"><span class="comment">// 对于已经运行的所有实例, 路径是否一样</span></span><br><span class="line"><span class="keyword">var</span> isRuning = <span class="literal">false</span></span><br><span class="line"><span class="keyword">for</span> _, obj := <span class="keyword">range</span> tailObjMgr.tailsObjs &#123;</span><br><span class="line"><span class="comment">// 路径一样则证明是同一实例</span></span><br><span class="line"><span class="keyword">if</span> oneConf.LogPath == obj.conf.LogPath &#123;</span><br><span class="line">isRuning = <span class="literal">true</span></span><br><span class="line">obj.status = StatusNormal</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查是否已经存在</span></span><br><span class="line"><span class="keyword">if</span> isRuning &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果不存在该配置项 新建一个tailtask任务</span></span><br><span class="line">createNewTask(oneConf)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历所有查看是否存在删除操作</span></span><br><span class="line"><span class="keyword">var</span> tailObjs []*TailObj</span><br><span class="line"><span class="keyword">for</span> _, obj := <span class="keyword">range</span> tailObjMgr.tailsObjs &#123;</span><br><span class="line">obj.status = StatusDelete</span><br><span class="line"><span class="keyword">for</span> _, oneConf := <span class="keyword">range</span> confs &#123;</span><br><span class="line"><span class="keyword">if</span> oneConf.LogPath == obj.conf.LogPath &#123;</span><br><span class="line">obj.status = StatusNormal</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果status为删除, 则将exitChan置为1</span></span><br><span class="line"><span class="keyword">if</span> obj.status == StatusDelete &#123;</span><br><span class="line">obj.exitChan &lt;- <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将obj存入临时的数组中</span></span><br><span class="line">tailObjs = <span class="built_in">append</span>(tailObjs, obj)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将临时数组传入tailsObjs中</span></span><br><span class="line">tailObjMgr.tailsObjs = tailObjs</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>createNewTask</code>函数为新建一个tailtask<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createNewTask</span><span class="params">(conf CollectConf)</span></span> &#123;</span><br><span class="line"><span class="comment">// 初始化Tailf实例</span></span><br><span class="line">tails, errTail := tail.TailFile(conf.LogPath, tail.Config&#123;</span><br><span class="line">ReOpen:    <span class="literal">true</span>,</span><br><span class="line">Follow:    <span class="literal">true</span>,</span><br><span class="line">Location:  &amp;tail.SeekInfo&#123;Offset: <span class="number">0</span>, Whence: <span class="number">2</span>&#125;,</span><br><span class="line">MustExist: <span class="literal">false</span>,</span><br><span class="line">Poll:      <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> errTail != <span class="literal">nil</span> &#123;</span><br><span class="line">logs.Error(<span class="string">"收集文件[%s]错误: %v"</span>, conf.LogPath, errTail)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 导入配置项</span></span><br><span class="line">obj := &amp;TailObj&#123;</span><br><span class="line">conf:     conf,</span><br><span class="line">exitChan: <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.tail = tails</span><br><span class="line">tailObjMgr.tailsObjs = <span class="built_in">append</span>(tailObjMgr.tailsObjs, obj)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> readFromTail(obj)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改<code>readFromTail</code>函数, 当向<code>TextMsg</code>即想Kafka传入数据时, 判断该<code>tailObj.exitChan</code>是否为退出<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读入日志数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readFromTail</span><span class="params">(tailObj *TailObj)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> <span class="literal">true</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> msg, ok := &lt;-tailObj.tail.Lines:</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">logs.Warn(<span class="string">"Tail file close reopen, filename:%s\n"</span>, tailObj.tail.Filename)</span><br><span class="line">time.Sleep(<span class="number">100</span> * time.Millisecond)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">textMsg := &amp;TextMsg&#123;</span><br><span class="line">Msg:   msg.Text,</span><br><span class="line">Topic: tailObj.conf.Topic,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 放入chan里</span></span><br><span class="line">tailObjMgr.msgChan &lt;- textMsg</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果exitChan为1, 则删除对应配置项</span></span><br><span class="line"><span class="keyword">case</span> &lt;-tailObj.exitChan:</span><br><span class="line">logs.Warn(<span class="string">"tail obj 退出, 配置项为conf:%v"</span>, tailObj.conf)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后修改<code>InitTail</code>函数<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化tail</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitTail</span><span class="params">(conf []CollectConf, chanSize <span class="keyword">int</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">tailObjMgr = &amp;TailObjMgr&#123;</span><br><span class="line">msgChan: <span class="built_in">make</span>(<span class="keyword">chan</span> *TextMsg, chanSize), <span class="comment">// 定义Chan管道</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载配置项</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(conf) == <span class="number">0</span> &#123;</span><br><span class="line">logs.Error(<span class="string">"无效的日志collect配置: "</span>, conf)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环导入</span></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> conf &#123;</span><br><span class="line">createNewTask(v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">go build</span><br><span class="line">./logagent</span><br><span class="line">[169.254.109.181 169.254.30.148 192.168.106.1 192.168.0.1 192.168.0.11 169.254.153.68]</span><br><span class="line">开始</span><br><span class="line">2020/03/25 11:32:57 Waiting for E:/nginx/logs/access.log to appear...</span><br><span class="line">2020/03/25 11:32:57 Waiting for E:/nginx/logs/error.log to appear...</span><br></pre></td></tr></table></figure><p>向etcd中进行<code>PUT</code>与<code>DELECE</code></p><p><code>delece</code>操作时</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">2020/03/25 11:44:09.733 [D]  导入日志成功&amp;&#123;debug E:\\Go\\logagent\\logs\\my.log 100 0.0.0.0:9092 [&#123;E:\\Go\\logagent\\logs\\my.log nginx_log&#125;] 0.0.0.0:2379 /backend/logagent/config/&#125;</span><br><span class="line">2020/03/25 11:44:09.738 [D]  resp from etcd:[]</span><br><span class="line">2020/03/25 11:44:09.739 [D]  resp from etcd:[]</span><br><span class="line">2020/03/25 11:44:09.739 [D]  resp from etcd:[]</span><br><span class="line">2020/03/25 11:44:09.740 [D]  resp from etcd:[]</span><br><span class="line">2020/03/25 11:44:09.741 [D]  resp from etcd:[key:&quot;/backend/logagent/config/192.168.0.11&quot; create_revision:6 mod_revision:10 version:5 value:&quot;[&#123;\&quot;logpath\&quot;:\&quot;E:/nginx/logs/access.log\&quot;,\&quot;topic\&quot;:\&quot;nginx_log\&quot;&#125;,&#123;\&quot;logpath\&quot;:\&quot;E:/nginx/logs/error.log\&quot;,\&quot;topic\&quot;:\&quot;nginx_log_err\&quot;&#125;,&#123;\&quot;logpath\&quot;:\&quot;E:/nginx/logs/error2.log\&quot;,\&quot;topic\&quot;:\&quot;nginx_log_err2\&quot;&#125;]&quot; ]</span><br><span class="line">2020/03/25 11:44:09.741 [D]  日志设置为[&#123;E:/nginx/logs/access.log nginx_log&#125; &#123;E:/nginx/logs/error.log nginx_log_err&#125; &#123;E:/nginx/logs/error2.log nginx_log_err2&#125;]</span><br><span class="line">2020/03/25 11:44:09.741 [D]  resp from etcd:[]</span><br><span class="line">2020/03/25 11:44:09.741 [D]  连接etcd成功</span><br><span class="line">2020/03/25 11:44:09.741 [D]  初始化etcd成功!</span><br><span class="line">2020/03/25 11:44:09.741 [D]  初始化tailf成功!</span><br><span class="line">2020/03/25 11:44:09.741 [D]  开始监控key: /backend/logagent/config/169.254.109.181</span><br><span class="line">2020/03/25 11:44:09.741 [D]  开始监控key: /backend/logagent/config/169.254.30.148</span><br><span class="line">2020/03/25 11:44:09.741 [D]  开始监控key: /backend/logagent/config/192.168.0.1</span><br><span class="line">2020/03/25 11:44:09.742 [D]  开始监控key: /backend/logagent/config/192.168.0.11</span><br><span class="line">2020/03/25 11:44:09.742 [D]  开始监控key: /backend/logagent/config/192.168.106.1</span><br><span class="line">2020/03/25 11:44:09.742 [D]  开始监控key: /backend/logagent/config/169.254.153.68</span><br><span class="line">2020/03/25 11:44:09.745 [D]  初始化Kafka producer成功,地址为: 0.0.0.0:9092</span><br><span class="line">2020/03/25 11:44:09.745 [D]  初始化Kafka成功!</span><br><span class="line">2020/03/25 11:44:30.820 [D]  get config from etcd ,Type: PUT, Key:/backend/logagent/config/192.168.0.11, Value:[&#123;&quot;logpath&quot;:&quot;E:/nginx/logs/access.log&quot;,&quot;topic&quot;:&quot;nginx_log&quot;&#125;,&#123;&quot;logpath&quot;:&quot;E:/nginx/logs/error.log&quot;,&quot;topic&quot;:&quot;nginx_log_err&quot;&#125;]</span><br><span class="line"></span><br><span class="line">2020/03/25 11:44:30.820 [D]  get config from etcd success, [&#123;E:/nginx/logs/access.log nginx_log&#125; &#123;E:/nginx/logs/error.log nginx_log_err&#125;]</span><br><span class="line">2020/03/25 11:44:30.820 [W]  tail obj 退出, 配置项为conf:&#123;E:/nginx/logs/error2.log nginx_log_err2&#125;</span><br></pre></td></tr></table></figure><p><code>put</code>操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2020/03/25 11:46:18.082 [D]  get config from etcd ,Type: PUT, Key:/backend/logagent/config/192.168.0.11, Value:[&#123;&quot;logpath&quot;:&quot;E:/nginx/logs/access.log&quot;,&quot;topic&quot;:&quot;nginx_log&quot;&#125;,&#123;&quot;logpath&quot;:&quot;E:/nginx/logs/error.log&quot;,&quot;topic&quot;:&quot;nginx_log_err&quot;&#125;,&#123;&quot;logpath&quot;:&quot;E:/nginx/logs/error2.log&quot;,&quot;topic&quot;:&quot;nginx_log_err2&quot;&#125;]</span><br><span class="line"></span><br><span class="line">2020/03/25 11:46:18.082 [D]  get config from etcd success, [&#123;E:/nginx/logs/access.log nginx_log&#125; &#123;E:/nginx/logs/error.log nginx_log_err&#125; &#123;E:/nginx/logs/error2.log nginx_log_err2&#125;]</span><br></pre></td></tr></table></figure></p><p><code>Kafka</code>消费成功<br><img src="https://img-blog.csdnimg.cn/20200325115011541.png" alt="在这里插入图片描述"><br>已经成功获取到日志,</p><p>至此<code>logAgent</code> 的部分就写完了, 后续开发<code>logTransfe</code>r将从<code>Kafka</code>里面获取日志信息入库。可以存<code>Elasticsearch</code>，供<code>Kibana</code>进行可视化查询, 最后通过<code>beego</code>开发<code>web</code>界面管理<code>etcd</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在上一篇中我们已经实现了从&lt;code&gt;etcd&lt;/code&gt;中获取配置信息并创建&lt;code&gt;tailTask&lt;/code&gt;任务&lt;/p&gt;
&lt;p&gt;现在我们来通过&lt;code&gt;etcd&lt;/code&gt;的&lt;code&gt;watch&lt;/code&gt;实现新配置的变更&lt;/p&gt;
&lt;h2 id=&quot;监视
      
    
    </summary>
    
      <category term="Golang日志收集系统" scheme="https://plutoacharon.github.io/categories/Golang%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Golang" scheme="https://plutoacharon.github.io/tags/Golang/"/>
    
      <category term="Golang日志收集系统" scheme="https://plutoacharon.github.io/tags/Golang%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Golang实战之海量日志收集系统（五）根据etcd配置项创建多个tailTask</title>
    <link href="https://plutoacharon.github.io/2020/03/29/Golang%E5%AE%9E%E6%88%98%E4%B9%8B%E6%B5%B7%E9%87%8F%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%BA%94%EF%BC%89%E6%A0%B9%E6%8D%AEetcd%E9%85%8D%E7%BD%AE%E9%A1%B9%E5%88%9B%E5%BB%BA%E5%A4%9A%E4%B8%AAtailTask/"/>
    <id>https://plutoacharon.github.io/2020/03/29/Golang实战之海量日志收集系统（五）根据etcd配置项创建多个tailTask/</id>
    <published>2020-03-29T03:25:55.000Z</published>
    <updated>2020-03-29T03:29:35.627Z</updated>
    
    <content type="html"><![CDATA[<p>通过上一篇从etcd中获取配置信息, 现在要拿着这些配置项进行日志收集<br><img src="https://img-blog.csdnimg.cn/20200329111745132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>图源自:<a href="https://www.cnblogs.com/zhaof/p/8910761.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhaof/p/8910761.html</a></p></blockquote><h2 id="根据etcd的配置项创建多个tailtask"><a href="#根据etcd的配置项创建多个tailtask" class="headerlink" title="根据etcd的配置项创建多个tailtask"></a>根据etcd的配置项创建多个tailtask</h2><p>项目逻辑图:<br><img src="https://img-blog.csdnimg.cn/20200329111816615.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>项目结构:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line"></span><br><span class="line">│  go.mod</span><br><span class="line">│  go.sum</span><br><span class="line">│</span><br><span class="line">│</span><br><span class="line">├─conf</span><br><span class="line">│      logagent.conf</span><br><span class="line">│</span><br><span class="line">├─kafka</span><br><span class="line">│      kafka.go</span><br><span class="line">│</span><br><span class="line">├─logs</span><br><span class="line">│      my.log</span><br><span class="line">│</span><br><span class="line">├─main</span><br><span class="line">│      config.go</span><br><span class="line">│      etcd.go</span><br><span class="line">│      ip.go</span><br><span class="line">│      log.go</span><br><span class="line">│      main.go</span><br><span class="line">│      server.go</span><br><span class="line">│</span><br><span class="line">├─tailf</span><br><span class="line">│      tail.go</span><br><span class="line">│</span><br><span class="line">└─tools</span><br><span class="line">    └─SetConf</span><br><span class="line">            main.go</span><br></pre></td></tr></table></figure></p><h3 id="新增tools包-包含SetConf里的main-go将设置的配置信息导入到etcd中"><a href="#新增tools包-包含SetConf里的main-go将设置的配置信息导入到etcd中" class="headerlink" title="新增tools包,  包含SetConf里的main.go将设置的配置信息导入到etcd中"></a>新增tools包,  包含<code>SetConf</code>里的<code>main.go</code>将设置的配置信息导入到etcd中</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/coreos/etcd/clientv3"</span></span><br><span class="line"><span class="string">"logagent/tailf"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义etcd的前缀key</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">EtcdKey = <span class="string">"/backend/logagent/config/192.168.0.11"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SetLogConfToEtcd</span><span class="params">()</span></span> &#123;</span><br><span class="line">cli, err := clientv3.New(clientv3.Config&#123;</span><br><span class="line">Endpoints:   []<span class="keyword">string</span>&#123;<span class="string">"localhost:2379"</span>, <span class="string">"localhost:22379"</span>, <span class="string">"localhost:32379"</span>&#125;,</span><br><span class="line">DialTimeout: <span class="number">5</span> * time.Second,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"connect failed, err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"connect succ"</span>)</span><br><span class="line"><span class="keyword">defer</span> cli.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> logConfArr []tailf.CollectConf</span><br><span class="line">logConfArr = <span class="built_in">append</span>(</span><br><span class="line">logConfArr,</span><br><span class="line">tailf.CollectConf&#123;</span><br><span class="line">LogPath: <span class="string">"E:/nginx/logs/access.log"</span>,</span><br><span class="line">Topic:   <span class="string">"nginx_log"</span>,</span><br><span class="line">&#125;,</span><br><span class="line">)</span><br><span class="line">logConfArr = <span class="built_in">append</span>(</span><br><span class="line">logConfArr,</span><br><span class="line">tailf.CollectConf&#123;</span><br><span class="line">LogPath: <span class="string">"E:/nginx/logs/error.log"</span>,</span><br><span class="line">Topic:   <span class="string">"nginx_log_err"</span>,</span><br><span class="line">&#125;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Json打包</span></span><br><span class="line">data, err := json.Marshal(logConfArr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"json failed, "</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctx, cancel := context.WithTimeout(context.Background(), time.Second)</span><br><span class="line">_, err = cli.Put(ctx, EtcdKey, <span class="keyword">string</span>(data))</span><br><span class="line">cancel()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"put failed, err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctx, cancel = context.WithTimeout(context.Background(), time.Second)</span><br><span class="line">resp, err := cli.Get(ctx, EtcdKey)</span><br><span class="line">cancel()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"get failed, err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, ev := <span class="keyword">range</span> resp.Kvs &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%s : %s\n"</span>, ev.Key, ev.Value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">SetLogConfToEtcd()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接运行文件</p><pre><code>connect succ/backend/logagent/config/192.168.0.11 : [{&quot;path&quot;:&quot;E:/nginx/logs/access.log&quot;,&quot;topic&quot;:&quot;nginx_log&quot;},{&quot;path&quot;:&quot;E:/nginx/logs/error.log&quot;,&quot;topic&quot;:&quot;nginx_log_err&quot;}]</code></pre><p>成功将配置信息导入到etcd中, 下一步需要根据etcd中的配置项, 创建多个tailtask<br>我们想要实现的是</p><pre><code>E:/nginx/logs/access.log 日志文件发送到kafka的nginx_log中E:/nginx/logs/error.log 日志文件发送到kafka的nginx_log_err中</code></pre><h3 id="main包中新建etcd-go文件"><a href="#main包中新建etcd-go文件" class="headerlink" title="main包中新建etcd.go文件"></a>main包中新建etcd.go文件</h3><p>用于初始化连接etcd与从etcd中取出配置信息</p><p>因为存入etcd时传入的是json格式，所以取出使用时需要反序列化<code>json.Unmarshal(v.Value, &amp;collectConf)</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/astaxie/beego/logs"</span></span><br><span class="line"><span class="string">"github.com/coreos/etcd/clientv3"</span></span><br><span class="line"><span class="string">"logagent/tailf"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> EtcdClient <span class="keyword">struct</span> &#123;</span><br><span class="line">client *clientv3.Client</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">etcdClient *EtcdClient</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initEtcd</span><span class="params">(addr <span class="keyword">string</span>, key <span class="keyword">string</span>)</span> <span class="params">(collectConf []tailf.CollectConf, err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 初始化连接etcd</span></span><br><span class="line">cli, err := clientv3.New(clientv3.Config&#123;</span><br><span class="line"><span class="comment">//Endpoints:   []string&#123;"localhost:2379", "localhost:22379", "localhost:32379"&#125;,</span></span><br><span class="line">Endpoints:   []<span class="keyword">string</span>&#123;addr&#125;,</span><br><span class="line">DialTimeout: <span class="number">5</span> * time.Second,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logs.Error(<span class="string">"连接etcd失败:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">etcdClient = &amp;EtcdClient&#123;</span><br><span class="line">client: cli,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果Key不是以"/"结尾, 则自动加上"/"</span></span><br><span class="line"><span class="keyword">if</span> strings.HasSuffix(key, <span class="string">"/"</span>) == <span class="literal">false</span> &#123;</span><br><span class="line">key = key + <span class="string">"/"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, ip := <span class="keyword">range</span> localIPArray &#123;</span><br><span class="line">etcdKey := fmt.Sprintf(<span class="string">"%s%s"</span>, key, ip)</span><br><span class="line">ctx, cancel := context.WithTimeout(context.Background(), time.Second)</span><br><span class="line">resp, err := cli.Get(ctx, etcdKey)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logs.Error(<span class="string">"etcd get请求失败:"</span>, err)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">cancel()</span><br><span class="line">logs.Debug(<span class="string">"resp from etcd:%v"</span>, resp.Kvs)</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> resp.Kvs &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">string</span>(v.Key) == etcdKey &#123;</span><br><span class="line"><span class="comment">// 将从etcd中取出来的json格式反序列化为结构体</span></span><br><span class="line">err = json.Unmarshal(v.Value, &amp;collectConf)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logs.Error(<span class="string">"反序列化失败:"</span>, err)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">logs.Debug(<span class="string">"日志设置为%v"</span>, collectConf)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logs.Debug(<span class="string">"连接etcd成功"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改logagent-conf配置文件"><a href="#修改logagent-conf配置文件" class="headerlink" title="修改logagent.conf配置文件"></a>修改logagent.conf配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[logs]</span><br><span class="line">log_level = debug</span><br><span class="line">log_path = E:\\Go\\logagent\\logs\\my.log</span><br><span class="line"></span><br><span class="line">[collect]</span><br><span class="line">log_path = E:\\Go\\logagent\\logs\\my.log</span><br><span class="line">topic = nginx_log</span><br><span class="line">chan_size = 100</span><br><span class="line"></span><br><span class="line">[kafka]</span><br><span class="line">server_addr = 0.0.0.0:9092</span><br><span class="line"></span><br><span class="line">[etcd]</span><br><span class="line">addr = 0.0.0.0:2379</span><br><span class="line">configKey= /backend/logagent/config/</span><br></pre></td></tr></table></figure><h3 id="main包中新建ip-go文件"><a href="#main包中新建ip-go文件" class="headerlink" title="main包中新建ip.go文件"></a>main包中新建ip.go文件</h3><p>使用<code>net</code>包取出本机所有的网卡ip去连接etcd</p><p>考虑到以后添加新服务器时不需要手动添加ip，这里将ip信息全部存入<code>localIPArray</code>数组中<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">localIPArray []<span class="keyword">string</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">addrs, err := net.InterfaceAddrs()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(fmt.Sprintf(<span class="string">"获取网卡ip失败, %v"</span>, err))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, addr := <span class="keyword">range</span> addrs &#123;</span><br><span class="line"><span class="keyword">if</span> ipnet, ok := addr.(*net.IPNet); ok &amp;&amp; !ipnet.IP.IsLoopback() &#123;</span><br><span class="line"><span class="keyword">if</span> ipnet.IP.To4() != <span class="literal">nil</span> &#123;</span><br><span class="line">localIPArray = <span class="built_in">append</span>(localIPArray, ipnet.IP.String())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(localIPArray)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="config-go加入etcd配置"><a href="#config-go加入etcd配置" class="headerlink" title="config.go加入etcd配置"></a>config.go加入etcd配置</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// etcd</span></span><br><span class="line">logConfig.etcdAddr = conf.String(<span class="string">"etcd::addr"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(logConfig.etcdAddr) == <span class="number">0</span> &#123;</span><br><span class="line">err = fmt.Errorf(<span class="string">"初识化etcd addr失败"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logConfig.etcdKey = conf.String(<span class="string">"etcd::configKey"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(logConfig.etcdKey) == <span class="number">0</span> &#123;</span><br><span class="line">err = fmt.Errorf(<span class="string">"初识化etcd configKey失败"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 日志配置</span></span><br><span class="line"><span class="keyword">type</span> Config <span class="keyword">struct</span> &#123;</span><br><span class="line">logLevel <span class="keyword">string</span></span><br><span class="line">logPath  <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">chanSize    <span class="keyword">int</span></span><br><span class="line">KafkaAddr   <span class="keyword">string</span></span><br><span class="line">collectConf []tailf.CollectConf</span><br><span class="line"></span><br><span class="line">etcdAddr <span class="keyword">string</span></span><br><span class="line">etcdKey  <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="tail-go修改序列化"><a href="#tail-go修改序列化" class="headerlink" title="tail.go修改序列化"></a>tail.go修改序列化</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> CollectConf <span class="keyword">struct</span> &#123;</span><br><span class="line">LogPath <span class="keyword">string</span> <span class="string">`json:"logpath"`</span></span><br><span class="line">Topic   <span class="keyword">string</span> <span class="string">`json:"topic"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="main-go函数"><a href="#main-go函数" class="headerlink" title="main.go函数"></a>main.go函数</h3><p>将<code>initEtcd</code>初始化etcd函数放到<code>InitTail</code>函数之前, 使etcd中的配置项与tailf连接起来<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/astaxie/beego/logs"</span></span><br><span class="line"><span class="string">"logagent/kafka"</span></span><br><span class="line"><span class="string">"logagent/tailf"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"开始"</span>)</span><br><span class="line"><span class="comment">// 读取初始化配置文件</span></span><br><span class="line">filename := <span class="string">"E:\\Go\\logagent\\conf\\logagent.conf"</span></span><br><span class="line">err := loadInitConf(<span class="string">"ini"</span>, filename)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"导入配置文件错误:%v\n"</span>, err)</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">"导入配置文件错误"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化日志信息</span></span><br><span class="line">err = initLogger()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"导入日志文件错误:%v\n"</span>, err)</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">"导入日志文件错误"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出成功信息</span></span><br><span class="line">logs.Debug(<span class="string">"导入日志成功%v"</span>, logConfig)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初识化etcd</span></span><br><span class="line">collectConf, err := initEtcd(logConfig.etcdAddr, logConfig.etcdKey)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logs.Error(<span class="string">"初始化etcd失败"</span>,err)</span><br><span class="line">&#125;</span><br><span class="line">logs.Debug(<span class="string">"初始化etcd成功!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化tailf</span></span><br><span class="line">err = tailf.InitTail(collectConf, logConfig.chanSize)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logs.Error(<span class="string">"初始化tailf失败:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">logs.Debug(<span class="string">"初始化tailf成功!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化Kafka</span></span><br><span class="line">err = kafka.InitKafka(logConfig.KafkaAddr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logs.Error(<span class="string">"初识化Kafka producer失败:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">logs.Debug(<span class="string">"初始化Kafka成功!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行</span></span><br><span class="line">err = serverRun()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logs.Error(<span class="string">"serverRun failed:"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">logs.Info(<span class="string">"程序退出"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行， 成功将etcd中的配置项经过tailf得到配置， 创建了多个tailtask<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[169.254.109.181 169.254.30.148 192.168.106.1 192.168.0.1 192.168.0.11 169.254.153.68]</span><br><span class="line">开始</span><br><span class="line">&#123;E:/nginx/logs/access.log nginx_log&#125;</span><br><span class="line">&#123;E:/nginx/logs/error.log nginx_log_err&#125;</span><br><span class="line">2020/03/23 18:14:44 Waiting for E:/nginx/logs/access.log to appear...</span><br><span class="line">2020/03/23 18:14:44 Waiting for E:/nginx/logs/error.log to appear...</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通过上一篇从etcd中获取配置信息, 现在要拿着这些配置项进行日志收集&lt;br&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200329111745132.png?x-oss-process=image/watermark,type_ZmF
      
    
    </summary>
    
      <category term="Golang日志收集系统" scheme="https://plutoacharon.github.io/categories/Golang%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Golang" scheme="https://plutoacharon.github.io/tags/Golang/"/>
    
      <category term="Golang日志收集系统" scheme="https://plutoacharon.github.io/tags/Golang%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Golang实战之海量日志收集系统（四）etcd介绍与使用etcd获取配置信息</title>
    <link href="https://plutoacharon.github.io/2020/03/29/Golang%E5%AE%9E%E6%88%98%E4%B9%8B%E6%B5%B7%E9%87%8F%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%9B%9B%EF%BC%89etcd%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8etcd%E8%8E%B7%E5%8F%96%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/"/>
    <id>https://plutoacharon.github.io/2020/03/29/Golang实战之海量日志收集系统（四）etcd介绍与使用etcd获取配置信息/</id>
    <published>2020-03-29T03:25:39.000Z</published>
    <updated>2020-03-29T03:29:39.195Z</updated>
    
    <content type="html"><![CDATA[<h2 id="etcd介绍"><a href="#etcd介绍" class="headerlink" title="etcd介绍"></a>etcd介绍</h2><p>高可用的分布式key-value存储，可以用于配置共享和服务发现</p><ul><li>类似的项目：<code>Zookeeper</code>和<code>consul</code></li><li>开发语言：<code>go</code></li><li>接口：提供<code>Restful</code>的接口，使用简单</li><li>实现算法：基于raft算法的强一致性，高可用的服务存储目录</li></ul><p><strong>etcd的应用场景：</strong></p><ul><li>服务发现和服务注册</li><li>配置中心(我们实现的日志收集客户端需要用到)</li><li>分布式锁</li><li>master选举</li></ul><p><strong>etcd的命令验证</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PS E:\Study\etcd-v3.4.5-windows-amd64&gt; .\etcdctl.exe put name xu</span><br><span class="line">OK</span><br><span class="line">PS E:\Study\etcd-v3.4.5-windows-amd64&gt; .\etcdctl.exe get name</span><br><span class="line">name</span><br><span class="line">xu</span><br><span class="line">PS E:\Study\etcd-v3.4.5-windows-amd64&gt;</span><br></pre></td></tr></table></figure></p><h2 id="context-介绍和使用"><a href="#context-介绍和使用" class="headerlink" title="context 介绍和使用"></a>context 介绍和使用</h2><p><code>Context</code>即为上下文管理，那么context的作用是做什么，主要有如下两个作用：</p><ul><li>控制goroutine的超时</li><li>保存上下文数据</li></ul><p><strong>context的超时控制</strong>：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Result <span class="keyword">struct</span> &#123;</span><br><span class="line">r   *http.Response</span><br><span class="line">err error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">process</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// context的超时控制</span></span><br><span class="line">ctx, cancel := context.WithTimeout(context.Background(), <span class="number">2</span>*time.Second)</span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br><span class="line">tr := &amp;http.Transport&#123;&#125;</span><br><span class="line">client := &amp;http.Client&#123;Transport: tr&#125;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> Result, <span class="number">1</span>)</span><br><span class="line"><span class="comment">// 如果请求成功了会将数据存入到管道中</span></span><br><span class="line">req, err := http.NewRequest(<span class="string">"GET"</span>, <span class="string">"http://www.baidu.com"</span>, <span class="literal">nil</span>)</span><br><span class="line"><span class="comment">//req, err := http.NewRequest("GET", "https://www.google.com", nil)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"http request failed, err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">resp, err := client.Do(req)</span><br><span class="line">pack := Result&#123;r: resp, err: err&#125;</span><br><span class="line">c &lt;- pack</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-ctx.Done(): <span class="comment">// 如果超时, ctx.Done()返回一个管道,当管道里有数据即可说明超时</span></span><br><span class="line"><span class="comment">//tr.CancelRequest(req)</span></span><br><span class="line">tr.CloseIdleConnections()</span><br><span class="line">res := &lt;-c</span><br><span class="line">fmt.Println(<span class="string">"Timeout! err:"</span>, res.err)</span><br><span class="line"><span class="keyword">case</span> res := &lt;-c: <span class="comment">// c管道里的数据传给res, 如果res里有数据则证明请求成功</span></span><br><span class="line"><span class="keyword">defer</span> res.r.Body.Close()</span><br><span class="line">out, _ := ioutil.ReadAll(res.r.Body)</span><br><span class="line">fmt.Printf(<span class="string">"Server Response: %s"</span>, out)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">process()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><pre><code>req, err := http.NewRequest(&quot;GET&quot;, &quot;http://www.baidu.com&quot;, nil)正常返回百度网站的网页htmlreq, err := http.NewRequest(&quot;GET&quot;, &quot;https://www.google.com&quot;, nil)返回失败Timeout! err: Get &quot;https://www.google.com&quot;: dial tcp 205.186.152.122:443: connectex: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond.</code></pre><p><strong>context保存上下文</strong><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">process</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">ret, ok := ctx.Value(<span class="string">"trace_id"</span>).(<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">ret = <span class="number">789</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"ret:%d\n"</span>, ret)</span><br><span class="line"></span><br><span class="line">s, _ := ctx.Value(<span class="string">"session"</span>).(<span class="keyword">string</span>)</span><br><span class="line">fmt.Printf(<span class="string">"seesion:%s\n"</span>, s)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := context.WithValue(context.Background(), <span class="string">"trace_id"</span>, <span class="number">123</span>)</span><br><span class="line">ctx = context.WithValue(ctx, <span class="string">"session"</span>, <span class="string">"This is a session"</span>)</span><br><span class="line">process(ctx)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><pre><code>ret:123seesion:This is a session</code></pre><h2 id="结合etcd和context使用"><a href="#结合etcd和context使用" class="headerlink" title="结合etcd和context使用"></a>结合etcd和context使用</h2><blockquote><p>我这里使用的是Go1.14, 安装<code>github.com/coreos/etcd/clientv3</code>时报错<code>etcd undefined: resolver.BuildOption</code><br>原因: grpc版本过高, 将grpc版本替换成v1.26.0版本<br>详细参考这篇博客: <a href="https://blog.csdn.net/qq_43442524/article/details/104997539" target="_blank" rel="noopener">解决Golang1.14 etcd/clientv3报错：etcd undefined: resolver.BuildOption</a></p></blockquote><p><strong>连接etcd</strong></p><p>连接前要先启动etcd</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/coreos/etcd/clientv3"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">cli, err := clientv3.New(clientv3.Config&#123;</span><br><span class="line">Endpoints:   []<span class="keyword">string</span>&#123;<span class="string">"localhost:2379"</span>, <span class="string">"localhost:22379"</span>, <span class="string">"localhost:32379"</span>&#125;,</span><br><span class="line">DialTimeout: <span class="number">5</span> * time.Second,&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"connect failed, err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"connect succ"</span>)</span><br><span class="line"><span class="keyword">defer</span> cli.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>通过连接etcd，存值并取值</strong><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/coreos/etcd/clientv3"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">EtcdExmaple()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">EtcdExmaple</span><span class="params">()</span></span> &#123;</span><br><span class="line">cli, err := clientv3.New(clientv3.Config&#123;</span><br><span class="line">Endpoints:   []<span class="keyword">string</span>&#123;<span class="string">"localhost:2379"</span>, <span class="string">"localhost:22379"</span>, <span class="string">"localhost:32379"</span>&#125;,</span><br><span class="line">DialTimeout: <span class="number">5</span> * time.Second,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"connect failed, err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"connect succ"</span>)</span><br><span class="line"><span class="keyword">defer</span> cli.Close()</span><br><span class="line"><span class="comment">// put操作</span></span><br><span class="line">ctx, cancel := context.WithTimeout(context.Background(), time.Second)</span><br><span class="line">_, err = cli.Put(ctx, <span class="string">"/logagent/conf/"</span>, <span class="string">"sample_value"</span>)</span><br><span class="line">cancel()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"put failed, err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// get操作</span></span><br><span class="line">ctx, cancel = context.WithTimeout(context.Background(), time.Second)</span><br><span class="line">resp, err := cli.Get(ctx, <span class="string">"/logagent/conf/"</span>)</span><br><span class="line">cancel()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"get failed, err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, ev := <span class="keyword">range</span> resp.Kvs &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%s : %s\n"</span>, ev.Key, ev.Value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Watch操作</strong><br>通过<code>watch</code>监控配置更改<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/coreos/etcd/clientv3"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">cli, err := clientv3.New(clientv3.Config&#123;</span><br><span class="line">Endpoints:   []<span class="keyword">string</span>&#123;<span class="string">"localhost:2379"</span>&#125;,</span><br><span class="line">DialTimeout: time.Second,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"connect to etcd failed, err: %v\n"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"connect etcd success."</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">defer</span> cli.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Watch操作</span></span><br><span class="line">wch := cli.Watch(context.Background(), <span class="string">"/logagent/conf/"</span>)</span><br><span class="line"><span class="keyword">for</span> resp := <span class="keyword">range</span> wch &#123;</span><br><span class="line"><span class="keyword">for</span> _, ev := <span class="keyword">range</span> resp.Events &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Type: %v, Key:%v, Value:%v\n"</span>, ev.Type, <span class="keyword">string</span>(ev.Kv.Key), <span class="keyword">string</span>(ev.Kv.Value))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>构建运行，然后尝试通过etcdctl向etcd指定的<code>key /logagent/conf/</code>发送数据测试<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PS E:\Study\etcd-v3.4.5-windows-amd64&gt; .\etcdctl.exe put /logagent/conf/ 1</span><br><span class="line">OK</span><br><span class="line">PS E:\Study\etcd-v3.4.5-windows-amd64&gt; .\etcdctl.exe put /logagent/conf/ 2</span><br><span class="line">OK</span><br><span class="line">PS E:\Study\etcd-v3.4.5-windows-amd64&gt;</span><br></pre></td></tr></table></figure></p><p>终端查看<br><img src="https://img-blog.csdnimg.cn/20200323141112578.png" alt="在这里插入图片描述"><br><strong>实现一个kafka的消费者代码的简单例子：</strong><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line"><span class="string">"sync"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"><span class="string">"github.com/Shopify/sarama"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">consumer, err := sarama.NewConsumer(strings.Split(<span class="string">"localhost:9092"</span>,<span class="string">","</span>), <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Failed to start consumer: %s"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">partitionList, err := consumer.Partitions(<span class="string">"nginx_log"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Failed to get the list of partitions: "</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(partitionList)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照分区来消费</span></span><br><span class="line"><span class="keyword">for</span> partition := <span class="keyword">range</span> partitionList &#123;</span><br><span class="line">pc, err := consumer.ConsumePartition(<span class="string">"nginx_log"</span>, <span class="keyword">int32</span>(partition), sarama.OffsetNewest)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Failed to start consumer for partition %d: %s\n"</span>, partition, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> pc.AsyncClose()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(pc sarama.PartitionConsumer)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> msg := <span class="keyword">range</span> pc.Messages() &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Partition:%d, Offset:%d, Key:%s, Value:%s"</span>, msg.Partition, msg.Offset, <span class="keyword">string</span>(msg.Key), <span class="keyword">string</span>(msg.Value))</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line">&#125;(pc)</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Hour)</span><br><span class="line">consumer.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但是上面的代码并不是最佳代码，因为这是通过time.sleep等待goroutine的执行，我们可以更改为通过sync.WaitGroup方式实现</p><p><strong>使用sync.WaitGroup优化</strong></p><ul><li><p>等待一组goroutine结束</p></li><li><p>使用Add方法设置等待的数量加1</p></li><li><p>使用Done方法设置等待的数量减1</p></li><li><p>当等待的数量等于0时,Wait函数返回</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/Shopify/sarama"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line"><span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">wg sync.WaitGroup</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">consumer, err := sarama.NewConsumer(strings.Split(<span class="string">"localhost:9092"</span>,<span class="string">","</span>), <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Failed to start consumer: %s"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">partitionList, err := consumer.Partitions(<span class="string">"nginx_log"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Failed to get the list of partitions: "</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(partitionList)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照分区来消费</span></span><br><span class="line"><span class="keyword">for</span> partition := <span class="keyword">range</span> partitionList &#123;</span><br><span class="line">pc, err := consumer.ConsumePartition(<span class="string">"nginx_log"</span>, <span class="keyword">int32</span>(partition), sarama.OffsetNewest)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Failed to start consumer for partition %d: %s\n"</span>, partition, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> pc.AsyncClose()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(pc sarama.PartitionConsumer)</span></span> &#123;</span><br><span class="line">wg.Add(<span class="number">1</span>) <span class="comment">// 增加一个goroutine</span></span><br><span class="line"><span class="keyword">for</span> msg := <span class="keyword">range</span> pc.Messages() &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Partition:%d, Offset:%d, Key:%s, Value:%s"</span>, msg.Partition, msg.Offset, <span class="keyword">string</span>(msg.Key), <span class="keyword">string</span>(msg.Value))</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line">wg.Done() <span class="comment">// 说明一个goroutine结束</span></span><br><span class="line">&#125;(pc)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//time.Sleep(time.Hour)</span></span><br><span class="line">wg.Wait() <span class="comment">// 当wg的内置计数为0时返回, 即所有goroutine运行结束</span></span><br><span class="line">_ = consumer.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>从etcd中获取配置信息</strong></p><p>根据key从etcd中获取配置项<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/coreos/etcd/clientv3"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义etcd的前缀key</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">EtcdKey = <span class="string">"/backend/logagent/config/192.168.0.11"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要收集的日志的配置信息</span></span><br><span class="line"><span class="keyword">type</span> LogConf <span class="keyword">struct</span> &#123;</span><br><span class="line">Path  <span class="keyword">string</span> <span class="string">`json:"path"`</span>  <span class="comment">// 日志存放的路径</span></span><br><span class="line">Topic <span class="keyword">string</span> <span class="string">`json:"topic"`</span> <span class="comment">// 日志要发往Kafka中的哪个Topic</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SetLogConfToEtcd</span><span class="params">()</span></span> &#123;</span><br><span class="line">cli, err := clientv3.New(clientv3.Config&#123;</span><br><span class="line">Endpoints:   []<span class="keyword">string</span>&#123;<span class="string">"localhost:2379"</span>, <span class="string">"localhost:22379"</span>, <span class="string">"localhost:32379"</span>&#125;,</span><br><span class="line">DialTimeout: <span class="number">5</span> * time.Second,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"connect failed, err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"connect succ"</span>)</span><br><span class="line"><span class="keyword">defer</span> cli.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 日志配置</span></span><br><span class="line"><span class="keyword">var</span> logConfArr []LogConf</span><br><span class="line">logConfArr = <span class="built_in">append</span>(</span><br><span class="line">logConfArr,</span><br><span class="line">LogConf&#123;</span><br><span class="line">Path:  <span class="string">"E:/nginx/logs/access.log"</span>,</span><br><span class="line">Topic: <span class="string">"nginx_log"</span>,</span><br><span class="line">&#125;,</span><br><span class="line">)</span><br><span class="line">logConfArr = <span class="built_in">append</span>(</span><br><span class="line">logConfArr,</span><br><span class="line">LogConf&#123;</span><br><span class="line">Path:  <span class="string">"E:/nginx/logs/error.log"</span>,</span><br><span class="line">Topic: <span class="string">"nginx_log_err"</span>,</span><br><span class="line">&#125;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Json打包</span></span><br><span class="line">data, err := json.Marshal(logConfArr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"json failed, "</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctx, cancel := context.WithTimeout(context.Background(), time.Second)</span><br><span class="line">_, err = cli.Put(ctx, EtcdKey, <span class="keyword">string</span>(data))</span><br><span class="line">cancel()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"put failed, err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctx, cancel = context.WithTimeout(context.Background(), time.Second)</span><br><span class="line">resp, err := cli.Get(ctx, EtcdKey)</span><br><span class="line">cancel()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"get failed, err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, ev := <span class="keyword">range</span> resp.Kvs &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%s : %s\n"</span>, ev.Key, ev.Value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">SetLogConfToEtcd()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试能否正常拿到值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">connect succ</span><br><span class="line">/backend/logagent/config/192.168.0.11 : [&#123;&quot;path&quot;:&quot;E:/nginx/logs/access.log&quot;,&quot;topic&quot;:&quot;nginx_log&quot;&#125;,&#123;&quot;path&quot;:&quot;E:/nginx/logs/error.log&quot;,&quot;topic&quot;:&quot;nginx_log_err&quot;&#125;]</span><br></pre></td></tr></table></figure></p><p>现在我们可以通过操作etcd拿到配置信息，下一步就是拿着这些配置项进行日志收集</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;etcd介绍&quot;&gt;&lt;a href=&quot;#etcd介绍&quot; class=&quot;headerlink&quot; title=&quot;etcd介绍&quot;&gt;&lt;/a&gt;etcd介绍&lt;/h2&gt;&lt;p&gt;高可用的分布式key-value存储，可以用于配置共享和服务发现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类似的项目：&lt;c
      
    
    </summary>
    
      <category term="Golang日志收集系统" scheme="https://plutoacharon.github.io/categories/Golang%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Golang" scheme="https://plutoacharon.github.io/tags/Golang/"/>
    
      <category term="Golang日志收集系统" scheme="https://plutoacharon.github.io/tags/Golang%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Golang实战之海量日志收集系统（三）简单版本logAgent的实现</title>
    <link href="https://plutoacharon.github.io/2020/03/29/Golang%E5%AE%9E%E6%88%98%E4%B9%8B%E6%B5%B7%E9%87%8F%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%89%EF%BC%89%E7%AE%80%E5%8D%95%E7%89%88%E6%9C%AClogAgent%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>https://plutoacharon.github.io/2020/03/29/Golang实战之海量日志收集系统（三）简单版本logAgent的实现/</id>
    <published>2020-03-29T03:25:23.000Z</published>
    <updated>2020-03-29T03:29:44.280Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简单版本LogAgent的实现"><a href="#简单版本LogAgent的实现" class="headerlink" title="简单版本LogAgent的实现"></a>简单版本LogAgent的实现</h2><p>这里主要是先实现核心的功能，后续再做优化和改进，主要实现能够根据配置文件中配置的日志路径去读取日志并将读取的实时推送到kafka消息队列中</p><p>关于logagent的主要结构如下：<br><img src="https://img-blog.csdnimg.cn/20200322144539472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre><code>.├─conf│      logagent.conf│├─kafka│      kafka.go│├─logs│      my.log│├─main│      config.go│      log.go│      main.go│      server.go│├─tailf│      tail.go│  go.mod└─ go.sum</code></pre><p>现在使用<code>tail</code>库能读取到日志，使用<code>sarama</code>库能到推送消息到<code>kafka</code>，我们结合这两个库，实现一边读取文件日志，一遍写入到<code>kafka</code></p><pre><code>logagent.conf :配置文件my.log:产生的日志文件config.go:用于初始化读取配置文件中的内容，这里的配置文件加载是通过之前自己实现的配置文件热加载包处理的kafka.go:对kafka的操作，包括初始化kafka连接，以及给kafka发送消息server.go:主要是tail 的相关操作，用于去读日志文件并将内容放到channel中log.go:日志的处理与序列化tail.go: 用于去读日志文件main.go: 初始化入口文件,与执行server的入口函数</code></pre><h2 id="LogAgent的初步框架实现"><a href="#LogAgent的初步框架实现" class="headerlink" title="LogAgent的初步框架实现"></a>LogAgent的初步框架实现</h2><p>现在使用tail库能读取到日志，使用sarama库能到推送消息到kafka，我们结合这两个库，实现一边读取文件日志，一遍写入到kafka</p><p>新建kafka/kafka.go和taillog/tail.go，分别先建立一个初始化函数</p><p><strong><code>kafka/kafka.go</code></strong><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> kafka</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/Shopify/sarama"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    client sarama.SyncProducer</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Init</span><span class="params">(addrs []<span class="keyword">string</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">config := sarama.NewConfig()</span><br><span class="line"></span><br><span class="line">config.Producer.RequiredAcks = sarama.WaitForAll          <span class="comment">// 发送完数据需要leader和follow都确认</span></span><br><span class="line">config.Producer.Partitioner = sarama.NewRandomPartitioner <span class="comment">// 新选出⼀个partition</span></span><br><span class="line">config.Producer.Return.Successes = <span class="literal">true</span>                   <span class="comment">// 成功交付的消息将在success channel返回</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接kafka</span></span><br><span class="line">client, err = sarama.NewSyncProducer([]<span class="keyword">string</span>&#123;addrs&#125;, config)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"producer closed, err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><code>tail/tail.go</code></strong><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tail</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/hpcloud/tail"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">tailObj *tail.Tail</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Init</span><span class="params">(filename <span class="keyword">string</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">config := tail.Config&#123;</span><br><span class="line">ReOpen:    <span class="literal">true</span>,</span><br><span class="line">Follow:    <span class="literal">true</span>,</span><br><span class="line">Location:  &amp;tail.SeekInfo&#123;Offset: <span class="number">0</span>, Whence: <span class="number">2</span>&#125;,</span><br><span class="line">MustExist: <span class="literal">false</span>,</span><br><span class="line">Poll:      <span class="literal">true</span>&#125;</span><br><span class="line">tailObj, err = tail.TailFile(filename, config)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"tail file failed, err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><code>main.go</code></strong><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"logAgent/kafka"</span></span><br><span class="line"><span class="string">"logAgent/taillog"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 1.初始化kafka</span></span><br><span class="line">err := kafka.Init([]<span class="keyword">string</span>&#123;<span class="string">"127.0.0.1:29092"</span>&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"init kafka failed ,err:%v\n"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"init kafka success"</span>)</span><br><span class="line"><span class="comment">// 2.初始化taillog</span></span><br><span class="line">err = taillog.Init(<span class="string">"./my.log"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"init taillog failed, err:%v\n"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"init taillog success"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>都初始化之后，就是怎么将日志发给kafka了</p><p>在<code>tail/tail.go</code>中创建一个ReadChan函数<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadChan</span><span class="params">()</span> &lt;-<span class="title">chan</span> *<span class="title">tail</span>.<span class="title">Line</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> tailObj.Lines</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在<code>kafka/kafka.go</code>中创建一个<code>SendToKafka</code>的函数，该函数接收从外部提供的topic和data参数<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SendToKafka</span><span class="params">(topic, data <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// 构造⼀个消息</span></span><br><span class="line">msg := &amp;sarama.ProducerMessage&#123;&#125;</span><br><span class="line">msg.Topic = topic</span><br><span class="line">msg.Value = sarama.StringEncoder(data)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送消息</span></span><br><span class="line">pid, offset, err := client.SendMessage(msg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"send msg failed, err: %v\n"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"pid:%v offset:%v\n"</span>, pid, offset)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在main.go中创建run函数，执行具体的任务，并在main函数中调用它<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> line := &lt;-taillog.ReadChan():</span><br><span class="line">kafka.SendToKafka(<span class="string">"web_log"</span>, line.Text)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">time.Sleep(time.Millisecond * <span class="number">500</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>往my.log中写入一点数据进行测试</p><h2 id="LogAgent的初步框架改进"><a href="#LogAgent的初步框架改进" class="headerlink" title="LogAgent的初步框架改进"></a>LogAgent的初步框架改进</h2><p>通过<code>github.com/astaxie/beego/logs</code>解析配置文件, 将所有的配置信息写入<code>logagent.conf</code>中</p><p><strong><code>logagent.conf</code></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[logs]</span><br><span class="line">log_level = debug</span><br><span class="line">log_path = E:\\Go\\logagent\\logs\\my.log</span><br><span class="line"></span><br><span class="line">[collect]</span><br><span class="line">log_path = E:\\Go\\logagent\\logs\\my.log</span><br><span class="line">topic = nginx_log</span><br><span class="line">chan_size = 100</span><br><span class="line"></span><br><span class="line">[kafka]</span><br><span class="line">server_addr = 0.0.0.0:9092</span><br></pre></td></tr></table></figure></p><p>引入完整代码:</p><p><strong><code>main.go</code></strong></p><p>主要功能是初始化配置</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/astaxie/beego/logs"</span></span><br><span class="line"><span class="string">"logagent/kafka"</span></span><br><span class="line"><span class="string">"logagent/tailf"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"开始"</span>)</span><br><span class="line"><span class="comment">// 读取初始化配置文件</span></span><br><span class="line">filename := <span class="string">"E:\\Go\\logagent\\conf\\logagent.conf"</span></span><br><span class="line">err := loadInitConf(<span class="string">"ini"</span>, filename)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"导入配置文件错误:%v\n"</span>, err)</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">"导入配置文件错误"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化日志信息</span></span><br><span class="line">err = initLogger()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"导入日志文件错误:%v\n"</span>, err)</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">"导入日志文件错误"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出成功信息</span></span><br><span class="line">logs.Debug(<span class="string">"导入日志成功%v"</span>, logConfig)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化tailf</span></span><br><span class="line">err = tailf.InitTail(logConfig.CollectConf, logConfig.chanSize)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logs.Error(<span class="string">"初始化tailf失败:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">logs.Debug(<span class="string">"初始化tailf成功!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化Kafka</span></span><br><span class="line">err = kafka.InitKafka(logConfig.KafkaAddr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logs.Error(<span class="string">"初识化kafka producer失败:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">logs.Debug(<span class="string">"初始化Kafka成功!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行</span></span><br><span class="line">err = serverRun()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logs.Error(<span class="string">"serverRun failed:"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">logs.Info(<span class="string">"程序退出"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>config.go</code></strong><br>导入<code>logagent.conf</code>的配置信息<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"errors"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/astaxie/beego/config"</span></span><br><span class="line"><span class="string">"logagent/tailf"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">logConfig *Config</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 日志配置</span></span><br><span class="line"><span class="keyword">type</span> Config <span class="keyword">struct</span> &#123;</span><br><span class="line">logLevel    <span class="keyword">string</span></span><br><span class="line">logPath     <span class="keyword">string</span></span><br><span class="line">chanSize    <span class="keyword">int</span></span><br><span class="line">KafkaAddr   <span class="keyword">string</span></span><br><span class="line">CollectConf []tailf.CollectConf</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 日志收集配置</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">loadCollectConf</span><span class="params">(conf config.Configer)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> c tailf.CollectConf</span><br><span class="line"></span><br><span class="line">c.LogPath = conf.String(<span class="string">"collect::log_path"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(c.LogPath) == <span class="number">0</span> &#123;</span><br><span class="line">err = errors.New(<span class="string">"无效的 collect::log_path "</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.Topic = conf.String(<span class="string">"collect::topic"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(c.Topic) == <span class="number">0</span> &#123;</span><br><span class="line">err = errors.New(<span class="string">"无效的 collect::topic "</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logConfig.CollectConf = <span class="built_in">append</span>(logConfig.CollectConf, c)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入初始化配置</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">loadInitConf</span><span class="params">(confType, filename <span class="keyword">string</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">conf, err := config.NewConfig(confType, filename)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"初始化配置文件出错:%v\n"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 导入配置信息</span></span><br><span class="line">logConfig = &amp;Config&#123;&#125;</span><br><span class="line"><span class="comment">// 日志级别</span></span><br><span class="line">logConfig.logLevel = conf.String(<span class="string">"logs::log_level"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(logConfig.logLevel) == <span class="number">0</span> &#123;</span><br><span class="line">logConfig.logLevel = <span class="string">"debug"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 日志输出路径</span></span><br><span class="line">logConfig.logPath = conf.String(<span class="string">"logs::log_path"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(logConfig.logPath) == <span class="number">0</span> &#123;</span><br><span class="line">logConfig.logPath = <span class="string">"E:\\Go\\logagent\\logs\\my.log"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 管道大小</span></span><br><span class="line">logConfig.chanSize, err = conf.Int(<span class="string">"collect::chan_size"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logConfig.chanSize = <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Kafka</span></span><br><span class="line">logConfig.KafkaAddr = conf.String(<span class="string">"kafka::server_addr"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(logConfig.KafkaAddr) == <span class="number">0</span> &#123;</span><br><span class="line">err = fmt.Errorf(<span class="string">"初识化Kafka失败"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = loadCollectConf(conf)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"导入日志收集配置错误:%v"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><code>log.go</code></strong></p><p>解析日志</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/astaxie/beego/logs"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">convertLogLevel</span><span class="params">(level <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> level &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"debug"</span>:</span><br><span class="line"><span class="keyword">return</span> logs.LevelDebug</span><br><span class="line"><span class="keyword">case</span> <span class="string">"warn"</span>:</span><br><span class="line"><span class="keyword">return</span> logs.LevelWarn</span><br><span class="line"><span class="keyword">case</span> <span class="string">"info"</span>:</span><br><span class="line"><span class="keyword">return</span> logs.LevelInfo</span><br><span class="line"><span class="keyword">case</span> <span class="string">"trace"</span>:</span><br><span class="line"><span class="keyword">return</span> logs.LevelTrace</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> logs.LevelDebug</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initLogger</span><span class="params">()</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">config := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">config[<span class="string">"filename"</span>] = logConfig.logPath</span><br><span class="line">config[<span class="string">"level"</span>] = convertLogLevel(logConfig.logLevel)</span><br><span class="line">configStr, err := json.Marshal(config)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"初始化日志, 序列化失败:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">_ = logs.SetLogger(logs.AdapterFile, <span class="keyword">string</span>(configStr))</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>tail.go</code></strong></p><p>定义<code>TailObjMgr</code>结构体, 将tail监控到的配置消息通过<code>tailObjMgr.msgChan &lt;- textMsg</code>放入管道中</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tailf</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/astaxie/beego/logs"</span></span><br><span class="line"><span class="string">"github.com/hpcloud/tail"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将日志收集配置放在tailf包下,方便其他包引用</span></span><br><span class="line"><span class="keyword">type</span> CollectConf <span class="keyword">struct</span> &#123;</span><br><span class="line">LogPath <span class="keyword">string</span></span><br><span class="line">Topic   <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存入Collect</span></span><br><span class="line"><span class="keyword">type</span> TailObj <span class="keyword">struct</span> &#123;</span><br><span class="line">tail *tail.Tail</span><br><span class="line">conf CollectConf</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义Message信息</span></span><br><span class="line"><span class="keyword">type</span> TextMsg <span class="keyword">struct</span> &#123;</span><br><span class="line">Msg   <span class="keyword">string</span></span><br><span class="line">Topic <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 管理系统所有tail对象</span></span><br><span class="line"><span class="keyword">type</span> TailObjMgr <span class="keyword">struct</span> &#123;</span><br><span class="line">tailsObjs []*TailObj</span><br><span class="line">msgChan   <span class="keyword">chan</span> *TextMsg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义全局变量</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">tailObjMgr *TailObjMgr</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetOneLine</span><span class="params">()</span> <span class="params">(msg *TextMsg)</span></span> &#123;</span><br><span class="line">msg = &lt;- tailObjMgr.msgChan</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitTail</span><span class="params">(conf []CollectConf, chanSize <span class="keyword">int</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载配置项</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(conf) == <span class="number">0</span> &#123;</span><br><span class="line">err = fmt.Errorf(<span class="string">"无效的log collect conf:%v"</span>, conf)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">tailObjMgr = &amp;TailObjMgr&#123;</span><br><span class="line">msgChan: <span class="built_in">make</span>(<span class="keyword">chan</span> *TextMsg, chanSize), <span class="comment">// 定义Chan管道</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 循环导入</span></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> conf &#123;</span><br><span class="line"><span class="comment">// 初始化Tail</span></span><br><span class="line">fmt.Println(v)</span><br><span class="line">tails, errTail := tail.TailFile(v.LogPath, tail.Config&#123;</span><br><span class="line">ReOpen:    <span class="literal">true</span>,</span><br><span class="line">Follow:    <span class="literal">true</span>,</span><br><span class="line">Location:  &amp;tail.SeekInfo&#123;Offset: <span class="number">0</span>, Whence: <span class="number">2</span>&#125;,</span><br><span class="line">MustExist: <span class="literal">false</span>,</span><br><span class="line">Poll:      <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> errTail != <span class="literal">nil</span> &#123;</span><br><span class="line">err = errTail</span><br><span class="line">fmt.Println(<span class="string">"tail 操作文件错误:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 导入配置项</span></span><br><span class="line">obj := &amp;TailObj&#123;</span><br><span class="line">conf: v,</span><br><span class="line">tail: tails,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tailObjMgr.tailsObjs = <span class="built_in">append</span>(tailObjMgr.tailsObjs, obj)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> readFromTail(obj)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读入日志数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readFromTail</span><span class="params">(tailObj *TailObj)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> <span class="literal">true</span> &#123;</span><br><span class="line">msg, ok := &lt;-tailObj.tail.Lines</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">logs.Warn(<span class="string">"Tail file close reopen, filename:%s\n"</span>, tailObj.tail.Filename)</span><br><span class="line">time.Sleep(<span class="number">100</span> * time.Millisecond)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">textMsg := &amp;TextMsg&#123;</span><br><span class="line">Msg:   msg.Text,</span><br><span class="line">Topic: tailObj.conf.Topic,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 放入chan里面</span></span><br><span class="line">tailObjMgr.msgChan &lt;- textMsg</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>server.go</code></strong><br>在server.go中添加了<code>sendToKafka</code>函数, 该函数作用是取出<code>tail.go</code>文件中放入管道中的msg</p><p>并且调用<code>kafka</code>包中<code>kafka.go</code>的<code>SendToKafka</code>函数发送消息到Kafka中</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/astaxie/beego/logs"</span></span><br><span class="line"><span class="string">"logagent/kafka"</span></span><br><span class="line"><span class="string">"logagent/tailf"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">serverRun</span><span class="params">()</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">msg := tailf.GetOneLine()</span><br><span class="line">err = sendToKafka(msg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logs.Error(<span class="string">"发送消息到Kafka 失败, err:%v"</span>, err)</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sendToKafka</span><span class="params">(msg *tailf.TextMsg)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">//fmt.Printf("读取 msg:%s, topic:%s\n", msg.Msg, msg.Topic) // 将消息打印在终端</span></span><br><span class="line">_ = kafka.SendToKafka(msg.Msg, msg.Topic)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>kafka.go</code></strong></p><p>定义了初始化kafka函数<code>InitKafka</code>与发送消息到Kafka的函数<code>SendToKafka</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> kafka</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/Shopify/sarama"</span></span><br><span class="line"><span class="string">"github.com/astaxie/beego/logs"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">client sarama.SyncProducer</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitKafka</span><span class="params">(addr <span class="keyword">string</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Kafka生产者配置</span></span><br><span class="line">config := sarama.NewConfig()</span><br><span class="line">config.Producer.RequiredAcks = sarama.WaitForAll          <span class="comment">// 发送完数据需要leader和follow都确认</span></span><br><span class="line">config.Producer.Partitioner = sarama.NewRandomPartitioner <span class="comment">// 新选出⼀个partition</span></span><br><span class="line">config.Producer.Return.Successes = <span class="literal">true</span>                   <span class="comment">// 成功交付的消息将在success channel返回</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建一个生产者对象</span></span><br><span class="line">client, err = sarama.NewSyncProducer([]<span class="keyword">string</span>&#123;addr&#125;, config)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logs.Error(<span class="string">"初识化Kafka producer失败:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">logs.Debug(<span class="string">"初始化Kafka producer成功,地址为:"</span>, addr)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SendToKafka</span><span class="params">(data, topic <span class="keyword">string</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">msg := &amp;sarama.ProducerMessage&#123;&#125;</span><br><span class="line">msg.Topic = topic</span><br><span class="line">msg.Value = sarama.StringEncoder(data)</span><br><span class="line"></span><br><span class="line">pid, offset, err := client.SendMessage(msg)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logs.Error(<span class="string">"发送信息失败, err:%v, data:%v, topic:%v"</span>, err, data, topic)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logs.Debug(<span class="string">"read success, pid:%v, offset:%v, topic:%v\n"</span>, pid, offset, topic)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>开发环境</strong>:</p><pre><code>我这里的环境是Go1.14, 使用了Go module模块, 所以想要快速运行该项目需要在项目文件夹下 go mod init, 运行时自动下载依赖</code></pre><p>运行main函数:</p><pre><code>E:\Go\logagent\main&gt;go build</code></pre><blockquote><p>注: 如果想使用Goland直接运行,这里需要同时运行main包下的四个go文件<br><img src="https://img-blog.csdnimg.cn/20200322173519713.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><p>运行完如图:kafka消费成功, 写入<code>my.log</code>成功<br><img src="https://img-blog.csdnimg.cn/20200322173222598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200322173259494.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简单版本LogAgent的实现&quot;&gt;&lt;a href=&quot;#简单版本LogAgent的实现&quot; class=&quot;headerlink&quot; title=&quot;简单版本LogAgent的实现&quot;&gt;&lt;/a&gt;简单版本LogAgent的实现&lt;/h2&gt;&lt;p&gt;这里主要是先实现核心的功能，后续再做
      
    
    </summary>
    
      <category term="Golang日志收集系统" scheme="https://plutoacharon.github.io/categories/Golang%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Golang" scheme="https://plutoacharon.github.io/tags/Golang/"/>
    
      <category term="Golang日志收集系统" scheme="https://plutoacharon.github.io/tags/Golang%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Golang实战之海量日志收集系统（二）收集应用程序日志到Kafka中</title>
    <link href="https://plutoacharon.github.io/2020/03/29/Golang%E5%AE%9E%E6%88%98%E4%B9%8B%E6%B5%B7%E9%87%8F%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%BA%8C%EF%BC%89%E6%94%B6%E9%9B%86%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%97%A5%E5%BF%97%E5%88%B0Kafka%E4%B8%AD/"/>
    <id>https://plutoacharon.github.io/2020/03/29/Golang实战之海量日志收集系统（二）收集应用程序日志到Kafka中/</id>
    <published>2020-03-29T03:25:07.000Z</published>
    <updated>2020-03-29T03:29:48.903Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Kafka库的基本操作"><a href="#Kafka库的基本操作" class="headerlink" title="Kafka库的基本操作"></a>Kafka库的基本操作</h2><p>我们需要先把两者启动，先启动Zookeeper,再启动Kafka</p><p>启动ZooKeeper:<code>./bin/zkServer.sh start</code><br>启动kafka:<code>./bin/kafka-server-start.sh ./config/server.properties</code></p><p>我这里使用的是Golang1.14最新版本,并且开启了Go Module, 所以下载的包都会整合在go.mod下</p><p>这里使用sarama对kafka进行操作<br><code>go get github.com/Shopify/sarama</code></p><p><code>main.go</code>内容如下：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/Shopify/sarama"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">config := sarama.NewConfig()</span><br><span class="line">config.Producer.RequiredAcks = sarama.WaitForAll         <span class="comment">// 发送完数据需要leader和follow都确认</span></span><br><span class="line">config.Producer.Partitioner = sarama.NewRandomPartitioner<span class="comment">// 新选出⼀个partition</span></span><br><span class="line">config.Producer.Return.Successes = <span class="literal">true</span>                  <span class="comment">// 成功交付的消息将在success channel返回</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接kafka</span></span><br><span class="line">client, err := sarama.NewSyncProducer([]<span class="keyword">string</span>&#123;<span class="string">"localhost:9092"</span>&#125;, config) </span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"producer close, err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">defer</span> client.Close()</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">// 构造⼀个消息</span></span><br><span class="line">msg := &amp;sarama.ProducerMessage&#123;&#125;</span><br><span class="line">msg.Topic = <span class="string">"nginx_log"</span></span><br><span class="line">msg.Value = sarama.StringEncoder(<span class="string">"this is a good test, my message is good"</span>)</span><br><span class="line"><span class="comment">// 发送消息</span></span><br><span class="line">pid, offset, err := client.SendMessage(msg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"send message failed,"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"pid:%v offset:%v\n"</span>, pid, offset)</span><br><span class="line">time.Sleep(<span class="number">10</span> * time.Millisecond)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>连接Kafka 成功,并且成功生产出数据并在本地消费<br><img src="https://img-blog.csdnimg.cn/20200322114026174.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>接下来我们还需要知道一个工具的使用tailf</p><h2 id="tailf"><a href="#tailf" class="headerlink" title="tailf"></a>tailf</h2><p>我们的agent需要读日志目录下的日志文件，而日志文件是不停的增加并且切换文件的，所以我们就需要借助于tailf这个包来读文件，当然这里的tailf和linux里的tail -f命令虽然不同，但是效果是差不多的，都是为了获取日志文件新增加的内容。</p><p>而我们的客户端非常重要的一个地方就是要读日志文件并且将读到的日志文件推送到kafka</p><p>这里需要我们下载一个包：<code>go get github.com/hpcloud/tail</code></p><p>我们通过下面一个例子对这个包进行一个基本的使用，更详细的api说明看：<code>https://godoc.org/github.com/hpcloud/tail</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/hpcloud/tail"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// tail demo</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fileName := <span class="string">"E:\\Go\\logagent\\tailf\\main\\my.log"</span></span><br><span class="line">config := tail.Config&#123;</span><br><span class="line">ReOpen:    <span class="literal">true</span>,</span><br><span class="line">Follow:    <span class="literal">true</span>,</span><br><span class="line">Location:  &amp;tail.SeekInfo&#123;Offset: <span class="number">0</span>, Whence: <span class="number">2</span>&#125;,</span><br><span class="line">MustExist: <span class="literal">false</span>,</span><br><span class="line">Poll:      <span class="literal">true</span>&#125;</span><br><span class="line">tails, err := tail.TailFile(fileName, config)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"tail file failed, err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">msg *tail.Line</span><br><span class="line">ok  <span class="keyword">bool</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">msg, ok = &lt;-tails.Lines</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">fmt.Printf(<span class="string">"tail file close reopen, filename:%s\n"</span>, tails.Filename)</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"msg:"</span>, msg.Text)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://img-blog.csdnimg.cn/20200322115343200.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="日志库的使用"><a href="#日志库的使用" class="headerlink" title="日志库的使用"></a>日志库的使用</h2><p>这里是通过beego的日志库实现的，beego的日志库是可以单独拿出来用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/astaxie/beego/config"</span></span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">conf, err := config.NewConfig(<span class="string">"ini"</span>, <span class="string">"E:\\Go\\logagent\\conf\\logagent.conf"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"new config failed, err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">port, err := conf.Int(<span class="string">"server::port"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"read server:port failed, err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"Port:"</span>, port)</span><br><span class="line">log_level := conf.String(<span class="string">"logs::log_level"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(log_level) == <span class="number">0</span> &#123;</span><br><span class="line">log_level = <span class="string">"debug"</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"log_level:"</span>, log_level)</span><br><span class="line"></span><br><span class="line">log_path := conf.String(<span class="string">"logs::log_path"</span>)</span><br><span class="line">fmt.Println(<span class="string">"log_path:"</span>, log_path)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将<code>logagent.conf</code>各个配置读取出来<br><img src="https://img-blog.csdnimg.cn/20200322120215795.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Kafka库的基本操作&quot;&gt;&lt;a href=&quot;#Kafka库的基本操作&quot; class=&quot;headerlink&quot; title=&quot;Kafka库的基本操作&quot;&gt;&lt;/a&gt;Kafka库的基本操作&lt;/h2&gt;&lt;p&gt;我们需要先把两者启动，先启动Zookeeper,再启动Kafka&lt;/
      
    
    </summary>
    
      <category term="Golang日志收集系统" scheme="https://plutoacharon.github.io/categories/Golang%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Golang" scheme="https://plutoacharon.github.io/tags/Golang/"/>
    
      <category term="Golang日志收集系统" scheme="https://plutoacharon.github.io/tags/Golang%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Golang实战之海量日志收集系统（一）项目背景介绍</title>
    <link href="https://plutoacharon.github.io/2020/03/29/Golang%E5%AE%9E%E6%88%98%E4%B9%8B%E6%B5%B7%E9%87%8F%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%89%E9%A1%B9%E7%9B%AE%E8%83%8C%E6%99%AF%E4%BB%8B%E7%BB%8D/"/>
    <id>https://plutoacharon.github.io/2020/03/29/Golang实战之海量日志收集系统（一）项目背景介绍/</id>
    <published>2020-03-29T03:24:46.000Z</published>
    <updated>2020-03-29T03:29:53.753Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><p><strong>项目架构图：</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMuZG93bmsuY2MvaXRlbS81ZTdjYTY2YzUwNGY0YmNiMDRiZjI3YjUuanBn?x-oss-process=image/format,png" alt="项目架构图"></p><hr><ul><li>每个系统都有日志，当系统出现问题时，需要通过日志解决问题</li><li>当系统机器比较少时，登陆到服务器上查看即可满足</li><li>当系统机器规模巨大，登陆到机器上查看几乎不现实</li></ul><p>每个业务系统都有自己的⽇志，当业务系统出现问题时，需要通过查找⽇志信息来定位和解决问题。 当业务系统服务器⽐较少时，登陆到服务器上查看即可满⾜。但当系统机器规模巨⼤，登陆到服务器上查看⼏乎不现实（分布式的系统，⼀个系统部署在⼗⼏甚至几十台服务器上）</p><p>平常我们在进行业务开发时常常不免遇到下面几个问题:</p><ul><li>当系统出现问题后，如何根据日志迅速的定位问题出在一个应用层？</li><li>在平常的工作中如何根据日志分析出一个请求到系统主要在那个应用层耗时较大？</li><li>在平常的工作中如何获取一个请求到达系统后在各个层测日志汇总？</li></ul><p>针对以上问题，我们想要实现的一个解决方案是：</p><ul><li>把机器上的日志实时收集，统一的存储到中心系统</li><li>然后再对这些日志建立索引，通过搜索即可以找到对应日志</li><li>通过提供界面友好的web界面，通过web即可以完成日志搜索    </li></ul><p>关于实现这个系统时可能会面临的问题：</p><ul><li>实时日志量非常大，每天几十亿条(虽然现在我们公司的系统还没达到这个级别)</li><li>日志准实时收集，延迟控制在分钟级别</li><li>能够水平可扩展</li></ul><p><strong>业界方案</strong></p><p>有早期的ELK到现在的EFK。ELK在每台服务器上部署logstash，比较重量级，所以演化成客户端部署filebeat的EFK，由filebeat收集向logstash中写数据，最后落地到elasticsearch，通过kibana界面进行日志检索。</p><p><strong>优缺点</strong></p><p>优点：现成的解决方案，直接拿过来用，能够实现日志收集与检索。</p><p><strong>缺点：</strong></p><ul><li>运维成本⾼，每增加⼀个⽇志收集项，都需要⼿动修改配置</li><li>监控缺失，⽆法准确获取logstash的状态。⽆法做到定制化开发与维护</li><li>⽆法做到定制化开发与维护</li></ul><h2 id="日志收集系统设计"><a href="#日志收集系统设计" class="headerlink" title="日志收集系统设计"></a>日志收集系统设计</h2><p><img src="https://img-blog.csdnimg.cn/20200322110406560.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>各个组件说明：</strong></p><p>Log Agent，日志收集客户端，用来收集服务器上的日志<br>Kafka，高吞吐量的分布式队列<br>Elasticsearch，开源的搜索引擎，提供基于http restful的web接口<br>Flink,Spark，分布式计算框架，能够对大量数据进行分布式处理的平台</p><h2 id="关于Kakfa的介绍"><a href="#关于Kakfa的介绍" class="headerlink" title="关于Kakfa的介绍"></a>关于Kakfa的介绍</h2><ul><li><p><code>Kafka</code>是一个分布式发布 - 订阅消息系统和一个强大的队列，可以处理大量的数据，并使您能够将消息从一个端点传递到另一个端点。 </p></li><li><p><code>Kafka</code>适合离线和在线消息消费。</p></li><li><p><code>Kafka</code>消息保留在磁盘上，并在群集内复制以防止数据丢失。 </p></li><li><p><code>Kafka</code>构建在ZooKeeper同步服务之上。 它与Flink和Spark非常好的集成，用于实时流式数据分析。</p></li></ul><p><strong>Kafka中有几个基本的消息术语：</strong></p><ul><li>Kafka将消息以topic为单位进行归纳。</li><li>将向Kafka topic发布消息的程序成为producers.</li><li>将预订topics并消费消息的程序成为consumer.</li><li>Kafka以集群的方式运行，可以由一个或多个服务组成，每个服务叫做一个broker</li></ul><p><strong>Kafka的优点：</strong></p><ul><li>可靠性 - Kafka是分布式，分区，复制和容错的。</li><li>可扩展性 - Kafka消息传递系统轻松缩放，无需停机。</li><li>耐用性 - Kafka使用分布式提交日志，这意味着消息会尽可能快地保留在磁盘上，因此它是持久的。</li><li>性能 - Kafka对于发布和订阅消息都具有高吞吐量。 即使存储了许多TB的消息，它也保持稳定的性能。</li><li>Kafka非常快，并保证零停机和零数据丢失。</li></ul><p><strong>Kafka的应用场景：</strong></p><ul><li><p>异步处理, 把非关键流程异步化，提高系统的响应时间和健壮性<br><img src="https://img-blog.csdnimg.cn/20200322111016142.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20200322111019731.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>应用解耦,通过消息队列<br><img src="https://img-blog.csdnimg.cn/20200322111111790.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200322111115747.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li>流量削峰<br><img src="https://img-blog.csdnimg.cn/20200322111149430.png" alt="在这里插入图片描述"><h2 id="ZooKeeper介绍"><a href="#ZooKeeper介绍" class="headerlink" title="ZooKeeper介绍"></a>ZooKeeper介绍</h2><code>ZooKeeper</code>是一种分布式协调服务，用于管理大型主机。在分布式环境中协调和管理服务是一个复杂的过程。ZooKeeper通过其简单的架构和API解决了这个问题。<code>ZooKeeper</code>允许开发人员专注于核心应用程序逻辑，而不必担心应用程序的分布式特性。<br><code>Apache ZooKeeper</code>是由集群（节点组）使用的一种服务，用于在自身之间协调，并通过稳健的同步技术维护共享数据。ZooKeeper本身是一个分布式应用程序，为写入分布式应用程序提供服务。</li></ul><p>ZooKeeper主要包含几下几个组件：</p><ul><li>Client（客户端）：我们的分布式应用集群中的一个节点，从服务器访问信息。对于特定的时间间隔，每个客户端向服务器发送消息以使服务器知道客户端是活跃的。类似地，当客户端连接时，服务器发送确认码。如果连接的服务器没有响应，客户端会自动将消息重定向到另一个服务器。</li><li>Server（服务器）：服务器，我们的ZooKeeper总体中的一个节点，为客户端提供所有的服务。向客户端发送确认码以告知服务器是活跃的。</li><li>Ensemble：ZooKeeper服务器组。形成ensemble所需的最小节点数为3。</li><li>Leader： 服务器节点，如果任何连接的节点失败，则执行自动恢复。Leader在服务启动时被选举。</li><li>Follower：跟随leader指令的服务器节点。</li><li>ZooKeeper的应用场景：</li></ul><p><strong>服务注册&amp;服务发现</strong><br><img src="https://img-blog.csdnimg.cn/20200322111430665.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>配置中心</strong><br><img src="https://img-blog.csdnimg.cn/20200322111517741.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>分布式锁<br>Zookeeper是强一致的多个客户端同时在Zookeeper上创建相同znode，只有一个创建成功</li></ul><h2 id="关于Log-Agent"><a href="#关于Log-Agent" class="headerlink" title="关于Log Agent"></a>关于Log Agent</h2><p>主要实现的功能是：</p><p>类似于我们在linux下通过tail的方法读日志文件，讲读取的内容发给Kafka<br>我们这里的tailf是可以动态变化的，当配置文件发生变化时，可以通知我们程序自动增加需要增加的配置文件<br>tailf去获取相应的日志并发给kafka producer</p><p>主要由一下几部目录组成：<br>Kafka<br>tailf<br>configlog<br><img src="https://img-blog.csdnimg.cn/20200322111653137.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>该项目中Zookeeper与Kafka可以安装在Liunx环境中使用远程连接,也可以在Windows本地安装连接使用</p><p>具体安装参考我的这篇博客: <a href="https://blog.csdn.net/qq_43442524/article/details/104896833" target="_blank" rel="noopener">Windows10安装运行Kafka2.1.0与Zookeeper3.4.14</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;项目背景&quot;&gt;&lt;a href=&quot;#项目背景&quot; class=&quot;headerlink&quot; title=&quot;项目背景&quot;&gt;&lt;/a&gt;项目背景&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;项目架构图：&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;https://imgconvert.csdnim
      
    
    </summary>
    
      <category term="Golang日志收集系统" scheme="https://plutoacharon.github.io/categories/Golang%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Golang" scheme="https://plutoacharon.github.io/tags/Golang/"/>
    
      <category term="Golang日志收集系统" scheme="https://plutoacharon.github.io/tags/Golang%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>解决Golang1.14 etcd/clientv3报错：etcd undefined: resolver.BuildOption</title>
    <link href="https://plutoacharon.github.io/2020/03/29/%E8%A7%A3%E5%86%B3Golang1-14-etcd-clientv3%E6%8A%A5%E9%94%99%EF%BC%9Aetcd-undefined-resolver-BuildOption/"/>
    <id>https://plutoacharon.github.io/2020/03/29/解决Golang1-14-etcd-clientv3报错：etcd-undefined-resolver-BuildOption/</id>
    <published>2020-03-29T03:24:18.000Z</published>
    <updated>2020-03-29T03:29:57.867Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Golang-etcd-clientv3报错：-etcd-undefined-resolver-BuildOption"><a href="#Golang-etcd-clientv3报错：-etcd-undefined-resolver-BuildOption" class="headerlink" title="Golang etcd/clientv3报错： etcd undefined: resolver.BuildOption"></a>Golang etcd/clientv3报错： etcd undefined: resolver.BuildOption</h2><h3 id="故障描述"><a href="#故障描述" class="headerlink" title="故障描述"></a>故障描述</h3><p>golang版本</p><pre><code>go versiongo version go1.14 windows/amd64</code></pre><p>包管理器<code>go.mod</code></p><pre><code>module goAgentgo 1.14require (    github.com/Shopify/sarama v1.26.1    github.com/coreos/etcd v3.3.18+incompatible // indirect    github.com/coreos/go-systemd v0.0.0-20191104093116-d3cd4ed1dbcf // indirect    github.com/coreos/pkg v0.0.0-20180928190104-399ea9e2e55f // indirect    github.com/go-ini/ini v1.52.0    github.com/gogo/protobuf v1.3.1 // indirect    github.com/google/uuid v1.1.1 // indirect    github.com/hpcloud/tail v1.0.0    go.etcd.io/etcd v3.3.18+incompatible    go.uber.org/zap v1.14.0 // indirect    google.golang.org/grpc v1.27.1 // indirect    gopkg.in/fsnotify.v1 v1.4.7 // indirect    gopkg.in/ini.v1 v1.52.0    gopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7 // indirect    )</code></pre><p>在安装go get go.etcd.io/etcd/clientv3时出错</p><p>错误信息：</p><pre><code># github.com/coreos/etcd/clientv3/balancer/resolver/endpoint../../pkg/mod/github.com/coreos/etcd@v3.3.18+incompatible/clientv3/balancer/resolver/endpoint/endpoint.go:114:78: undefined: resolver.BuildOption../../pkg/mod/github.com/coreos/etcd@v3.3.18+incompatible/clientv3/balancer/resolver/endpoint/endpoint.go:182:31: undefined: resolver.ResolveNowOption# github.com/coreos/etcd/clientv3/balancer/picker../../pkg/mod/github.com/coreos/etcd@v3.3.18+incompatible/clientv3/balancer/picker/err.go:37:44: undefined: balancer.PickOptions../../pkg/mod/github.com/coreos/etcd@v3.3.18+incompatible/clientv3/balancer/picker/roundrobin_balanced.go:55:54: undefined: balancer.PickOptions</code></pre><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>将grpc版本替换成<code>v1.26.0版本</code></p><h3 id="1-修改依赖为v1-26-0"><a href="#1-修改依赖为v1-26-0" class="headerlink" title="1. 修改依赖为v1.26.0"></a>1. 修改依赖为v1.26.0</h3><pre><code>go mod edit -require=google.golang.org/grpc@v1.26.0</code></pre><p>下载v1.26.0版本的grpc</p><pre><code>go get -u -x google.golang.org/grpc@v1.26.0</code></pre><p>etcd连接成功!<br><img src="https://img-blog.csdnimg.cn/2020032020085054.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Golang-etcd-clientv3报错：-etcd-undefined-resolver-BuildOption&quot;&gt;&lt;a href=&quot;#Golang-etcd-clientv3报错：-etcd-undefined-resolver-BuildOption&quot; 
      
    
    </summary>
    
      <category term="Golang日志收集系统" scheme="https://plutoacharon.github.io/categories/Golang%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Golang" scheme="https://plutoacharon.github.io/tags/Golang/"/>
    
      <category term="Golang日志收集系统" scheme="https://plutoacharon.github.io/tags/Golang%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Docker中安装与配置Nginx</title>
    <link href="https://plutoacharon.github.io/2020/03/29/Docker%E4%B8%AD%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AENginx/"/>
    <id>https://plutoacharon.github.io/2020/03/29/Docker中安装与配置Nginx/</id>
    <published>2020-03-29T03:23:14.000Z</published>
    <updated>2020-03-29T03:28:21.545Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实现Docker容器中安装配置Nginx"><a href="#实现Docker容器中安装配置Nginx" class="headerlink" title="实现Docker容器中安装配置Nginx"></a>实现Docker容器中安装配置Nginx</h2><h3 id="1-启动进入容器"><a href="#1-启动进入容器" class="headerlink" title="1. 启动进入容器"></a>1. 启动进入容器</h3><p><strong>1.1 拉取centos镜像:</strong><br><code>docker pull centos</code></p><blockquote><p>注意: 这样拉取的是最新的centos8镜像,如果想要拉取centos7则使用<code>docker pull centos:7</code></p></blockquote><p><strong>1.2 启动进入容器</strong><br><code>docker run -d --privileged --name nginx centos:v1 /usr/sbin/init</code><br>我这里起名为<code>myNginx</code>, 名字都可以只要不和其他容器冲突就行<br><img src="https://img-blog.csdnimg.cn/20200319122650212.png" alt="在这里插入图片描述"><br><code>docker exec -it 容器ID /bin/bash</code>进入容器<br><img src="https://img-blog.csdnimg.cn/20200319122659668.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="2-在容器中安装Nginx"><a href="#2-在容器中安装Nginx" class="headerlink" title="2. 在容器中安装Nginx"></a>2. 在容器中安装Nginx</h3><p><strong>2.1 在容器中编辑/etc/yum.repos.d/nginx.repo设置yum源</strong></p><pre><code>[nginx]name=nginx repobaseurl=http://nginx.org/packages/centos/$releasever/$basearch/gpgcheck=0enabled=1</code></pre><p><strong>2.2 yum install -y nginx安装</strong><br><img src="https://img-blog.csdnimg.cn/20200319122936842.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>2.3 启动nginx</strong></p><pre><code>systemctl start nginxsystemctl enable nginx #设置开机自动启动</code></pre><p><strong>2.4 保存容器</strong><br><code>docker commit 容器ID  nginx</code><br><img src="https://img-blog.csdnimg.cn/20200319123051761.png" alt="在这里插入图片描述"></p><h3 id="3-启动Nginx"><a href="#3-启动Nginx" class="headerlink" title="3. 启动Nginx"></a>3. 启动Nginx</h3><p><strong>3.1 启动容器</strong><br><code>docker run -d  -p 80:80 --privileged nginx /usr/sbin/init</code><br><img src="https://img-blog.csdnimg.cn/20200319123202712.png" alt="在这里插入图片描述"></p><p><strong>3.2 主机中使用浏览器访问虚拟机IP地址</strong><br><img src="https://img-blog.csdnimg.cn/20200319123229811.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="4-配置nginx主目录"><a href="#4-配置nginx主目录" class="headerlink" title="4. 配置nginx主目录"></a>4. 配置nginx主目录</h3><p><strong>4.1 进入nginx容器，查看/etc/nginx/nginx.conf文件</strong><br>更改root目录<br><img src="https://img-blog.csdnimg.cn/20200319123432591.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>4.2 建立/var/webroot/www目录</strong></p><p>编辑index.html文件<br><img src="https://img-blog.csdnimg.cn/20200319123534990.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>4.3 重新启动nginx服务并在主机使用浏览器访问</strong><br><img src="https://img-blog.csdnimg.cn/20200319123609739.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="5-配置Nginx错误页重定向"><a href="#5-配置Nginx错误页重定向" class="headerlink" title="5. 配置Nginx错误页重定向"></a>5. 配置Nginx错误页重定向</h3><p><strong>5.1 编辑/etc/nginx/nginx.conf文件，配置error_page指令指定404页面</strong><br><img src="https://img-blog.csdnimg.cn/2020031912371967.png" alt="在这里插入图片描述"><br><strong>5.2 在/var/webroot/www目录，编辑404.html文件</strong><br><img src="https://img-blog.csdnimg.cn/20200319123744306.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200319123755113.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>5.3 配置error_page 404 =200更改响应状态码</strong><br><img src="https://img-blog.csdnimg.cn/20200319123820117.png" alt="在这里插入图片描述"><br>重启服务<br><img src="https://img-blog.csdnimg.cn/2020031912382874.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="6-配置nginx访问控制权"><a href="#6-配置nginx访问控制权" class="headerlink" title="6. 配置nginx访问控制权"></a>6. 配置nginx访问控制权</h3><p><strong>6.1 在server块内增加deny all指令</strong><br><img src="https://img-blog.csdnimg.cn/20200319123935234.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200319123949645.png" alt="在这里插入图片描述"><br><strong>6.2 使用location块进行访问控制</strong><br><img src="https://img-blog.csdnimg.cn/20200319124034356.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200319124101805.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200319124049615.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>可以看到,当直接访问<code>直接访问http://192.168.0.131/</code>deny拒绝<br>访问<code>访问index.html页面</code>allow允许</p><h4 id="原因"><a href="#原因" class="headerlink" title="原因:"></a>原因:</h4><p><code>http://192.168.0.131/</code>的结果是 <code>403 Forbidden</code>，说明被匹配到<code>location / {..deny all;}</code>了</p><p>原因很简单HTTP 请求 GET / 被“严格精确”匹配到了普通<code>location / {}</code> ，则会停止搜索正则<code>location ；</code></p><p><code>http://192.168.0.131/index.html</code> 结果是之前设置的index页面，说明没有被<code>location / {…deny all;}</code>匹配，否则会 403 Forbidden。</p><p>但 /index.html 的确也是以“ / ”开头的，只不过此时的普通<code>location /</code>的匹配结果是<code>最大前缀</code>匹配，所以 Nginx 会继续搜索正则<code>location ， location ~ \.html$</code>表达了以<code>.html</code>结尾的都<code>allow all</code>; 于是接着就访问到了实际存在的<code>index.html</code>页面。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;实现Docker容器中安装配置Nginx&quot;&gt;&lt;a href=&quot;#实现Docker容器中安装配置Nginx&quot; class=&quot;headerlink&quot; title=&quot;实现Docker容器中安装配置Nginx&quot;&gt;&lt;/a&gt;实现Docker容器中安装配置Nginx&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="Docker" scheme="https://plutoacharon.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://plutoacharon.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>关于go get 以后下载的包不在src下而在pkg的源头并且不可以import(Goland Modules模块的使用)</title>
    <link href="https://plutoacharon.github.io/2020/03/17/%E5%85%B3%E4%BA%8Ego-get-%E4%BB%A5%E5%90%8E%E4%B8%8B%E8%BD%BD%E7%9A%84%E5%8C%85%E4%B8%8D%E5%9C%A8src%E4%B8%8B%E8%80%8C%E5%9C%A8pkg%E7%9A%84%E6%BA%90%E5%A4%B4%E5%B9%B6%E4%B8%94%E4%B8%8D%E5%8F%AF%E4%BB%A5import-Goland-Modules%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://plutoacharon.github.io/2020/03/17/关于go-get-以后下载的包不在src下而在pkg的源头并且不可以import-Goland-Modules模块的使用/</id>
    <published>2020-03-17T09:24:05.000Z</published>
    <updated>2020-03-17T09:24:26.629Z</updated>
    
    <content type="html"><![CDATA[<h3 id="采坑记"><a href="#采坑记" class="headerlink" title="采坑记"></a>采坑记</h3><p>万恶之源:<code>go get</code> 以后我发现下载的包不在<code>src</code>目录下生成,而全部到了<code>$GOPATH$/pkg</code>目录下<br><img src="https://img-blog.csdnimg.cn/20200316194714911.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>而且下载完了, <code>import</code>也不成功<br><img src="https://img-blog.csdnimg.cn/20200316194527303.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在不懈的努力下最后终于找到原因:<br><a href="https://blog.csdn.net/qq_43442524/article/details/104900180" target="_blank" rel="noopener">解决Golang使用过程中go get 下载github项目慢或无法下载</a></p><p>我写的这篇文章中,<code>go env -w GO111MODULE=on</code>选择了打开</p><pre><code>官方在 v1.11 中加入了 Go Module 作为官方包管理形式，就这样 dep 无奈的结束了使命。最初的 Go Module 提案的名称叫做 vgo，下面为了介绍简称为 gomod。不过在 v1.11 和 v1.12 的 Go 版本中 gomod 是不能直接使用的。可以通过 go env 命令返回值的 GOMOD 字段是否为空来判断是否已经开启了 gomod，如果没有开启，可以通过设置环境变量 export     GO111MODULE=on 开启</code></pre><p>我的版本为1.14, 所以出现了这种情况</p><h3 id="Go-mod-的正确使用"><a href="#Go-mod-的正确使用" class="headerlink" title="Go mod 的正确使用"></a>Go mod 的正确使用</h3><h4 id="如何激活Modules"><a href="#如何激活Modules" class="headerlink" title="如何激活Modules"></a>如何激活Modules</h4><p>首先要把go升级到1.11及以上</p><p>升级后，可以设置通过一个环境变量GO111MODULE来激活modules：</p><pre><code>GO111MODULE=off，go命令行将不会支持module功能，寻找依赖包的方式将会沿用旧版本那种通过vendor目录或者GOPATH模式来查找。GO111MODULE=on，go命令行会使用modules，而一点也不会去GOPATH目录下查找。GO111MODULE=auto，默认值，go命令行将会根据当前目录来决定是否启用module功能。这种情况下可以分为两种情形：当前目录在GOPATH/src之外且该目录包含go.mod文件，或者当前文件在包含go.mod文件的目录下面。当module功能启用时，GOPATH在项目构建过程中不再担当import的角色，但它仍然存储下载的依赖包，具体位置在$GOPATH/pkg/mod。</code></pre><p>在你需要导入第三方包的地方,打开终端输入<code>go mod init 你先要的命名</code><br>然后在该文件夹会出现<code>go.mod</code>文件<br><img src="https://img-blog.csdnimg.cn/20200316200213907.png" alt="在这里插入图片描述"><br>然后使用<code>go get 你想要导入的包地址</code><br><img src="https://img-blog.csdnimg.cn/20200316200316383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这样go.mod里会记录你导入的包名称以及版本号<br><img src="https://img-blog.csdnimg.cn/20200316200350772.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>包也可以正常使用<br><img src="https://img-blog.csdnimg.cn/20200316200428773.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="Goland-Modules模块的使用"><a href="#Goland-Modules模块的使用" class="headerlink" title="Goland Modules模块的使用"></a>Goland Modules模块的使用</h3><p>proxy:<code>https://goproxy.io</code>设置代理<br><img src="https://img-blog.csdnimg.cn/20200316200519139.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>参考文章<code>https://zhuanlan.zhihu.com/p/59687626</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;采坑记&quot;&gt;&lt;a href=&quot;#采坑记&quot; class=&quot;headerlink&quot; title=&quot;采坑记&quot;&gt;&lt;/a&gt;采坑记&lt;/h3&gt;&lt;p&gt;万恶之源:&lt;code&gt;go get&lt;/code&gt; 以后我发现下载的包不在&lt;code&gt;src&lt;/code&gt;目录下生成,而全部到了&lt;co
      
    
    </summary>
    
      <category term="Golang" scheme="https://plutoacharon.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://plutoacharon.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Windows10安装运行Kafka2.1.0与Zookeeper3.4.14</title>
    <link href="https://plutoacharon.github.io/2020/03/17/Windows10%E5%AE%89%E8%A3%85%E8%BF%90%E8%A1%8CKafka2-1-0%E4%B8%8EZookeeper3-4-14/"/>
    <id>https://plutoacharon.github.io/2020/03/17/Windows10安装运行Kafka2-1-0与Zookeeper3-4-14/</id>
    <published>2020-03-17T09:23:43.000Z</published>
    <updated>2020-03-17T09:24:31.086Z</updated>
    
    <content type="html"><![CDATA[<p>近日在做一个Golang的日志收集系统需要用到Kafka, 因苦于笔记本电脑虚拟机出了点问题, 所以在本文记录Windows10安装Kafka的过程</p><h2 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h2><h3 id="1-1-安装JDK"><a href="#1-1-安装JDK" class="headerlink" title="1.1 安装JDK"></a>1.1 安装JDK</h3><p>此处不多介绍<br><img src="https://img-blog.csdnimg.cn/20200316124559436.png" alt="在这里插入图片描述"></p><h3 id="1-2-安装Zookeeper"><a href="#1-2-安装Zookeeper" class="headerlink" title="1.2 安装Zookeeper"></a>1.2 安装Zookeeper</h3><p><a href="http://zookeeper.apache.org/releases.html#download" target="_blank" rel="noopener">下载地址</a>:<code>http://zookeeper.apache.org/releases.html#download</code><br>下载后解压到一个目录：</p><pre><code>1.进入Zookeeper设置目录，我这里 E:\Study\zookeeper-3.4.14\conf2. 将“zoo_sample.cfg”重命名为“zoo.cfg”3. 在任意文本编辑器中打开zoo.cfg4. 找到并编辑dataDir=dataDir=E:\\Study\\zookeeper-3.4.14\\tmp5. 与Java中的做法类似，我们在系统环境变量中添加：　　a. 在系统变量中添加ZOOKEEPER_HOME = E:\Study\zookeeper-3.4.14　　b. 编辑path系统变量，添加为路径E:\Study\zookeeper-3.4.14\bin;6. 在zoo.cfg文件中修改默认的Zookeeper端口（默认端口2181）</code></pre><p><img src="https://img-blog.csdnimg.cn/20200316125354426.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="1-3-安装Kafka"><a href="#1-3-安装Kafka" class="headerlink" title="1.3 安装Kafka"></a>1.3 安装Kafka</h3><p><a href="https://kafka.apache.org/downloads" target="_blank" rel="noopener">下载地址</a>:<code>https://kafka.apache.org/downloads</code></p><p>注意:不要下载<code>kafka-2.1.0-src</code>类似的src源码包,不然运行时报错:</p><pre><code>命令语法不正确。错误: 找不到或无法加载主类 kafka.Kafka</code></pre><hr><pre><code>下载后解压到任意一个目录，我是log.dirs=E:\Study\kafka_2.11-2.1.01. 进入Kafka配置目录，log.dirs=E:\Study\kafka_2.11-2.1.0\config2. 编辑文件“server.properties”3. 找到并编辑log.dirs=E:\\Study\\kafka_2.11-2.1.0\\kafka-log,这里的目录自己修改成自己喜欢的4. 找到并编辑zookeeper.connect=localhost:2181。表示本地运行5. Kafka会按照默认，在9092端口上运行，并连接zookeeper的默认端口：2181</code></pre><p>报错:</p><pre><code>命令语法不正确。错误: 找不到或无法加载主类 Files\Java\jdk1.8.0_112\lib\dt.jar;C:\Program</code></pre><p>解决方式如下：</p><pre><code>在kafka安装目录中找到bin\windows目录中的kafka-run-class.bat找到为%CLASSPATH%加上双引号修改前： set COMMAND=%JAVA% %KAFKA_HEAP_OPTS% %KAFKA_JVM_PERFORMANCE_OPTS% %KAFKA_JMX_OPTS% %KAFKA_LOG4J_OPTS% -cp %CLASSPATH% %KAFKA_OPTS% %* 修改后： set COMMAND=%JAVA% %KAFKA_HEAP_OPTS% %KAFKA_JVM_PERFORMANCE_OPTS% %KAFKA_JMX_OPTS% %KAFKA_LOG4J_OPTS% -cp &quot;%CLASSPATH%&quot; %KAFKA_OPTS% %*</code></pre><p><strong>确保在启动Kafka服务器前，Zookeeper实例已经准备好并开始运行。</strong><br><img src="https://img-blog.csdnimg.cn/20200316135419654.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="1-4-创建生产者消费者实例"><a href="#1-4-创建生产者消费者实例" class="headerlink" title="1.4 创建生产者消费者实例"></a>1.4 创建生产者消费者实例</h3><p>打开上面的Zookeeper和Kafka,不要关!<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在Zookeeper目录</span><br><span class="line">./zkServer.cmd</span><br><span class="line">在kafka安装目录</span><br><span class="line">.\bin\windows\kafka-server-start.bat .\config\server.properties</span><br></pre></td></tr></table></figure></p><ol><li>创建topic<br><code>.\bin\windows\kafka-topics.bat --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic haohan</code><br>创建一个名为<code>haohan</code>的topic<br><img src="https://img-blog.csdnimg.cn/20200316142209467.png" alt="在这里插入图片描述"><br>不需要关闭此窗口</li><li>创建生产者<br><code>.\bin\windows\kafka-console-producer.bat --broker-list localhost:9092 --topic haohan</code><br><img src="https://img-blog.csdnimg.cn/20200316142307709.png" alt="在这里插入图片描述"><br>不要关闭窗口, 稍后会用到</li><li><p>创建消费者<br><code>.\bin\windows\kafka-console-consumer.bat --topic haohan --bootstrap-server localhost:9092</code></p></li><li><p>发送消息</p></li></ol><p>在刚才的生产者窗口发送消息, 在消费者窗口打开查看<br><img src="https://img-blog.csdnimg.cn/20200316143302743.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200316143309550.png" alt="在这里插入图片描述"></p><h3 id="1-5-删除topic"><a href="#1-5-删除topic" class="headerlink" title="1.5 删除topic"></a>1.5 删除topic</h3><p>方法一（配置delete.topic.enable=true）</p><pre><code>  修改kafaka配置文件server.properties， 添加delete.topic.enable=true，重启kafka，之后通过kafka命令行就可以直接删除topic  通过命令行删除topic：    .\bin\windows\kafka-topics.bat --delete --zookeeper {zookeeper server} --topic {topic name}</code></pre><p>方法二（没有配置delete.topic.enable=true）</p><pre><code>1、通过命令行删除topic：.\bin\windows\kafka-topics.bat --delete --zookeeper {zookeeper server} --topic {topic name}因为kafaka配置文件中server.properties没有配置delete.topic.enable=true，此时的删除并不是真正的删除，只是把topic标记为：marked for deletion你可以通过命令：.\bin\windows\kafka-topics.bat --zookeeper {zookeeper server} --list 来查看所有topic2、删除kafka存储目录（server.properties文件log.dirs配置）相关topic目录3， 若想真正删除它，需要登录zookeeper客户端：  命令：./bin/zkCli.cmd  找到topic所在的目录：ls /brokers/topics   执行命令：rmr /brokers/topics/{topic name}即可，此时topic被彻底删除。</code></pre><p><img src="https://img-blog.csdnimg.cn/20200316143609400.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;近日在做一个Golang的日志收集系统需要用到Kafka, 因苦于笔记本电脑虚拟机出了点问题, 所以在本文记录Windows10安装Kafka的过程&lt;/p&gt;
&lt;h2 id=&quot;搭建过程&quot;&gt;&lt;a href=&quot;#搭建过程&quot; class=&quot;headerlink&quot; title=&quot;搭建
      
    
    </summary>
    
      <category term="Golang" scheme="https://plutoacharon.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://plutoacharon.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Golang语言学习从入门到实战----HTTP web开发编程</title>
    <link href="https://plutoacharon.github.io/2020/03/17/Golang%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98-HTTP-web%E5%BC%80%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    <id>https://plutoacharon.github.io/2020/03/17/Golang语言学习从入门到实战-HTTP-web开发编程/</id>
    <published>2020-03-17T09:23:24.000Z</published>
    <updated>2020-03-17T09:24:34.926Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-HTTP编程"><a href="#1-HTTP编程" class="headerlink" title="1. HTTP编程"></a>1. HTTP编程</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">"/"</span>, Hello)</span><br><span class="line">http.HandleFunc(<span class="string">"/usr/login"</span>, login)</span><br><span class="line">http.HandleFunc(<span class="string">"/usr/history"</span>, history)</span><br><span class="line">err := http.ListenAndServe(<span class="string">"0.0.0.0:8880"</span>, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"http listen failed"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Hello</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"handle hello"</span>)</span><br><span class="line">_, _ = fmt.Fprintf(w, <span class="string">"hello !"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">login</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"handle login"</span>)</span><br><span class="line">_, _ = fmt.Fprintf(w, <span class="string">"hello login !"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">history</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"handle history"</span>)</span><br><span class="line">_, _ = fmt.Fprintf(w, <span class="string">"hello history!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打开浏览器访问本地的8880端口(因为我这里设置的是8880端口)<br><img src="https://img-blog.csdnimg.cn/20200315164513712.png" alt="在"><br><img src="https://img-blog.csdnimg.cn/20200315164539346.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020031516452943.png" alt="在这里插入图片描述"></p><h3 id="2-HTTP-Client"><a href="#2-HTTP-Client" class="headerlink" title="2. HTTP Client"></a>2. HTTP Client</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo2</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">res, err := http.Get(<span class="string">"https://www.baidu.com"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"get err"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data, err := ioutil.ReadAll(res.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"data err"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(data))</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以<code>GET</code>请求访问百度, 返回的网页信息<br><img src="https://img-blog.csdnimg.cn/20200315164658102.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="3-表单处理"><a href="#3-表单处理" class="headerlink" title="3. 表单处理"></a>3. 表单处理</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义Html页面的显示表单</span></span><br><span class="line"><span class="keyword">const</span> form = <span class="string">` </span></span><br><span class="line"><span class="string">&lt;html lang="en"&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">&lt;meta http-equiv="Content-Type" content="text/html;charset=UTF-8" /&gt;</span></span><br><span class="line"><span class="string">&lt;title&gt;产品添加-产品管理系统&lt;/title&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;h3&gt;产品管理表单&lt;/h3&gt;</span></span><br><span class="line"><span class="string">&lt;form action="#" method="post"&gt;</span></span><br><span class="line"><span class="string">图书名称：&lt;input type='text' name='title' /&gt;</span></span><br><span class="line"><span class="string">&lt;hr /&gt;</span></span><br><span class="line"><span class="string">销售价格：&lt;input type="text" name='price' /&gt;</span></span><br><span class="line"><span class="string">&lt;hr /&gt;</span></span><br><span class="line"><span class="string">市场价格：&lt;input type="text" name='market_price' /&gt;</span></span><br><span class="line"><span class="string">&lt;hr /&gt;</span></span><br><span class="line"><span class="string">&lt;input type="submit" name="submit" value="添加" /&gt;</span></span><br><span class="line"><span class="string">&lt;input type="reset" name="reset" value="重置" /&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">formServer</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class="line">writer.Header().Set(<span class="string">"Content-Type"</span>, <span class="string">"text/html"</span>)</span><br><span class="line"><span class="keyword">switch</span> request.Method &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"GET"</span>: <span class="comment">// 直接访问时为GET请求</span></span><br><span class="line">_, _ = io.WriteString(writer, form)</span><br><span class="line"><span class="keyword">case</span> <span class="string">"POST"</span>: <span class="comment">// 提交表单为POST请求</span></span><br><span class="line">_ = request.ParseForm()</span><br><span class="line">_, _ = io.WriteString(writer, <span class="string">"title = "</span>)</span><br><span class="line">_, _ = io.WriteString(writer, request.Form[<span class="string">"title"</span>][<span class="number">0</span>]+<span class="string">"\n"</span>)</span><br><span class="line">_, _ = io.WriteString(writer, <span class="string">"price = "</span>)</span><br><span class="line">_, _ = io.WriteString(writer, request.Form[<span class="string">"price"</span>][<span class="number">0</span>]+<span class="string">"\n"</span>)</span><br><span class="line">_, _ = io.WriteString(writer, <span class="string">"market_price = "</span>)</span><br><span class="line">_, _ = io.WriteString(writer, request.Form[<span class="string">"market_price"</span>][<span class="number">0</span>]+<span class="string">"\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">simpleServer</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class="line">_, _ = io.WriteString(writer, <span class="string">"&lt;h1&gt;Hello ! This is test1"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">"/test1"</span>, simpleServer) <span class="comment">// localhost:8880/test1 访问simpleServer定义的页面</span></span><br><span class="line">http.HandleFunc(<span class="string">"/test2"</span>, formServer)   <span class="comment">// localhost:8880/test2 访问formServer定义的页面</span></span><br><span class="line"><span class="keyword">if</span> err := http.ListenAndServe(<span class="string">"0.0.0.0:8880"</span>, <span class="literal">nil</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>http://localhost:8880/test1</code>  可以访问到设置的test1页面<br><img src="https://img-blog.csdnimg.cn/20200315164806362.png" alt="在这里插入图片描述"><br><code>http://localhost:8880/test2</code>  可以访问到设置的test2页面<br><img src="https://img-blog.csdnimg.cn/20200315164845137.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>提交表单会返回输入的值<br><img src="https://img-blog.csdnimg.cn/20200315164908387.png" alt="在这里插入图片描述"></p><h3 id="4-捕获Panic错误处理"><a href="#4-捕获Panic错误处理" class="headerlink" title="4. 捕获Panic错误处理"></a>4. 捕获Panic错误处理</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义Html页面的显示表单</span></span><br><span class="line"><span class="keyword">const</span> form = <span class="string">` </span></span><br><span class="line"><span class="string">&lt;html lang="en"&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">&lt;meta http-equiv="Content-Type" content="text/html;charset=UTF-8" /&gt;</span></span><br><span class="line"><span class="string">&lt;title&gt;产品添加-产品管理系统&lt;/title&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;h3&gt;产品管理表单&lt;/h3&gt;</span></span><br><span class="line"><span class="string">&lt;form action="#" method="post"&gt;</span></span><br><span class="line"><span class="string">图书名称：&lt;input type='text' name='title' /&gt;</span></span><br><span class="line"><span class="string">&lt;hr /&gt;</span></span><br><span class="line"><span class="string">销售价格：&lt;input type="text" name='price' /&gt;</span></span><br><span class="line"><span class="string">&lt;hr /&gt;</span></span><br><span class="line"><span class="string">市场价格：&lt;input type="text" name='market_price' /&gt;</span></span><br><span class="line"><span class="string">&lt;hr /&gt;</span></span><br><span class="line"><span class="string">&lt;input type="submit" name="submit" value="添加" /&gt;</span></span><br><span class="line"><span class="string">&lt;input type="reset" name="reset" value="重置" /&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">formServer</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class="line">writer.Header().Set(<span class="string">"Content-Type"</span>, <span class="string">"text/html"</span>)</span><br><span class="line"><span class="keyword">switch</span> request.Method &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"GET"</span>: <span class="comment">// 直接访问时为GET请求</span></span><br><span class="line">_, _ = io.WriteString(writer, form)</span><br><span class="line"><span class="keyword">case</span> <span class="string">"POST"</span>: <span class="comment">// 提交表单为POST请求</span></span><br><span class="line">_ = request.ParseForm()</span><br><span class="line">_, _ = io.WriteString(writer, <span class="string">"title = "</span>)</span><br><span class="line">_, _ = io.WriteString(writer, request.Form[<span class="string">"title"</span>][<span class="number">0</span>]+<span class="string">"\n"</span>)</span><br><span class="line">_, _ = io.WriteString(writer, <span class="string">"price = "</span>)</span><br><span class="line">_, _ = io.WriteString(writer, request.Form[<span class="string">"price"</span>][<span class="number">0</span>]+<span class="string">"\n"</span>)</span><br><span class="line">_, _ = io.WriteString(writer, <span class="string">"market_price = "</span>)</span><br><span class="line">_, _ = io.WriteString(writer, request.Form[<span class="string">"market_price"</span>][<span class="number">0</span>]+<span class="string">"\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">simpleServer</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class="line">_, _ = io.WriteString(writer, <span class="string">"&lt;h1&gt;Hello ! This is test1"</span>)</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">"This is a panic test !"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">logPanics</span><span class="params">(handle http.HandlerFunc)</span> <span class="title">http</span>.<span class="title">HandlerFunc</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> x := <span class="built_in">recover</span>(); x!=<span class="literal">nil</span>&#123;</span><br><span class="line">log.Printf(<span class="string">"[%v] caught panic: %v"</span>,request.RemoteAddr, x)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">handle(writer, request)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">"/test1"</span>, logPanics(simpleServer)) <span class="comment">// localhost:8880/test1 访问simpleServer定义的页面</span></span><br><span class="line">http.HandleFunc(<span class="string">"/test2"</span>, logPanics(formServer))   <span class="comment">// localhost:8880/test2 访问formServer定义的页面</span></span><br><span class="line"><span class="keyword">if</span> err := http.ListenAndServe(<span class="string">"0.0.0.0:8880"</span>, <span class="literal">nil</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该<code>Demo</code>添加了<code>panic</code>处理函数<code>logPanics</code>, 可以在终端查看捕获的Panic信息<br><img src="https://img-blog.csdnimg.cn/20200315165017664.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="5-调用模板网页"><a href="#5-调用模板网页" class="headerlink" title="5. 调用模板网页"></a>5. 调用模板网页</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"html/template"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Age  <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">t, err := template.ParseFiles(<span class="string">"E:/Go/Golang_Studycode/src/demoCode/domo5/index.html"</span>) <span class="comment">// index.html路径</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">" Parse file err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">p := Person&#123;Name:<span class="string">"Jack"</span>, Age:<span class="string">"20"</span>&#125;</span><br><span class="line"><span class="keyword">if</span> err := t.Execute(os.Stdout, p); err != <span class="literal">nil</span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"There was an erros:"</span>,err.Error())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>index.php</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>This is a test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span> this is a test!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span> Hello &#123;&#123;.Name&#125;&#125; , you age is &#123;&#123;.Age&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="https://img-blog.csdnimg.cn/20200315165136975.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-HTTP编程&quot;&gt;&lt;a href=&quot;#1-HTTP编程&quot; class=&quot;headerlink&quot; title=&quot;1. HTTP编程&quot;&gt;&lt;/a&gt;1. HTTP编程&lt;/h3&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
      
    
    </summary>
    
      <category term="Golang" scheme="https://plutoacharon.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://plutoacharon.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Golang语言学习从入门到实战----编写简单的TCP/IP聊天室</title>
    <link href="https://plutoacharon.github.io/2020/03/17/Golang%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98-%E7%BC%96%E5%86%99%E7%AE%80%E5%8D%95%E7%9A%84TCP-IP%E8%81%8A%E5%A4%A9%E5%AE%A4/"/>
    <id>https://plutoacharon.github.io/2020/03/17/Golang语言学习从入门到实战-编写简单的TCP-IP聊天室/</id>
    <published>2020-03-17T09:23:03.000Z</published>
    <updated>2020-03-17T09:24:39.651Z</updated>
    
    <content type="html"><![CDATA[<h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><p>首先启动server端:<br><img src="https://img-blog.csdnimg.cn/20200313173553999.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>启动client端,输入文本<br><img src="https://img-blog.csdnimg.cn/20200313173624926.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>Server端接收:<br><img src="https://img-blog.csdnimg.cn/20200313173638924.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">├─client</span><br><span class="line">│      client.go</span><br><span class="line">│</span><br><span class="line">└─server</span><br><span class="line">        server.go</span><br></pre></td></tr></table></figure><h4 id="代码详细"><a href="#代码详细" class="headerlink" title="代码详细"></a>代码详细</h4><p><code>client.go</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bufio"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">conn, err := net.Dial(<span class="string">"tcp"</span>, <span class="string">"192.168.0.11:8888"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"err="</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">// 客户端可以发送单行数据,然后就退出</span></span><br><span class="line">reader := bufio.NewReader(os.Stdin)</span><br><span class="line"><span class="comment">// 读入一行输入</span></span><br><span class="line">line, err := reader.ReadString(<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"readString err="</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">line = strings.Trim(line, <span class="string">" \r\n"</span>)</span><br><span class="line"><span class="keyword">if</span> line == <span class="string">"exit"</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"客户端退出"</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 发送到服务器</span></span><br><span class="line">_, err = conn.Write([]<span class="keyword">byte</span>(line))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Write err = "</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//fmt.Printf("客户端发送了 %d 字节的数据\n", n)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>server,go</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">process</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">// 创建一个新的切片</span></span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">1024</span>)</span><br><span class="line"><span class="comment">//fmt.Printf("服务器在等待客户端%s 发送信息\n", conn.RemoteAddr().String())</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待客户端发送信息</span></span><br><span class="line">n, err := conn.Read(buf)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"服务器退出, err="</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 显示客户端发送的内容到服务器的终端</span></span><br><span class="line">fmt.Println(<span class="keyword">string</span>(buf[:n]))</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"服务器开始监听"</span>)</span><br><span class="line">listen, err := net.Listen(<span class="string">"tcp"</span>, <span class="string">"0.0.0.0:8888"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"listen err = "</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> listen.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"等待客户端来连接"</span>)</span><br><span class="line">conn, err := listen.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Accept() err = "</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Accept suc con=%v, 客户端IP=%v"</span>, conn, conn.RemoteAddr().String())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 起一个协程, 为客户端服务</span></span><br><span class="line"><span class="keyword">go</span> process(conn)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;效果展示&quot;&gt;&lt;a href=&quot;#效果展示&quot; class=&quot;headerlink&quot; title=&quot;效果展示&quot;&gt;&lt;/a&gt;效果展示&lt;/h3&gt;&lt;p&gt;首先启动server端:&lt;br&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200313
      
    
    </summary>
    
      <category term="Golang" scheme="https://plutoacharon.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://plutoacharon.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Golang语言学习从入门到实战----基于Golang的客户关系管理系统</title>
    <link href="https://plutoacharon.github.io/2020/03/17/Golang%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98-%E5%9F%BA%E4%BA%8EGolang%E7%9A%84%E5%AE%A2%E6%88%B7%E5%85%B3%E7%B3%BB%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <id>https://plutoacharon.github.io/2020/03/17/Golang语言学习从入门到实战-基于Golang的客户关系管理系统/</id>
    <published>2020-03-17T09:22:42.000Z</published>
    <updated>2020-03-17T09:24:46.132Z</updated>
    
    <content type="html"><![CDATA[<h2 id="客户关系管理系统"><a href="#客户关系管理系统" class="headerlink" title="客户关系管理系统"></a>客户关系管理系统</h2><p>GitHub地址:<code>https://github.com/PlutoaCharon/Golang_customerManager</code></p><p>运行:<code>go run $GOPATH/customerManager(存放该项目的文件夹)/view/customerView.go</code></p><h4 id="项目展示"><a href="#项目展示" class="headerlink" title="项目展示"></a>项目展示</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">----------------------客户信息管理软件----------------------</span><br><span class="line">                  1 添加客户</span><br><span class="line">                  2 修改客户</span><br><span class="line">                  3 删除客户</span><br><span class="line">                  4 客户列表</span><br><span class="line">                  5 退   出</span><br><span class="line">请选择(1-5)：</span><br></pre></td></tr></table></figure><h4 id="文件介绍"><a href="#文件介绍" class="headerlink" title="文件介绍"></a>文件介绍</h4><p><code>view.customerView.go</code></p><ul><li>显示界面</li><li>接收用户的输入</li><li>根据用户的输入，调用<code>cust   omerService</code>的方法完成客户的管理<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list 去调用 customerService 的List方法，并显示客户列表</span><br><span class="line">add 方法去调用 customerService 的Add方法, 完成客户添加</span><br><span class="line">delete 方法 调用 customerService 的Delete方法, 完成客户删除</span><br><span class="line">update 方法调用 customerService 的Update方法, 完成客户修改</span><br></pre></td></tr></table></figure></li></ul><p><code>service.customerService</code></p><ul><li>完成对用户的各种操作</li><li>对客户的增，删除，修改，显示</li><li>会声明一个customer的切片<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List 返回客户信息</span><br><span class="line">NewCustomerService 返回一个customerService实例</span><br><span class="line">Add 将新的客户加入到 customers </span><br><span class="line">Delete(id int)  删除一个客户</span><br><span class="line">FindById(id int)  返回id号对应的切片的下标</span><br><span class="line">Update(id int, customer model.Customer) 修改客户</span><br></pre></td></tr></table></figure></li></ul><p><code>model.customer</code> </p><ul><li>表示一个客户</li><li>客户各种字段<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">customer 表示一个客户信息</span><br><span class="line"></span><br><span class="line">type  Customer struct &#123;</span><br><span class="line">Id int</span><br><span class="line">Name string</span><br><span class="line">Gender string...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GetInfo 显示该用户的信息</span><br><span class="line">NewCustomer2() 返回客户的方法</span><br></pre></td></tr></table></figure></li></ul><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">├─customerManager</span><br><span class="line">│  │  README.md</span><br><span class="line">│  │</span><br><span class="line">│  ├─model</span><br><span class="line">│  │      customer.<span class="keyword">go</span></span><br><span class="line">│  │</span><br><span class="line">│  ├─service</span><br><span class="line">│  │      customerService.<span class="keyword">go</span></span><br><span class="line">│  │</span><br><span class="line">│  └─view</span><br><span class="line">│          customerView.<span class="keyword">go</span></span><br></pre></td></tr></table></figure><h4 id="代码详细"><a href="#代码详细" class="headerlink" title="代码详细"></a>代码详细</h4><p><code>customer.go</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> model</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个Customer结构体, 表示一个客户信息</span></span><br><span class="line"><span class="keyword">type</span> Customer <span class="keyword">struct</span> &#123;</span><br><span class="line">Id          <span class="keyword">int</span></span><br><span class="line">Name        <span class="keyword">string</span></span><br><span class="line">Gender      <span class="keyword">string</span></span><br><span class="line">Age         <span class="keyword">int</span></span><br><span class="line">PhoneNumber <span class="keyword">string</span></span><br><span class="line">Email       <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编写一个工厂模式, 返回一个Customer的实例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewCustomer</span><span class="params">(id <span class="keyword">int</span>, name <span class="keyword">string</span>, gender <span class="keyword">string</span>, age <span class="keyword">int</span>, phonenumber <span class="keyword">string</span>, email <span class="keyword">string</span>)</span> <span class="title">Customer</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> Customer&#123;</span><br><span class="line">Id:          id,</span><br><span class="line">Name:        name,</span><br><span class="line">Gender:      gender,</span><br><span class="line">Age:         age,</span><br><span class="line">PhoneNumber: phonenumber,</span><br><span class="line">Email:       email,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建不带Id的实例方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewCustomer2</span><span class="params">(name <span class="keyword">string</span>, gender <span class="keyword">string</span>, age <span class="keyword">int</span>, phone <span class="keyword">string</span>, email <span class="keyword">string</span>)</span> <span class="title">Customer</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> Customer&#123;</span><br><span class="line">Name:        name,</span><br><span class="line">Gender:      gender,</span><br><span class="line">Age:         age,</span><br><span class="line">PhoneNumber: phone,</span><br><span class="line">Email:       email,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回用户的信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(customer Customer)</span> <span class="title">GetInfo</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">info := fmt.Sprintf(<span class="string">"%v\t%v\t%v\t%v\t%v\t%v\n"</span>,</span><br><span class="line">customer.Id, customer.Name, customer.Gender, customer.Age, customer.PhoneNumber, customer.Email)</span><br><span class="line"><span class="keyword">return</span> info</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>customerService.go</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> service</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"customerManager/model"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 该CustomerService, 完成对Customer的操作, 包括增删改查</span></span><br><span class="line"><span class="keyword">type</span> CustomerService <span class="keyword">struct</span> &#123;</span><br><span class="line">customers   []model.Customer</span><br><span class="line">customerNum <span class="keyword">int</span> <span class="comment">// 声明一个字段, 表示当前切片含有多少个客户</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewCustomerService</span><span class="params">()</span> *<span class="title">CustomerService</span></span> &#123;</span><br><span class="line">customerService := &amp;CustomerService&#123;&#125;</span><br><span class="line">customerService.customerNum = <span class="number">1</span></span><br><span class="line">customer := model.NewCustomer(<span class="number">1</span>, <span class="string">"小明"</span>, <span class="string">"男"</span>, <span class="number">20</span>, <span class="string">"12345678"</span>, <span class="string">"xiaoming@qq.com"</span>)</span><br><span class="line">customerService.customers = <span class="built_in">append</span>(customerService.customers, customer) <span class="comment">// 使用切片将数据添加</span></span><br><span class="line"><span class="keyword">return</span> customerService</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示客户列表, 返回客户切片</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CustomerService)</span> <span class="title">List</span><span class="params">()</span> []<span class="title">model</span>.<span class="title">Customer</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.customers</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加客户</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CustomerService)</span> <span class="title">Add</span><span class="params">(customer model.Customer)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">c.customerNum++</span><br><span class="line">customer.Id = c.customerNum</span><br><span class="line">c.customers = <span class="built_in">append</span>(c.customers, customer)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据id删除客户</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CustomerService)</span> <span class="title">Delete</span><span class="params">(id <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">index := c.FindById(id)</span><br><span class="line"><span class="comment">//如果index == -1, 说明没有这个客户</span></span><br><span class="line"><span class="keyword">if</span> index == <span class="number">-1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 从切片中删除一个元素</span></span><br><span class="line">c.customers = <span class="built_in">append</span>(c.customers[:index], c.customers[index+<span class="number">1</span>:]...)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据id查找客户在切片中对应下标,如果没有该客户，返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CustomerService)</span> <span class="title">FindById</span><span class="params">(id <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">index := <span class="number">-1</span></span><br><span class="line"><span class="comment">//遍历this.customers 寻找Id号</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(c.customers); i++ &#123;</span><br><span class="line"><span class="keyword">if</span> c.customers[i].Id == id &#123;</span><br><span class="line">index = i</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> index</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改客户</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CustomerService)</span> <span class="title">Update</span><span class="params">(id <span class="keyword">int</span>, customer model.Customer)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">index := c.FindById(id)</span><br><span class="line"><span class="comment">//如果index == -1, 说明没有这个客户</span></span><br><span class="line"><span class="keyword">if</span> index == <span class="number">-1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 修改客户</span></span><br><span class="line">c.customers[index<span class="number">-1</span>] = customer</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>customerView.go</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"customerManager/model"</span></span><br><span class="line"><span class="string">"customerManager/service"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> customerView <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 定义必要字段</span></span><br><span class="line">key             <span class="keyword">string</span> <span class="comment">// 输入字符</span></span><br><span class="line">loop            <span class="keyword">bool</span>   <span class="comment">// 表示是否循环显示菜单</span></span><br><span class="line">customerService *service.CustomerService</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示所有的客户信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cv *customerView)</span> <span class="title">list</span><span class="params">()</span></span> &#123;</span><br><span class="line">customers := cv.customerService.List()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示</span></span><br><span class="line">fmt.Println(<span class="string">"---------------------------客户列表---------------------------"</span>)</span><br><span class="line">fmt.Printf(<span class="string">"编号\t姓名\t性别\t年龄\t电话\t邮箱\n"</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(customers); i++ &#123;</span><br><span class="line">fmt.Printf(customers[i].GetInfo())</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"\n-------------------------客户列表完成-------------------------\n\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改客户</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *customerView)</span> <span class="title">update</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"请输入待修改的客户编号(-1)退出:"</span>)</span><br><span class="line">id := <span class="number">-1</span></span><br><span class="line">_, _ = fmt.Scanln(&amp;id)</span><br><span class="line"><span class="keyword">if</span> id == <span class="number">-1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="comment">//放弃删除操作</span></span><br><span class="line">&#125;</span><br><span class="line">customer := c.getUserInput()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> c.customerService.Update(id, customer) &#123;</span><br><span class="line">fmt.Println(<span class="string">"---------------------修改完成---------------------"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"---------------------修改失败，输入的id号不存在----"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加用户</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *customerView)</span> <span class="title">add</span><span class="params">()</span></span> &#123;</span><br><span class="line">customer := c.getUserInput()</span><br><span class="line"><span class="comment">// id是唯一的，需要系统分配</span></span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="keyword">if</span> c.customerService.Add(customer) &#123;</span><br><span class="line">fmt.Println(<span class="string">"---------------------添加完成---------------------"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"---------------------添加失败---------------------"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除用户</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *customerView)</span> <span class="title">delete</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"---------------------删除客户---------------------"</span>)</span><br><span class="line">fmt.Println(<span class="string">"请选择待删除客户编号(-1退出)："</span>)</span><br><span class="line">id := <span class="number">-1</span></span><br><span class="line">_, _ = fmt.Scanln(&amp;id)</span><br><span class="line"><span class="keyword">if</span> id == <span class="number">-1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="comment">//放弃删除操作</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"确认是否删除(Y/N)："</span>)</span><br><span class="line"><span class="comment">//这里同学们可以加入一个循环判断，直到用户输入 y 或者 n,才退出..</span></span><br><span class="line">choice := <span class="string">""</span></span><br><span class="line">_, _ = fmt.Scanln(&amp;choice)</span><br><span class="line"><span class="keyword">if</span> choice == <span class="string">"y"</span> || choice == <span class="string">"Y"</span> &#123;</span><br><span class="line"><span class="comment">//调用customerService 的 Delete方法</span></span><br><span class="line"><span class="keyword">if</span> c.customerService.Delete(id) &#123;</span><br><span class="line">fmt.Println(<span class="string">"---------------------删除完成---------------------"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"---------------------删除失败，输入的id号不存在----"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 退出系统</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *customerView)</span> <span class="title">exit</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"确认是否退出(Y/N):"</span>)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">_, _ = fmt.Scanln(&amp;c.key)</span><br><span class="line"><span class="keyword">if</span> c.key == <span class="string">"Y"</span> || c.key == <span class="string">"N"</span> || c.key == <span class="string">"y"</span> || c.key == <span class="string">"n"</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"输入有误, 确认是否退出(Y/N)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> c.key == <span class="string">"Y"</span> || c.key == <span class="string">"y"</span> &#123;</span><br><span class="line">c.loop = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 填入信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *customerView)</span> <span class="title">getUserInput</span><span class="params">()</span> <span class="title">model</span>.<span class="title">Customer</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"姓名："</span>)</span><br><span class="line">name := <span class="string">""</span></span><br><span class="line">_, _ = fmt.Scanln(&amp;name)</span><br><span class="line">fmt.Printf(<span class="string">"性别："</span>)</span><br><span class="line">gender := <span class="string">""</span></span><br><span class="line">_, _ = fmt.Scanln(&amp;gender)</span><br><span class="line">fmt.Printf(<span class="string">"年龄："</span>)</span><br><span class="line">age := <span class="number">0</span></span><br><span class="line">_, _ = fmt.Scanln(&amp;age)</span><br><span class="line">fmt.Printf(<span class="string">"电话："</span>)</span><br><span class="line">phone := <span class="string">""</span></span><br><span class="line">_, _ = fmt.Scanln(&amp;phone)</span><br><span class="line">fmt.Printf(<span class="string">"邮箱："</span>)</span><br><span class="line">email := <span class="string">""</span></span><br><span class="line">_, _ = fmt.Scanln(&amp;email)</span><br><span class="line">customer := model.NewCustomer2(name, gender, age, phone, email)</span><br><span class="line"><span class="keyword">return</span> customer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示主菜单</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cv *customerView)</span> <span class="title">mainMenu</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"----------------------客户信息管理软件----------------------"</span>)</span><br><span class="line">fmt.Println(<span class="string">"                  1 添加客户"</span>)</span><br><span class="line">fmt.Println(<span class="string">"                  2 修改客户"</span>)</span><br><span class="line">fmt.Println(<span class="string">"                  3 删除客户"</span>)</span><br><span class="line">fmt.Println(<span class="string">"                  4 客户列表"</span>)</span><br><span class="line">fmt.Println(<span class="string">"                  5 退   出"</span>)</span><br><span class="line">fmt.Print(<span class="string">"请选择(1-5)："</span>)</span><br><span class="line"></span><br><span class="line">_, _ = fmt.Scanln(&amp;cv.key)</span><br><span class="line"><span class="keyword">switch</span> cv.key &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"1"</span>:</span><br><span class="line">cv.add()</span><br><span class="line"><span class="keyword">case</span> <span class="string">"2"</span>:</span><br><span class="line">cv.update()</span><br><span class="line"><span class="keyword">case</span> <span class="string">"3"</span>:</span><br><span class="line">cv.<span class="built_in">delete</span>()</span><br><span class="line"><span class="keyword">case</span> <span class="string">"4"</span>:</span><br><span class="line">cv.list()</span><br><span class="line"><span class="keyword">case</span> <span class="string">"5"</span>:</span><br><span class="line">cv.exit()</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">"你的输入有误,请重新输入"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !cv.loop &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"退出客户关系管理系统"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 显示主菜单</span></span><br><span class="line">customerView := customerView&#123;</span><br><span class="line">key:  <span class="string">""</span>,</span><br><span class="line">loop: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 对customerView结构体的customerService字段的初始化</span></span><br><span class="line">customerView.customerService = service.NewCustomerService()</span><br><span class="line"><span class="comment">// 显示主菜单</span></span><br><span class="line">customerView.mainMenu()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;客户关系管理系统&quot;&gt;&lt;a href=&quot;#客户关系管理系统&quot; class=&quot;headerlink&quot; title=&quot;客户关系管理系统&quot;&gt;&lt;/a&gt;客户关系管理系统&lt;/h2&gt;&lt;p&gt;GitHub地址:&lt;code&gt;https://github.com/PlutoaCharon
      
    
    </summary>
    
      <category term="Golang" scheme="https://plutoacharon.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://plutoacharon.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Golang语言学习从入门到实战----基于Golang实现简单家庭收支项目</title>
    <link href="https://plutoacharon.github.io/2020/03/17/Golang%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98-%E5%9F%BA%E4%BA%8EGolang%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E5%AE%B6%E5%BA%AD%E6%94%B6%E6%94%AF%E9%A1%B9%E7%9B%AE/"/>
    <id>https://plutoacharon.github.io/2020/03/17/Golang语言学习从入门到实战-基于Golang实现简单家庭收支项目/</id>
    <published>2020-03-17T09:22:22.000Z</published>
    <updated>2020-03-17T09:24:51.393Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基于Golang实现简单家庭收支项目"><a href="#基于Golang实现简单家庭收支项目" class="headerlink" title="基于Golang实现简单家庭收支项目"></a>基于Golang实现简单家庭收支项目</h2><p>GitHub地址:<code>https://github.com/PlutoaCharon/Golang_FamilyAccount.git</code></p><p>该项目可以简单的进行,明细,登记收入和支出操作</p><p>实现界面:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-----------------家庭收支记账软件-----------------</span><br><span class="line">                  1 收支明细</span><br><span class="line">                  2 登记收入</span><br><span class="line">                  3 登记支出</span><br><span class="line">                  4 退出软件</span><br><span class="line">请选择(1-4)：</span><br></pre></td></tr></table></figure></p><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">└─FamilyAccount</span><br><span class="line">    │  README.md</span><br><span class="line">    │</span><br><span class="line">    ├─main</span><br><span class="line">    │      mian.go</span><br><span class="line">    │</span><br><span class="line">    └─utils</span><br><span class="line">            familyAccount.go</span><br></pre></td></tr></table></figure><h3 id="familyAccount-go"><a href="#familyAccount-go" class="headerlink" title="familyAccount.go"></a><code>familyAccount.go</code></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> utils</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> FamilyAccount <span class="keyword">struct</span> &#123;</span><br><span class="line">key     <span class="keyword">string</span>  <span class="comment">// 保存接受用户输入的选项</span></span><br><span class="line">loop    <span class="keyword">bool</span>    <span class="comment">// 控制是否退出for</span></span><br><span class="line">balance <span class="keyword">float64</span> <span class="comment">// 定义账户的余额</span></span><br><span class="line">money   <span class="keyword">float64</span> <span class="comment">// 每次收支的金额</span></span><br><span class="line">note    <span class="keyword">string</span>  <span class="comment">// 每次收支的说明</span></span><br><span class="line">flag    <span class="keyword">bool</span>    <span class="comment">// 记录是否有收支的行为</span></span><br><span class="line">details <span class="keyword">string</span>  <span class="comment">// 对收支进行拼接处理</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造方法，返回一个*FamilyAccount实例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewFamilyAccount</span><span class="params">()</span> *<span class="title">FamilyAccount</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;FamilyAccount&#123;</span><br><span class="line">key:     <span class="string">""</span>,</span><br><span class="line">loop:    <span class="literal">true</span>,</span><br><span class="line">balance: <span class="number">10000.0</span>,</span><br><span class="line">money:   <span class="number">0.0</span>,</span><br><span class="line">note:    <span class="string">""</span>,</span><br><span class="line">flag:    <span class="literal">false</span>,</span><br><span class="line">details: <span class="string">"收支\t账户金额\t收支金额\t说明"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示明细</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *FamilyAccount)</span> <span class="title">showDetails</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"----------------------当前收支明细记录----------------------"</span>)</span><br><span class="line"><span class="keyword">if</span> this.flag &#123;</span><br><span class="line">fmt.Println(this.details)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"当前没有收支明细,来一笔吧!"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 登记记录</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *FamilyAccount)</span> <span class="title">income</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"本次收入金额:"</span>)</span><br><span class="line">fmt.Scanln(&amp;this.money)</span><br><span class="line">this.balance += this.money <span class="comment">// 修改账户余额</span></span><br><span class="line">fmt.Println(<span class="string">"本次收入说明:"</span>)</span><br><span class="line">fmt.Scanln(&amp;this.note)</span><br><span class="line">this.details += fmt.Sprintf(<span class="string">"\n收入\t%v\t%v\t%v"</span>, this.balance, this.money, this.note)</span><br><span class="line">this.flag = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 登记支出</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *FamilyAccount)</span> <span class="title">pay</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"本次支出金额:"</span>)</span><br><span class="line">fmt.Scanln(&amp;this.money)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> this.money &gt; this.balance &#123;</span><br><span class="line">fmt.Println(<span class="string">"余额不足"</span>)</span><br><span class="line">&#125;</span><br><span class="line">this.balance -= this.money</span><br><span class="line">fmt.Println(<span class="string">"本次支出说明:"</span>)</span><br><span class="line">fmt.Scanln(&amp;this.note)</span><br><span class="line">this.details += fmt.Sprintf(<span class="string">"\n支出\t%v\t%v\t%v"</span>, this.balance, this.money, this.note)</span><br><span class="line">this.flag = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 退出系统</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *FamilyAccount)</span> <span class="title">exit</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"确认退出吗? 确定退出请输入y 否则输入n"</span>)</span><br><span class="line">choice := <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Scanln(&amp;choice)</span><br><span class="line"><span class="keyword">if</span> choice == <span class="string">"y"</span> &#123;</span><br><span class="line">this.loop = <span class="literal">false</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> choice == <span class="string">"n"</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"输入有误,请重新输入 y/n"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示主菜单</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *FamilyAccount)</span> <span class="title">MainMenu</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"\n-----------------家庭收支记账软件-----------------"</span>)</span><br><span class="line">fmt.Println(<span class="string">"                  1 收支明细"</span>)</span><br><span class="line">fmt.Println(<span class="string">"                  2 登记收入"</span>)</span><br><span class="line">fmt.Println(<span class="string">"                  3 登记支出"</span>)</span><br><span class="line">fmt.Println(<span class="string">"                  4 退出软件"</span>)</span><br><span class="line">fmt.Print(<span class="string">"请选择(1-4)："</span>)</span><br><span class="line">fmt.Scanln(&amp;this.key)</span><br><span class="line"><span class="keyword">switch</span> this.key &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"1"</span>:</span><br><span class="line">this.showDetails()</span><br><span class="line"><span class="keyword">case</span> <span class="string">"2"</span>:</span><br><span class="line">this.income()</span><br><span class="line"><span class="keyword">case</span> <span class="string">"3"</span>:</span><br><span class="line">this.pay()</span><br><span class="line"><span class="keyword">case</span> <span class="string">"4"</span>:</span><br><span class="line">this.exit()</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">"请输入正确的选项.."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !this.loop &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mian-go"><a href="#mian-go" class="headerlink" title="mian.go"></a><code>mian.go</code></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"FamilyAccount/utils"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">utils.NewFamilyAccount().MainMenu()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基于Golang实现简单家庭收支项目&quot;&gt;&lt;a href=&quot;#基于Golang实现简单家庭收支项目&quot; class=&quot;headerlink&quot; title=&quot;基于Golang实现简单家庭收支项目&quot;&gt;&lt;/a&gt;基于Golang实现简单家庭收支项目&lt;/h2&gt;&lt;p&gt;GitHub
      
    
    </summary>
    
      <category term="Golang" scheme="https://plutoacharon.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://plutoacharon.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Golang语言学习从入门到实战----接口</title>
    <link href="https://plutoacharon.github.io/2020/03/17/Golang%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98-%E6%8E%A5%E5%8F%A3/"/>
    <id>https://plutoacharon.github.io/2020/03/17/Golang语言学习从入门到实战-接口/</id>
    <published>2020-03-17T09:21:51.000Z</published>
    <updated>2020-03-17T09:24:22.298Z</updated>
    
    <content type="html"><![CDATA[<h2 id="接口概念说明"><a href="#接口概念说明" class="headerlink" title="接口概念说明"></a>接口概念说明</h2><p><code>interface</code>类型可以定义一组方法，但是这些不需要实现。并且<code>interface</code>不能包含任何变量。</p><p>当某个自定义类型要使用的时候,在根据具体情况把这些方法写出来。</p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p><img src="https://img-blog.csdnimg.cn/20200312145631274.png" alt="在这里插入图片描述"></p><ul><li>接口里的所有方法都没有方法体，即接口的方法都是没有实现的方法。接口体现了程序设计的<code>多态和高内聚低偶合</code>的思想。</li><li>Golang中的接口，不需要显式的实现。只要一个变量，含有接口类型中的所有方法，那么这个变量就实现这个接口。因此，Golang中没有<code>implement</code>这样的关键字</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Usb <span class="keyword">interface</span> &#123;</span><br><span class="line">Start()</span><br><span class="line">Stop()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Phone <span class="keyword">struct</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Phone)</span> <span class="title">Start</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"手机开始工作"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Phone)</span> <span class="title">Stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"手机停止"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Camera <span class="keyword">struct</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//让Camera实现Usb接口的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Camera)</span> <span class="title">Start</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"相机开始工作。。。"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(c Camera)</span> <span class="title">Stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"相机停止工作。。。"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Computer <span class="keyword">struct</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Computer)</span> <span class="title">Working</span><span class="params">(usb Usb)</span></span>&#123;</span><br><span class="line">usb.Start()</span><br><span class="line">usb.Stop()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">computer := Computer&#123;&#125;</span><br><span class="line">phone := Phone&#123;&#125;</span><br><span class="line">camera := Camera&#123;&#125;</span><br><span class="line"></span><br><span class="line">computer.Working(phone)</span><br><span class="line">computer.Working(camera)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">手机开始工作</span><br><span class="line">手机停止</span><br><span class="line">相机开始工作</span><br><span class="line">相机停止工作</span><br></pre></td></tr></table></figure></p><h3 id="注意事项和细节"><a href="#注意事项和细节" class="headerlink" title="注意事项和细节"></a>注意事项和细节</h3><p>1) 接口本身不能创建实例,但是可以指向一个实现了该接口的自定义类型的变量(实例)<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AInterface <span class="keyword">interface</span> &#123;</span><br><span class="line">Say()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Stu <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(stu Stu)</span> <span class="title">Say</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"Stu Say()"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> stu Stu</span><br><span class="line"><span class="keyword">var</span> a AInterface = stu</span><br><span class="line">a.Say()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stu Say()</span><br></pre></td></tr></table></figure></p><p>2) 接口中所有的方法都没有方法体,即都是没有实现的方法</p><p>3) 在Golang中，一个自定义类型需要将某个接口的所有方法都实现，我们说这个自定义类型实现了该接口</p><p>4) 一个自定义类型只有实现了某个接口，才能将该自定义类型的实例(变量)赋给接口类型</p><p>5) 只要是自定义数据类型，就可以实现接口，不仅仅是结构体类型</p><p>6) 一个自定义类型可以实现多个接口</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AInterface <span class="keyword">interface</span> &#123;</span><br><span class="line">Say()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> BInterface <span class="keyword">interface</span> &#123;</span><br><span class="line">Hello()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Monster <span class="keyword">struct</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m Monster)</span> <span class="title">Hello</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Hello Hello"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m Monster)</span> <span class="title">Say</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Say Hello"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> m Monster</span><br><span class="line"><span class="keyword">var</span> a AInterface = m</span><br><span class="line"><span class="keyword">var</span> b BInterface = m</span><br><span class="line">a.Say()</span><br><span class="line">b.Hello()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Say Hello</span><br><span class="line">Hello Hello</span><br></pre></td></tr></table></figure></p><p>7) Golang接口中不能有任何变量</p><p>8) 一个接口(比如A接口)可以继承多个别的接口(比如B,C接口)，这时如果要实现A接口，也必须将B,C接口的方法也全部实现<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AInterface <span class="keyword">interface</span> &#123;</span><br><span class="line">Say()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> BInterface <span class="keyword">interface</span> &#123;</span><br><span class="line">Hello()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CInterface <span class="keyword">interface</span> &#123;</span><br><span class="line">AInterface</span><br><span class="line">BInterface</span><br><span class="line">Run()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Monster <span class="keyword">struct</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m Monster)</span> <span class="title">Hello</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Hello Hello"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m Monster)</span> <span class="title">Say</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Say Hello"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m Monster)</span> <span class="title">Run</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"Runing"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> m Monster</span><br><span class="line"><span class="keyword">var</span> c CInterface = m</span><br><span class="line">c.Run()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>9) interface类型默认是一个指针(引用类型)，如果没有对<code>`</code>interface初始化就使用，那么会输出nil</p><p>10) 空接口interface{}没有任何方法，所以所有类型都实现了空接口,即我们可以把任何一个变量赋给空接口</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;接口概念说明&quot;&gt;&lt;a href=&quot;#接口概念说明&quot; class=&quot;headerlink&quot; title=&quot;接口概念说明&quot;&gt;&lt;/a&gt;接口概念说明&lt;/h2&gt;&lt;p&gt;&lt;code&gt;interface&lt;/code&gt;类型可以定义一组方法，但是这些不需要实现。并且&lt;code&gt;int
      
    
    </summary>
    
      <category term="Golang" scheme="https://plutoacharon.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://plutoacharon.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Liunx Shell编程入门----编写系统监控脚本与FTP探测脚本</title>
    <link href="https://plutoacharon.github.io/2020/03/12/Liunx-Shell%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8-%E7%BC%96%E5%86%99%E7%B3%BB%E7%BB%9F%E7%9B%91%E6%8E%A7%E8%84%9A%E6%9C%AC%E4%B8%8EFTP%E6%8E%A2%E6%B5%8B%E8%84%9A%E6%9C%AC/"/>
    <id>https://plutoacharon.github.io/2020/03/12/Liunx-Shell编程入门-编写系统监控脚本与FTP探测脚本/</id>
    <published>2020-03-12T04:26:03.000Z</published>
    <updated>2020-03-12T04:26:28.120Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-编写系统监控脚本sysmon-sh"><a href="#1-编写系统监控脚本sysmon-sh" class="headerlink" title="1. 编写系统监控脚本sysmon.sh"></a>1. 编写系统监控脚本sysmon.sh</h2><p>使该脚本实现: 监控系统中内存、cpu、磁盘的占用率</p><h3 id="1-1-命令解释"><a href="#1-1-命令解释" class="headerlink" title="1.1 命令解释"></a>1.1 命令解释</h3><h4 id="cat-proc-meminfo"><a href="#cat-proc-meminfo" class="headerlink" title="cat /proc/meminfo"></a><code>cat /proc/meminfo</code></h4><p><img src="https://img-blog.csdnimg.cn/20200312105343250.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><code>/proc/meminfo</code>是了解Linux系统内存使用状况的主要接口</p><p>我们最常用的<code>free</code>、<code>vmstat</code>等命令就是通过它获取数据的 ，<code>/proc/meminfo</code>所包含的信息比<code>free</code>等命令要丰富得多</p><h4 id="Linux-bc-命令"><a href="#Linux-bc-命令" class="headerlink" title="Linux bc 命令"></a>Linux <code>bc</code> 命令</h4><p>bc 命令是任意精度计算器语言，通常在linux下当计算器用。</p><p>它类似基本的计算器, 使用这个计算器可以做基本的数学运算。</p><p>提示系统没有bc命令,需要<code>yum install bc</code> 安装</p><h4 id="监控内存使用率"><a href="#监控内存使用率" class="headerlink" title="监控内存使用率"></a>监控内存使用率</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">memory_used_rate</span></span><br><span class="line">LoadMemory=$(cat /proc/meminfo | awk '&#123;print $2&#125;')</span><br><span class="line">Total=$(echo $LoadMemory | awk '&#123;print $1&#125;')</span><br><span class="line">Free1=$(echo $LoadMemory | awk '&#123;print $2&#125;')</span><br><span class="line">Free2=$(echo $LoadMemory | awk '&#123;print $3&#125;')</span><br><span class="line">Free3=$(echo $LoadMemory | awk '&#123;print $4&#125;')</span><br><span class="line">Used=`expr $Total - $Free1 - $Free2 - $Free3`</span><br><span class="line">Used_Rate=`expr  $Used/$Total*100 | bc -l`</span><br><span class="line">Memory_Used_Rate=`expr  $Used_Rate/1 | bc`</span><br><span class="line">echo $Memory_Used_Rate%</span><br></pre></td></tr></table></figure><h4 id="监控磁盘占用率"><a href="#监控磁盘占用率" class="headerlink" title="监控磁盘占用率"></a>监控磁盘占用率</h4><p>使用 <code>df</code>命令查看磁盘 <code>-h</code>格式化为方便查看的格式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# df -h /dev/sda*</span><br><span class="line">文件系统        容量  已用  可用 已用% 挂载点</span><br><span class="line">devtmpfs        475M     0  475M    0% /dev</span><br><span class="line">/dev/sda1      1014M  160M  855M   16% /boot</span><br><span class="line">devtmpfs        475M     0  475M    0% /dev</span><br></pre></td></tr></table></figure></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">disk_used_rate</span></span><br><span class="line">Location=/dev/sda1 # 这里根据自己的磁盘位置修改</span><br><span class="line">Disk_Used_Rate=$(df -h | grep $Location | awk '&#123;print $5&#125;')</span><br><span class="line">echo $Disk_Used_Rate</span><br></pre></td></tr></table></figure><h4 id="监控cpu使用率"><a href="#监控cpu使用率" class="headerlink" title="监控cpu使用率"></a>监控cpu使用率</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">cpu_used_rate</span></span><br><span class="line">Log=$(cat /proc/stat | grep 'cpu ' | awk '&#123;print $2" "$3" "$4" "$5" "$6" "$7" "$8&#125;')</span><br><span class="line">Free=$(echo $Log | awk '&#123;print $4&#125;')</span><br><span class="line">Total=$(echo $Log | awk '&#123;print $1+$2+$3+$4+$5+$6+$7&#125;')</span><br><span class="line">Cpu_Used=`expr $Total - $Free`</span><br><span class="line">Cpu_Used_Rate=`expr  $Cpu_Used/$Total*100 |bc -l`</span><br><span class="line">echo  $Cpu_Used_Rate</span><br></pre></td></tr></table></figure><h3 id="1-2-脚本代码"><a href="#1-2-脚本代码" class="headerlink" title="1.2 脚本代码"></a>1.2 脚本代码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Colors</span></span><br><span class="line">red='\033[31m' # 定义红色</span><br><span class="line">green='\033[32m' # 定义绿色</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">memory_used_rate</span></span><br><span class="line">LoadMemory=$(cat /proc/meminfo | awk '&#123;print $2&#125;')</span><br><span class="line">Total=$(echo $LoadMemory | awk '&#123;print $1&#125;')</span><br><span class="line">Free1=$(echo $LoadMemory | awk '&#123;print $2&#125;')</span><br><span class="line">Free2=$(echo $LoadMemory | awk '&#123;print $3&#125;')</span><br><span class="line">Free3=$(echo $LoadMemory | awk '&#123;print $4&#125;')</span><br><span class="line">Used=`expr $Total - $Free1 - $Free2 - $Free3`</span><br><span class="line">Used_Rate=`expr  $Used/$Total*100 | bc -l`</span><br><span class="line">Memory_Used_Rate=`expr  $Used_Rate/1 | bc`</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> disk_used_rate</span></span><br><span class="line">Location=/dev/sda1</span><br><span class="line">Disk_Used_Rate=$(df -h | grep $Location | awk '&#123;print $5&#125;')</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">cpu_used_rate</span></span><br><span class="line">Log=$(cat /proc/stat | grep 'cpu ' | awk '&#123;print $2" "$3" "$4" "$5" "$6" "$7" "$8&#125;')</span><br><span class="line">Free=$(echo $Log | awk '&#123;print $4&#125;')</span><br><span class="line">Total=$(echo $Log | awk '&#123;print $1+$2+$3+$4+$5+$6+$7&#125;')</span><br><span class="line">Cpu_Used=`expr $Total - $Free`</span><br><span class="line">Cpu_Used_Rate=`expr  $Cpu_Used/$Total*100 |bc -l`</span><br><span class="line">cpu_Used_Rate=`expr  $Cpu_Used_Rate/1 | bc`</span><br><span class="line"></span><br><span class="line">echo -e "+----------------------------------------------------------------"</span><br><span class="line"></span><br><span class="line">echo -e "$&#123;green&#125; 内存使用率:$&#123;red&#125;"$Memory_Used_Rate%</span><br><span class="line">echo -e "$&#123;green&#125; 磁盘使用率:$&#123;red&#125;"$Disk_Used_Rate</span><br><span class="line">echo -e "$&#123;green&#125; Cpu使用率:$&#123;red&#125;"$cpu_Used_Rate%</span><br><span class="line"></span><br><span class="line">echo -e "+----------------------------------------------------------------"</span><br><span class="line">echo -e " "</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200312112520510.png" alt="在这里插入图片描述"></p><p><code>crontab -e</code>进入定时系统,设置计划任务<br>输入:<code>*/1 * * * * /root/bin/sysmon.sh</code><br><img src="https://img-blog.csdnimg.cn/20200312112828168.png" alt="在这里插入图片描述"><br>收到邮件:<br><img src="https://img-blog.csdnimg.cn/20200312113409759.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200312113341808.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-编写FTP探测脚本"><a href="#2-编写FTP探测脚本" class="headerlink" title="2. 编写FTP探测脚本"></a>2. 编写FTP探测脚本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 输入想要查询的ip段</span></span><br><span class="line">IP1=`echo $1 |awk -F"." '&#123;print $1&#125;'`</span><br><span class="line">IP2=`echo $1 |awk -F"." '&#123;print $2&#125;'`</span><br><span class="line">IP3=`echo $1 |awk -F"." '&#123;print $3&#125;'`</span><br><span class="line">IP4=`echo $1 |awk -F"." '&#123;print $4&#125;'`</span><br><span class="line"></span><br><span class="line">for ((i=3; i&gt;0; i--))</span><br><span class="line">do</span><br><span class="line">    echo -e "倒数"$i"秒,开始扫描"</span><br><span class="line">done</span><br><span class="line"><span class="meta">#</span><span class="bash"> 开始连接</span></span><br><span class="line">wget  ftp://$IP1.$IP2.$IP3.$IP4 &amp;&gt;null</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果连接成功</span></span><br><span class="line">if [ $? -eq 0 ]</span><br><span class="line">then echo "$IP1.$IP2.$IP3.$i is open"</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200312115210243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDQyNTI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-编写系统监控脚本sysmon-sh&quot;&gt;&lt;a href=&quot;#1-编写系统监控脚本sysmon-sh&quot; class=&quot;headerlink&quot; title=&quot;1. 编写系统监控脚本sysmon.sh&quot;&gt;&lt;/a&gt;1. 编写系统监控脚本sysmon.sh&lt;/h2&gt;&lt;p&gt;
      
    
    </summary>
    
      <category term="Liunx" scheme="https://plutoacharon.github.io/categories/Liunx/"/>
    
    
      <category term="Shell" scheme="https://plutoacharon.github.io/tags/Shell/"/>
    
  </entry>
  
</feed>
